1.
Dobrym gridem nazwiemy taki, że z jego lewego górnego rogu da się dojść do prawego dolnego tylko przy użyciu ruchów dół-prawo, nie przechodząc przez żadną przeszkodę. Masz na wejściu pewnego grida (być może już z przeszkodami, ale na pewno jest on dobry) i zapytania w postaci: "Jeżeli postawię na polu (x, y) przeszkodę to czy grid nadal będzie dobry". Odpowiedź to TAK/NIE oraz jezeli odpowiedź to TAK, powinnaś postawić przeszkodę. N, M <= 1000, Q <= N * M.

n m
plansza z n wierszami i m kolumnami, jezeli 0 to wolne jezeli 1 to zablokowane
q
xi yi
odpowiedz to 0 jezeli nie postawilas, 1 wpp

2.
Masz ciąg N liczb a_1, ..., a_n. Chcesz wybrać jakiś (niekoniecznie spójny) podciąg tego ciągu, taki, że odległość (indeksów) między kolejnymi parami wybranych elementów jest <= D. Przykład: wybierasz indeksy p_1, p_2, p_3 => (p_2 - p_1 <= D && p_3 - p_2 <= D). Fajnością twojego podciągu jest ilość zmian maksimum prefiksowego. Podaj największą fajność:). Do swojego rozwiązania musisz wybrać element a_n. 1 <= D <= N <= 300 000

11 2
2 5 5 3 3 5 10 6 8 1 4

p = {1, 3, 5, 6, 8, 9, 11}, czyli bierzesz ciąg 2 5 3 5 6 8 4

3.
Drzewko, N <= 500 000, każdy wierzchołek ma jakiś kolor. Kolory możesz mergować (zielony -> żółty oznacza, że każdy wierzchołek koloru zielonego jest teraz wierzchołkiem koloru żółtego). Rozbiciem nazwiemy sytuację, gdy wierzchołki da się podzielić na dwa zbiory X i Y takie, że:

- Każdy wierzchołek należy albo do zbioru X albo Y
- Jeżeli wierzchołek koloru Z należy do zbioru X, to wszystkie wierzchołki tego koloru też musza należeć do zbioru X (i analogicznie Y)
- Zbiory są spójne, tj. w zbiorze X (analogicznie Y) da się podróżować między dowolną parą wierzchołków z tego zbioru poruszając się tylko po wierzchołkach z tego samego zbioru.

Ile potrzebujesz przekolorowań żeby rozbicie nie było możliwe??

5 4
1 2 1 3 4
3 5
3 4
1 2
2 3

X = {1, 2, 3, 4}
Y = {5}
działa, naprawiamy to mergem kolorów 3 i 4

4.
Masz cykl z n domów, dom X sąsiaduje z domami X - 1, X + 1 (mod n). i-ty dom ma a_i dolarów a powinien mieć b_i. Jedyna operacja jaką możesz zrobić to wziąć i-ty dom i przesłać do i+1szego domu 1 dolara (płacąc sumarycznie 2 dolary - opłata bankowa). Czy możesz tak poprzesyłać pięniądze, żeby a_i = b_i dla każdego i? n <= 1 000 000; 0 <= a_i, b_i <= 10^9

5
0 0
1 0
2 3
3 3
4 0

Przesyłasz z ostatniego domu 2 dolary do 1szego (płacąc sumarycznie 4).
Przesyłasz z pierwszego domu 1 dolara do 2giego (sumarycznie 2).
Przesyłasz z 2giego domu do 3ciego 1 dolara (płacąc sumarycznie 2).

5. 
Drzewo, w pewnych wierzchołkach są generatory, możesz je włączać i wyłączać. Generatory spełniają następujący warunek: jeżeli istnieją generatory x, y, z takie że y jest na ścieżce pomiędzy x i z, (oraz x i z są włączone) to y się psuje (nie działa:c). Za każdy włączony (i niezepsuty!) generator dostajesz +1 do zysku, a za każdy zepsuty -1 do zysku. jaki jest max zysk?? N <= 200 000.

6
3 5
4 3
1 3
6 2
2 3
110011

W wierzchołkach 1 2 5 6 są generatory. Możesz je włączyć w wierzchołkach 1, 2, 5 i wszystko będzie git:). Jeżeli włączyłabyś 6stke to wtedy (x, y, z) = (6, 2, 5) i wynikiem byłoby 3 - 1 = 2 (tylko 1 5 6 by działały, a 2 była zepsuta).

6.
Masz 2n punktów na kółku, n białych i n czarnych. Znajdź taki matching pomiędzy białymi punktami a czarnymi aby ilość przecięć odcinków łączących te punkty była jak największa. n <= 200 000

3
CCBBCB

matching
(1, 4), (2, 6), (3, 5) daje 2 przecięcia i jest to maksymalna możliwa liczba przecięć.

7.
Dwie liczby x i y nazwiemy podobnymi, jeżeli __builtin_popcount(x) == __builtin_popcount(y). Masz ciąg a_1, ..., a_n. Ciąg b_1, ..., b_n definiujemy jako b_i = a_i xor x. Czy da się dobrać takie x, że każda para liczb z ciągu b będzie podobna? n <= 100; a_i <= 10^9

8.
Powoli tworzy się skierowany graf; i-tego dnia a_i zaczyna patrzeć na b_i. po dodaniu każdej z krawędzi masz odpowiedzieć ile jest krawędzi w grafie po wykonaniu (na niby, zmiany nie zachodzą) następującego procesu:

wybierz chłopa x
wybierz chłopa y takiego, że x patrzy na y
wybierz chłopa z takiego, że x NIE patrzy na z, y patrzy na z i z patrzy na y
od teraz x patrzy na z
powtarzaj w kółko

n <= 100 000; q <= 300 000

9. Constellation

10. Treatment

15, 14, 16, 17, 11, 12, 18, 13

##11.
Masz n budynków - i-ty z nich znajduje się w odległości a_i do lewego końca miasta. Chcesz porozstawiać kamery w taki sposób, aby każdy budynek był widoczny przez conajmniej jedną kamerę. Masz do dyspozycji a kamer i b superkamer. Możesz wybrać parametr w - zwykła kamera patrzy na przedział o długości w, a superkamera patrzy na przedział o długości 2w. Kamery możesz ustawiać w dowolnych miejscach. Jakie jest najmniejsze w?

n <= 2 000; a, b <= 100 000; a_i <= 1 000 000 000

##12.
Masz n stringów z liter a, b, c, d. Dostajesz q zapytań w postaci: ile jest stringów w postaci [danyprefiks]coś[danysufiks].
n, q <= 100 000
\sum długości stringów <= 2 000 000
\sum długości prefiksów <= 2 000 000
\sum długości sufiksów <= 2 000 000

2 3
ABDC
ADC
D C
AB C
A C

odp: 0 1 2

##13.
masz ciąg n liczb, obsługuj zapytania typu:
1. a_i = x;
2. a_l /= k, ..., a_r /= k;
3. podaj a_l + ... + a_r

n, q <= 100 000; 1 <= k <= 10; a_i <= 1 000 000 000

##14.
Masz karty, na jednej stronie jest liczba a_i, na drugiej b_i. Na początku a_i jest na górze. Dostajesz q zapytań w postaci: odwróć na drugą stronę wszystkie karty które mają na górze liczbę mniejszą niż x_i. Po wykonaniu wszystikch zapytań podaj sumę widocznych liczb.

n, q <= 200 000

##15.
Masz gierkę na planszy o wymiarach n x (m + 2) (n kolumn i m + 2 wierszy).
Masz m przedziałów w postaci (a_i, b_i, c_i, d_i) -> przedział jest w i+1szym wierszu, od a_i do b_i, jeżeli piłka na niego upadnie to zlatujesz do (i+1,c_i) oraz koszt tego przedziału to d_i.
Gra polega na tym: gracz umieszcza piłkę w jakiekolwiek kolumnie w pierwszym wierszu. Twoim zadaniem jest kupić takie przedziały, żeby niezależnie od wyboru gracza, zleciał do tego samego miejsca w m+2gim wierszu. Podaj min koszt.

Przykład graficzny: (😛)

m <= 100 000
n <= 1 000 000 000

##16
Masz sobie dwa stosy i n elementow, wiesz ze i-ty element zostanie przyniesiony w czasie ai oraz zabrany w czasie bi (wszystkie ai i bi sa parami rozne). Elementy po przyniesieniu kladziesz na gore stosu. Chcesz tak przydzielic elementy do stosow zeby w czasie bi, i-ty element byl na gorze stosu (zebys mogla go zabrac). Wypisz liczbe poprawnych przypisan elementow do stosow.
n <= 1 000 000

##17
Masz n miast ulozonych na prostej, krawedzie ida tylko w prawo (sa jednokierunkowe). Odpowiedz na q zapytan w postaci: podaj najbardziej odlegle (krawedziowo) miasto od miasta x nie biorac pod uwage miast y_1, ..., y_k (z tymi miastami po prostu nie maksujesz wyniku - to nie tak ze sa nieprzejezdne czy cos).
n, q <= 100 000
m <= 200 000
sum_k <= 100 000

##18
Masz n stalkerow, i-ty z nich na poczatku jest w punkcie -i (na jakiejs prostej). Ty stoisz w punkcie 0 i poruszasz sie z predkoscia 1 jedn/s. Stalkerzy maja pewny wspolczynnik d_i. Jezeli stalker patrzy przed siebie i widzi ze osoba przed nim jest w odleglosci >= d_i + 1 to stalker teleportuje sie tuz za ta osobe (jezeli byla ona w miejscu x to stalker jest w miejscu x - 1). Proces trwa w nieskonczonosc.
Odpowiedz na q zapytan w postaci: w czasie t ile jest osob na przedziale [l, r]
n, q <= 500 000
d_i, t_i, l_i, r_i <= 1 000 000 000

##19
Masz przed sobą n cukierków - każdy ma jakiś współczynnik smakowitości. Dla każdego j od 1 do (n + 1) / 2 podaj odpowiedź na pytanie: Jaka jest maksymalna suma smakowitosci jaka moge uzyskac jezeli zjem j cukierkow oraz nie wybiore takich dwoch ktore ze soba sasiaduja.

n <= 200 000

##20
Masz n anten, i-ta z nich moze sie komunikowac z antenami odleglymi o d z przedzialu [ai, bi]. kazda ma jakas wysokosc hi.
Masz q zapytan: patrzac tylko na anteny z przedzialu [l, r], podaj najwieksza wartosc |hj - hi| dla pewnych i j z tego przedzialu (i, j musza moc sie ze soba komunikowac)

##21
Drzewko:p
Funkcją kosztu dla wierzchołka v oraz zbioru z nazwiemy sume po d(x, v) gdzie x jest w zbiorze z.
Dla każdego k od 1 do n odpowiedz na pytanie: jeżeli możesz sobie dowolnie wybrać jakiś zbiór spośród n wierzchołków, ile istnieje v które minimalizuje funkcje kosztu oraz wypisz ile ich jest.

## któreś
graf, wazony, dwukierunkowy. dostajesz zapytania w postacI: masz dwa ludziki: w miescie x i w miescie y. chca oni sie zeswapowac miejscami. jako ze ludziki to tak naprawde sylwia i karol wiec nie chca sie w ogole spotkac tj. nie moga byc w jednym wierzcholku w tym samym momencie oraz nie moga przechodzic przez jakas krawedz w tym samym momencie

jezeli odpowiedz to x, to sylwia i karol moga sie poruszac krawedziami o wadze <= x. znajdz najmniejsze x ktore im umozliwi swapa:)
n <= 100 000, m, q <= 200 000, c_i <= 10^9

## któreś2
graf, dwukierunkowy, znajdz trojki x y z takie ze jak masz sciezke x -> y -> z to nie przejdziesz przez jakis wierzcholek wiecej niz 1 raz.
n <= 100 000, m <= 200 000

7
5 6
3 7
4 1
2 3
3 4
4 5

ans:: 1 5 1 3 1 2 1

5 5
2 4 10
1 1 1
1 3 2
1 1 1
1 1 100
1 5
1 4
1 3
2 3
1 2

n q
ai bi hi
...
l r
...

out:
99
8
8
1
-1


----------------------------------

1. 
n <= 100, m <= 100;

2. 
n <= 20;
n <= 400;
n <= 7 000;
d = 1;
d = n;

3.
n <= 100, k <= 7;
n <= 3 000; 
n <= 100 000, k <= 50;
n <= 100 000, średnica drzewa <= 100;

4.
n <= 7, a_i <= 5, b_i <= 5;
n <= 20;

5.
n <= 16;
n <= 2 000;

6.
n <= 8;
n <= 300;
n <= 2 000;

7. poprawa limitow: n <= 100
a_i <= 10^6

8.
n <= 50;
n <= 2 000;

11.
n <= 100;

12.
n, q, długość [stringa, prefiksu, sufiksu] <= 100;
n, q <= 5 000;
\sum długości [stringów, prefiksów, sufiksów] <= 100 000;

13.
n, q <= 3000;
a_i <= 1
k = 1

14.
n, q <= 1 000
n, q <= 40 000

15.
m <= 10, n <= 1 000;
m <= 200;
m <= 1 000;

16.
n <= 20;
n <= 2 000;
n <= 100 000;

17.
n <= 1 000, m <= 2 000, q = 1;
q = 1;

18.
d_i = 1;
n, q <= 1 000, d_i, t_i, l_i, r_i <= 1 000

19.
n <= 2 000;
