%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: nwdzad.dvi
%%CreationDate: Mon Jan 16 21:56:57 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLMathItalic10-Italic PLRoman7-Regular
%%+ PLMathItalic7-Italic PLRoman12-Bold PLMathSymbols10-Italic
%%+ PLTypewriter10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips nwdzad.dvi -o nwdzad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.01.16:2156
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F626D6B609235E2
9B7E9F3127D1D8C8A7CEA28D40FCD6D9B32185DE8C592E33C2243F227677DA48
200551FD1140A4F25DD65779019E678CC83A1A2D62B299187ACC0F680A66A9CF
8F56BC205F18C6088C6DD81AFECC3B1A51AE4850C6FDD77B051AE1826675A5F7
CC5523D27FB37B08E03DB5B38CEDA174CA001B312141BA6CC5B99C850C4A7FCA
FF73E3C7106DE30A0BE3EFD47261CBE2F070C178AEBFA1940239BEE8FC585142
7F8FAE45D1B02B4285E6B9CF45DE0F5CB549A5E0A3C3356C5A1D6F56FF059F99
6B83FBD1511275A29FB284F38140F048E98D29500AAE888596D0262AB6252494
32DC72DB3E25A9DF8158DF67183B0FA6ABE87FCB83408D736745F975DBBEB205
EC6A890FE0409E6E1B2AD9E6E2504891557AD5CB93AFEBDCF500010696CA208E
72B7B067FA0F0A2EBA9CDD4623A905532F771BDF7F58E13069AD495AB6F42764
B791AA22545893E4A3E6C92762820CEBF255DED91BE00FA6CD768A42943CFA03
EB41DFCB6DE54C71B8E0D1EFB056FD514402C80DC7D665E16FED635D2A6DD921
4AA1768A364052081D7FD3FD0C43F657CCF46DE5CEF9652DE46E6F8C34A098CF
802123AD316B7E49BB8F1995B80849295E58FE100BCEC05B2F9F97E9D98B53B2
D91C18FFBD6DD25AF4A87D737754BA36A2B8C277FC40487E39611DE5613C22A5
0C295B7FE684C9E36961AD0EFAF89717D89B5DE470A3075F0CD95D628007987D
EC78FA64ECE4DDE11AA3604E9C4544E92FC8BA2CC10ED14E3C45A19EFD429E2F
70F719CB08135DB8B15A2E446D00FFE496C38C160F9C9C896F97910F00E3EF79
E994A1C485B18EBAFA9AA9167FF60D0B4A1798F95A800014EDBF7252453146DE
325D73F22A7514CD4497C6D098DFBAC2DE3012CEBC96EACDC2406F8F2128B1B2
4EE922A3179CDE1D00F5D09E5E4DCE3144FFC0C9E36EF2CA5E5BB1370468775E
D1FDFF87964F7752289FF8A6EFFD032E983BBCCFF493F484C649F65CA60EBB87
DF56901E0EA6583ECEFC663855EAD5557AA5DC4D622F10A03BB243CFA2287FA2
78A711B0018C0914993E3DF3D89034F8672560BAF9AEFD4F48A6959522B8D186
DD6359EBB4DE62E55CD88D00F46E85F2DFE9CD8712D3ACEAA6AC3D93C0E21755
519AD21B3362EE110745401E8D529B2B6D3300EC0483ABA0531B4663E5D79415
DCBDEE22B98822882BAC40518720CEFF8D9676AF6BDFEBC47C3463A89687E471
F4E9DFA22BD9F90C079E429E3AB22F98CDCDBFBED2EDF9B0884BC93F2F43BFDA
BDEC4137E6FA11253FB29006EC6B6E8908497B3192851D5365BA51EEE00DB3EF
0D23ADC7682EBE2BD6FE001586E51A3CF34E5A680AEE56BE85170621FF73FC62
46A88F1B705C72EE45B5557C2DF70B0A20140A4C98B51C7F32134464991F1EF0
426619FE5F40B4A08C9015818C93ABA7FE511BE82C545F2D3784141DCFC49AD2
E2926DDAD51903982E1891A5A576314B5E8A487E5D8BE63225FCEA1AC18BE8B3
7793FC608268AA7D1E30AB3888AE9F0A6759007BD0850A95E9C9D6E8373FF5E7
4A898010FA8BAD914EA6019CA72B0DFA29A30D90DB2C5F989C9D241E8EF46D30
3F22BF86588D4E7BB76AAE598A02FE6EA6B88F42C404CE5A17ABC62877448D99
D8FC5085FD76DAFA37FF627F4756AFF8445FEEBA563AFECB52C20BB8BA43D738
B1096C4D918E8BA146A25C9EE854AC24E45065257CDE50652ABCDAB4793884B3
25CDE1161A7FDDFBA00EA42C4C5B774B4BCF970480B39C5AF9D3FBE7FE8AF961
81C7AFF5E92F6D57416552CF90F5E81C2BEE316811013421A98C2AC9945F0964
858D0995A08B0E16420B0E854DB1FA959174211A2280E737A8CE7A489E137887
C38A6B29EABA98A640C16C852F20A33EB0C3BC8C7975B8772F6F6FB78384ED45
5B0588ED61872E846D6014D918E112CF2DFE44733B137FEE6D0ACB4E6B190B66
EE57D0893935346257BBE056DCC803994B0C0E5BC93D161238D2F9C0FA30F1F1
FBBD39E6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75F7B8F53BF7592F0
CD9C8E87EEFAB287EB8E1B539A2B8414C096EA685574267948222A7886782776
0F7091469FF255A729266042B1D09030AA65073B4E07DA110B5F7919D4DE6D16
F95A17A9025C1F684CED59977D21563F33124B63BE2DA62F951C898CF665ABF0
45E74379D67EC0B65FAEE2BEC619DD75BF2679D456299A52802A64B2E52365D1
8733275A1938886D2DC102825CB3EF2A7B55379066FC8C4F948986B1F80EFD95
0B74E614A6F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904E1BBC688FC7FB980
05BF250E91BF91F719E5568DAC7CB6961FC49DBA6673C707C4F13E833E87535C
CDD84389A559822986C68DB89F3C4DA86F1EF4A2A92FE4F54472863A43FD9895
C72B839A36171E129FD3D862EBAA36D35161B3EB6C4035E27B1E2CD553871077
DA94D205818CD5AC4E30E92D029483909939354ABA64D7FD59BA1F9102D5A134
92C763050D8E3ED64E592BC6CF9935D1EAFD4894A600072ACC70C91B876A4EC8
599D53A3367BA3C28DB6183AE68F6564178DC0354B62EB1227A0123488E56195
B04061E73D829B4B03D84D88904AD23D3FFBF1AFBF1164062F545BE743C40D7D
4B37D84B5D736ACF96F6F943420A83F519396B2291F4C2E19D7B4C688D432B1C
1C2F6B327227BA2A0F6AED502C2F97871DE3AF0C9C46D7B941BE395732E73083
0CA81BBC2AF34B8516ACEE9AF62EC3249236C0B31030E565CAB34881B3D7DE98
FEBAFF0B41C83E756520A38444A30EAF95C102AC3AE59FE1EB41C783384EA84B
36C4B12705716F4FDCE4BA38858B585D0414FB723F3794B9B97974C94F230E6A
9B2BEF139E9F8AA7584D125CBC6CB1C6D7D6075C64CB5D8248B67F0A9DC7C0F7
60BA15D5384B1F921DC0798660CF60B97413C840E7B28758BAE07CDE6E5ED506
AB2523854BF534AE8D583BF8AABA8ED1067CAD94EA0356CA8709B9C14C5ACF86
22E3C05D0B07A8F27EE12C2D23F202F15287087A260384291600D2FC2A5AF2CC
B9610608A8100B57A25AA3BAEE0AD335A65E57B462096AC97EB48888DB0FC011
9BB3F710587A068C340748DBAE8F169B45DB5E0730820CAE379A26D6D2D2B096
5482E38F9449599578EB3CD55F06C3EB4C344BE33641D000E55CE639278AAA32
E1DCCEF0F45EE63EC09ADA37
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic7-Italic
%!PS-AdobeFont-1.0: PLMathItalic7-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 33180
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLMathItalic7-Italic known{/PLMathItalic7-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic7-Italic)readonly def
/FamilyName(PLMathItalic7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLMathItalic7-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-1 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F166942E28C8AB8F1060C53B5724765FE28571728FBD4816AA3B9061D818
2C6E01AEA946C53F8D5253B037F98A39A0A54BDCEEE91A3AB6AE40600D30DCD1
48597DDE11727CE760DC74B749BCDAC11EA913E118A6B353A7C7B5BF72A0C8E0
A246A563BDD4F3BFCA697082A08CF326EA8912CFE36570286A6DE009100C2387
E1D37DFA3256E714423101E3F7806025405B6EC5A45BDDAD39589C1A6BBFA393
170E7908D55CC1B570BA2BBDCF3EECE31194BA92EB03A7A77FBD6DF87FD4718B
1684B464F4C4FFBD4F97A1903F2B52EE686402C0E72080E2685AFD9E78BC7EED
245B9D1F2CF292EEA22ACA0D39AE27642002187134D55E9F851AC3351956FFBE
3E55321156CF52EF3840E5BA7802C3AEA4369EC8C2738BFFABB86707F61CF32B
A17242A416716B5C82BBBC8D37EFD7DDCB8F86FDB93BBC91FFBE6C83D561EA68
7A5620314119629F3C9156A8E3570E640856403246955BF6F56CFB6FDA12DD94
D5837F8101D3D65F56FC73A5A5A5F88F111054172447AC57A8B69B4DAAC8F2D1
7B997EFF71C0B00B951A7570A341DBF602CEDCFB5A046D818FBA90295153CC3F
F0A4FCB3B2F24FC93A3C6D20B40CDED1AADCA60A7E22E14EC3674CE4718AFF4F
3A1A611D47EE7B715BF06D0F86AD787B605BF15540DD278DF04F7CA22DA96404
69563E178248223C1CC6A866AF0BC332EB55D3FED9CEFC47B9D8C537E382B549
903534CC577FBE9D2FBC52DDC427B2E52302597BFF0F12D7DF5CE21971671507
3177002F908641625F5C1C0C6A364E3100A357D10632538DAA07F1893EE9DAAA
E01D549A252D77E79AD37BF5912E33F96CD42386C234A9447B82BD519B639D87
A7C50A604ACA1C6928D445F67623AA28DBE2955BBA60512BCDC89E406FA36DEC
4533CD0A50EA849F3EFC9A2858D249E236CF43DD5D5F237F0E6494BF36A317DF
DB28B49A5828DD1E2C9F43CAC5A774B3174D266F48651A2CA6C84ACED9E02D9E
46CB2FE2A6C3F956DD970FA4FD6A4DDDFF737BC32456C980EBB4EA8B81AC1AB1
CC3944DEB241F1FD9A5FBEE5B1F2620B814FA2A2288A7F3040802E0D32EF0DF8
7E671195BE9B90CF5C73764B25258D08ABB0A715C14158E2C99CFC9E0D1086BB
383ECD488FD3AC4FE641890D7571B3BD0C8418E24C6DAA74773F84ACBCFA7D16
946DEAF6699160F88388BDC9291B2485069A74873F10114BCBE46E4DF6F23A9C
06B45104E76E3846515C25C53DBF61FB3614B78F5C1A445244F338D090137284
F4DD0C3FAA11C154881DBCE35CB6D949F4FD9B13B4C057ED56911268DBF6779A
CF6B4C9F01745475B1E371AAEC3A1F48F145D9B42F67663D2D17B187C961B626
4FE8E1B1FAE6C03FF9D3BB8802DAAEAB3882C1C8EEE2F1669A61BD34ADBC0D48
CE7D308DB8D83192711F973F0DE96B4533F5E9B79231AFA2F63B894B80512880
391F89EC495EC8F05B5E06C7BFFF91BB4E32ECF1455DBC3E902F2AC3ED51A3B3
6934801226C56160914266B1D28D74185B0E0FAC89BECF09CF73B19653C3BCCA
FA1AA748409D3C1E1A165DB122882003FDC5DA687CFA43C0D1856C461F97C7AE
DCB211A31FFB8A31AB6328AAC8CB646A338A2239F27EE53CB7EBFD4F38C31CF4
FBD46EB44215D6E646EC33667BC8E498A4419A69F3E76C4A1DB85360D56B2BD3
8B8C85FF3F30B6EC51C08D9B4F547298E65EE3D701F1A94760FF7862337BB4A2
C3A8C8803E49B60712632DFCA9EB9C079DF7B668763064937DEB644390E3558A
252BAE3AAE26BC39D1952208F2E0025DCD063503049DDEFB8FB8BCA8074A3609
868F9EB779D89DC565746F129EEAC3CDF33EC8821B552C27E065A00484AC956C
6B5887315E02952C4F82B2FEB925204E23A07F6C0E1387DD54F5C8BD071C4E9F
7F83794C228F06268D28EE4DFC8498FFFE101EDBBD60AD877E9208260AE6AF24
100E2B365BF89C5B67942B2BA4F9908402DEF9AACE7BD76B3D4A244E3AC74370
DA8E024D71908160B1EE7C648F246AA8FB60C78D584464FF1B63899BB364EE88
47B033D5A12CAD1DB9305D25DAA9FF60D639DE068E6459B14ADFA9FA485A9851
8F3DB193425614E326853BEDE444C0BD672106F8E84254187F5974B1DF0E0975
D5431D458B546303CD940A5254D2E380A2957A352FC808C54FE793012F05181E
FFB6FA3628B1EB9EAA51B861EEC948584C890632701FB034E81220EDD744B8D4
454554E52BC8D812B77B654FA8C6FAE137AB0AEA1045EA8FC0DE95A67AFFACCE
C903E9ABCB6ADFA4EB07AC36443DC19A5D47838796FEDE5D81709D1B3AC99444
E7C55F697AE060F931B38C1B6DE01DCE214039661FEFE4192FD104D32446C940
6C0B22CC6705D4640256C42C40E13EAA97963436F1B526B5A4CF3AD27EA5CAC1
BE4E5AD2BDBE2FFC6E88C3FB8B507F85E91127FCEC4599BB37CBF46BBBF9AF46
36303DDD37A83759A6AC139908CFD2E5F708BEA96EFDAA95FF5021F291360670
443324C428BE96A872391420BFEC53355E4FCFBAF202BE43726B5610954A6E54
71F8D8344C07DB8E45BE3409822BDE21FA10B05068A2B78FF2BB0CCEC32421AF
B5FF192A794568C56E7B3AAD6A57292CB8C90AC6579E6490B0F2B612352438A9
F2E2BC86D22746AE203FB4C20E75FB57C133ACE8B2952BF7D6DD848D11FF6F8E
3367333BE864FA0A570545ECDAF0056226DD6F907769D8379097D941A81A5925
01CB28FCD293F3EB1A7A6914E9643D63B44176819EEB0471CAF829867E220BC7
A9F8AC1F603EE97012416677DE8EA51A6F19954E6AF2812336D8DCD2BD56C606
96C50F131657FAA41730D76A1339903C92186878133CAF8943EEE3731D5BD74B
413C93C5B498CCFB07F69BEEE07FE18233001E53F352F80DC0D0D7AA7B18ED99
D878A03EC7534BC0906CC3DE9EC704506D54CD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD3076759733CC544C44
0A98D7C64DC5ED73860FE5AB0582F4BD8A6D8AED1ED22C3F3AE5E82CA55AD298
299A9FA987376ED991BF020D89506CD1278CDE3EC446CA203E7C1CD1AFAC29E8
07E5018CEEA86FBE5BABE8947404ACD14B3594882B491F7926694EC48CB03CF1
EACFD31FEE3C7AFFFF0C58477A93B93BA8E0E0B086C29AA069A41EEED25AABF0
B84DAA951B4DC882EA2055C9C28A70D205D41EAD646229028ABC08FB2713C4FA
27A936F7574C3DFD9C3107DA232FE1FB923D3ABE78293BF063FBEA2CD43B910C
9CC062DE49266623AF9AB4BB367E9C4970968D38AA667EB01597AD234A19054D
3AC99E19495C077DAAE47E6B8FB0144A861E53B3DFC6938DB709540F0AB272E7
12360039168C43B3F6A962AB4404A910BA042A87C52DDDF210D5A63E33196FC3
0EDFA4A1EDE957B40680750B9C7C9B9C3F9B2AC067E575111A7388D16AFD2A52
FB18A1FBD42BD45C935DCA2C217B2D5E321F34A8E49DB21CBF1E702A43C2EE9A
DD2CE8B3C50337E8A2EFC0584AFE4C42CAB0C563A8BA8F447C646CCCEE247B2B
A8F51F4E2970602E115DBECA7E6FA0B119793A23BC436BC00DE55BB0825E3EF1
D16252FCB6C8A2CC5C02BC17EC68D0A2D12B326E23F8858BDFF048179617474F
E9670AD00AFE529E542684F72F1912E1057CB22D49C76116A866A0E35B95822A
8A4CFE64970066298417BBA96CCDA7D7B2FFCB33789CCE9F40892B9C78573468
8C745E233FE4FEBA8B4C5E5FA3FCF9FC235027A27D6DD085C0C433C86C19C994
585203A928D55F44000AA862E51C5DD54C3E8CD1B944A3A53624E5090B372072
0E0D728856E62437D926BADDE093F79F0C13955490CEEC3E9177809609A7A20D
9D0C84A20E84595D2E85F871C1CF29D1534A05DF02A763ECFE04603B48EE9C04
F9D2884D279A3CA44634EB70D76AF0FFC57A0AE9FD4DA022A544A0DB043C1051
BF01C1C99B2AB6531A4A69C1CDCB9742E108B8591B15110947ADBBE5A2E8E129
55CC0ABB9D510DECD1872F894696184240A738B99C148BA645B7AA0F0713F0A6
C0514083384C6A17AC1499390DDB3F7D9A84993C574EA554FBC3633B6EB214A2
0AD63CA568B243386AA49FBF78517183FE4F2077623F48048112D86E5E46E993
F6357BB30AFAD02BB312F9102B049DCAACB9428CD87225C7FF283705DCA35F5C
65A4A83DEDFA1D7765310291F0B1F225E592117798D241B6F9FA029A62274E3E
86E530DA8EAA10942873EAB60D6376E61F07BDBFE144DC5458AC5D1E2201D270
E183E541D95698EF7682E10E9AE2AF283726441998FB46F1FBE94800BABB4274
74A489621EFF82566C2980D4C7C3A780D061F1967FD893EEB3CE8B3B8C3D8BFC
385699D1AFD079DF1318387F6FA6EBDE845F02F3484C5149BA4F25CD675FDD57
6AAAAD077968367D8D394F0B8CCBA10497922F174A7C30943EC06FEBA0A8E465
0A1C43591A884AE2542EE815E81F9A715C8B57260D7EA4793B46726182853555
FCA2B33E2CE77885992E9C5AB1D9470C023238FDD78AFA354FA2B758CBBFD62B
2A4808
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC44184E183
3BDC0CF3D97EC8E6DF2561B49331578ECF6BF0E8003939628B934C1CEA33D161
1D05E59ED9BE05071BE95A8E1A84BA0C4B54ECD961F0EEB3548BC968950BF5E8
4160FBC4C2709D6B1A9863A27EF5934C5CA2043B9B0E5081E58CE7F78DDB9409
17756A2D719AE12C53BB38A15021AF9FB97DE82874FE58772E82FEE206948CA2
8F5870230E9DA69ABC80788F2F72CEE5F5594B2AD33DA5F0E0E54A39325730A4
38A6EBB464931916CCE9A37170F0C02A9C7143D722CFC08677622DA09CBFCFB4
CF3D13A7D2321812C81B5AB9FFB7279EC7FEEE5B8D8919E0D1E69B1FE209C5F7
4C4588B11876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8808C26A27C674BCA1D
A029B6AD3386DB54549957A9A7DCC731D0F06699DA05CFABBCE8EED734C62EDE
D4A8F360F63EFE2FC361E1EA453299493D312C76192227BE5824E9A8CACDC4E3
CFC6D20C02AEB57014209F2FA3C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A
280C40D63870B38E4100D67ACF9EB4C072D3196F99FC3BDDAB879CD224BD2B3B
D4873BECC873A9C71796A4714880E1C7FCED238E4B228071199D8057235B94F1
46B4AB16EC6A5A53061594A8265F3E80509115D9F5FD50E7EDAB9CA86D7DDE4C
002C2C9AAFDFA4238AA8623EC176BEFEFB067BE96612C6F6EE5ED54D611FE586
ECB19AA08A087D28C9FFD637513E15FC4C840DA23CE9B2FB05E6F3D9A7B80715
A7750EAFE5014A09E7A8D341AB766F4DBFE5B998721230C3B0A573B31484672B
F3A77F31F1A3789991E3713C37CF7DCE24545368AF6CEFD61643C308E5A1FA94
2A4E3E66EEDB334BC61D9C644E3FC06DB0840728F4711700040204D6A9F13F5C
B5D9C6889BD53A2B61EE10DC1CEFDE6888BEF1ED6BB45DF082943BA761F568D9
D62C1B3A6A8EE55BE62E855E4C20A4E3D64D27171C2DE98EC01E81E32F4C19B7
E9DAED54FC5EBDFF06ED11E5CC5540C6F587644D49A2010C51A4B6EB8B09D384
AC24FBE70F1D5D95616CD93B93D45459AF43384C66A46105DDE363237782E3B2
AE143E60069683917D8D87F03004652D80ACE9F2A8EC2DB98F08DD5B1B65FAC5
1D4DF7B88926D7644E6791CD809EEA4F0959C2B0465F955DC0070562693F5F68
56643BEF1D40269D6F4943BA7EC7F18E90B6FE385DB4489EA39B1945336E0989
E393012334DB14734A0BFB665E55E31974DC9C8B8583FBEEB315F718A1FCF66B
D9DCB19A5853273485E72F65B9817B90D3E33ACC3053926BF4350D36D28E2E8B
90CF14F0639A778FB7DD4AE93BA493CB98EFE76B0C62633A852FDA96911FACB5
1BDAD45965CB3E4CD451B5A1D6149A61B7E0A35453EEC505A64E4AC9B0D19B39
BF010C61460C82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FFF43E98E66BA3
E83FC00043F27F1E73B67016A5054A77EED6B69AC63EE2AB32A29B2D317D76FB
EBA106D6C202E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65AA9F91561508D4F
286F58CF2232CC5DE35248DE1C21D77682461E0B5960997AB5022480252D5611
A1965011B1385023A014B87059314CC9332BAAFF7C1EF56752777A780D6AE247
B4F6AFB89C6C1A186EEA1CA1BC3E1488D2EFD004E118232A5C3DC535E2271088
995C9013E10848498C341054EBD5FD116DE2BBD1C0E4878AC6EFE4447480B542
B229FECFCD917788FCB6F16DC6D0722FFD3218887D32CE599579BE99EBCC1B00
E76D76E1FCD278C1CBB2D87BFD031AFF7612DD60816C4ED10C411FF88FEDAD54
1EB1711A5F0493F2B71BCACF08B5D250F03F7C7BAED2D2F3FFA02D3F4C69964A
7DA9AE42D8C2D8E0955D009995333DBC8305E2D7B42890E866E9DFD5B99028D0
E71DB7D816A29191433B256A038C8749AFDEAD63E7EE5E9B4B46A152BF638AB5
833F1A53A80E058C1EC14B91C6611D42171313525D41383124196569481872D2
637F7C40061417CF9240CDF8C15CC8E2D85D38C5429ECDE1FDBFC2A74E4CCCC7
562FE4F387C6C79B00E2CFC11D750B8B9E9AEDEAC2B1F1F3CEC338951D7225A3
C56702C50A9C7BEB0C82E30B395FBEA1DC6D7DFC80DE646F8D21E6DAE5175E00
96D6D6825B500859210CC80DF93E7B747BD25B37181B8391F1A591C6DA9D0D3D
5AE4B2B5C0EAC63E6BC0D22E976972C71EBE2C8F4B253EDE6068C67DF37FDC2B
9D64684E50A322FE625BC7D1AFB7A7ED9D2E296D44F1431E1CC382E7C032E8B7
BC76D60B171D6DA35750640D810674DC2BA2EF480B4213C0F02824783D263A5D
ED53C65CCBED35E793D86005BAF41ADF40E650A488C68EF82D01A404598BC3E4
49112DC5C3C2C8779C80DFB5948C211C34890086759938275A735F0255242815
1B7C2E344C499A8E93BACB078FC00629C829C4C19542C75920E9263F9FE5E803
EEFA5933AF6C77340DFB7FF3535EBE32CF77A1826590288397893844471CCE77
E4DC42CA8CFEDCAACC318FEB788754E00DF0759C4A83BB15A3D4D89958F4A6C5
4F4300F0712E4902D41A3001802A3F37581A484F869F14893540BBC1193ED007
263A8AB13A3D1BE85915C80CDFE499E24BBBD561335A70999E7B2460376DD5A5
E7B11F39D12983ED6E42C6B788E4E17C47E16BB6ED284C985255E4CDBFAAB62A
EE28B9245B4B7D3B8D191147ED41993AA21CA8C84305ECA221670941074E14CF
DF4FD40AAD681C779AC46CA91345C69E3F4BCB3721B6370725742BAF4E0200AD
B6B39C832508DCCCF2914EFA1FAA9FF341EF884258827DD0B25BBC836ADE7FFD
5979703247329B7E0963315E71B3C1D625A72E206BDD8D8A42C85216C1ECC905
159E0D957DC50969422585DFBDDA794A19D4C6F9A068A726843360CCAD29ED7B
1CCC227C6F87211DB64DDFD0A9758C84AC1B2949E583B4EC24435BA83270FE23
1A4C64260BD7795A68249B854D67222F22F6D6EF282F1EFC635B93E04117549E
5A6FB413587AFE9817020FD52BC1DCEA347C307485909BB72068555719E050B3
6FA40EAA7C8E1B1C0F0634B6663207D017DD4656F7E598B08A30B426AC1257D9
B2AB7C2CA1F826A08AA79A072A55728E848581FAEA6AB76301BFBD1A8E2A3793
43CFDEF0514A125F656F44737AF9797E403E09F8277103442DDA2073C6CACDCF
AD128A62475A3945852D32CCE1A49839A31B4DDB368B3C23DA4B2FC58F823D0F
9D739BC2B146AB5EDAD8C478D277054FE25F48E5EE9A8A76DAD3D54CD56CDA92
66DE2E6F5313AF37772CA0AAFEE0651F233521A9C83FAF6591A151A2C22F3D53
200874867C45A318D14FC3019627A2F084FFA9015B7CA7A2B73527FED2479532
E31E214D5352C50B6110F08DD8DBB380B3E2A102947E4BAC7D8A387358385448
802B2AF44EC7EE10159D81E561FDE7AAD16FD7A19F59367082FE23BFEC6DE192
496D222E97587AB1208226227C1A7354C44A5764975921D97A8572CCC76E80FE
7332589174506D7657B352
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C6897CBA116BAFB72AB0EB87071835353368D815F0313CB0260E2A
C39A160EC8C919BEFA168A2CE5EF1A04E4A8525CFA24179D2AAB9AC342943B41
FE0EB6837C0A1A8293F1A346C6FD147F026281D00EC140B07F721DEF84565AAA
F9420F16589233D70E927D0157AA5E5F9CFCBF9CCAE1A5329D38A7235C1AA512
8E77A77E04A8BCA6D60842626EBAF35292B3CCC5B9C740A403728630EB434B2C
9EE0C158E873D6FE77F7AB2E72F98B832CE0B58BD06CD658AB4AF2870C0EB8CE
FD13DD49C17B4A3FCA2150BE7BD13DB16BEC6067A50DCA9A83DB1786252E1492
9D595DF9E0EB9E874F8D3A5E8706E18BB89C894B6BCFF534FFF13787A93EA5CD
1C0688A6CF3790FD208CDA35568BE298A24F3D715683C927DB7FFD6A4F6199C1
A75A69B9D757319019920BEB8F1C7B780880EAE9914B5686028C201F44254A87
28DB78DCB8444854681BDB26ADA1BEC788C3BA7A00DBAF127345EE061A7DCD72
5370C371C213B6AFA0E73B5F1BBEC8ABD6903CAA69ABBDE2D6727EB1772DAEC4
3B54BAB8785BA26BF5EC132E696E24FFCA1910345967B687337D97B83A99D5F2
BD217331E32DB71794F084D1D3CC1C7FB2B732C2E3FD8DD2347D9C23A37DBF4C
9FABA6DEC36DACC0E9D3D734BBCEF09D44D0E5E0A12293B53A6F8A96E80C81A8
43DBDBA7FBABFEAAFA5137AE85E0F873FF43475A0FD680DDA557B783EDD7CFF7
7658880B394C85D67ED8BE813194F3839BAB2928397C27F681F22DC4F9849328
8DDB05C69E85B9BF34EB8DE300265799D83E6AE69737752BB0D6D69D34BF39DD
3F87D969EBEA3459915DC0F58EFCF5CBDFF30B639E823DECA320CF5948881113
2EC693A6930AC314870AC4DB22647070692E6AEB04EAD823AAA6C5FFBC6DF009
421C172079EF21F73ABC121D8DB43921FF40006597DBCC3BF9C3ABDBC8CD3907
AD5C965CFCD6693F461F6B68AB9B5A865837846ADE361E00DDB019167605DC2F
B7CED3E7E5D367EEA99C7389913E343E95D8C2366BA2EBA7546E6B46FDA47154
526A14B5FBAAC6910DE3E1C6CC4070E45641231E92971ED9FC557A017EA73E81
3AA23F84BFF3D1DA7C64E89BB59C4ADF07B4ED016C2055BD2614468625F83C27
32EA5C7722C620CD9E3B41698192EDAEA80865BC25788318350FEC858A913331
07F9EDBC8D2BE04CEC8DFB7FBB8B52DD32C974500CFA2C49C1B74B02D7871241
E83EDD5D241A1DA08B5E7CEA1D5A76055FB575F6BFD21D7A0DD5731F0E3959B9
23D1CAAABD63C49E665E9E9B22418B330B24A05102B9D99623BFFC63A514AF6B
0818CFB951119B58CC7B12AF6D7987884DB9F464B4C608353C609E180A3B9B9B
2D44C1BCA95BD882DDE49317F31203A20389B515C95BCFDF379584A4F6CDBFEC
5A497C4F95F2D665A5BC668217D4D9F8809DDD97C73BE8C85F260B80ECBB84CA
44C162AEA72BED9A8B4443EF88DF4F15723027E45DD678D172F09F27EDD5CDA0
E1F5399A6D108EA4EFF99ED8B3540C54C9DF7A51F21409BE777C5D7C735C91F1
0EF5B831F2F47585333DC66B633A987A95FC1F275B90B581B4BB62B6863A4CFA
E37F715EDF3EA5A33679FEB64847ABB4B3D170C275B9F1AC3156D731198DACE0
B0516747329F5B7E841DBC5A753DB5A827964A51D0B0F8DDDB8F305FA98F1A43
453171EE92B5FE08AEC5EA8FFC9D31434462400823D0ED27840CDC7D5DA01A4A
A79C2917B71783C79BE063A054B3BAFE11C01AE291730E7B21AC0C8B417CC9FA
FEC78035C5D282136835285418454357A2D4BC94024D0320549CB1DEFA0390FD
8CB5833D04EF5B8A8E4B6528C593F9DF7E4FF844A27C6A3FCE777FD5E34C419C
28C4EA6658E54AE208CA7FE3F999AF05D5D4E771067075F8213CD1E164CACF59
23C1CA4CA88F9C247B9C1B2E475171E02DC1F3A06BFE9446E2FFFB89E8312EAC
995D35324DECCE514BD77A293EF8593996C53735C1B0468104D02CE2A525BB0B
028ABD6FDFB38B1493652ECEEBEA1755D97BF25C36A3B7DC2F0DD4EA521D8871
2C2F1DA692F67DB88C1F8E71F4B4A73EFD756D958A2CAB8977A114E27B62F042
748B07903204BE86B52C3625701D6B86ABEF80DED110C7B0C9E17F1834BFA8B6
2FAE8D27625CBFF10A27E2B97314A9BFED3E1145BF1285D4A23161183D0C7200
73C0A6D4F27D752A521D0EE533FBF8D5A8C924956D065986C1164EFAB8E06A25
0680C56C92EA8DBE2FCDACB9C2F33B9A7DD39C35F5683F03CF7C7A4BBCC0EC2F
626498A0F0C355F94E92659245514FB48448F40059E4C22CDA8CF8B83BFC68C6
C61B7606A358EDC51093DB28F7C996D5A69FE651AB0637C908BFB91BCB483BA3
EBCD9AB2E58CB96372CC1CBC690B43DB96582A6FE25A8AA3F115026AB6F9B892
C7ED1B085F5641F6E7C0F01ACF18202E69F106F25E44A60B4BD104049A89AAB5
BA1013209625EAC6DB25F5B010131BBD91387BEBE127FED3E0DAD6144CB5A426
4E65F7A54E14EA3D179134E03251AFB988F4819734877AC562EC88CF64ACB343
CE4CAE9A071AD6242C51326B981BAC42D1CA70DAF00C9C984618D80ECCE758AC
761639E638CE9D8945686587AD1424EEC2E5CAA96E134876CF71A5760E464B6E
7F48F12B0507C082BE1BA5445AA5F763F7AA1B97EB12C130575A604C6054C46F
9C2DCC30A54D6B67BB2BD6CE0EFCEB51C3C63436DD46B6D3A3EAAEDD0E70E803
BDFD7E3147029349AACBCFDAAAE5494EAF4FFC6807F74E474FB917184AC08357
C9044D4520590C36DD18F9FE18212208A347E70A5C66B7EE7EC21D777C773E96
8878BD284115EFE34BE2CA1FCBEF057DEFE3269A3251B16E5C9371B7BB554591
4F29527629DCEA6EBF0D04FF08A23FBEF5EBF797BD597E0B54F69AC8451DF239
C8220611C33BDD4FF52D6468AC4E0216EEB2897439E7874B1A3E92E5341907C5
4F1D2767BD0D84ACEB9820C5B458AB5ACCC105541FBB078764105861101A5740
38F948E6A9BAACED611429DADB394A87BDF103CB1D43978B1B06CCA7F5E45D7A
354BFFC7A05ECDB2506841CABE171747B7548837073B87EC44FE458264761650
C14EEFFA8C57C78BE0EAADD6A0F006DF4A90311E65E1B743A82E05AEC0E8F423
974E8CE0083904A6D968D16270D121761ABABD7B6678871BABF0D67EB829004C
D524F67919CD582733B90F831B81C9EF402C76AD5DE3C5DE15F3370C8A970F46
E0BF0191CEBB1DB7A467A7169D6AC8AA9D5951DA45A60F07E67B8C973BE6D74A
24C6AF12C6699CD947F81DFA43AE58247E5200363013E1828DC5F96AB80A68B0
F6D181E175AEB0E54E7C1F6C11A43B415C7F7610625944CCCE79560771B58BD3
8E8E3B26E2C48CACC4EEE3C7A5D131B52F04A522C63F68C595D09538788D3BFC
C8E148E9EF615E561F645104E5934ECDA121E343E8DD0E26F978FCBE2D9492CE
EA40E8721004AECA34251C99D292319B31EFC2F6FE5FD8049636D292B0A5454A
2D90FBC12B7B960D05B705B1A633A7D40FD505A1343AA4D5984D3D7B784BE985
DC57277422F6D71F610E274DC09FC1DE1A6966954AE705FA69F23A8A0919B5D7
31DD7B9B373257AF837DF5621573E8E8D06A555B642D68C13558B779399A4ADA
2D167810A64FBA030EA9D678D2B2642830EF891F673D420D4D4E753D7D87BE81
2C75F51AF78BA3875DDDA813655A7D871EDCFD694F6EC39F5C1D12F2AFB2EE80
44E806728B3BE2ECC574316F842837C2A79465B04586F44F3B525BD4FC36BAC3
3147238795D3447B299FBCCF00A0CC079BF5ACD30A86AA961347008C871F77FE
5B882AC9B443AF67DCE9D17E2E04A8B0094D7548BD0A4FEBCD4ED01809E0CFB4
8BD83C378AD7B23894BC719D68C2EA3B6B4B885CC59A34959D36078B2997A55F
FB23788271A723BE31F7E98BA78C2B52607F5AD63067BF47432AFA079E9B2EE0
0D5D6DCDDE1AE858AB0BD573C2E4B6855D0C83A50F0733AB3264B55E03AC6181
8DCDDD6A2FCC0E5ACA2F056563BA0B495254451C352AF582A0C264E6FACE3B98
128FCE221AB55FB134186FBAC4D2369DFE202CAB349A1B30E8F1D7A25FB8A43C
BCBCC8F6C142ABB1E059247E276E47BE8163957F07500A78BA31E0267C2BD463
6A0FBB278C77415431379DAD60D166456C58F97213365F621DD4DFFB6670BDB8
7225339F5DBE8300564D62106F8950EC5F6D5540983A8DF8E5C93474AFDFF620
320F6569D83A6A168B34B055041026E42F9E603766AF8016D7A65BBA3AA929C9
C0371E0F6D7F187CCE2334822C9FA9C44AF71820EAA21ED5ED3EB0D12240017E
AD87D7E2DFC75C0F145FBE307C116C3142D0C84B716325C75600D22E6C0CEDBD
F16BBC28C184BAD23950B28C7034A42D73271EF9DC2A28699492013D09D9DB48
E0AFC1CCB37C88A024D42DF89C7DC79EA4FFF360BD9220FE1C6DDD035005D954
61E0512D7CEEC3588B74A13E148E7537B5FC63C7FCD11D6C33CD949DC6E4C61F
517C118EE09C0DFE3D3B3B0BEA1161BE49E96DB2F257ABBE60E7A2F5DC169BF1
3C56D9D08860763C7F85AD832680877AE16BC30D56A0286687F891E8CB5B900F
55A842B6A719727B80673D6BA889FA1F6B993E6D7B091F80F91CF6275ED7B40E
A4B0ABD7F879A1A24AA9DE1E5575258CCBDBA201531852C7D1F72CBD9D3BE512
21FC08C5727E22A6134F29224DABE50AC93C1C45AB763C70EBC06A72AFCC1E64
395834A1514899C14B7B552BDCECB737EEA008C148F132D4534C7778C2E7CED2
3D7A6A3634A820A6E376B936F6E4EEE0830964A671451561156980382751FCBF
5721261CACF5BF5B5EC1EE25D0EEC182C13C12010DCEBAE1AE96801AA57C9B8B
F4F0CAAC9B469DC673C4FFF779A26B7ECE4D707073B69222764BC0709AACCF7E
B7688DEF09EFB59BBBAE95A85F9AC3F5059EEE9D90B65203B7008294DC760169
D92FD61975837951AB4874B3F303AF0006ADCC59E573B179EFB3C63A84F8237E
2BD3F03F016D82AF39B899FA316F95970237063A160F846CE557F3FC91AC7A3A
A5D5584362724C6F5679589C83E079ECDE69F128C47AE3A7EECD95BEA2696DF7
812B5ECC8C03D87FEB883F50A3CC7B53173445AEFBD35845B3E159A1F59E3692
15F2597968A57841B4FF75F962CD1248A079CD985CF7D107B5B5FF110D999E14
DCBC0BE526202AF2CB756ABF31B02120A3155823F6A784AC6F82704F44479597
63143455051A436B3336BEDA472490624397A1A813172420F5A135B947DA5898
FE390B65FAF7F150901B4340EF649C370F95C832BEB9B5F0D2C5731D4F5EDF01
E68B3CE57463044309DB2FF043234BF0C4F3E78650F02ECF9FE01F86136809D1
3EDB8C2D4F0460DBDECF5F1AFE02A990D2911F508F907C68A228C4B371A2334A
30C0C298C3EF42EF2D4E9F26B401F3A783BF474BFFCBB286821AF0810D018DF6
6ADB152E5B1A83EE84CF5405EBEFF1211E3760CBE76D4F469699E64522073F80
FDEC651603FE28C8ED409FA0C902E86D220C91CEEAA4DE3DDD7A7479E7853777
CB50895FC95F18C1F858EDA5CC14B18039D2C3956923C9400247F18C7817C4D9
8C4101745FD56A5DCCA89760E65E8A7C151DDFC5B45EBD46ECCA4F9FF532B664
B92B2095B90D45EA2262E6D62933B6D7241FC80AF8CF3D4ADC02630959D9FA95
C61B182D057C62A221FF5168D4E82C2A9040EA273F681C21AED4350EF12BF42A
0A7C05D192184E1A046651CF86A225ACDECABF3A92AD7DE1F76ABBE3E90994CE
ACE5C84234B9211973791B805C252D0E2113F2A30B3E7283CF1B22B92AF58BBC
671BE45C09E56307D4F90DAB4186B2DAC18608AF91838DC915558D670A7342E3
BD2D1839D30652D670FBA45D40A3C4396206095C0D761454C079B4DDED22ADC1
8319BD66F62121C869800DC8C5B9D5F90067DEA8B2EC8E9E4E46FF7278B83320
CA70B9955FADBEEC3D6B41ABBD93FD1D343B932EA6092068D8BC9987342C36D2
ADFD690D2E6E9280945A131F45F8B2FA5C1AA86DDF1A2B2CE9BDF9C6C568B248
3EDC63B464E1647AC6056E17BF974C0F86D284BD2FF15E39B0F0039C35A70C6E
54C002C766DAFF260967FE85B89A781AB7E22D231852DD9D03F76D516EE43975
EEA0BF72C21A3B7B04141D6F65DDD37F3B433119E10DDA243D92A759429AE379
7C033C05CDB6B3E482AC86131DAA84C3F9FB951EFA323BE2EC138E54BD8F78BE
0EEF35A5BE1E17806A8F19A3CFCB3534F6EB922FE81D483A8BA018E2D62BE0B1
54F62C9970368AFDD6A94FE1A1C62C858208B3D6F9ED4791F5D80A13478ECD1C
580C9AA5862789CCF5A70696A5A8ADB5734AFCF0BD240B3F90155C762F7C9339
CB4BC05D6B3712599E5E54BB28F2B0F8E805D71A991395D37641EC3BF4DE590F
13C8A40C37B2512709446D3B9E0ED4E9E72C302526CBF9EB2CEEF5D828BEA577
C058EC42AE0C7490E30F2B5E410D81F56415AAA61B5ADD38D809E16B0F2555DD
CCD51D657A2A7B2F16CFF70C2243BFEFA446799380CEABBD5E29C2358F88022F
18F3E186709110409F837682FB3E9FEA626CC1A03CCA6138D3EE5B403043D4D2
66002B7D25A9522C173804D3D762FEF6F390D8BA6BD4C7F9D7196CDA98B14905
BAF65F706701BAC038C801752624611A0FDF2F09C102901EF1D7C774F596E47D
A547E8FE4F374652437AA5FAC7ABF32F67FB91222C717B28EBDE006BF0A4CE89
B8E52E6AC5B3AB539442FBE3BFD04458106B08C2E0F7874313824D900BBF9A49
D789B43029968F4CF0840ED6DF849C31C0551E7EA6334F2D66BA2E5746B678A0
B40A25B05B498306442FBA0ADD70552F3A2854FABB04BDF11F29713CCEB101F3
736F7FCA60426E3F2CE62638B1E1DAAB38B5F8BFFAFFF0120901923CD0057DEB
02AF4F8B1F757AF2BCBF71705747BDFD6D150CF892F5EE735A3E5DE86E2520C1
A41143CCBA6ED84707E5A69C6BF3D0C666ABED7BC3B716876F757E1E07409E05
6FED5353829CDF71B87087082CADB96677E84C1BD5E84F68ADA611D1A0AB0F14
082FECC44856F42FA27BF320FDD1F94523D45B2EB3B6F7227F758241E00F4660
83E525BD88F5912424F1304FF4AA5D142C12C79512004C9B86B923DE1C8C394E
6E8191F1B5FFFCA8C445CF2339033FF5EDE97162F9D4FBC69C1789C1EDC36837
F1447B1C26E6D53885C04AA0A3423F68F0D96FAC25EC7633145DFFB88B3A3F74
F62ECCCC4798D05EAF7AAC5BCC395A57C3EFD84E2D33A7A831E630770554EC8F
FDB510A111BA0A058C962004725A4DF9A8F818CB1479AC043DDF3DC182BD3B59
0CF32D028798645B889E793163E585557A96CA78E24D27676585A1238406E6B9
AED80E434B4F89FE215D61ED53F8855DEFA69B2F866BCE3447CAE4D14B54A46A
A3380A0AF808CB2F716D35494F25DA98C8E8D69C3B3572D830B0187DA1C691F8
A812921B3B36B303E990008E9E782F9CEEBE0881F17DF44F2D92C174945BB109
660485A6B350464A8DA9BDD7F546D4E2EE7531054E98F97EDD54F5E9E8342714
E50716473BC0F76D4515C931447CD00618B243200B29CA4696EB4F8EB3D6AC70
B3F10249EC145C841B012469090C179CD0A02E1EC31D65BFF5AA558596AA6A58
C53DCB5C9B053DEEA46B84B9219A2580B2EA1F1F89CFFC9F1E9C65D880A5F43E
8C4ED49A7C3DBD9EB6136DFF2C4A6C2F707F5163A11A1C5B6FF39856D3FC36F2
E470EF385B81BA859AAF9FB3E1E2D67CA07D9D61E766BA8CF929F0E8FA6C3A2A
0D6860E3A26F7AC9139AAB7EB0E257C513FE2F49C1068983FF089D52B5F989A6
FF544127391C6D7BFB385FF6E8C3A926166DFA8AC7834B0D9C1A4F1956353CE9
DCF31ECAA5837747B861B237513E85318454AB2927428A7C4A8407DA1F7BE129
4A91580B161FEA16F2438A75C16A2A09C0B852F9C511282F6F5959C3FF027B51
DF330B1D7D3EFB034F1E7C4C45CC70D2B01E1E277E679373626B62CFE357262C
D791723C548084B9E8E4F68233DAAA88C01B94D78B7E920EA8B7C89640366311
136B0B5630EE1FB0B719E6D25B811D2172D1E03019C77E70F4D2F5500E513D50
B1B32527E2C5E65AC33AC17CCB27DFF15A391279759618304862C156E63F2F12
C7B72DFBCF285399B45605F9789B486BCFA6FDEFF9F001DDC532D471584D5E51
F9768AFAF97C27F6402976065CA771B882190EFBDD7DF342481483FF7C321157
AA04520A86F15EC85F6FA76759DB936CACF0B01F266CDF43CB130C7E19F60A29
FDFBB7C486349ACD141C17C52B074C5F65E13AAEC4EC732F2B2D841B305A3AB5
5E7FD8124C711B2D33A612643316CB420A4D07714B71B52B3705A8336D3C8584
B09934E79A453B99102C0EC96A78240D73E47E578AE6DD0A7662B64CD26B1A7C
AD509CD6F8E9072663548F19281F534B078982F2C051133D8FAB9D4792D61E3C
84B78348F4D6CDD6A1B1DF7461051023B2064925DF0756E0C258ABE6577EB510
3A30F3B8AC75D881C65295EAECC6C22C6E17ED691DBADED22D1AE555A8BB48A0
F5FD32C44157258170D2252CEF73FC064185590346B58BE0CB67EFEE2B4CA1E0
CDA508D066C9CCDC502AB20C3CD5337A80B16E036EDE88CA826C0CE7F18C8432
F38C5F2D9462778D8FE631F0358A60CCFF32A7372348A283FBCC7A908F1EB635
0AD826EA5633654F712A072A1019FCEF03094C17D7AA1EB394C4A78D281E6562
A472830FDBEF494BC264248C5AD1B786C858460FC135307FF519F61EFD8FDA56
039B204BCF958C0AB795280D3FE3730C91F8369080A5428EBBB459F11B8DFBE3
2A7FB7403C85C6502D89B7F595B49A49A18F5D576FC025B82AF820D9A7794C48
9A08C3FC8623C2B21D2574478D50E6E190D3BA0E61677C8B1425574E9A8799E5
BBE824BD8A7515EB51A82960AA54C3C12CDE2440974DC1B4CA1DF06DFADB8E7C
F97F5AA6FDE68672554A6F3754282FAC46A96E146F8F7EB0B358489BE975E892
E9F32367745143EB3928B635E8CA6F97E2E9494059A0EF968650B1EFE99E8BD5
69BFB95D12BA6D00C44C6FF0D37412603E0DF8EF1FF1E0C1CE737AE56FB0EE1A
3D289C162F619DD08A59FEBE2D6EBECE27BB4CE8F1B32C8D4F2838FD537CC134
2BFEBFF74C84F0B8962DB1A0AD9D544DA614072B0AC77D365146859537A88D49
6322A1BF5F3A4B89247B7273B19B7108B44D22AB0F6908ADCE3A12D44F331BDA
C8584A21FA235FC1346B55B3BD54C40B7A13895206A0659EB11800CE30F9637A
584495775005AAA1B71213D600C489CC30290EE8A0820757F2C2062AFC8DDB72
EA37CB85F99394581FF194C3275082D2D0276900C194FC37298750714A8018D0
3A7EF87EC43A226CB3301D32EE08F28B5A5E763EE27BE59D382F06FC5ACCD14F
CEE1483FF200F17CC225029B26EE2E232B1A8CED51BAFB0000E7C896C9E50A85
C1E6807D39A149AB8FE9C45575F1E961B109C716413239437A31C555C3FC791D
83AABCD8AEF58502814FEDB52763B5521E964240FD533EFF7B1DF56EA25BB1A6
F3413CC1EAA572AEB7E80B769FA91A58C18B300150DC3BF441D3F2AA7DAE09C3
E3E4FB2CB4A490EF659F1D71CABCEFC8762B4A50849F77B186D8CC3C561941AD
3480B774E617ABF40D21893EFBB9747B53E64D40555EC9060F4DC60801F8ABCC
978579C10117E92BECC225DF316D97402B322A20586520AA661DBBA68175A656
FDC3A86C7E973B84857D5D2F4241246CC3DD69B39EF2896138E5A1CC01C78774
531934F0211E23DD57342A76AA82E4B6CD2008B3A16A9C5494432B0A479BA942
74D3CDA49C004F40F49DD0765F3A0E00350A33E361C619BD623343587C6EC7CE
FD055B334030A8475378111F08FECE337A99DD7F6B511778E8BC8DFD134B881F
967A0B57292667582D5CC8930B7AAD008207E60FC3CBA9AC689DC874BA5B0099
606A064E82D2BB318C72674A02021C528A4BCDAF1C4DA35BD0B7247D1D7A9C6E
FD1A6370EED4ABEA564FD43C32ADA2A6EB9A4AD8427D532FB3D46B12D861A753
4E7943C13EA565D4593D49950870FC531A3D7CF267018B41CBABCD40FF869811
EA8317212B130D7D9ED37BDB27C3964AD6F4FAEE9F0BCF4EDD77FA0C65E846FD
B7FA7BECAB1B94168BF0261B48B5FDC60FD525D0C065D547C07518C027E39913
257CC6CB919051A8308B7F2D7EEC4D931DE724F7239B9FB09CF28024648062C1
F3A3D0148384AB911F7860C2EEDF661A3A9179E9ABE0C9C4ADCFB09376046B0F
0B9AA2BC38A34B45299A95B5489A9F5C536A39E1459B9D4BF4632FBC0CE4DE3E
46F2D31B52EC9836E9F69103013C589449CF59951D9B258794428C441455970C
9E796F73669732A70165F379F6F73DF46306BC3C2D9373EDDBBDDED08F7B0948
5DA3404D96334DAFF304FB39AD5AC38C687335D831B98006C74D328683EF600A
DA1D38D2E1BAF8AE0EB1FF4DF52837F6E20C7826BE44CCF59BBB13B690F166E5
A99FA6F3E0C0D5A685682EF2E42DD404038477122BA490ABB6EBD6149D60AF05
0938FD312CDEC91CDADD0CD51BE7705B337AA8DDD6F4635126858DA4A227F600
27459786A40D854D5303BB4FA67F9E634BBB4CBD81432FEDC40C3A296979AA88
FDF06DE246AF9AAF0C5B1C80F749FDF7769C054126DF487125C4E737E9D0A158
BAACC18D34FB5C9D58EF81BBA28AE9AD9C8599CED9E7B9C7E5EC4CE6BE59C95B
BD37B96C5B5DD65D2C7D58D6DF5C67705E1816E4CAF08D69C28E6CB48B837E1B
0DBA8BE65E6DC627D24B34BCC9F83694B83D0BD9A18DBC0A878608407B92C7A8
4AF29FEC729928BED2713F2546A60183335FA69D4DF060317D3022FADFDB5D02
1309574F466156A1F6E7875D989B409BF0E7B76E43DE63B35813A285FF97D9A2
55BD07B0AEB0730A931409BEB7EEB1FA4D5E90A942453DF2D2B7A3EA3E7527B1
F3DBF9825106879F87D5D6ED9EDE2E31F837DF866786F00E1E6FA2C0D2758CF3
10BE3E84E336306B3265CC24F47CEDFDC11ED2EB4264E836B52EAF779FF9C19B
5A55C41D3D40ABFDA53B657354E84096A0E31C44E4AAD8930DCEAA19D0EF1306
C2868B552731721E290059D6AEE0A693EABFF1B1EE397869F129C47744C21D90
8A2421AA5DFD4541B017034E43BD142C8B7853745A85425C2D182C44FD8B6DC1
D351138A97F00BC6E88A52AABF51DD778C320B51DCC0A3726CF06A60E19A9BF1
AD7557574AA69BD33430CD262237166DE0F608A7BE786EBC5DAC4F279B94F722
2E026E5AB84C89F2E99ACCB0C3250E81B78AE34729E72EAE6CE3F8E5596B0790
0DB23E3D5987700D8BE3BC68DAA8A198D11DBC557B959B9212188BCB39348172
25810FDFED9C738F3DC530AD56C8BCB693DB40D408A7736F352B681F49235615
68F3796A57311E962689B75900896397AA2A232E613020CD55ECEA5F158E1CD1
C9E14C11F689BCCAEE75BB79DE112B2887A67D5D8F88962F580B54E141DF0F19
0C6D982D490351A03116910AB3A2CBA010332A9462652C2DE98123EDA4D78F10
33D353DF058CDD3509A6BD6549A52A6A4F8372FDDD1D6F2468BC852510A89543
8B6AAA976C783225D8C5F6EB1D308EA248D09599F7590FDE49573135553DEF34
623CF3E653662A956D1782EF35E9378B09D366223BBF0614C4AAB8193890C435
8D212D14A68B3FB79F7A9149E2C72990050DD358CFA2791E0E1810FB83B09208
3230B9D8BDE03858068832EEAB2BDBBB4122EEE24B69EA6D5A84BDF78B1DDC3C
BDDB25A0D1A489EBADF4560FE57A62600CF1A15BA4FB7C898D0EA618EDBAC984
752BF97CA0C7DFD58C601A0FFED8DC40BF9CA4E7751D5536DA19D7EB76587D72
3ED58E344E9105D9ED17E50378BD3A9F96976CFD6701368F07BF9797A0530D08
BF6FA8CC9CAC9B28772108520EF8B65A0E957F287C56C914B05461195CE85AB4
6667DD7683FDE52AEA6FEA2348DEA453EFF3097911D32A1E1DD4C034AE8F688D
0800DDFBE339F6E7C1F10E359EB515003C9E76116307FDE05651FF2EF5530184
39358C5B15C08C7AA6EAB0D6A062F3760AE36D6A9F1F44419ABECF7CA45141A3
497B14B0E535259F6D41FDC5D17858832817B7576FA486594F135F9C169066E6
2AF234E753048234B0903526E2E26E52E72B71478B421527235DA42D5CB5B785
D2AB6863AAB167B842A12BB72C31948F1C9AFFE75102A6C77FF7CA2964C42CB2
43D1F5F0E6099CC8F9173360DD3173FAC5F16B90E2A7B2711FB1C840B9F34A31
94A8873D371790C6FE7781DF45B0150BB0532E056F3D031F76D33E0AC861D2A8
8B9D5FFBAEF3F38829BE28E974D31F37056BE5CBBF582148A0F077115364ED28
3908B5C67138F46FBF93305617161AD8EC8489CCEAEDC5B5DC1AC53AD7F9731C
96DB059FBDAF14BA89683647271CEAFB802372F1079CFACECD3DDB1C700F65E2
7F25ED8C19F4C2BD927701837E7956F1D99A4CFFE46B6F08A3DAAF79D33B2BCC
A20AC5FC6908F96D1E8F46A68CCA30ECC8BF784B002AD4C47581E0603C447646
59AAE16C8D2960F8F65210CC50482F7434D6C3EA92DDC96419B6FD3F8C12E6BA
B400CCDB26E677091E4168A32F30
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD403170A927F496CED1145CFB45CFF0726D1E70CB4F
9208E91D1A1BDE7A973743521EA5B04430F3E9D50F14E5CCCA537A0C7E48B771
1511737434C5B5DACA5679ADA69C578E76BC6A353898A719E7CD195271303811
E9084AE80936F2B089231E6BF13AB85DCCEE46E3DD3464E1174841078D73B985
7D3DE3A550C74279C70F13C171C0AF0550F97752CB10A274171AE6A1990110FC
550D41A501E7B8F8F268EAE9E72113D5B5C8F51B28CAE7383AB171644CF51A16
6494F4C2585F396E54D8C02BF88D47E96162BA6A542A120B4C84EA844D8CA8E7
29C2CDECBF108177EC3EFBBF3F568556278CB92231CC9CC409D307A292EF2BE0
377DD3F2B544C41D92B302383FC197A3093B609A4B0085328CCAF29E3CC12D7F
1A3728582010C71760DA64EEB2E66C6B6798CB14CE5451C36748DD3D2BA55327
2A21AAD20CD8C9C7E980800D2F4C0A078CC95890A8D41134A7D097761839BC02
D9DB75BB830332AEEA17D3EC03BB676C9744001062D86E08380C42CB301E4C2B
90D0A709AE838141F0D8665F831E66951537D3E7BFEAA0865EE9824B7A762B17
9B038D83C1A7DC8585EBA384C876805B273BA42B2C11C312E75BF87DFDAF1341
D7F13425D5065041664D3731862DBDCED71B5F73018E6148CF21706B503DDC6F
1C72AC1F449EAFB8E12BBB7DB0AEDD624969C8E531DA59E5605EF69A5674BED2
3B365D4A57DE723691932E5423B7EA66192222D6A2FEA3131EEDE8AA73133EB8
9F73A803BF1DD7DCCFD57C49A66B5E32F3AA47283C7A8FEB796EC9AE611FA97E
A1178BBF5A9010E01B13C1281739212462D44CF94F1CBE76B5305EFA5A885AC7
1BDB95216DD86849B794B24BD9C65097D544EFA80F3B37BE3DDEB9D72D5F2B16
3C7704BAA1E9226AAA7359ABD2080E71B3FB04AD8D1878AD0BC6BFFBE163DE91
7FFFEDF112F6A6AB2F31E1122F2D6C300DB202B5F75193052BA61BC163C89FCD
82B40F0FB797E2C257E8D00D8F8DCF7CCEF36DD4FEB971CACEE30B36509B2265
08FA650AAE9793060FB3D54055D34907EC1772F7A81EEA1937E564B4D6D521C3
658BA56853A8A3FF6C336E80DF59126F815E19AC3EE5C6C6C10181A1FF210123
AFC15345ABFA7F2B2C4F2A2250EF633A960213F496908BAD563F1B979AB36E28
53E9F2E03936157853FAA70FBC4DB5D628571C65773B57AD11946785D405BC77
49C6E92EA5F0C369854A0F33F5D056E6CA2B06A9563D162028DFF9BA202A985B
78359FFE4A79DE1BFEC82ABFBB33231639741520330E7C7FD45DE3B7B448BDAA
FD9B4AA066C61A7BDB744A5DAF4E4E3FE528163F45DDB6727ACE77AF6D02D7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC196EF
729BB5BF404B88E88E169AA5732CD54207DA55A47B3855826396F4104A49A022
808893BADF86EA656640B9FD8DD7D1F131D312C2CF747D35FB85DE4C4B520EDF
15AFFCA053668051E605E96825738C4996CB3769A3BF11CA27B0493E70E97109
73F1F62A3782C23491F21AAA616D7A24F1824B59C686B7EEE397F0F3F04FE336
51BCC72899997EDC90E99C505A5585D4DE3A360204906947872A643372038F2E
13082839CB2A701F4C8906F3E3D6EF8045731E29DA6C9CD60F54AB0777483BF8
8A04EEFDC54E8F01BB78C57A738B775B98AAF7E932C58201EBF9A373623063D1
119403A832976D73D17591462C31F929F554BF05C909C417BFA6E1A72D89633B
0FDA064321595E05393598A870C13DBCE520C20E6591B1F9A12B73D713A4F471
9E66EE3C64292C209A832AF504B1BCEFB146B2C8C75483D7F515232086F5B242
F4576A2BDC7EAD2E0CF1B9195E0402C187AA699EA5DDA7F8D68782E329005CAE
B465B2B4A7CF342DB612D28E045A6240DF518DEB9AC56B94438148A1A9EC704E
7CD10F5703A946B61C526ADBF636B4F60DC8FF426BCCDE39947EE38E632A04A1
4A7EA94BEA9964127BC951DB04055489DBA72C24342D68B5C88E50F6254E6A4D
3B38558C6287C81A6FCAD90C56843028E2C8B6D05AA6861E3ABED84D6761ACED
E777F2D3BBEDA43DD2ECA72702A4357D241AA942314ED22A79084B9EEC298FF2
3590730BEC61ED49BDEF56662CCCB4D4BDE57D58BDBDF02AA83F6F0E433DE8B1
B9AB60D5D6CB69C04D69C37DF1DA442A342077AA9EBCEDA2BC978A7C055068C5
03A263CCB9596205BD11CDF65BD04EFA6756E7933F46521981284F0B49C41C0B
23DE5EE2C86E167E0B9E5BAAC206CE2D1A98DA9D17A20F6DC3C0D9585475BAFB
B0C2CC97274C6E5C643E53E9B1AF63287F73E3D78ADBFAD028161A0159472A88
111136A2C2ED57E1171A8DF334D2055D2D23C4D8576DE52C139D35475111D080
86D2DB01C9277A18FA3EF47B6B635DA12B2355A2BEFE2F1B71DEAB80DD43345E
BE79E2C76A183FD4F45E8EF6FCC11B2FF946C98D4809C085AC2D60FA355737E8
45C7FF01A6AD7B9D4FFC87B6446696282EDD1E6883F642BD304D2D1798BA41D4
F91213B6531F449C11B8F8644A15F3E85D8906BE2DEC1EAFE2DC8E4D91AE9D40
9500069AD6C141AB6E6A242DF32F60ABA700263C57C321BB014B0E9B5C6D595B
0CBD001A5A448EB4AEBA392C38699BCA1C0F6F3F7530F39920D53F04F396CE83
F0549A6AA9908ACE016F1773387D9DB1FF355411F603E236D6B1F082381154C7
4FC2CEDF0770869C51E252D15FAE0B235FB51680F8DF376B4E8E191E5EDBA636
8ED368696A7A76E746B3D70F4701AFA1519ACC89F74EECFA247153807E3CC27B
5FE08342FB4FA5F8C05966C69A3EBB52D9D6245D35B8FE7467AE82A4FC48B89B
2CB0F518F452B5CE1CBE762A1B066004D6974A3536B2CB4906ABC9C1EF70953E
83FA7C8C103E8EE58DBAE6D670F5CF0662976F7DD974C9989DCCB306FCB523E3
07D6F3E9A0560C188EAADF0DF449FB9D09F917E5CA703C7E92E30CB2CD741475
AE26EEDF1FA520CB01BFB6C1B68B57110505BF29411E0A908DB4E1BCAEF75C34
B1C0A67F447CDF00FF97794144F034CFF128597D8D9F48DCEFD046BEB6B55891
26EA294A6A813E8B116475D4DC435EE31256647FB9E2AB66765834208142C0B9
108FB9A6030063C3D390A2674066DBAD1A9C3C1FFEF085A2242A42A78E635E57
68203B733EBBC6F6711C250A7C347E177482198213D954CA0924AFE26330C570
0ED001146D3B89C5E9E908ED28166E5FC3BCE52C110332C24BC2D66EDD81132E
44128EE1BE623EDD5DA9A6E5217C0F69D4D0C42D85063F79EE76B68F6328A6F7
BBAE5FE0DE2D8839376A78573E72A1C1DD7E5A0E30F5090C322E4F16D93DAAAE
4EBE49554A55C93CB29051999282459697734840F8BD0B8A1CBA7B64E68CD0F5
8CE1D60E5891AB5BA93B1B72117B368C84661E8D470C8FCECF87E141E181D826
EA07BEEB69D1D202871BC2B15EEE8E1AD13E7308928E731360D641DACEFB5C76
812DDDFFA60953E618FF546613BF4FE23DFDA51D40DD9BF5DDD3CB175F3E1E61
2CDE864A177B0724F860C76601359426E7A7D188067DAFD599B78545A1AA4E33
EF3F14EDECCFD82F9975D8975DDCE8BCEF94344ACE8D6A425146C6A163680BFD
0032E9FA43C917D7E27506694ADD92C0936AF0B8A1183EDB32EF3E7EB4A72707
B9A257CEFDAA038197481474D8E4AA5E2CA3566EEB4CAEBB04D578FAD4737E6D
19987C190302B590568214515AFE8FC8635A09EEA2CB69139B143D5E6DB3C762
AC7FCFDA15BDFB2EDF7D6C6879100E7045B930267F0EEA9BE820E13291132AEA
C6E66322EE907D1C3FF4A6562E2AC409F8A6677FCE8405261AA96C0193B195DE
A33659D1723F744EE402603403B70329CBC2AC2753316F976AB67B923D5B4BC7
77A6FABBE669F7E7AF2D47BA0200B2CEE91B535F5668808E0C31A589D0764E13
8B8A76AC6C4A8FFECCA09AE8210DC0157687AB090CCE8249E41DC16DA43F79D4
C8CE6C8C9F8C6B7FDF17CFA1598DEFC33624D698D3FA83EDC6E25404108B39E8
D478C3E6CE58D9397D04459E0FD7CA88C1E4B0F06281C06C2221D0C892D2F9B6
DDBFDE36956CC1123445C8D76D7632947C4AB3AF767747DFCE7C298387EA5CFC
4363CF8FFFF663F42648572E9C5DEC65F147D6F231B461E247B679505797A536
2530BC0A0C34E716E9EA84AB5AC55D031A2A37B656F875EF932074325629DBE7
E171D1CAF50171AA18F27DF0CC841181EB23772FC943927B89D650F61F6EF434
641E74D5443843F1A6D6B49948E56F8497C8889F77AA9310C94B3C32142682C8
F71D1B3453F68A2B34528E801DF24B4CA279CA5CCDC91C186795BEDABC7C4753
2B4B80F77BF6EE43CFD08C92E2545C91DD9C1EAE6D72382DE07F7BB28A643B5D
8309C7B00135C817B691211D48DFB521FD1536BA490977B8B501D4F5B5587FF0
CACFDB8E48E6D1C600486EEABC5C34FCBD8F76C523B9AB083A54B8AACF1B02C1
AC0F39B5E608028FC42D3E0C3F20960803A42A8D8252AA45E015ED221212196B
81903914FCDCA5F6E378A970769B9587D0D3FA934E4B014F39C5E151F333B1BE
E32025A1B4936A5FC42D50363464906E800A620E0899A9F918B1A5EA0700AB66
12D3B1480ABD8DB58EF1E81CA3889334C97584E8E036205B149D03F82B7CD46D
9C1253E37B2F6ADEC5F7B556579F8115B698958B9FFA555CBADAF2CBF6B2BC09
F93F262B4D50A92969F863CC4E2CC4BB97B92FF480E0543FB75D1649D0A72873
2E3701A8BF70A3C63225A0055EBD6EFC0CDF2843A07895295A53B9711AA362AD
64496A84BF17140E56B942C3780BD59AF900275BB2957D602180678D9CEE6397
F787B06C71940AE01A0B5CE4C0F54C84EAF17034BC949604D635C05B82857A4E
F7605B82852DF995296C3156B4B5722E1CD9AD03379E20373C4AF6A699F4C319
CE41F5FE9119545EAEB5A7D086CD86CDC90FB6096867649E1443EF7A2AFB1141
83DA45BDC1410285BC0E3B26CC627FEB2A0C730A88EFF1B17C6A88DB0EC15865
0745F3F232E2318B42C34CE88E29E664C5A4A2381DBA69D72A7750FD107A1FDF
E7AE75FBCB698F21F27140C27032E69A6558FBE81737910F8CF7064939BAC615
C3A95039A5C3D0DCB573C959B444CBA9A28773D3C5190CC50D8A47B1739354A7
CA68B34BED13438D52596DD03ECFA4A0E3C1DB42C069893A6C31A74D176E3245
A42085ED0E087B3EBD6674B9BED328726ACCEAED6935F8862562FCE31EEEA35A
36489F87535E31962BCC7D45FE0F6C76C9BB8E9FE5F3A15F6A14201362BADA28
D8AB971FDA61227930256793A4C1DE524D1043033EDAB0BAFFA60209850E6C71
65561ABC5CFAE59F08ACB88A0E09431908986FDD2AE953C0F9B449BC0EFA035D
CB5835D2371186932010FB09203225E917FAC867809BD2BB91F84CF6F092CC8E
DFDB3DC15E60F6480B4F474D06FECFB6A54FA8DF6A9FAD387608039589250160
8B2662ECB68BE67C7395841E42DE3D9FFD33DECC81A2BDF0782F446A184E4055
105E88CDAA139D4BA128E495360AE700EC7B71B6BE78667D39221E88C48B7CB5
C1256BE1BD2C3CBCAB5465F186829F239E6A9C4C5BBC1311FCE7C28C573B585F
27850BBE0301F1E90C5CE14576DEA799615BFDEA36AB2FE8541FFA303F517479
A8B088EEBF33E83B28855AF26344816B05799CCC457270F9C3C68F03C8591451
EA9BFE6CCA5207EC38CF04C23905E9183A562D7A8C97E925399B056FABDD7948
A35D213D48BDC851B23DFE3772EEDE9E3CBCBA5DBE58A899D58F4866AF26ED27
A912C3E938BE00EDCED834ECD91E475FD9591D57F70A72B8E13307BF960C40A6
56859ABD4B2579615C959152D06CED5CA945324A72B560A698D9D90989DF84E9
111B5759A8B64E65D719A8EB9C692E2E9E4E05BF926C37409B0D1C0E634FE8FF
CE889ED77E9E60172DC5748F5423ADD67C1681CC869BF46B6518CB6FFDF2FFD9
11E1E99C49321EDDBDEB51DB3241E799941D76FB01162F8B9F5A747FF0F71F5B
C8032C16BD276819A09B3BDC340D13A6A10E33B955B672CC438117E855FEED15
772D75A1521C1D011EEB521E4B5A6E2841C3F0BA3BA3433832CFD86F49702CDF
810D8EF4F80565F15FEFB88627A70EA9AB7541DF02E4BC85270C2BE3760D340F
DC0F781B7F75C87131315563620A6FB033776508F4688432B49836E68F65512F
A99BB57BF83D604BB87AD9F0CB2AAAA1074CB9161E1398EF811B2898D889A581
FC061B5EE51D2DCA358835B433DB736D69D0E703DD83E714B2121D9B809B1218
E2865BCB8AB46A6C5266B6748949D03FF62B8E8C8F14F743F32EC86D98EBC3F6
8AFF0C3EBD743AEA6D81EA2B86B97D5C875220339C369335003A5A4C1A2E124F
BA1971914523489AD6E8A63F554A6EAB5240FE19E5D66CFE751E627F69A4735F
6B86E58DA69E111EE4BC60F8B88D3993DF034502C8A20F8436B8694773B13ED5
F95A61FD2FEC4D73D871AC73BF447E5F003E3688AA060A33FA7E8C687EC1390A
F1464C79C09924672E5F2D7A52D07865579D1C0CA47B9F52643257FB1868CF00
91BD7232F2A2E2373FBA75BF7385791C8F5AF54281270098659919024E650880
75FD869188C14C268C3B766C3A7623919062997417D2F44C4C2394A02528F678
0CE0C6C49DD263B8BB809FD3E0F492CE4F552965FF40E3AD0549AC295DF6A8CC
3BEC2B171457849EE298BE29EA27CC02CC2F4E0676455C10B2E84925DD548CFE
D1FAC45013A9E58A478DAA77F17B37D9D45997ECA524E5CE660BB78B36A3AE0D
07BD5110A41CAE37517EA94BC19B51E99DECC553AAD21D106991149A82625EE1
7419081BEEED894616B3E6EAD1B88285D93D86BE861F78416CD3E1AC3329EF09
C2DB4E5541DFE908C5FAAAD4A7FA1B0AFE26891CE48672E4EEFCD659E8431EF4
85CB5C81E337687D716D753A081F8258B1DD67891DEFFB56AF68E7C8B23C6CB8
82DE6F97C11B65F46A8ED78C5EB8155F45F3A43A096B682D9AA3FA11311048B8
8CCC5F66A2B146A9A3B8733D6E6D9DA62B190CB8428A5762C18B7FE917D4F74A
7CBE3F1CC893ACB4A946586A7E08D2CDC40C25D5E14AE5D79513956BCA26D028
FA884AD65F178127767CED82CD8C3D3B8CA2BC595D585A4B370C124CEBF3F1D5
C9E123CC99B20AEDCF820927BB74143BC163856FE8688AD170857B896FF31218
3FF99D00E2F440C755F27F3253CC3D952AE94F96E631633C620420E38DB1083B
C0658D7245AB5835134FA2D5C3FEC7ECEB7C1BC6B9037E969E851E4FC47AEA90
5B7E7C0EB61C6EE178537452ADE77CE62F80F6488AB34150B586A7C814332D62
F6F210B0A65347084301F83262018B295135C162F7FDDEBAB17EB1A9E19BBEAA
40EDD2163975D43DFFE20DE4CFDD760F9EDD7FC5AC77BF5554D532D1D2D8AD32
E53CB43A65E9814CF1A1A5AC7614EFA38CEF5610A8AF3F8082ADFB432AC3B839
BD40C7D0001AA174B6D1125DED0742FC1D16C18B10112425FA54910ECD2628A0
83A82E01DD2D89794FD537D7AC87052D8F359DAAC3ECF9F17DCF47EDE7F0294A
2DB8ECF76991EF4EC1DEB3455161756D4DBFFAE37A8A1BB70B9167A39834AFBB
430FF8EACAB40401BF8060AEAD510682F6B2C7B5BB30D001E18FA43A7ACBAE1D
A99598DF00B742B9C9EF8FC2A41B59663A83A2AD3ABBC372C733BD7033732FD5
49B96C3A7378FF516D40F36AC5B1C26CED87F7348FF9E2818848E34A6187C4AA
B082AACCC398C2ADFDF87C60D06EB399334F1F7CA5A5FB3931599327FB03B33B
446CA65F1C9824DC65FE97E1F81527187537505F99B1571AAAED118CE7969EF3
891A90C1A31C073C540EE8EAA62FB5D17FCECBB5B1D04B3AB2EB63C2FA3DF1DD
6EC81790250E954B4A6DA6617E80B263086B70DE86F69F949577510B091EA039
7475AA9AF85DDE0196DA5DF8B0F0FFF8079DAA5F39F60EA84D5F2ECBA3D68BD6
AE80B2CF0D32127BA39E7E045BA850674CA56E16422F3D18D2E50399891D9924
3AB0BD8900E9A1E4A83B30632D041CC90BAA32C8F5D3060FCDC58C6CEF5390AA
C0BD0FD7BE0DD9EF5682400B4169D4B3190018DA3191DFD0C105CB6F65F00E99
6C58D75372A17728463ACE89EA4C1B04233F15E77F47CA79180B3CF6D707767D
0E7121DE4C49A080B59D2727F16DF9BFE271E10AC4AE5937EC7F21EFAF0C8A5C
E92CAF025D1A4D99AD2892210217E58A459C0129E01DBCFBB1DBA11F52D88978
10F6F26FD2445FEF435C8C4E9851E78CE0009D42DC6D1F5F42D50C165F894668
6A8C1892850C208C1652044993E8D794C194FDC0DCE1FE46759C746406002FA2
421F56D5DC8BA6F44E1C7F1373ACE6172017035F05002E4A735C035689876E91
9D7BE017E7CEED554362F42594D2484A15332F455AED4DCDE5F6B47B0129FB91
756B181525E64BCA288DC01E827E7E0ECF2E051C3508D19277D5BC4DDAEB136F
DAED4723492E23D81EC2B38D9DF6647FFF301A6A5A7F46502DD3A06D5B03DD7D
4A72168F3099D5530F0235EF9E7FE33DCE226F5C7FC1E2BF7D52F687C8887ABE
55E1DF4C58B6E1FE34F0AC9CF7C7E08019F388620BB064F6101EC696CE41D005
5D2E4F49ED06DA756EFB7AB8EDE0AD1940AF96AFA0B468685E77CC9597339C36
362A48625792E2677951A1CDACD226DD5846F75D8EEFD8AE58F85114D2BB69D3
5F3F082E65F5E7001EFF9F21B8BE1936ADDE147CF26A4F7E0221CBF19E7F2378
84B072A32E8D68ED2A6D95052DF987539F1E6E38301A2ADF36FE7BEA62831AAA
128228092609828A23729E0114357F86AA1B92DB09038B815B1FD8670144E10F
3FE1B942D799343E83CF86660ABBC6E67CC3D196524D86A21CAD42668F7C2822
8ACED22D08D5891DA247D7BD66D5465481223CFB5F284462B9A62B5CAD9D5001
7324C4139ED4655D45C966C15BE6A896A0922F58E257F5DCF04AAB18333D1B83
0590CF22DA6BD562A90D23BC0BA201F0A23FF6CB1692A1C782CAB415719A78EE
BE5177D7E5D6C3497092F1A29607E70E111C67416EC7E38B8644FC558AEF0D94
1CE7D4A84D3D19871BFD2CD5C66906028B73D94007C0C94ADB9DBD9AFBFF0C59
A98346399477A2BFB364BE88D7EBFF50AA56D028E0D64CCF40F7ADBCF6031BCB
BAB5ED3ABD42586B1B0F18791ED5CDCB0EFE22E3129263E01F55881CF3228F6F
BE70A924A9314FD91E3A17429366B858C0CB254E65BD0AA6F3355819580C4730
C6001DD3FBF279752742B588B26E40DB9DC4DF6D23ED032AE5FB2489514D8762
41EE0F4A8FA77FA00FA50D5F41B70636329EBB06FD05D89D598357280DA8D775
112FAA19377BF8C5E744B4CA910BEB27E43B48DF19F096E184F19981E0FA860A
A1FFCDCA515D09A6DE88EDC0904AB269F26E6E54708EE54C44747CAB78B7CB00
3BCF5BF1DC514975A677652AFBD2CEE2BA5E21625FD4FB2BAE034205A012F4FE
DDDFA14C8F8D4844474BECB4BD4582CCB1F47BA86EC218DCD84A44CE54924D4E
07A73DB0AD2E7DEB47E0003C41F1C635377D3B6522C1C9ADE831E33F0DCBEC2D
CFE2995D54C0EA0C6DAE88572ABAD9F57983EC5BAF625FCEFD0424D93ADCEF11
02BA543AC717B1270CB3012E15E126637CDFCC6D21B31CD1251EB794D2935800
59CADCE07380CAC86BBA5E5E51531BD01B94FC7F6D9959CBF0C529AD24FE3EDA
EE41B63C3F1E17EF92F292FEAEFE24667094A2411D9011E370BAEF745F0C8224
F35B529D259530A07E92F91E38C4DF0F3CE0024593E9BDB15FB2EC3F1A7C9491
AB00F82BA0D4D9460D0DF560EB2A768DEC854A89C03B61ADDA0392270F63E42B
13516E306078C130CD3F7DC1E9AD14F43C215EC00D04A5455C65C81DBA0ABF13
343F05D58AF3F8EEC35A84C6678A79BA735C8BE5515488FB0E0A0AEF955FA2AA
05E0F122F1C32C5E2848DA7E309C15DB7016A3899C5AA9A6D6CF9E33C065F739
A4A2DBFF262AB901CE082192F9278FB480425E14ED2D4350BD92491A70273AEE
0886312A858A5956A9E6BE1B071C4750706DCA8AB16FEDB7C91403B52D315507
DFE3C23CBE98466B5E8540D03297C98AA75BFE7ACB95A0352EC28CB954BEBB2C
21135A7074BE587268FDAE5D65E914AC76F2EFD03B1B43984691F3EA3B2B1D72
A90C9EB3DF8EA53B0B422A7C066A693281FBE4F3995F114F84622CD7AD94B001
8BFB8BB144B958028E23BEC1BFA80199E0E8816EB9778646DB2AEB1646210D30
E6F50399DF3C782EF54C332A4A97FC53C9A467D6B372EB2F1B51F189BF4A4BC0
4FD7636BB0B4632E5C3BFAB21D29B149AEF785E2C44EAA0988B0BFE303135E00
AE3438820DBE48FDF56CB70AD79B7BD2AF069275935D3CC4F488F18699FE603C
9258947B5A929A2D8F041AA6E98132F7F250DB5FA0D9829ED86E83595D22AAAE
75B16C1D02D86AFC48FD8D3928794968A653B5E0DA12261D0F74C92379C003C6
5E0054EAAE86BED8974536E8367AC6795BA49B8CF96581A0F89295053BB356DD
48CBDE46BE4CF0677CE4E9DAB93DB40B76BBF223F47C6B168CB7263CE2F2BFE3
8C56FA222522CE2F9B29B38A429F8E45A46E50F9411CF3B91D05D8F14ED6B99F
0D8DE6171700AB210D4742C3B20EF5B09AF50A1FB1A1531611993840C29FBA9E
A746DC41BDC0DD74CCCEB256F5D557571D6F7FCE6F824DE8D12F4981060D3450
ECDAF201BBABA4834A6E4EBBAFC689122428FBD88C46258484638E8BC8B095FD
2D3C2C79292D44AD6C156680A454DA9AEB68FBBFBAF0CA3E373B81323A7E861E
561C65050DF7EFE45783E7229CAFFAA296E582D46AA1D07E3E40FA6771DEA96A
9FDF68B469D4D012E609643A1B56FE5DF29AC67B02D586C3149B6B5FE9C591AF
48B6607E0EDA2B78BCBD53915AB1167D2CDDDE6D2EEA43601081156EB2F8E9A0
5E4400A36DA5E39BD4F527300FEF3C7944DB77A907D75B9D4ACB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C859062D7505E555EC90AD1EF1B452C0E871C
C17491B70CE0B7FD64FAF6A044B8162BA39D78510AC4FE7CFC716E9B61193EC8
1C5DB885112AF8ECDD5D9D08AFBDD7A3F7B5436480D434413B7EBDFEEC209720
BB13E75730C6BC6C00338452CEBB56C8A0191E7C77D3605C7BF520C8721763D5
3AEA49AE05CB0D7A5CDBDD7390101CC6A38665F8A220C24548E2DED71B72A48F
6F975802F593E26B7DFADA15E91BE21CC58E63FDD81B1CB6FC331F8FB67C9AED
9400082942A5C533BBC5342091744EB5AF7CF0ED0665F1BE1A2F5D383DC3DE34
556B9849C8602C5BDAC325B0B1F1862BDD677B807FDB680BAB3ADAAE78512210
C4E84029D93F915981011ACD2D6EB21394C6E68DC7145A17B622D4C9687386E9
6FE4CD02ECA91D8F984E262FDBA85AFC9DF867A601597F9DA679B83F9EBBBAD4
BF2AA68CBE2F22356938E8367A8ADC71ABEDD104EBDF64DBE5620DA390480167
E45ADF1D9408B9B166673B9788D363FFD3CBBD1C112B139EC14F340C0BD321BC
BE794BEAE2FF20F16C811456763C58E3D8A4A35FA235CBB56AEC5209AD6340E8
F1B7BD94D39DC14FDED1CD00D2B75D4A33135AD65E0311D00A7FF64F31505AAE
C9170516D38C247C25C8538FDAB6250BADA65F839B452EAF1B892CAD8605DF0D
C4BF3B23D583882D64C73A1A8AFFD11121BDA7FCBA653F40FA2CD6A8D89EDEDA
0B8E7AF4DA059925E3ADAE40C41A723FE9AA17721B2E0EF9EED79C6462CBFCD7
EECD408B58C67B5A49AD185A19F03A41B814B8DDE80D46AEB4F109FC99CBF5AC
68FB4745740AED1FA5436E30669CDA65742ED08E4654F886F61DD7C7EE5F015B
1BAE83E79E3BB86BC0CFF2011CDF1C66866465AD9DFD2DD60010ECFDFFD11F2F
F33C274F99AA13FFC0A934D7AC1C36197C10C714E80A1933359EC1BACBA8B2CE
6435E2B5266D26C87E14A3B61320134872098D5E24E0D67CE2A93EE70B06D201
B7419F9AADBE62479AA7E0A5C8B360F320401B2D22E3BD0A364F4AC9FE64C083
6B09C674467248801C93F72BD152843B824961969AA1317F148EF820345C143E
B8F2A289EA703C24663DD7C20338979BF25A57BD3B18556087D7A042518C43DC
9DC3A190BA07DE3386D471A1D8C933056D7B3B0C40E29BAAA2E318DDE54BD60E
9851A03648C7134605FE9F3279784E8E75D396E5D9C690A1E834E78CFC375BC1
6BA77C503B9544D07F68CE32C2D874FF51D943104AD72127FAFCB5AA0AD2CB72
7609ABC99E6E73ABD6F3FECD12B5C689DBE39DF317496991B100734BEA33E4B7
88EB9E327930516EEB5DA76F4B20CEAABC9723B6E34565BFCD020CD6B515522B
CE7410054A54D76965628C16D06CFB69AB1E13576BDC446872C97CBE03C44D9A
9C23AB775EF86375D6BBA2CE1180857992FE8722AA8F14738D19260E8053E972
9ACBA338A3580225CE02ABEF4789F1350905881AD6417E215513F8A8224D0982
B5C99697A210FB5F43BA7DFA7A6B441D29E04730971EA23BF95C4A3A8932F7D4
7100FF8A7D4BDE1BC2B1D4B34136FDF936F96FFC813FE16DA5F79B0F2B34BC26
0DCE7E8E80C3C81CE748D1B9235993843992151BF11BAAFFE6876E4E770CD78B
F0179451C84FE2CBA826D2FC774E9941C942A3DE5889ADDB31CD4713C76C83A9
C192617E8D2D980F5D7EF3BF1D1EC77B16FE34E665F8D40C7430DB13DE0E31E5
E08B89B0E3941460CCB0AA4CE5F70F9920C9A597910685A9BEE4CBA868D352AD
C10A564BC2233691CE6A5D66A866BFADE0CAC16C59006D0F76D02BE55B48962C
844CABB7BED489A190D1E8539855ACD878901EF29C8C1E3662B336F249CA6F81
6E510032AD7E3D454A365D1D4026A3816DFCC1572CDAA62F6537B751236084CE
103F56B0896C9A2EF791646E3A83E4B220260BEA2092028449AB76784CBB9152
5EF32705424E3C20E90774B21EA40BF26E9702ABC51525B754F2BBA92158C3CD
36EE89D88A6AE6A070411208FBC7D6B7D6F757C202000E691852A6833B4C2C14
2FB2003D723556073465C30981210962424D9BC090DA2B21F298094C479D4AAC
D3F8F6AA8017D950A70713AE1F11BE6B35AB339ABB48DD4E40E0EB6E149CCA77
13C12B3D3017DB9C1872D93F6BFF48625CAD33C22003EF3802C74E5F5B665704
16BA1BBF3728A6EA9FF9D29D34950C075BC8B06358F6AE3E51E4D673F09576EC
EAF1CD1D77A50542DEBFE49BE6CC438036AED93D9AFE101D44715104C19AD63F
2DA95091108D36C8086072F207D2A2F9C9AF247C1A705A84EEBE91A26FB41AEE
8A2E2F93FCD7BC0F7DC9E17F1834BFA8B62AA07F148760352E7F6497C9C44F69
43EC1A15312B2599C7E2BE438273CC32CC46976261403855815D8F798403DBF9
9FAB4515DA29F183AC857EB50E62666F649434F90B797221D94774689E83E540
6F5D9554C12846827144E85014CE922B9801C1C1939D2FCDDA6DCCD8103382DC
EC91583A2C59F530DC560BA854234631EC5B8661E7B3514429FF1591E4D18BF9
B3F3E0842FDCA761F9070294B5158F3BF4C21DFF5DF1470EB935F1B346098611
79AED58C2B266EA36FFA425B80DCBD21D8469E6920DA236D8D4E7B4873FAF5B6
276480C3F1D06B4A34CE983657F78257CE77F407366AE06337119B2CBB45FDA6
0F526C6C598BBB6C810B37F3672F22A7DC5E0BA2F62D9744992C7811889D576A
97794B1E9FD3E9E8CFBC300FD3CDA7489F03F9BA2DF35D60D0E352D1765DB535
1E152CA379FF989EC31D3058E6044EAFD7F1D3E0197151EFFBD0C3AC4C36967A
941825BEAB6FEACCB618A61188C03BAC8D65BB79B73DF988E4DF9E222C7E7090
BFB61B710DDA6CE3A3B360D159356ACBACF63B4718CD062174DBF2CC1CA231B5
538BCC0FE5AF262A9B23992492626D803FE071A2DC7981C82914E40577DEDD7E
A8BA95C479340B9E18848E9E29CDE59B0F792235480A76AEEE703987F37CE218
FC0194A767298C9FF511E8DE1A26089D383BDBBF27066BF597F22A1434E7D661
083C7F8D02F91CCD580EA19FCE35F3CA0732C984C398DB687DD0868699E20655
FA28E6902A5FCD732E2811C33A3468D93ED22B08D256DB18D7564A10214171DA
A063C19C3BDA77BBA38E5749058E3DD495F3947BC776B062428075E0E8E96459
9A398760956CCA98D3BAAA326A725F56160359E166BF88694D92194916965CA4
B0D9F2B4DE017D2EE6B73A28813DFB7765742E60E70E5C57A34063103B89A932
C946455256DE821247F764D84C98F7769E0A6E389AD0B2A5D10CD4C41A40097E
F75F4023B8EA6D147D264E48E69939FDF48DF49CBE4C70D074E4345EDB256654
63433953096C7C0CC05409C44B66AB08EEB73BF979B76603F1D433F754D333AF
097501697D824D9EAC0CB38E3BF0CFA30EAD5B5E2BBC2F802F00380117E10330
21C80E3B91D17245C61958E171FE21D4B56D5227BEDECACFC93D549A606D7F96
A388B5648D81DC0870CCF2E687548BF0022D4F04D9D42176E87C9CE253A133D0
A1A98701C44FCDF889F861CAAE77A647138A1D7C7BEC3CB71B492B2694655440
26D750AE4934135DBD9EF4901504778CC6CAD142D172F4DAEC7BE571C03B5C84
2D70EEB62758BC4B5E164C7489BAD8FE65D9FF1C02EEAD0A85FC9A009B6625CD
539E9BBF104B88E0F168D4D12950FAA27C404BE79823737E3039E3125860EAB1
BFA63540F02C2DAEA752DE0F580F2A8DC8822C711E91208FB0555215102A5831
D837D5155D27C4E0C0AD437340AE1ADF0A1436261748A993A87998DD9D32CF13
9FDAEB78FBCB7A5E7D2784A460B4A25D28A136A07EED75F22A4799C741063793
BBFCD05F9D0C59A27E60205CBE8A3A620B517B980D3B293978494B6441F33A55
97D72C6F32E767399F50431252F49E2B14E268226B39CDF4A2D3A6AF0AF45151
68A90CD65F5E241C3120DB4A9027FFF1837F9BA03BA1A72C2598F129DD234BCA
51D0AF84DE1DD07CBE3250D043C1CE13148724E7E8894F15F81A081A2957D3FF
A255A16D216F135C1A8C2D747341B52F5EA55CC36F77653FA6BC06A89E2AD6B6
498696E89827CA26A2E368B3F5914E6B2D81EEC6826839028D52758866B4235B
6C28B2072C4A99847EED92F1CD0BA53D092C42DDAEF914557AE8D54DEFA2FA8F
1930FC0476F408650149052B914B56D6B3AABEC68402988694E113F1290039AA
8DB01243D5E1476986FEAD3C4B017B22E02854DBA962962861A29E7D1CFECDC0
8CC63F4C815111243A5F9BB0E5D250D06E79FB8A30C73A18C490B1D1BF279F60
60CE2F18B62BC96D8ACC85B9078F070F1BE9F76B3AFA5314F7B9BB5FCFDE7796
92D67281EB9BC9E6F3C51A50195E397CACFDA8C33A6F0AD72351054474A341F1
B1C967F9E6D970F3E5FEA0DDAE690CE2270267B18FBD8F2FFED9AF510DE8C6C4
34E442EEDFA52F1981B8AC74FD46F3B8C3B0C33385D5F11A9CA84714F6C64AD1
8BCCABAD80BBE56266FC28D6435FEB8FCA69A1C96C94AEE8A0E61D8FE9CB0CD1
4A24C9429C0527C45B34B61F4276C773715459911D881CFBCDDBEF05911B631E
9E402D57DD91B6E385AAF50E9F75269DD58EBDBA9BED472DDCA09460893B446E
76FD4F61333F4ED442170D43D2BCA929D0DE3BB879970ED5E4E3C78C23D0CEE0
22E2ADEBE4DC0493CEC19410E6599C67349DDC8D9E6DA519B149C3A86E691627
5FFABB8E9770C375F999BEA11D1B63F90767BA7A1B7D2AF923CEA199AD01BDF4
90B13791847C0905D0118303F6C71B3044678D9F12B5A0626C98102A86D7211B
92179657F7CF695CBDD2F53D3B84AF0DE86B8904CAE6FCB1C967F9E6D970F387
FDC98B829DE6E000ECC2E100D03D3A2E577FAFE3B13D8B95D702E0E67FE4643A
BD24606AD1EEE9B1B3534A18B3D6B66EA957449EF41EB6A83487D178DCD15B4C
783C1AF9E5EA87B4CC947ABD2310686FF51314E30BBB606804AA026CCF6AA4EB
5AA477A924287AA77FA539DE2DCBAD17A361BCE9703ED110657727EE11F47035
FA1CA8C5B0E8A42DC7F08BCDDD98CB487B44985B00B4015B222439A1FEDFF8DC
C7862C72FB8447833BAD367E4099F979A02A02C5D415831587D70C5BC960F649
D4AAEF8AA9A647632437DB0BFF807265299E506AE17374D94B03324C760F3566
DA23A50F6E88B31D0FD48E1E4E6BA9DC577DF8F4B125C061E8DF2FEFEDD14F06
439A16EF9E7917BCF80DCB7108E03CB5B3382C4D6DC73DEC3DD0B956F1B78E1B
6E1C682B93C32829D1F9410EA906AB9488B222BEBBB9EBE3EAE60AD0B0EC4BF3
3699EAE5661BA00ADBF062F17E210463229691D0B0EEC67C30B81ADB0E6946F7
59980A9F5EAAAE65709D6BD165B9C6A43EC362F2D60C94064E38A98260BFF202
35D4E655571B40FE4E56EC0DDF9A7035153EDDCDE73B6F169CB90C082CE90B11
0541B3DC197B096BE1D36429BC496F9E10609484847CD2CFC54F788E1872153C
7E2FEFB05D10F5C2E1BED580FA910EE0BF989EBB0755975369EAE03558416709
CC55CE539BC35CCC9DEF866CD078E2118397DC1E2A4BC75B4BDF40F17E08FB5A
383E7CAD21326BFCF33E5EDDA22AF523867BEAF97CF8D7F3E36B587C8CF3EA5B
972CAA948ADE8C2907AD20CACDAD4ED4EFAF5240437AE367E7FC85E6324860D6
A9DABC4BE22B74FE346D3B3305FDCCF8260FBE0CBDF93A81D409168CD508C030
65830DF44CB29F83A877DD847AEE652754B1EB6534C8B7166ABFFB516EFFDCB9
0E54420EFA8459F242499716DDFE5C9BD0D95A9E0EB8721385500231E7237A22
B0CE90443B5C88A05BA7B22DC84E47C29C01E14D2AB91A3B4F148C3503B3157E
961FDF86C48EF5ADC1287D723922DF5C50E6D6139E2AAE101B9239745C20D2C4
E8573F14C4172EADE380F3272FCC0B33EA3676E4CEF29D6245C5F5AB9EFD4704
CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (nwdzad.dvi)
@start /Fa 198[44 2[44 44 44 44 44 50[{ encpltt ReEncodeFont }6
83.022 /PLTypewriter10-Regular rf /Fb 83[65 170[23 1[{
 encplms ReEncodeFont }2 83.022 /PLMathSymbols10-Italic
rf /Fc 78[53 6[45 47[60 71 6[55 6[71 41 37 3[61 75 60
1[65 9[139 6[92 80[{ encplrm ReEncodeFont }14 119.552
/PLRoman12-Bold rf /Fd 145[41 110[{ encplmi ReEncodeFont }1
58.1154 /PLMathItalic7-Italic rf /Fe 201[33 33 2[33 33
49[{ encplrm ReEncodeFont }4 58.1154 /PLRoman7-Regular
rf /Ff 145[50 2[43 9[44 37[23 23 58[{ encplmi ReEncodeFont }5
83.022 /PLMathItalic10-Italic rf /Fg 12[42 55[37 1[37
7[33 6[28 3[37 3[37 42 38[37 44 1[60 1[46 32 33 33 1[46
42 46 69 23 44 25 23 46 42 1[37 46 37 46 42 9[85 2[60
3[57 1[62 76 1[65 5[57 63 9[23 2[42 1[42 2[42 42 42 42
23 28 23 2[32 32 2[69 37[{ encplrm ReEncodeFont }51 83.022
/PLRoman10-Regular rf /Fh 200[42 4[42 42 42 1[25 46[{
 encplit ReEncodeFont }5 83.022 /PLRoman10-Italic rf
/Fi 12[48 71[53 4[44 3[42 46 38[42 50 3[53 37 38 39 1[53
48 53 80 1[50 29 27 1[48 29 44 53 42 53 46 8[72 1[72
8[91 3[36 4[73 1[68 7[27 1[48 5[48 48 2[27 1[27 44[{
 encplrm ReEncodeFont }37 83.022 /PLRoman10-Bold rf /Fj
89[73 43[68 2[107 3[60 4[80 2[76 41 37 3[73 80 2[75 6[96
2[149 8[114 9[114 9[44 58[{ encplrm ReEncodeFont }16
143.462 /PLSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fj(Zadanie:)54 b(NWD)-94
117 y(Najwi\246ksze)g(NWD)3287 153 y @beginspecial 98
@llx 530 @lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 206 3969 4 v -94 314 a Fi(XIV)32 b(ob)s(\363z)f
(informat)m(yczn)m(y)-8 b(,)34 b(grupa)e(p)s(o)s(cz\241tkuj\241ca,)i
(dzie\253)e(2.)f(Dost\246pna)h(pami\246\242:)f(128)15
b(MB.)150 b Fh(17.01.2017)-94 513 y Fg(Dan)n(y)22 b(jest)i(ci\241)r(g)f
Ff(n)g Fg(liczb)g Ff(a)747 525 y Fe(1)785 513 y Ff(;)14
b(a)866 525 y Fe(2)903 513 y Ff(;)g(:::;)g(a)1090 525
y Fd(n)1135 513 y Fg(.)23 b(Tw)n(oim)g(zadaniem)f(jest)i(znale\271\242)
f(w)g(nim)h(dok\252adnie)e Ff(k)27 b Fg(elemen)n(t\363)n(w)22
b(o)h(na)5 b(jwi\246kszym)-94 613 y(NWD.)-94 887 y Fc(W)-11
b(ej\261cie)-94 1069 y Fg(Pierwszy)27 b(wiersz)h(w)n(ej\261cia)g(za)n
(wiera)f(2)i(liczb)n(y)f(ca\252k)n(o)n(wite)g Ff(n)p
Fg(,)h Ff(k)i Fg(\(1)26 b Fb(\254)e Ff(k)29 b Fb(\254)c
Ff(n)g Fb(\254)g Fg(10)2542 1039 y Fe(6)2578 1069 y Fg(\),)k(oznacza)5
b(j\241ce)27 b(o)r(dp)r(o)n(wiednio)h(d\252ugo\261\242)-94
1169 y(ci\241)r(gu)35 b(oraz)f(liczb)r(\246)j(szuk)-5
b(an)n(yc)n(h)35 b(elemen)n(t\363)n(w.)g(Kolejn)n(y)g(wiersz)g(za)n
(wiera)f Ff(n)i Fg(liczb)g(ca\252k)n(o)n(wit)n(yc)n(h)e(do)r(datnic)n
(h,)h(oznacza)5 b(j\241ce)-94 1268 y(k)n(olejne)27 b(elemen)n(t)n(y)g
(ci\241)r(gu.)g(Elemen)n(t)n(y)g(ci\241)r(gu)g(nie)h(przekracza)5
b(j\241)24 b(10)2064 1238 y Fe(6)2101 1268 y Fg(.)30
1368 y(Mo\273esz)36 b(za\252o\273y\242,)g(\273e)h(w)h(testac)n(h)e(w)n
(art)n(yc)n(h)g(ok)n(o\252o)f(70\045)i(punkt\363)n(w)f(zac)n(ho)r(dzi)h
(do)r(datk)n(o)n(wy)e(w)n(arunek)h Ff(n)j Fb(\254)g Fg(10)3648
1338 y Fe(5)3722 1368 y Fg(oraz)-94 1468 y(elemen)n(t)n(y)27
b(ci\241)r(gu)g(nie)h(przekracza)5 b(j\241)24 b(5)18
b Fb(\001)h Fg(10)1277 1437 y Fe(5)1313 1468 y Fg(.)-94
1742 y Fc(Wyj\261cie)-94 1924 y Fg(Pierwszy)25 b(i)j(jedyn)n(y)f
(wiersz)g(wyj\261cia)f(p)r(o)n(winien)i(za)n(wiera\242)d(jedn\241)i
(liczb)r(\246)h(ca\252k)n(o)n(wit\241,)d(r\363)n(wn\241)h(na)5
b(jwi\246kszem)n(u)26 b(NWD)j(znale-)-94 2024 y(zionego)d(p)r(o)r
(dci\241)r(gu)h Ff(k)s Fg(-elemen)n(to)n(w)n(ego.)-94
2298 y Fc(Przyk\252ad)-94 2537 y Fg(Dla)g(dan)n(yc)n(h)g(w)n(ejcio)n
(wyc)n(h:)-94 2662 y Fa(5)43 b(2)-94 2761 y(4)g(6)g(2)g(9)g(2)1890
2537 y Fg(p)r(opra)n(wn)n(ym)26 b(wynikiem)i(jest:)1890
2662 y Fa(3)1827 6155 y Fg(1/1)1278 b(Na)5 b(jwi\246ksze)27
b(NWD)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
