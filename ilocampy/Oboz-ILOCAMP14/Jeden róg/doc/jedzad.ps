%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: jedzad.dvi
%%CreationDate: Sun Jan 15 15:00:39 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMSans10-Bold LMRoman10-Bold LMRoman10-Italic
%%+ LMRoman10-Regular LMMathItalic10-Regular LMMathSymbols10-Regular
%%+ LMRoman12-Bold LMMono10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips jedzad.dvi -o jedzad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.01.15:1500
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: LMMono10-Regular
%!PS-AdobeFont-1.0: LMMono10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 778 222 0
%%EndComments
FontDirectory/LMMono10-Regular known{/LMMono10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMono10-Regular)readonly def
/FamilyName(LMMono10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /LMMono10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-451 -316 731 1016}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A2B97A25458EAC07B98B8F1ABC91ED489DF5A
340A9C333CA5AF409E52EE1BA5629A1DA85B8B9EA3150173A28A696C6B98D060
4CD8AE5F032FC97BAA1F5394B526DA51B5521D60F8531E0E5A437F5E00E9B683
3F08ED5C6A216D2CA9C1806AEA6B335CD03C87CB35115D28AF52BF955F7F349A
C9C2519FBF9D866A7CC0AB363443FFA4831A9FAF41181CC67437D2315BA0438C
2D2387CED780B0C89728BF50FCD44E9E83FAB34746B8A91F611A7C821C73E49D
7061B681B3A8086D36072662EABB0D12DF1A344E0E619F61E9D79E59F7F12ECD
902103D50AAA3E5C951FBF72E96E17F3DCD91CB14D7F302FAC08DE542A661BE1
76D75816F241E180B9EDA0DD2D77FAD91072D2CB4F9CB10A0042170ECAE66728
4A43C5E849F8DBC4655095F039DBE7FA1DE67A9DBB1891D618FFEAFF67FE5683
AC22D2CA7A6F772481EFE1BCC831A8A1C73DC456E8581871196DFBA4B0AD584E
FE85A66B9E4D7621073A01B4D0E450338C9077A6808156163FA45AF5640D6443
42DFBBF83113738F8AA0A8569EC3410F8B1504B5A572DB5855C9AB6CDD88939C
3EA9D0DAE1E73EE83BA58587EDDE46FD34C7A4E0F5CE13AAC9D44D1C598CA95D
B1BAF457820D26526039322E083AAAC442E04290E43ACFC73FA0D289AA732544
37F9CE9AF092D5A976E3284F00E12B00DDDBCA7D9AD3389F03A93CD03A8ED655
79B16B0779800ABA08EF65FD4A17CD265E56C22DF32F67764467507F67E709D5
16B22CCD4111B7AC2A2DE413881E3770FC0753011C98A62B7A5A7855D7295C3C
E4519841C6D9365A9B2A47408684E1F3020DC3A7B2066E895AB7271A1C10A070
D345F88A54B61C09DAF4947002DCB9CDC539B448F25D5963F0087D9276C36566
1850D76D0F9BA36DA698F5B60C1FBE717C3F54435B4FDD7ACFA13B5E33A6D8D1
892127D458D2B3538B177C63AA22A28F3202D1F3DBC78DA20AF37C1021E866B1
13B44CFDA6385152AB8E956ABF92CD408582617494C18F3EF7B1ABA777DA8ADC
5E27B86B5AAF00C4783190E05CD5B31BE560D032425B32DB025CC66650E13896
DBCBBA53D12F15CC29244B71059F2319846FAFE9E509B0CDD5AE2CFCAF3A7192
1DA5F6093A6CDDE716237E7C83C940266CB994EB977112BF47327A70393F396D
2DB4DE620EF95475925587E00355122EC05E77F9A2F5A5D4E544B79EC00B278B
799FD5FBC0040B0DB844ACE08F8DE270E535D316ED13DF03C99757CAA452FAE4
6DCDAF8E99CF8685EEA1537E8E962C4B9506054A5911CEB7ABDE837B551650E8
89285442AAB9A29D15BB665BCEBA89FBD98CB518CB63F1867A7D6E44D9E4187F
6C14E107AC2BD2E5BA6E9C5DF1EA2C15AB002038DEC6CF1D2FAAE9440B58A6AF
1B0838D8FD1C087564AA3F54188D11AF8339662D164EF37BF8635D5E0A836E4E
9CA4E3B35C0BC7079A2CF2E2A1529550D55D4473091F0068E431EB425FA04DD3
15AE10FD3A72CBDDE7EDC46FC8BCA434A5264E6403BBE783360B955226876FA8
BF306700778714A8D7AA7699529CECBBAEF484744DEA33C89BE01AA3AFE8B3CB
AB88C535BD22357F9068D0F31A2535BAF0751997AA548B74B2812D6093038438
E9AF5FF1C1BC9FC1754260FFC0AD445193B9D921E6F3BCCCE3243333F02BB66E
B727253F9B5E4169DA20C9BFB9FF931ECEEE556BCC9C4374EA6B2CC9D1CFE555
88A85CFFD9A23AA55B1F15901EFA66F9AB17D3CDFF8645F0BE1E25404BF81313
79A057266482612EC54FCF9A8273B7989D201B161E870432822FD891E0AF8347
DD1337681126BF8B89DB5528C7FEE1990CB3ABF8562E1D016CFFBCD753899CB8
F87ED5B96D6720E3BD7EF1CBA472270B4D082A1E33222F1F99A78BB323F054FE
A3C549E19A12B667165B8292EAC868786B869F6C929ADFFC2F1C50DEA895512A
4C1F23D363F405924BF40E49AE3D7453C630FC3431FA13B33223EEE4AB04EE89
A019EB6E90DD5E9973BAC93A9F5C3513C13DF3E50EED85DAD3A70626B5C9CB79
34B5B12C296D44F1431E1CC382E7C032E8B7BC76D60B1718634F5A768CB488A0
1868F8F5FC71B44F27AD672FADABA4DED6DE32F1544D656858D63D1A2CD07038
8200B449E80C67BA35C6FAFBFD9818C21E96827534175F5D615DD74CF3E5DAA8
2DA417E864D58667CF9C38FC2FA736A894F1EBAEAC18CB4B7D1983C85DEA0EFA
B6FC665064591E6A4369326788C031495BE1EB677170505642DB67A8CF6D5078
F1AFC0882DFA9C2B9E0A6C7DAD30DB394D570DC876A06C08E3CF3E7821D6EE37
43C409A009674D3973F49E02479CFCBCC6F3F44483ECE9A8C0B359FC8A6BE248
47A544DAA7C81748D365D64FC6B5E80C2FBFC8F75ECB495B1941E759A7CA7914
A8FEDD636BEADE3CE20163B38F6CE760A719D1E9B7E30DF03CBEF98214DBD2BA
A5AE04DE16A0B6C9E3D70AC9C82E634BB13FC7D5771B0E9E6859B0E657941651
A50C395F7036CC9A304FD0C555D88875305BACB855F1528EE862FF17A3471008
3C6F7294C927613AEFD77F004F7DC1CCC96ADE0D02904BF3E689B2B262401EEE
99304F22B4BC7CE51A6036DEE36B990182A38EBC63BFD8062A3915AA5CB574BC
60C16FEA1B452D5A5610C7969FFAE73E095BF64D523EA5C09FE173C73BC500F4
2B6AE9A3439F73E47924A24918A8ECE0D9C3A735A524C8B374AACE6AEAC8CB41
82A887EF4B2F79EE752EB77D01CEA50E0D6555854323FE00320EEFE8632FCB86
E990AD1C8A0331513E0B6F2A90442F6351CF938729214C68FFEFCAC997EC286F
30AD0245F2233446B177BFFBD9B94C2C008FF74A20138BEB2D0B2B70ED7DEEBE
820C02ED2F967DA29AEA44A0C27A817963DF2BD3F3C6CBB52E5D75AB74E83093
9CEF9EFCE632E60DA31233D7314E18E98E17B68924D0EF745C592911BB5E6195
1DAFF2A3E9E9B46B9A5B29A2F79C843131733D7FFFE2E60835E8E570EE206034
708F51FF5C0C1472F6404B1AA6039BCA9DCF908AB3F675FD2997A07C67185097
2D3CD9AA74EE5B605950611396562D06086CE3AD3BB9DDE9851808334DD15100
66D8DED5F4EF8A2692CCA84735346B765194A8895820131FA51C51B31574B2FA
8A71BA89DC8F6F167C7C0335CFB075801F323729C9FF29E681FD7B0C080A5B57
E5D5337F0779776AFE85BE8A59526694A0F4EB0567304B79E8A3D878ADBAC5A5
7DE82640FC79F74410EF81451986461CDF084B59B5786859662242E4FB891858
CE52A9CBAB5071834CAA36B7C056F15FA37E776AEDCF7C605AD578FC8E30ABD6
CFBEF607C948A926FBBD0EFF74C798D0EFD52011E7FE7D52963D8CADD372D429
535970BF8BB79B0D31DE79456DA0AEB62BF9F89B432C2B54D5CA04E5DBC61B22
BBEBDBA394B908DA2E8C00DE02623D52D3FC439A3F6CEB92442AA9CECE391AB9
0355ABACCAB80AFEE37A412B255DD542E77E53139F8B0F4C80FD9ED2073D21FF
50B841774BC20AA44EFD121CD97988D7002598288EA2C13DBD984020186DAA8A
BFF5C4C36C97C23029D2599CCD06FC306E6C049ECA3DAD6839B597386E852EEC
BE1E315834B8199C0ECDBDB3F7E1011574D9EBBE4AAFCA34766751BE80ADE1BC
40550DBD475801848196FF59D705A0D8320205A9F537DA7E77180E3F45775EDB
72638D3F81FDF532E256F125A70D6D9C9806549F775AA2861FC7E5A25AC51DCB
571982706F101B216B4AF3523974378504308AE28AFCCCDE87BF0D9DED320981
295BECA7E0DC24451396E267DA4FEF83F58B46A22BC54F9D7BA93D3399BCFCD4
EEBBF072C05BB0528537EDB6EC99CC2D27E065A00484AC956C6B5887315E0295
2C4F82BF7CBDC351D190BFA2C1B80178081AFCD61C03E32FFE36D54CEDD5F062
8C95961A01AD0EC4977851FF7A762A0801E1B884A635A73EC67F26C4A36894C4
120C60AADF63E0D6B5706557B831934ABE6D113D7FCC36BFFC8BDB5187DA0965
89FE1C6AF104DC95DDBD1FA5CDE70FE15878D53394C0C7D5771B0E9E6859B0E6
5791F23844BA04A75CA357C3415525CA05E017F6EA82A481715B62B6DCFC453D
EFA99DF6B76D0987DC232178A07DC10C1054D2193B8BC36A6C26FB97DE6E1E78
EB89C0658EFFF9B5FBCDB3F536F6EBDC6F5B411284F2100092B700A01AE6B11A
B2D7B1099140CE83BD3212C156A0C13DC2D8A60D34799EB0CBF974F84DA510FC
82C8DA6CA3C9EA20A09D010E11E6D49C77FC969D1EC519EE0EEA3ABDBE443F87
C0BEACADF4491AF855619D326814A1398DCD7661531C45FFAB9BE24C3AE4A566
D856ECF1CB17416E6F167283CACA75B3E1991251AF9DDBCEC84F40FBD9388FB2
71273D0BF3A3C7921F473013C85B689D316D3D350678C8A67B3BA58728304A89
D56F596F0E1E2A35E4D4043CA48259DC08D6ECE0EF01BCD9EEC871AFD57FD3DC
8EC95FDE664A83A2078F2618C6D2AD6B30AB093918063D5E8056D49CE921742A
12D11F083A6DF8ED299BAB6FC4B088D4DABAC4BC89F49090246D84C30C58439B
06AEF538ECA97FD68BE71AA73987D570CE2DDF953C6EC97CBC2B919122800171
B474419D914DDFDEFA36EDF8594A90078DA807A31E623824C8DFC271B9B304F1
56053EA711A5CBCC9086AB4D09E359B41CF74AED5B75C01085EAAFEE7EE665F4
E74227B5A328BE08D81F6EB1A4EF484BFA037253875DAE598DECD3C4C26E1928
4730BAEC36E19234FB40B6A9DF429A374CF27923C6A7159CCBF80C8C4CA3CDB3
9495A13475B594401F8BEA9ACC2CF2FE7F16AEBAB5D24ED5D673E26A25811D4B
CA9D693EF8ABE784D412CA2367C4A1234AA8AF985A3B1B3AF560AAD8F7A4CC3F
40E75879BE4EF03B9AEBBEB3B51AA797687145CDED363696B04902A7067C98A0
4F0417300A108E518510F63AC361A3E43BE637B70B9966664E12EF4707F6B100
BFBBA298C718416514400EB47B86E2FB3F8777BA26C2B8B738C9FB9AA802F300
2A29CE268FE9D75A7FC59B051EFBA55D4228A5949744FF40B3ED3BB458C2DA50
5105F51AD3C3C7E0D339631C932BBBCC1D5EACB1484FBC1F30C307827493FFA2
A96BE684835558D9FA31B09CE36535A6E77AF6E525B313128359FB837C6159BD
D3495957756F77DB8B0387D8BD56253A7ADBDD5E5514567FEB02B1C85660A12C
174AF75DF1CDE0A18C94817F54639ABBD5D7A6EEF3C9CA5CDA4184D6C7C197D4
A0B223B1189E0C2A0FD16C0FC15C0DCB4C59BBAE3A0C3B766E84C51EA85C954F
EC4C1207C704167F82DA84D04F1469DBC64F6AA1C643DA48BDD87DC466D2E8CA
4596D6E4CAABF843280EEA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF788E5
3CB5661B02C76A1E62E9B4CD2688FF913D3F49FFC9F17E2E5049D46E0C470750
BFCA57392DE2D0CA52013EC483EC747BB813857F88843B1DC8E80EC1BFEB6B16
776052256E113EBA77A94CC74507B84868330F7D9D1E0CB446080518371912A2
5EB99250AD332CD8081E7136C885AEC7EDE0CBCF1AC4B2432B5FC671FC5A672F
5C893FA9C1AA00C6C757576EA0E4C8F0F14614231A275833138733D1B38B4B56
A05BCF4D0E881031C10DE091BAB45B1E027BEBBC9E01AA7172A8F67A678714BD
90C887E46E69D1B74890B2029F4CDAF8B95A33FFD5B823CD6A422DF7514718C8
01B23EE9D15EC3DA1315FD6A95C3F4629DF3BC337C53E57106BCFB1FCFB2CB1D
D837885F2EBA1E915AA9B9E08A9ECD62AB1FDC982ED7D8A79E6435D1F7489816
AEEF3795C69DE577C4B9C0EB5891CFFFAAFE04021CDDF84F5A94E60CAAFBE1D2
7F470EAD9A7C3C705F4B4182329F95AB474108A296063BF7B01D5F186B29127F
6A7324B7C95A560BD01C155439EB43D1A04065294C0D15B92EAFC12BBFC57263
DBAF97EE00178A19721745E064EFC9B18C7002F76150B70E79387F8C338AA7CF
FD6D0B74207F0434C9599D055D786DC25523AF3CDCDEC6B4A013B9D7B1B7E004
1EF68AB5AF9B946FF936607AFB4228827057BB3F9495AF32699904D4229F797E
793F9520F9AFD81B7442AB1C8D5BCA175FF3D4723A21A1B0CE04B8FCF4F8A5E5
3DF6E447AAF8A2F6C1E1BC9061A42D9911CFF2D60F8105103B2E4D023F312FB8
069A59AC64DC68A9A8A77C343B645717155756D539A41B7390B1BD2A66497EE0
559C01123E97FC1B226867131D1A1D20E47D946E83F574F370790FF713D5F12B
0141EE5B103937CBF5E31A6C44A32EA4D1CE1214192029A2AA4A7301648987E0
028B00C438969C2EB8C4646E484F7A53A2BBED877D60593E7DD7AE98A2FFDF53
57A04F8A74CDA53B7FEC6A1DA3F0E669411F15753636DD983FFF4ECC07C44FAA
230AA8D1991266410CFDD2E8D7149219C8D6CB69117EDFA5428CD87225C7FF28
FDCD4FB898A052A0B1A650C4DDA3108450BDF74E5373FCD4127D1F4EAA2AB5E8
8A2CD7326EC4D7384A9D9A09994282B995485CE83DD18AF0ADD555675341889A
013074442B766DEE34F7C92DF576CD2F07481FE18CEED4C93ADFF57D3211A340
D76E7A028F1FFA5FBFF226D3739A9150AB31AA85EC4C4EAB9B5EBFA7E3B2B839
838BB87C04841CDBEE459B73A91E4DE521F35B725E4ACB5ED51FC702B8385C5C
C30EC3FAD17B820678F4B87B292CF288D338C41D889292851E809CD5EB15C426
BBCB0A20D4A0DC078BE75C65036952907C17B48475B23985846B15647ED6F765
EE39E78362381DD450695EA35917AA672E6D9215D742F7206D3F2AB7CB9128F1
D239185EE1A379655DC7A53D88C875A3ECEE85F938587C80FD855F1733F50F63
6A4C7426584812D886B04BF6A1ACA730BA1FA90C0D7F09B3DD6A5FE918CF3ADE
72C96C375C212393E4428547E4A313909459423C73FA28420EBA065CA35AF942
E6CFC2646D50949425D15E648CBED51C8B271C03844BA0C2E035968BE6D54D31
7D277A13C6FAB4BAF10C72A23626BF6849FC82D5608D33A1835096C78B011EF7
63D54AF25210BEED9B500C9192D50D7AD6FF6713EA292EC1AE9E2DCD9DE0EB68
4D4C421A7DFAC3C36287440EF394B79E4D83F7B26EF4C31A1725EC786EE39776
EE06BFD3C04FF933CE48AE61ED5837B24A933F9098F173D8BFFFD3DB50BE8154
38A3C46C8BBE4FF89954F5D0CB096CEFC35760E9F293085CB54BBE5826E7231C
3D0ACE7755A750EDD67622BC5CA310A062DE94D6FC7B8B746C4B214A485F9CE5
7642F42A032AA2D4E08D41269ED78A655718F13DE2756FE91B3068260C781277
93DC4DFE03595BBF57B47B6B47F361944291903C16A6529971CBCB06166030EE
F983EF3324975115179E42D0FAF6CDE696534896406A8A5234A8AC19BFD6E270
002A6BAC67DA45FAC0B1339E63A2DF0854ABDADE3A7C7C28A3A5C25871D190E4
758A89DC70366AD98D5E26B23898EAA4C17D53E4CFC681A17DC79899EB338C00
D12CAE5435A542C8389853B3E316D1F592FBD13388443F6B8C0FDDAC48A9CD70
475B33AEB5CB4BDFAE35CD5FDD5ADCC6382F1041168253BD30434BFBA0EC5391
3CED864136590BCE1D420F1B6DB72361A82EC811DD60CFD1A39500777A6B882F
96B951F92E5D4E51D532F29BCDCBD0BC1284132F1FC2EA71CC5D2E2A146A92B5
ED12F71F14604D0CAB75DC0396E0802ACCEF1ABA9A1CD9797E04B763DA500C58
AD8EE472B30B7BAD8B85CCC2020107EF549A5E8D63E7A7D6CEBA67D8A83EAFCF
490DB7185AD3FDC9AAC437310F1A7D586CC05048684AF27EF3C09F73527362B5
D90F48DA5BDB8D01BD0DF36D531892BB3AAC1CA7E85280E03809D0363830D1DC
7502CEE16E00B9AD43F263261F80F02D5575FC16589FAB2693CD5FB68E72DF73
E3FE9A22D7934595BD999C3A31DA2377FC5BF663BF0B05AE62C67CD1DC0F5FBA
2DC5887CC36B43FAFDB08ABCEF2F4F529AE4D6E393827B269768307A4F6635ED
3B17F7F56BDF132EFF5804B0E3186AEE29EB4E62793EDF05821DD89F3FA8506F
268809EDFDDC647A3C41FD3C3C2874A4D2FBF20E45EBA5D846EF69573C5C757A
1F17FE12371714455C1951CE56676BAE72E477265B81BE7DEC92BBA66568E7B4
C6D3E09377D7CD7268672DBD3DDDEB60A69276CF920B7BEC2E368A095DC1E3A4
21F0C5320E1BF66734602C39047FD0BAFA91D2389F1C2E3B2628B95FEABC55ED
2D98DA057A876FB35F46EFA6A949A7596F6B60C61572F6332A2BBE1F80C6238B
4E1F92BC16E5749037AC8E7F6FF258DFF2EBA9D5DEA90E75EBEBCAA33B8AE8FE
4A400A7141F2B42864AEA61576CC7CBCCB39F9B66D9040AD0DB47314E9395370
152136FEB80F752F4AA39F0F77B9485D1ED26C48BD4E096F1C03C3AE5EFB7F9F
42D27FCE2CC85BB5DAE1FC5751649009B86F080039DFEA81FE1DA580CCB52FDE
7CBFA758E990A77EBB86E17E3F7834D125F12A97B95F6A354624C31C68A7AE97
461A447663BF368B38D4282C211B17399962E0B01C5EADC664B8164E6CF77E91
BEED3C5DE8E5621FEED17F01079B4DCBF759C9FF16A8E893C28EF549CA3C0F7C
8168122CC03E542912B987A9BFB8FFCFCAF3501977899347BEDC4D5FFEBA3F61
D35AE7A03042D2F0C84EB946AB446166A66C2C3B5E16FDACB9A7F68828EFA0F7
4BA87F7210EE376FD88FD8806394F2AA95F0320828C6D74015EE6D691C951F04
D6B0D0E599445910CC42F926DD71C9A7F063A5DF56AF1251E4AE08AD7E1623F4
679CF2B600CAE391A17CCED52E42690F9808BF40C0FF302E4E863FE50B6B5191
6902C2CD37D254925C8492A676F6B639809F766E057BE93BEA6B23FA0D592C03
BA3BA078F55FC5DE87FC65C063768ED394770CF07675657587CB8A5659684045
DEEC3455048FC451BCDB48DC414AE5293A605A5984C4E9C3F2D4D2BCB45C100F
E26B4F5DCE0CBEDC1AEE633D014BC32FD730F22927CBA09B8CD2167352E6BA2D
D410BD745CE175B921697F9D9FF0803559FEA2110988240D44C5C6C83A858307
703A6F79AC6ED05FAAC5784FEE4A9FB0C8025111091F54823FDAAC9DDFDDFCC6
DD1568016C41B5B2AD6BE04FA169800228BAE3E6D4040A1C2DA08D51B6F3880C
38FB2349BE51D981A08AA153E579E2CDB2F0D6755D8F7F5A6F1A68BB974C12EE
5E31D9C2CFF884BB311DB67D0136E0984ACFF19D2AB6FD30228167274A4F206B
13B702DC4E76A76885AF0B09EB7F877E121405A4B333324F63A51207ACEA7DE1
3ADF46393E062A59E1C03EEEC8DB2F0FDA6D5197526AD773CC4FE56023FCB7EE
0DCDFAD9087B161E74E4B1F38E4E2B8E6B7A75564E68DE9C1D521D4C22816E43
BBA3EE96B446C0F1C5B29032145DFFB88B3A3F74518FEA9848D5AA92EFE9064C
524C07DCC1ACB797392287BBD1A01FD01F905896F87AE2C2DB94582902BDCBC6
2BA0AA26119A4DC9D61909FD2CFACBDF7B0A9DE3A7E4F9F5DA3AFE74221B6FA5
D985726EFAF9C637A446B2161790287ED617BE5DEFEE4B4788D760122EBACDC9
B860B740F2B4D5C6DE8940F6F62768651196F757C5C17C3BD70F801D02ED63B5
2CA0B86222F2B90F91C154CFCDFC017BAA8166A39AD8117BF368B91934BC6F0B
B76B13B85E51ADE05F6461CD7ABBF7382327A2F9AD203FA3C640FC359510597C
3ACDE5E2829FD745C84B9029AF08F325E2EB26EE41DA48C15CE91EF664C3D906
427BCB9917C9C0F050085274ADB56BAAF193211E48D1B82FE7DDE10A66792AAD
0D59824ED1A093D96C804F030B04DBF549430B0CF7FD64C0DBA064ADFCE9115E
EDBE11EBC836C224144FFC39B550C5F5D829E27D532FD3D3F43B63CF92975BD1
8850BB73E507315CE88A7A4CEAA6CAF2F89D31F2D6B411A70C229A20B9BF0611
F41A1B1BE73D1DB46DCE054CEADEFCD37AD00997C5E88265319829F656399394
FE31586B454CCFDE1CB0F17F31B2701321F8DF4954D8BFAEDCE7792F6B9CE9F6
CCDF3711DF5C6BB2FE91E075A4D20EB11412D1012AA475556665128B99C2029C
82DF381CD18139960CFE928A76C33E730F739778BCF1CC112441BB2A5F77E281
FF269C4EECE035BB6FFA5078C81B3B924460D9FB6C2AC28C5BE853ABEF6FD03D
EE69F4321C6361D12879D78AC6396BC3936BD40FF1476BBE9E4D9B67975E893E
12F61E935E00406AC83E492596E9A26EFFE1487F472EAAAADDBC48486C5D96FF
0A33498DF6C7979128EDD4F9537C4F0E870DE54D18F8E1B3537D00B2E7A7C849
F280C7BF46E448EC325BFB498F9288DCCB48D9A1FC92A5039BED5F5C9B9770AB
F579FC911085E79D2EC17787C412E7273D2D2B39BB55D84E02F4D57FA923D685
E103F25E1F42FFDA16D4A3B4645ECC5F4E42BD718B426C20B5288AD034796880
8E0C31A589D070925B44C8512CBC8FA98A881F22B81F1A7B425686367777EFEE
F68112638EA01C20D5B131A84F69448FAC91D9318ADDED690D96080BC8A4AB8C
FFE1809DF7903F6843838E9A205D3C7159A63851DFF56094875FB1003C099DF7
0EA39BBE63FA0DF79946504B5DD7292B4C730C54CAD8531E05A266E189A3F9D0
EF3AD7DF43605CB4EF2DDDD22391C268A82D5519573814230123CAA9DD0D86FB
2AF48F8ED153FC699BBDC4F2D227B7A94085C657D1C6E2C73F5D27113B3B90BA
90FA7240719CF20247AFE827CCE5627B9A991C24883E1225FD310ABA9BFD8733
3B8F019FF54A515995310546AFED54748BAF73E59E91D2B4E4DB30A541736808
5E864B29147A2253EBDEF475BD7A8D9D22CEFDEC66358B3938BE62E79A78D292
8FEE6F38ED8B57EAE9EF8D735BFB4715B7E2454D0F598F0BF61BA1FD1D7B78F1
B38562E968F162D67BB5DB67595670D828F9C51B2733F80AA1938F0353103DB8
3CCF9143F3A1A258658A63683997CE491CAA407EDCE272CFB83AE2AF646FDFFD
C0057DB44F8D19FFC86749D98797B1FAF915635592515E2D8DB7DA53533E244D
E3DB1C186C1DEE5D721BB7D7E0CA1DC96A72C881E694C4C5F6A2E9ACDE3B32AB
B80B973C2044B3F056156E7AC6541E2ACF429981954906616EFA83F66A05539E
5734B4A2DAA3C7E6FD827DBC5AD0F43F9A1290E91C463895BD12E8A831DAD661
E416D4A94E1642B0216F3FBF9475529E5DB9407FDE0D0C0992AC3AD7FB22BA4B
DD28DF0811FD0F8198F20755564869326D31DC3FED9625DDBBEEADB867DDB7FF
0678F0AC8F699CB21CBF1E702A43C212F7FDBB168337708E78CE9D352105B505
34C875CE71554DE156E4428BA4CA637E96F61D9AC4250BE085BCB3D665578EDB
C1CF0A0535B3AF737A7AB1D63393DB4A3AADCA389CE1ACBF20AE2DDBB599D8E7
5DA9854FC3F7AE20B22E72A4157D316540FFF3BD147086881CD9C9335856F5F1
95FCAFBC381353B4AAAF66580344FDEDCDF9C693C5E7BC811BE21F547C9E9AC5
26EED1027787E23EA108C7FBC17D2C074997AE6F80FE3568F5F91EE275365769
916EF1BF70C062A454E02D3CDF862EFF46EB7DE76BE0D3026F19A2F1C3406834
3B9BCD00049F7B93C11BE0AE28B2F7489FB39310DE2B6B27D6837CEB894FC54A
D1A218DE34716DD5BAC48332F3DD076DDD17E49F3FD8A4278774EF42F36DB750
65EFA0D3F3F15E77B3FF03CA99C867D2C9933AE39EC908555D1041B0EE4D1E1A
FB6B6FA6EFF9D626D24C4FCC9062FE1AA784D08CFFD37CA7DC832D75FDFAD81A
A210A094D449C8017386EB0C9E4399A7AFD8703D384864AF4EF9D07B051AE182
6675A5F7CC5523D27FB37B08E03DB213D3F5F92CB77F7843C0D4BCC174D4FBD6
1DE7DDB8C210F5B71834D2BF6EFAC3CCC40D3EF3B2E2080F148443121560D005
862F674A3E6BFE06208CBC99BA03C2C94C0B0B6075AB71CA71ADC08570D5DE3E
C220C719B63A9258DB10DBDA14114FAD3B7507A1F2E69489EF60C9F55863BE94
4146B3B7D9CA452453C825B92E606247E509FBD9C39700548CB12C58D37F6D33
C4FF1BA559FBABE75B05D74FC47D438574308F239051DB08F751F220ECCC2623
9A13FAA1FBA84BF4FE1A22CFF901CEAD1600AE404389D61D09636D8DFE49F75A
1FEA7FB038BD30EB76410FF89C96CA4FABA813FDA935FA86C092E2DF9B35F469
AA173D32A69F6972F2E3A7CF3C56A800EBEC5406DF4663F64E7ACDDEFCF6B67A
066C20F6F3E491E8148E53097813B2530CA739CA4BD0183349154498A6C76FEB
EF86578A038A3519D4236FC473CE71A6377E32DF8E4EF59503272BCE4104BCD9
3691942E935C838E2CD3A397BE2BFB030B6ADF99ECFCC4461B595C70BC08D304
16E6BA194BF9FDECD48E151DBE7DB966043D6E6527DA0FBC55BD71680401EA69
5F3FD5E3C045AE9913F8DB0E20616F63B4A55FB03A8835CCCE51B50E52817004
E4D3B74E0CA329F8BAD29E73A85071558A0F760B41AB55998226232314BAB6C0
EEB4C75EB7B3A707A6D447DAEFB6250ABAC16EA868D74427C914F067479B3A4A
7FC0E0823871776F82AD7D6180F7A037E4E7C8D1414676E80051B714940C023C
6B7D01A19BD70782CA4698C639FE6EC028F530815A7EFFB3FA846C8B8B8A7C02
A5ED1742EF3CB42EB0ECB5ADA768ED4178CC13DD87BE8C21EB3A9ABF13F7A9C4
6AA40FFD8FBEDD5EC891750D70F99C2645865C0356D3C5E6BFE435D3C02792CB
44A20B258ED67194ABE9DB2D78179CC2F11FEE063BF60EC48ED7A31FA35DBDD6
CCD7D01461D05CDCA6D3F2057FD13B76678F757AC1ED7052AB31F45781461FFC
94C69C62018D6429EAD8B7F87627FFC45DE8615BA35B4E84ABA374862AD9E38D
889D05418F6A89BDF37A5D6422EC02E9D3ABF91BAE6634FE1B2DECBA8A37C0C3
A49EEFF019DACE6FF4D5BD4090843BCAF9441C6795BEDABC7C47532B4B80F77B
F6EE43CFD08C97E4243E46D03CF4D270C2C6037CC365F8B761A85276F5E4FB4F
0D2A2E9848262290D7F8E5AD77A3AB32CE9C79E22F955569B4CF96EAD1B32729
DBE4756DEF299974B71CC5E6912DCFF9FF07EBE821AAFF09597BDEA4E71E73C8
DEE3606BED42095620764487BDF92633CE56BD2E5A2F5E915AE1A7B21172D02E
3D78E253519DC09411034A7C469B2DFFD98E311BF3DB0D2F8103C51CB9F50407
BDEB66EEA931F9FDD3391E0E2353DC2EA171E90DE5650B33320977263E4EB261
F6718EBF15ABA15B45CE0008C9769C56BA5DB7FCB6081B9F3129D1B5EB155884
C30E6405F2153B96806A1D450F72A3CE5E7007939680912BE7A2FF9F73121450
490158098C9B50783AF12CE3933E51436AE408B6BD71BFC42CC17B0608329D09
3E1F99904AFEE6E73D4934F65C216EB6C3A6207CF39EA825E6DD101855EAEAA5
92F499107FB92E22D07071D76B34DBB968FCD548D12AE567FF26A95D677617CA
EE4CA4B282C8E313D44D89C40665A7A04E67EEDAB237208133A84721D9F0D524
451396E267DA4FEF83F58B46A22BC54F9D7BA3012AEEB6A027BEA7EE75542481
40D0CEB6EFA6CD05442A739E6DDFBF4CC6E06F7F4E221AA17F75D36F7194C41D
A0285821F806E068BA068BBE958C834EAACA821ACC1C420BAF522B1EE9044838
7DC65F1B6E5D964834D39A7E89B29C8C564D794FDAA23A5322CCE26B31363BDD
6CDA6E3622073B64561BA02B8D3F7896B300BEDD40C4E4CBF622BCA2FBAFE229
0E8AA03A28847AFE8A99CC319B110951DF4BB71BDB3DB5D7275AC8492ECF2B56
2A20019A0F37F9582F33B2E198934294E52A2A25163FDF224A6D597B3EBEF180
9376BD5027E2C7593EF5658A9CA19AE125653878A1F10CC1C84D2B69E1136A43
B9372388E596C54CCCF75C69FE6A4B6EE265EC51A7451C875873170CC5233691
CE6A5D66A866BFADE0CAC16C59006D0F76D6D05B123B7FBD24DFE37E306818D0
6A0B4EF2F9A8AF4FA0969DC1FA04ABC51B7387109C1185AD5648C12F4A3669DB
1BCD36CFB0020B11D1CCC9186C1571D506413DA6A1FABABE7F94C0E09E6D9FBF
F9E42091225BD1B26774D3ADD3D4F7BD5C89F7E958B584298DC6830F31E28507
8F59B8D7D1ED800D9835E6CBA7F3E2DB20C2D8530A88F6F0AB674FDA64DA4E9A
6A6573D011AD64547D6830A365D9C242AE6B9BBD92FA207757BD5012E76973C9
A71B7DE95F23639AF5C05AB13D5A1C28A17DDC8EFA3F3D1E2A072C5A99A72019
D29CB845F00A177EAD188847E7F21D47A6A323AB6C18D6544248F253F9761EAD
A629C53F047AB860E131ED9AE9AE5186E222EF53C533AF3B26731D033290635C
60280122404A772D9B7C8EBFC881A1E1C9514A567CDF9FF87DFBC5B77ED158C0
EF082D34EA630D1A6A54A6805B7F680B56CED7F1984220443B845C787147DC26
F8B6F0422F3340A01614CCC41D40D27BF0DB64811726E41351E349B6167CA505
8EE84D1258EFC3FC2D96FBFA1E5C6668641E4C15421F6D812255D98D2B636BEA
1A884F4989C120FABD61EE17CCC5F11D52AE8A7C22432A48F3FE434C00771CF4
751D8E85BB97A7F152330086D1E58C2B1CB5633E89A7CA6CFA4DB4C08432BD9F
ACDC804DFBA4D875BCD1C5A160EB35A8EB174221D9CD790D29D27C8018BECD82
9ACB6C3D9129E976A2427E12DBBEAB1696E0E2C1186D0798C1C3A319CBA04421
DF09A2162D29F9FA78CDB32A0060FBE6744617685896EEA4D326CECF8B700CE9
C0415271514ACFA19D2B9D2E2B8C83A640F233A0F99927AEFDB5E339D3151930
03BCDB515E0EB8FFEA273601D1E82984B8AE31AE343F37D038724B40A9B1DADF
C6C5A8F9857E1F4EC4E839E60269745E9FF0DD2A35EE24A912A8D5E2DDB74CC4
C42DDC9F77B040BE40FA74B2B0831154ECBEB291524E49A4642EB05056F266C3
4948AFDF91CEA5FD433B460F57BF6F0A5DBD16C2DA8F5E3A027390810C044FB4
980C9A4340489AFDCF9477ACBD92D1BA24E033458D3727ED4B961BF049050BA2
A79E72C1E086AD76C19784527E7D439BC23545EFA07D65929D199AB424136E7D
BFA4BACA9C3864176ED4AF524E0D2ED49E31D611F993A4676961DCEBA9BE729A
2D202FA0F4243D324A5983198F2A73CDBD54D863391DF8A223560C53E4C27D42
344D3BFE6C98EE20817041D55D77CE23E3FF07B8CD35DF6320A1EE1E270FC43E
370F466452EADF75C77F1B4078C0B0B09675FE9EC168A523E1A8801F32D21722
6E080143A8E35F88E3464A38D29EC2DFFE0AF6DB142F9D944983B19A5C420532
82E1F80709B76C39EA6587B515F5CAD0858001D0F08DA33F1655FFA0EBCDCED9
6FF1576600F1389BAC04F9EFA7496193F0C9E2E43707530FF446F58B37C73CF2
857A7ABB303F6553ECB0894A7A3A64569699C1C085B3CF6D6F6136E76A3C9C5F
76C2F9071A4BF4FFF2AFD7A0B06B3F26FEBD1C756D0FADC205A0A26BCB8C098A
CA6C8E1A94F6DC010AE8C0EDE2D696E60DFEE5F15D5EA092DCC4D49B13952E07
2C0C6DFBD2AC4CCF96760637BF1042155BE109500166B4076AAA04763FB71D6C
28247BE7CE7E7206C21F9CAF9A5B45C48F503DE04BEBF20EE1847119E030D0F1
10DB5AFA78F7FBBFD71535FEB7049F203B46F9E307EA581930A3BC84A4B0A07B
E87C6830D19D19CB2F97367A9C58F3D4BCCF3638857C25C73B78F5C35FF0DD1A
EFE1A1439351E9B9EF85ED875422A0A51F2333C9056CEA26D2ED31C914BE552C
85978977212EF17AE578C0B400446E3F9D917B293DDCAEE45B171F5125E4C1B5
EF7BF217E03820815555A1051370EFCD4B0586BD44046D11F3ED111B470A6263
805542515AA19B5E0E9FA83A47EBD06BA51E75FA45E7C0806AC25DD3073B09D7
7F9DF706FF9DE7FDDFCB905ED833E2A2EC5E9FDA641FBD4D0508C374ED926389
B997E7182C83525F3704A6431624D00ABB0318AE29E7706B4EFFB51B647A1A37
AB387BDD3C1964074EFAE3CA1C359295C7D2967195AFD2D94BADCE1E908F7D67
9D3540CDB376F36CBFA9240A07421DD8A51DD4A62DDACC2C14EB92E2F97FC88E
8FDDA774EBDBE7A9550C6DB6905ACE2A941B65D5B197DF0A09C675E4537952BF
17A12A4D2A05B5C1F8295AC799CAC6349A8030F0285C70F1B61098EA4DBDDA6D
7C1033099BB4F81CECD8CF59D8989780708F7D4FDD2789F57A6585929BF10280
25C4EC5BFD704003D6109121880DA9C89FECEC969068C5423839DBD0C5CEA4CF
1BDE5E6F73EC07B3E7DE00EDEED569AE1847B090305EE318A59138B6572992B6
C7F6E13A09004751FF0936AACF2269A8BC7443FFD645E8EB8D626090CD556C34
1C478926673315F3BBC2ECAB70AE3DC05751C97073905D5F48F6F789FF4E73AD
9F901D26B5EE9113E087DF8DD4B02241AB3B1541899171BC12C8A87331B07580
1F323729C9FF29E681FD7B0C080A5B57E68B3059935B388CF75B423EDFBC4680
B3A107EA9167B3FB72B20567CF3F09D11A879A1D9EA992B3FB79991E6011012E
0F3F132ED94495BC1892BB688C4FF28BEFE90401C5F2BF094E8EB21476A72B61
24E24D2AFEB2FD437D3D3A1B5D69C1D5C2AADF0E960552D2FE27E75213E3B527
829F0B71A41ED28DC1039C6B0B01352665661FBD6F22FD665064591E6A436932
6788C031495BE1EB6771705981B1BA163A248F9A2052CB8980119F3F2EFECCCF
2B5E4CC0198F2957A103CB2F0D1F55AA122628853277D30442E190FC3CE1471D
F76254439E9FDD489083E9086954081E2E9A6A644510454A0A41DEBAE7BF7A16
F17D732001F08A289F9378231D5B159C63BEDBC8B663A9376FC8C236C3CA5680
F622117252D1D72A6D9D057A413F7212089B3CAAA89039F2494B3B4406C2A477
CBD1EF75B3E2E2F43D33AC52A68BC65D4942B5B5187F55648DEB12D2E4119BAB
F0145D6824F051CD6391BC93472F780F0D612B849C266CB622F9F7DD740A0E8A
1AAAEF6F9D84C32FC923330E4FA7E65759489A8C1A520E35CC383CE5C9F6B415
616AF611C0D7C1A57B747534B3EC85C1A110A6F5520174737903DE67E775663B
85B3BEDF0AD31AD80DA106B9D77727D38B9EE253F31B94C9AF9270C53B5EA2E4
33DE6E9C8E81AE5C0DA212DEFFA85E2C93AB0EB50A8A66ACAD7D02D559CB82CE
0E04016C3AE50698C63E34057D85E7C0BD0ABDB6A50369F174C6EE49097FB80F
FE0D840D09C8BB076A5AAE81B5E315CA901E262B77314F0ED926925DBC56B562
DB11A93A95D033B6AA4DB98BABD02C619117DC6AF37242576C4E9A56BFF2D3E7
17DFA31F6D68591BD979D642FD47D7677CAD5B82B4548BCFEC5912D093D4B9AF
0E06F023949A13281482B8E6E927CB8A80EF4843BC4E4ADDFBAF8CCA05A49039
19EB6C56385BD47C7F601B0E36197BFA431548DC233902D54DA5045B7E24A187
73D3C5190CC50D7A2ADB38EDB790CC4443112FA2E8C6DC5C92D22B2474AEA49E
3667EE9AEE712D225A12C3823ED9D1FCFF6B51EFA6D574E59DBDAC8018F3F62F
12BAF2EA2AB937056D3B806BA7F408F14F24DFAC2B2CCF4CFBA53477316D1F4E
A0CBA36C3B9A4D6E63E4DA113C25175B14083CDDB3ABFE914A9AEED19BD22881
6E0284F80F12C1F2882B24EA79F0D109276AEBE375509E260A86AB9DE0C6E6C8
0B24CB58FC7C680D9246340149E14B78F533D170BABEBA1B18F076199B6C676F
9E90D81FDEDA229A4FB0E062B226D87570C047F4FA792C9EF8B6AEEE13BE2974
FB8A966E83ED0044BBA474D050484CFE9FAC3EE941A1398CC16E39CBF1571916
10D62F455D339CFB37F7B5BD9CA3E641CB6C3B154CB947AAA1A459F367A29676
F1683D0CC66BA26C84F42B984DCA448619ECA4E93F0E5576706717C15D46A475
45608A840E509EEFC1BEDE9E99067688F2D2FCC793388626DD5BEB61AB553774
DEDFC3928949F12A09E73B5A8816E2F1B43BF7F76467376513D15D85F21A6346
B8680FD825864D76F2BB4DD094A469646A9B266EB035CC39C8281F4FD280982F
2EB1527E5066FF0DFAB1DD9385AB61A0973127B52B55AEAF1E18625EC9E07F9B
CC666D844B5021531B193BD38AC7323E855572D58AE6FD08CC62CD89F41FD742
408DC0A2CCBAA744B592CE7D1B6598A32533ABBCC6335DE9F796910E0CEFFD7F
439CDAC4501FB1E9F77B0F4A5ADADE5BE52E3DC6987B352286D9A5EC87A4B743
822D4B6DDB68C5368ACC368BA2C365EC47BBC53896FD0AFFF658E013FE588437
8CE29DB3270B2FE2508D0C3AF2764239048B0637215FDDE0990230DCA673AA27
DE8EFEF3DD010A141AEBE5EDD11DB15632DBB5B5E3BDCD817B5E8E6E21026AA0
3B902F544F2249F1C2D2A0E85CE44F69E0C0F04E356B5FF07776613280EC67C3
69455F312D653513ADE65BA54614CAF3C67713DBF711B0B67580E73A79D0B126
508C84488005CD1D0A76F1BA81726FC5A157C7A568984C83581E0834867D2711
86137E581EE41BDEF74F228F7AD888F1BDACFAB831D68DFF7521C9F9C57801AA
6C1E77849607986C41594534F289ECE961A17EE9DF00FFDF3A15E3D6270EE1A0
A11C33FE80CF615E35983251B6AB45F13332EE47323E1BF779B1DC3A97652B43
C9EDC5F9EFD69A60B7D27A908603640A12717277E7BA0BF45732DAB7BF6E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80387963D6DB3A9847A9023
B62FE6444FB294948D9305B66F6D595F962E21A13F7044016E1F7B2776DC8DF7
A1BE35332A4E5099310672F0F273EDA4B0BB042F46824DA250330CD0BC3BDF0F
7A571AAE80B6FB14AF0C37CE00142A9692811CF7D067CA7DE1A77CEF2637193B
C60FB9D2AB703D58E41B08DA208FE08B4C0C2021698816F41632F88633A93383
0B44365FABAB1A0323DA3A5F6B8521EC2BB124D772B9CA85EAB222E7A2BA6063
9A27F09F7EC0494AE7680BC389A1D78C6E2E6F172BF655B8138130F18B83D8AE
0C5BEF6F915697207FAE5DFA482F221D218FE10A5CD04F1526CCE72033B3723F
7B3A279F3291925B9A3579ED72125D6388D072BC03EFA1554980E13B37FEC33D
F3B23FC7BFEDA3E15F1326B7A7A5FE7216BCE081EF42F0846374B50FFD3A8DA5
C99BF5A1B462BEF910CF31255442BF04AD58670F7AD427325B4998F156F54D51
D76CF525A89980FA2E5D15C8D09D13B0A98AB430342A8C76E4521EF45EF1D37E
D339149ACA27758B1E948987F3F4A741EC8E155787439EF62CE27FB2A049346C
8F1199E124CFC45A5073C3B6353A0004D94E1EB83F6FC35164F4F22EE107FE7B
8A181D56098BBF17532C933C63DFD34DE8DE7C36EFBF9DC5D83AB2C543CC844A
757BEDCD02321F1F7CE694477F749F82198FFFDAE1393586EFD57BABFAD681F1
56FE238B89608E63C7EE1A84A1CC11A7A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343541B2743ED4EA226F3F70FBAE2C25A7104589EF38855054C5AEFF1640
292FCBCD73A9F93A2AD55F57D780BC4D72186ABF14A12B8ABA67E37090F3A56D
06FBC16C065ED42EC037F2FBC40DCC16E9E68985E1FE9D35CB3E28E86F108689
48EE507B47172D7B52B098280231078AECD4A3FE4EA0EEF3F387D58915979287
5668FD45B8BE29FCE6F56F93CC01814CE35C353A7EE33AAA221351B0C59C9F6C
C71B257345C6CF339D33335D335BE8A68E408A503AAA09FC4FE60646E7AB730E
5F38F507C9F474F46C7238DB7412E07DD635506D397AB32AA3FBFBE9BB816B42
EDF445E9984AD71187BE7860A50E379B80399771B0B2912C8BE0428AC71A76D2
A2D5CDFE3940C0A3B942DE041262F04E6FBFCB61D18858153E4C2D0977265870
EAC015A3096905876A0238C78F6A911EC2EB55984542B7CEC8CF6D19962FBEC6
A5422AB89E041D629DB8446F058199B31DFD6080042281CB50410BDBEDF24EAC
2B1E0F17A856F22CF87B3F7B3A279F3291925B9A3579ED72125D6388D077A4ED
752F5393470DD641BB173B202FB9C5CFBABEDE82C16328AEFE032A82125BFC78
0B67E76CC14547769578E1FB3675A47B77D95329CC6AF6809F9529595D657D00
2082B89E2DD0885CA956529EA49D7B9133782989184EA331A881C43BEC2DF3A0
A495EE75A168A168DD518B9E0DA580DDEBC4B9FC00D1328949B97B1D1CC74610
3DC2D1F22DB076A5306D7BD8FA8C8E0B281DCE1218C8DF726B18D5D5328E4926
8DDB98331695EA466B0902A596D61565CFB1EC7A8FFEEC357A8C477B2C580BA3
1C9E73B10D6C2C542AC53B47DCEC7A019705E6091E2E361CD5C5B648ADE9171F
93C6E267AF3FFF9B55937BB4A02D49F389D589D8EE7AE42C132CDCE9FF9F84EE
AD17B366D678E61C6176FEC09C95541F7E2767D31E5008CC54BA8B86EAFE4610
8547E0857E45873CD3DD3281D71574370C35C4DDAFB83D75E377FF0140A39186
09C50CE3EE3122B527774A74ADABA89275D3947828C6A9675B8FBB5ACFB75A80
A16AB8AAE575B67C26D06A35A0D394EF1A332D55D8641C3164AFE71B5A359C4A
0929163E8EF660794518DA443D9EA8150E250037C2B71E075DFC0BDA01637CEE
E0BEF7A7A204B9909414BC31E37EDE9958FB4ECA83FDD94EB3FA60EED514882C
79251115EB490BFB9C965CBABD5451F2BAC4AF89052666E690F8ACD132C6B29D
500F997563E18B28804119292866F8B534249B0DCC84B013D4409759831BE693
C4C5DB5105D2463C9E3343DFC4B11F89A33FAA0EBEC92FEB04C3A6A0FE09FADB
F9DD97DA09905C0BEC0EBEFBAFB779344C1DEB92EE82815AAA3FCACB059750EB
EA5B3B6A7B7D0ACED3FEA83DDCD78D676E71B6C51A64A87FD82AC7FD782CB2E8
3FBF92FCC32B212DD9568D55A983BB46DFD959632E9193FF5CC9FE8D9AD16D84
B27616E8FBF76BC095CF31C92266A97DC3A56940BFA42B5EB6D2DC10C1B440B5
B316FA8F6565B7C3EBC79ED55666FB6BE037AA2EB10BA574F44852596BFA0DA1
89C3656A7D9095905A66D75A7EB3A901C359AABB81D18F31BE806A7BA36D034C
EB66639B4FDAAB0F8C8CFEAA802AA756D295E404B2B331CD0C7DA0B606FAF7AB
4D8D807961392FB22C4F8680188E87C659586F3A72BC1E72A5F984E7235607EC
39E49ECCEBE213D1695B4815384EFE20C74BB62F8FBBF658F5DD96B4ED591198
8ACCD6357281BA2643028A304E0EEBB58C7F755D67838B8E8B5A35E6BF9BF309
8535D75E7EC74C039D6C2D64ABED52F0A005B15A39141AAF791792599DF251D8
6352AE75019BEE8D81B2EA2D5BA6F6321DE47E229F38C9420958399CB35137F6
825D3EB6AC9D5E5B894645DEAF72A185AE5BDD16F3039A9665B6C262E8C6E110
D2829E58B3F2115557F9DAB6840BCE1DE39663F2876B13FFA5B6BDE7BC6408A9
C82D3E16715507FAC1A256207D14A1E013338CA388A3A8C711501A2632E9DDD7
EDEAC56C518175212C74E1E069163F4D72FAF2D79EC8F4D4BF3D849D27EBDB2B
2C6F33F3F59AB471CF2A7D3ABB64199B13F41E57913B9F8EBF55EC09503BF1AF
D89227A574BD8D6F6283B7E8E2D516B08001738F1EC4FC0B848E039F72977879
2A5F9409744976ACAC4664B5B9A46B3F7CCB4FE288DCCE27DC637479D3849AF1
8E820B538AF606A1E5BC77338F8C0C93FAEA6B72F763BCEFDE93D5D7FCC284C5
D52AC91E30C06E10EB0E6EC70F7476C183F3347A52EAEF9D3EE785E863E59BFA
94A109026D51F307D36E0FCAC8282CA19A33F4F18794570C0036D413CD4BAD1D
17C6F87FBB050C6304ED348A11503F3C9D9650A9252CE482C82696E65DF2DFE9
4B2D54B072450D2DE289F497760138814249051AAADBDEE4C99F4FF66DE64AE6
1FC357754093C51EBC67E1499C66E969C0D0ED5E3E5A2B60667E25B40CE5F8CF
B9AF2BCA1DAD558C1C96FC6D5B025A7B766FFA65AEA58C77DC4ED68C27DD879C
A7285F9EEE2D27FD0B5D3310F30B31C9BD5155E41ED5143D80514590F1A6F5EB
DB837B5DF27E58C30BB0866D58E551CC04883568743F501BB40ADB8DEC07D597
5B8CA8F0B84DAA951B4DC882EA2055C9C28A70D205D419B5F74F0BAA5B6F3E6D
BEDDECE528707A7A31EAF5A8AED5A6B66B47A0B14492B040535AF9812B6C574F
506493DA4DF3FEE824B277DEB9489E1A2312DA7F2B295D688BB059E5810F201E
3B2C79E92012950167935869EC0E7CC650D992F2ECFBEC965700730C46F4B358
C2890599A0BA30345EBA5995673CB82C886682E6E3EB568F46CBEB0BE5D88D4E
27E5EDFBCEC126CD722AADA6DB8732764C436F26408B75445A0099EA06E67ACA
22B1E387F336F6BAF7980A02A40CEB2FEE42B631C999B71EC234FED7B26D270E
FC258A343C72A87D5140274C829F239D989C9CA198FD03FF109B6B54A2EB3A3D
18E08CC1F7D36D1F00F67D8365EE6D09B687A7BAA7F4034FF97C512C2C654B25
476C0BF60F1CAC57965589DA26267FA03B2CCF128FD7C21B26B24CD315BC351E
053081BEADE92D2E498E8DE52D47B28A45D6F516078C72A4B155A2715B713EC3
5AAF218B31A138323C4E3200FFFC58752B3FE0BF95441679C567EA8E1ABFAF64
86A9DBF6668550BE7858F5790BCCA24144046F8315AE5CEDB4995959F15CCDB5
EDF6FC2347E7D392E0921577FB4E3FD0F61CCAE02BA2398BF40A23303DA3CD71
A95070A9FE43ADCAD26A4C067109780D386472F480A08459D6E042863D685255
A23A4BA8B450F1158884B759AC9A551DE5D4DB804554D23C10F878453F763B4B
CB3721B6370725CCF2BA061DE84855EC9749A9443AB405847430C138E5806B3C
A35021D2F6BEFC360FD5024713C156CD7CDB878A40A09502B396867C979C13FC
A2660096EAB8417CE87A31ED58701F8199A3D67D99518C38ED00FC5C77003D22
C3A1E82B87DC2C2C5677686E38251125385AF1647A4E4169D825AAC0866A0318
6F719BAE108F344E5F0CF9DB294762537A84DE04C80503271933E0BC9E2F4B93
5260E4E435945E722502311F0BA50701623EAE23103EE8EC6634D7D316F01DB5
0371E52EF181A0F0E3854B28930F95E0558CF3A66A20F909E63763E9450DBDE6
163D435C4B87391B48D38FA18B0BDF0A6DED8311D4355BF65DEF10B20843F0B1
AA4BE6108D2455316E16C3790BA72034D7BE9025BE2E1D13229FEA379D23BED8
DCA6132D76C53B78A28BC434AF4C93A8D2932BDF7D79A3BDD188901FB6373D0C
EE6B46717917EBE9A8C0B359FC8A6BE24847A544DAA7C81748D360EEF030C604
47FBB0C3A3A15EDC6C87355C5F7C8F822828FD414A3BF0C1B89EBBF3860AF123
D485799661E8A000F606BCC94E549E58EA59668CBCA064DDB13B68D37CD8C2CC
B321E0DBB1291EABC3419C009A5A37506BC2711955DBBCF4A23CBCFC76BD0A3C
E9AD88DBCD9CA63671084201A876A328D58784A92C4BCD75A6E7F80E84757AE2
05C5DCC0AB2D5635020D26B524DACDFE0D8DCF2F19B983F8683A835B98A1D4AE
5D9CA434A535EEA888124D0A801E737ABB84A750A16A4999D5A59AEB5FAE6FA5
1CC15BDA5D6B2558C0BA02DE051BE110E608B701F2060287164273ECAC6A6CB0
33D54AC751EB7903B8C5CC992883B51BD00DFB3BDE32F3C81073D3810233231A
7944260036DD3A631A892635948B1DDE8BFB8514BF6888BF579EE788CFDEFF94
9914C4B69F50F6628F9EEC6842B79D994563CC061B079BA8C8459393D8766BF4
B26E479DA0BC8E03089ABCC46C2C6849606988C3B7F11476BD78B73FD7855684
23E145C6B2DD38630FF688B69F4881D918850DD69475D7C8CEE1255CCB36DDAC
9B974D3E6419A084C38C5EE93D23665172A82B6CDBA3264DA68BC3F91B357B8A
9F9AE8BF9E2E340162023B85CFE6D9AFB6B92437C65BB7CEC0F081877B317766
DEA2090316916B563F6D7CA81A1C6ABCB45E5A9848A2485EC84D12EF03328075
089DB8419642F9E1FD36D119C88AB0557483220716B9D0F54BEAB6227878AB00
1472B32BD540B24672F7383F877CACEBEB622B2E1CA5CF16CF357CBAA6B894DA
AB11687D002082B89E2DD0885CA956529EA49D7B91337D13C051E1C312D6188D
585FFA65F1B9EC81442B2266D82018994C31A54DDC94C9A8E8625557BFA0C123
C0DBC2E879FBEB40EF57CD4DDFFCE7B9035E2CE43776643E4280B1F4BACEBDEE
F87161DE496B634DFA9A68FFF20ABB527F1A8F30C66C22BA495F96F4ECD23EDF
F11182E78EA26C48244E65F7A54E14EA3DEE4621E32EE2D28136769973AA83D6
99485A7E03E71DA50FB2096EE5DAC923C8B74B4B5390076A43C82C91B982B19D
7AA8B61516F4BB97CAB22F21B630E2D0D5F8F796E0C285B0BE95D3207EF8A482
C2BF34FB77D107652BD59E002C56B3DD423BE92CA44DC6B684A2ABBE3BD976D4
58A2D39051796982117FADE30AEEB73BF979B76603510EB77DADC3A90F91F7A7
C935ED72A0DAC208D1B93A07374374666771E209FBEC05EF610A2A93B4883DA2
20360E10B92ABC0E14777F2B92AD4C8FC0033CEEF644ED47854E3569ED522FF4
EA97120A22A0FA9505D9A09C8FD62172610A719CD4E8F5497B660FFE76B2B0F0
87D6458F2B1D9407CB5336010A86675170437D1AD9B992FF3092CACE0E6A101E
1F33FE3DD95501AA0E604200A17BE95970E062EFACBBE95760C7DDC76D424DAB
A50B232A8254B034F051838810E001190E0DF4AEC960EE3BCDED36FEC31EAABE
44B4E65AC23ECFD21CAC6764484364FBCE6D701FB389257B8BC394F23ADB5C7B
EBECB25E8CDC093203DBED8E55CF8FACE3A6B963605242F5BCBA9C0E5A09B0AB
344AF757886F393D67E23FD0CCDD99E7738567501A902119B3372744951CC1E1
4826785042123F578404BB143E60CF3AF1721FD3653DF05B3CC7E5AB7C042908
4ECFCEBD777E6FB60644CD6DFAA856E64BDB00231392BE88421A29705AC41008
BB7C1C7C3A820EA12732D95E3C21CAA8F9B9C27FEDD47BA39F28909744DD2A0E
854D72C2587B6CAD29EC5A213383D0663B9318AA67E31AF476F2D5CABC2D1BDE
19298E7CACEBEB622B2E1CA5CF16CF357CBAA6B894DAA88C82EE9A15E7C355D0
EB24E751C1E6709AE201C72F1F0297927274A732813A49A473EDB7E9886B6C45
605682560320FBD3618AB79C7283E29A3FEB313E054934D4F86A13C69DD2E11A
EF151F68A978656397F0FB0D9F6D163D9DAC385340EAA8125921E0646C0C76B8
75FF4244C3D4CCCA3404EDE621A85F81C42418F86A00F9E86AD202CF9A53773F
BDFFC20DFA02DCA07F57B5F1164FAB22A0707002611E87CB7684B4B2C51F1414
CD3DE00E9BAF2B4A4E2F5A13400556D1D07217CE900C16506F570143710A431D
8B7790DFD1FC31D5878E3D6536EA9B9EA11DD00E3EC5B06D07494973F5249B89
DF0C0C2A31A235CFC07B04E871870BCEE93570EF9F95FA36EB42FD653E615051
C80757DD30639113DA11A98FB90364F008A13B11155C0A2A1EED234C2B96E993
343C29D9E4A9A44C9B04554E352CC7D54C426D3E520704A5B0FD809F2C02709D
E3537BBD930EA8256B796DF56EEB39D30460335D0C09F2C5E2853071B8B14A65
50AA382A75AD0CF739EF1B49B52511E8DD894F48AE762283F1DFEA6F94F63BA7
AD48076382BB74EB11E606954B3A36E32E7D4C8766EB4F2B742B24FBE4C835B0
57D5953BA549C0742D661C8D6BA1F3B70C90C45CB9FB0D893F79F3230443D113
13D6EBB9324103D392958B6886F383A7EA699B697C56120750B42D7D3D3E18FB
61EB806D118A2C336CAFB4B7D6297FA506FDD296949F8FE9C26D871571EC684F
397CAFF417D6C412A8F0B0A50A868AE11E3290C47C7C4C9C8FA62A078F4F1683
F37E5F7B8FBF2198D2FE6A20604B1984ECB3208C2DC55AFC5016FB2C4B3A0D97
9549C7FCEE1F220DEF7CD6F56354DFE69300CCBD5600B7E80ED61FBC5624B90F
8DCD06939764FEC56E32355FA2F4C860EF57F9251FA9B45F45C3630465995C8D
346531420847FDECB667D6344DFC50A6DAFCC37D6433E5A77CCA98D62B1B218C
8B371843DDF5DCBACC2CB871612C8E5DABD16A1F78C77DCA1277328B7AD72AF9
31750DD45908186740C9412068CEBAB515DF56E83B5256D14614EBF66B06D640
012D108ECD3329117185F2DCCEEF8024517ABC1951B2F5FEB44F59C055C5D608
7F1FE6E825263B84FE05778A419576E82A56E760131E50759E3C72DBE148DA73
249AA90013DB77AC6F4922CC21BD916F5D5C5D95792DA6BF1C6E0DAB55FCFE8E
B2D6CF6BBC5FD098C3588D856421AD456105F4F4FF47779A5523F550FEECD48E
151DBE7DB966043D6E6527DA0FBC55BD70A4CC7AFB47225F6D9519498F979AB0
8B72AB42EC156EFD00136037D124481DF8E5CA7D5F3F84929BA4716C503F2F59
9BD2303842C303C712B005BB68F9913CBEFDDF14FEC0C1779D733F531FF66138
1DC983DE2858E791FC9F8DAB79438F28BD4D270F57A959F26997929BD1F88798
6C783C493794BF12502E04FC52064E63D005F20349686321AB7875CCA19E45CF
3721111356D1F3E208CC50AFF542AF5F9A3D74162C8529E1C2C1A078F05D9A41
0595A0162FAE42F33C6C8ACF74B49C313653846346846F8527E35F74F8FE7D14
B7B44BBE5060097F5A4FBCDC27B8E4CF107F0A4307D118828912D14C97923176
64F111BB0A83C676E7AB960B128A6F37BEA6F0D11C026236CF35CB771B40D488
06F82B4B5AA65A7A9B6E99FED552EA6CE7E90AEA7B324350D5926BF3AAB7CF46
2B8C46CCC43D4DB05F65857EC1CBE59F047E3956309ECAAA93185644E3A0098D
CDD32D50196DB55BC8463033C452199674619C4FB0008BD647A448A8CE29ECAF
881590FA30DD9F5DFFD9F3ED021857F33C1ACEFD2CEA6ABA7AC14F35703F4D09
F53229A3A1A11491A2B9C1C4DD2D5EAE1D794DEE0CFB00086F33051755365CE3
2646351A7610E9D59B7ADB1182219104B22197EA041EB4BD5601CEB6D079BDD5
68FEEFE9BF03AF9D84DD2AB94847F33A3AB3757D2F111C20479AFCD1112FCF06
BA3E3587F5F1613F5F05DFBE4CDFDA94B1438B4AEB72DD3680CDFCE4008A7DC0
6D5DD2F731B5477840F1FC1BA2ED183B5106346EC0D1CA40AB192D2810B26906
E9E6BC229D511F324E32956177C194AD1D8017BA9EFE095875C132BA926E34A8
F8C31B235E452E3F6F5CBDF5D34B08CD2762A1676BB6CF6E1CB63941DB2B2DB1
BCD88F7FDE6F59961B6BE0AB723330AB8CDC590412BBFDEE310FB8C7B744C725
13D8A68643462E37F0ECD06F68196A2FD0E2208661DB0F0E9413BF0482B65F61
48263D3133C7200962174762F97B1EA41504A607A6E98111D319AFF427C2FCD1
B346DD76961F4397DF5C080E7881848222220A63605F00205C205B35DB467139
9E2573FFD3CAF3BD21C445F6B6F94A5018BB47F9E6FB528CB4E8CFD3A1B17BCD
1A2D9695130DFB4457D95376D595F18A4289312E74FA9C289A53647EB6D77033
384650DA926F24CFC1AC7172514CF1F4CC942F4B9C2FB5460E41AC69A342C663
C609417DB14DF4082A5476D39BCDB8524EA0501EAEC5D21617E9E56D6801FDCB
6245E3892183DEF4894EE1FEBF343E45D8237138BD515FFA5FCF62C46683A81A
E2BA83BE28EF402C92B79B8A0A37FC940714204D06B4D6749FC4B0B5C900A42D
124B6DC8977F061B9FA20CF2EFB32200703EF58C425B9A7D24AA6D3FC2E8D8E1
4D1017DC8428791C900E377B78459895A5A344F9EDCDECD6B5F6907657BCB470
A3042A36568417B37571F52EEBB72AEBB3BC9F3C72022E5EA54631F214C9C3A8
3B0675726AD12544F2864E4811F7AB3C025BD4E720FAE7571F9542FC063B3557
9C73EB8B80508B7334378E0843451E4D9840AF87F800D3B6E0248AC51928DE34
26C00EDFF20384F08EE78F508778BDDF177526DF45B723A196F80801C400F37D
9F913322F0B461336F4498BCCE3FD4E9C75A824F521C69F2786AD0B68F19B58C
D837871241EF7A195D4747C9FFDD581537610B95B6FC70E2982572E4CDF1C6E5
BA5CBBAAF733DF941BF1D4154692B4430507EDAE822C09489BA86CDF13155470
4097F14C94F2C72E10C5CFD644B2DF608DF598EA17CA0E81F3D1C44085F1F6FF
76B33D16173C3E69F47405B95F2AC069DC184B61E440D2CBB0B97445265D1A8A
CA3136D7D462C1C68CA7FD651AF167894B9743045EAF35E1B98948B7C20CA008
65892DFB085E6DA8115834CF09189D1E87646AF7FA888F5689FB281BE5AB48A4
628EC397AC29A90CB01EF65416294CAF223673F451FC750AAE0047781D390CC7
B93D114349060759E600067CDDEEC940681EC382CAC59FE7782CE421AFEF1900
4F3B4CB98AB14757589BD32FAAAEBFEE0F7C1DE0499D8206BA8984920F165CC8
5A4383F380C770AD1E44970D66A6C473EE1B8D779E36680ABAEAAD15FCC0DE88
213B28CA601D37EAB0EAC6D3D4F52C8FF0FD4C6DFF13269888ADBC8891447ABA
8C3EBCA6A4A7AABE5B8660B3F7CEC1B38E56DA1AB8B1DFD3445233A03A010BBB
23114B9CDF03235CC96E832A27D6D3F9F1E0D613DBEE5BDA3F3F384215CE8E23
6E7B83CA8B33865EE1971B7923E65853DF916BFAFE3341CFA4DBCB1CD87EF5BB
703EB02C980C4A2C3048043FF23BB1B8C34F99BEDD52B692A43712108520D9CE
9193DA216221F842FD0F3E1467B0601BD0EE2AE975849408D3A7D043213910A9
66556CD1B511B5AF5D48027A85A64BE0BC3146B824685F23A5AF3616C49C07BE
DA6A2349283F0AF62704F47A97272186E8BAD5B6494BEDC9B9C7B6A0D6E6D116
146E882355ABBDAA8679300F6237728E5B16EA7CEB75BD87EC89221203840F03
7B4146F2BAB25A95E1B0429A0F9DCA338016FA5F8498FD5AFC79B778CC40F4F6
3FA2845A561B096FF463473278D3831B545DB05487C88DB06E31E23E525006B5
26AD5D4999C58A8A322A1480BDC6E00A077A0FFD8E4AE5D7ED9EADA808123977
5D89C1D1836F6A505EE94555E5B57F59BF206737D1B3E9909285BBE7696BEB81
7C843B0D44EB7C9361A54E1E2FF1C4CCB5E8497C64E0B5F37A43352667CAD340
C0D42D850BD31A8B48275E452E3F6F5CBDF5D34B08CD2762A1676BB6CF6E1D63
86840301B22A3F138D3B45D2739DECDDCDED8E9BAFBD3058BE14B4C59A1AD1EF
BD0B82213FD463BC757AF97BD95E4640BC1D08E083BA4D822D74C1473FEBC4F1
81C199DEADFADFC8BCE85D2A7E4CF939DDC479252D945728A246A320A0932B65
C1FF7776FC2AD3CC8496259C1EAD63BE5B16E0E9DBE671311648C07460ECCF0C
BBBC5753A16FD0EE22A88D9A1F1E0F81552BD0795515FAD3F9198AC229ACD941
918B6554DFF02340FDD61392BE9B0F7285C3027ADFF7DBE2AD88CA3261C59CFC
1EC0418A935C3A992191A5A26154CE54AFD9DB3C8E9EED4DDD03ED2CF5F49840
0D6D7DC137A904C96EB7B3CA2E65F64E81E565425AD9518EAA9CCF31324B1361
E9A081348CE2747819103D19667B4A9FB2E0CF52DB0AF9EA0ECEFA45FC1A39C8
134939CD28AF21976B42B06A63719C44432BDB437269195FAEA379B9222DDA32
C67BE4C5F9AAA6971D59B4F952DAEC67ADB2BC7EBCADE1A3554A0BE5B900C450
18BF1370D637D76C3E3EF6962EB9294FA639F8424DDF220A3F2FA1D88A32934A
FBECBC8527A737E27EFD9482D8632C12606449ACD326A76B011D9FDD66C24C53
42A7C722723CAC55F4D5236628739606D8EF5ACD55D679ADC175AFF4CA62754B
465E1238245E283972604E3D5E1A07C0F6DB1FD83F056774CC7F2283B249B075
479606AC54B14EC4BA6D11343AD3B5D2A864498651C5705B1F53C6F0370307BC
6CA5E7CE474F62D5EA99A9CC55622920942CE4DA12D854BF28B4CE8E7EFB5B7E
3DB938C4EBC418A81F088C9AE16443C5E70BC18F029243D6F681B68F1FCB4849
B3E0E8D46A3090B42801AE7A97DBC8BA1101F2024BC23065C4640FC87709086E
4A434207F479BBE95CA7FB5A5279043E68FFB9229EC6DE4ED5A8DA7D9A7BA621
8F726809BA1644C7BFCB667D8A6123F3B3A1CD491BFC7193127782371D3D4884
B50E1295C517FC56B8695D5F5D93A16DAF98DB46AB898455AEA46E0B4ECD8C9D
470A18B40E952E098614C2DB3FA57D400530CA6FA979C7DAC0FDCDECABE30FE2
A2A9956CCC05F24BF94F4DA33D8601BB35995950CB00A5EC95FC4A76220272D5
499997D231BB07679EB2ABDE895E12261315A776E25790EADAEBFE48DCB5DC6B
AA38B43805207BE1887DC760256CEC02B2AE8F89259944B1272B1259D760D7B2
37396DEAE8A7AE912C213D0F380112FEBD737CFF6C1483C4520AFCFFF09FCBAE
6C1BB500C839DC25CB07FD277A2653430E85125D4777602F732DCCDAB71EB262
B8A87DFD9B9F10E2CF2657A2CBD51A828AFF6D632592EAEF5EF1198F29FCDC13
6E434D7FC5E7710559B91756AD1171ED3E344040DB786E290974F9FA28FC998B
BA0706D024C4B084D5542DE483E32C6F93DC0D2CBBB8C43CD8AD326F12DC0228
CD183D707D3F0E3EE831F67EA52C8B139B17C45AA6DD40DE855B47289C449B6A
D8D5F1D557102050EF05CD15FB947C4D9C05092A89F03CDE0E64DB42318488E2
2F16DA55C31E3FE7541B2DB7C9E5641428336BB88D506E2A065760CD6959497D
1C453008AF26856BDD3C2ED54D034A8D5B69C16F750F4788B6B3C3C2776D4DDE
24821F9AA75DC4B7C0B5D6C66A4D98AD2DFCD5B367227C087A1C75FB61335815
95F46226B4DA81F09AFE275D150F72E04C9E37D08F89E84B1DCE7F2A0BB0078E
B6BC86195544654068EE836036C4EABC2FFFFD635262090F86990BBA9F7F7C00
89818E3F82FA42E9473ABE2F9E0CEE7E234C8552D197D6C1D6693EA252427E63
6BB34CEF637D1ECF0C423A86C57CBAE8F9F82E65EDBCCB17469C450DBC56EB62
E04FEA0A55503F88BFDF011436D9D50889164140ABE963649785F697D2DF5F02
41C05C449D8DE54A3FD79CEB33713CB4B56EEB8495CDE61641369CCCEF623D3D
9F176F6510B9526E94D4E38E62F8B9B96E2D26F5BF4124E048782F415DA100ED
3759D056E3F40CBD3592336F831A69254A546B6DA8EECA492D56B2F9F55B3230
CC493F5CA6351ECB3F8570D5DE3EC220C719B63A925543F01CAAE307ABC48437
0405639C15783DB864303A5C00DBFF8D706CA6E53AB3114BBCE45110E40E9EC2
1E3A36EA8E3130C5C36BB2496DD5233BA301341CF48CAEC796E0CC6F5A17D0A8
87B5BE606C0A21EFE6853F86AE3B7402670CAC5ADDE78A45B552D7C6C98468AC
A69BDE8559A69AEE3175F2541B3E4A4B1776A6E5FDEE28D416CD3F0F01017DB6
D4137018EEF6C9BF625A1596A7A3BABD650DFC26A600CB272F79AE07698A0018
620539FAF0F3B989CFDE0D43F5248CD7CA2780910F95C394109A615D14851797
1542915D70737B3F22C6A831A9821624A86022C5D6CE35E7D5460EF05B1A5136
CF2C1DDEB46F72D51F6DD71F93F498F4E720FC9819E6C6AE3A34049A994414A8
486882520611165AAF3711B005AD3DFBE56FD3E443500BA9BFC908A2BAC4B306
2E37B68DCA401224AB93C14A4628E76309EC9D0B81B08747404EED051DAB027B
91DC86890FB34B80E5A62A8232106093EA39091D59EC27F6CC868ABB2CE5B2C1
45DAE2B6128E6C913C88173350D3531657B3D50BD845F8ED3FC10FD2C2F18D67
BAE0AB0AA17AADDE64DCC9318096FD87B5398776E6126E017A86A80C9B8B11A0
C4F01B34DE02BBF4A5BD6DD4517DDE179CA649DEDD316A452509D2804B5BE0F6
C5C6E9E45F4077E639BFD624575BBD8F1BA49A25E227C1394F08CC4298C38E32
B95D790323B4A5713E69521D8E8AA506F5AF21BC9EA91B74EC159DA81A275C73
2DACE2E77B9522FF09F1D5F611E8AC05D2A5D0599EF54054B02E8A44557DB81E
C1A200EC7DE4135733C7EBA836A58B084A3D3732D66EB3AE461EDB7CC7A45957
BC5C6B1992738E783F8C441C04A64A0C41F8C9F34807DEDDF20BB1BC3140F7B8
CFD1429C72E269A2B8FBA0D207B75B05774BDF8E20C1425C9328C360FD1FFE12
027F79F212F19C2A51649B1E7CF1B65135F07EAF54D944AAB77B61B0A7EB4093
99260F525B340DC1C81FED5A23A13FBD66C14903212E934E5FAF13AC725DE145
58805D95FF09C7CF0C7C4FC3D46D10F12F7D242B1D2696B3210D7958A6DCD6B2
6496D168ABE0CCCC8EC2079FE9F74D53DAB010AA035CF061D44C6766BBF044D9
3283569A723956E8BE316942861CDE21B7E4F39B4E372C87AD9B9979BC0426DA
3CC71CA7D654FC4E9D052B5573FA91A2859010F2A9FEE4159BE5160EE15917DE
8DD30CBAC7E126443381C8DB3FA8EAFE3A367847CA1EA003CAAC24CE76503270
8B5E11CEE9B1B243AF5EFE9FF1743C357A09FA4DDD599A38B3E39072B8A5CCB1
A9DAAF125E79D5AD7DAB05959E694040B01995A0182BBED304B28C825FBBAAF6
1C73D2254EFA2DD01EB85FD2AAE351AA5C1A5EAB8CC3B57C95508948DA0B7EF7
10769731545B30E4232333D0D851BB55A87A5DAE6FBF02D0E32620F3E8A2D06F
EF8A8810791D8613ADB7719C161E40A8A8AD8074AABD6A06EA11E40F1F4F4C6A
A71F9FCC2348730C4A5DDF4ECC5218D4C7264564CD758E0545C941D59CFA44DE
81C9562831CD23DEC40E62656574975F2499F50FA04347CAB53A5AAA7A2C22B6
7328EBED931F56CDC90C677070565126AD56CB4E65D9BB17CF09AE6042E58DAF
96ECDB80756FC73220A36FA8F9A4B408667AC6B70F3C41E627B1DB9876EE658C
50AB2BDC699E81A1F0E02D8D3A3C8FAAECF7839D20329CBC5CA848EDEC23AEFA
3FDB17EE7A70C7AAEEBCCA32CB4A83B882767D7AB50B2BB294132270228229EE
A3F8D8300E7A91319CF38A1BBE0C7FBEA056326E41636E17D93850A2FC840A37
2BA2464D679D68EF064EDC33D02A73272FFC9F2C1A342CC26D444F54CAFFB3C1
8BA66F9D093C3BCEA883264251DE61694597FD026472CBF13D266D59998E3927
4E7F9DDC8E3DFFF7511A3261532247A8570D83E7DBA889CAC631360E013D4F72
0D99CF9C02B4C1C525224F73DEC5D0A23358A5F1BAB491FB81688BA09F511613
1F3FDD00FF97794144F0343368A9170BECE87FD510F4D81C140E76FBCC6C6AD6
64E159FE319894B6CBB34250C0FCB3860E9ACAEC0BF95204DBF32AFA9DB2C058
F7CF89C6EE634E969D614648349BF8090B0B84D5178971088EFA7599D096FC92
8471D2FE294C8173E82B508A726F8E0E36344E84B603738B2776D1C11C1CA08B
C250CA8CDD6D40339955325265C0D5687884A192D357DBC2F6694CBCDE6BBD59
18337528F0D0C73A81FC12A743C7142A20CC75E63F283F1424743DCACC0B4CED
DF122A4AA12500EF66C5F23DD00C6C48AEF676230A41BA29DF7C097133471823
27965F9752C64E9D400BB556C2DD51FE283B59D8B97288C1771381D3DAF5B148
F098CEE2A1576AA2076C16E1C212D194750A8A223D02F28A0B8845A0995ED074
E3357797A5728B46BACA35D941E9307561A0CD87A059EFD7C89DD3F0B328490C
546A2BD7B5C158C66DCA5062E39BB855E9BD68C4C0728A5B37F88F7B480E1A19
99D0EB4CF1F136C8C443D98A6A159358C7A5B25E241CEA8860B13FEFEEA3132F
FA2D59089F700B3B3780C8A421A1F6F838A8DE13C337900462F952EABBDC2EB1
F90AA5252C572AAAB15FEF7E934F5D0498C4BE4D042DB8EB89576F497EB09A96
30A006FF0908EA1795C412FF9071E551FC4F6A4CDF352FDFD48E76C5737253FB
5D2AE5F2FF9931FDA9F1FA542076F28B47B045B7B7F73CA69D25D01C140E76FB
CC6C6AD664E159FE319894B6CBB3425E08CFA16FBABDBA9EBDF4DE3A734D5541
7D4499D22B8140DA29C26DE2508F95949634071E3405B3E415E947C2F695DE73
34E31E8BAEF4799FF68EDBBA8148EA7FE7FDEB29D97E62720614F7C2864E7592
7DE4EF96AEFE8503AC8F72831C12A52AAE64EB28B620A5EB34CC8E514A11D299
3A2B670C19B19D222051E7E89D6F7CBAAFCFE6131664CB5483D7F51523208644
416D6FA5F5C34F34EDD5665002FE74B02B3D0C6B9B201C3AC5CD3117B2910409
22404A3CEFB3AD50732A73133F621717A771A7A619EC94019D0423119AF44640
83CD0BC95863750A7641EE902F756B5163226B6FF5B99C7A03E85DF847DBFDE9
6CDA757AB3D1C4DC0C3C6A0344F24CF4FF4AC5A81593763796E077F8A5AC9EE1
C7F39AE77D096C9980EE3ED6C76F39A113EA3F562280F45331B642B247C41928
39CEC9DB59BAF1CBC9103612B592A9CC18130DF581B015101EB6CC046B622744
84230325779A1280F7C6677C409792D39B6E9755C8A6726CB0356029D9598250
579F0A7E3E12C6C3E9A071256151DA611FD687DC530F7383E3B9EE0B0A882F18
427AE2705380A3AB4A36A3BD6DFED9BC3104B7D31460E3FA77DE5FE7F0D07EB2
42E871D59DC7BCCCB1BF72A1BE3177841BA0EA6C258B9D325E73ED1FB4EB090F
048FA8F3D6C4C74F5BCB2FF814D412CBDB5FD3537EF069025B19CDC96D6D1FD0
C96C1602D4DBDC50E784B814FE70C423D652C9195E000B85F59F97AF55023AC7
6F4F510C8EA5E3058B2D44489EF84E0728C9C24A12E4D4D2FF05691F66EB7AE5
BD69A89A880817E37691ED099A37AD49A931A78AF275CDBAB03CCFAD3EB5F352
55376D0C7673DDCDD859DFCD304A7C65F60A423B4DBEE83383C662BA6C135964
6C32479DCBB8C3CAA881B9D885A0C69BA21BD8CDA5E62DFB940A1A24F3D5BE6C
D45CCCEDC569E694EA5B249B7A07735A36737C99E1B7D6043FEC3D5CB4E6E27D
58BDBDF02AA83FC9C8C5076876ABF67E6AE37B57EE57EF59082413742A4CD1BB
78156D5809A688524EDD5903762540856C9581EE6076F3482F71DC669FAAA183
5D393308C37DCF78D696E409533BF93AA84D25AFB97B8CA410035A7A1A1FD3A1
869E7BF581388AF6A743BC02A1FF3BCC659124EB705B7193792FDF28F3E16A9F
85399969423606BC9D888127F2868621103491FCFC4C7D264A2EFF759077EF92
F1FE5170E2678FF64C79A50861A1F8A1F9E6F7442A025277B6D822912A0D6E5D
2AED3103DC399310D2F98F720A01C2D890160AA95287CF068D5967F20F635312
26BE5BE71368A6A7C89D2838EE521552863D3FE1E1A51AF1286BD424465AD6E2
B18C0BF172C14465D2CA084B9F14026958C56DE73E5A06C67184BBCF69B32C4F
358A707613C15B4C8D69CCFBFE7E3062895E706E20DE8096399754FD92C7054B
FFF87BC43B7676E7928DFFDB5EC6106C4A123D9E53C42E821C769735FB865860
424EA7F5CD9AC21A81FDD86EE061FA0C6E78F34B4FD365537257E124AA27EB01
587F66DBDA32D5E8EAF654E12C2E333311F4DDFCC48062796AA4E86A0917C4EE
F9B96EC85F7F61CC55FB5F0467AED7B24F09528EC9648A398EF90078D11D6C04
6CFBB647CA29C674A2D9E60413BDCBA95220F975CCD06E04A5B17E3209DF9F81
567747542BD1857B6F5060D31AEC6560DF01BCD3AE6368624B333F9D879A1483
E25461EB3D5D887FBF1B6DAA294F745D0BAD0459F0C34E1435EB39F8E3DB5BB2
3E376F69256B74DCC8BD306454B1F216A6FCF2643D88E8D7B77B241468F74576
6CAB16E4919B2813CBFCD241188FE42442E2E123132629A861CE3D889D1DB7CA
E08D92F3DA1BC112FD58AF5404D67B63178165101C27F5EBCCF59911E33447DE
0C01EBD38F0DB5BD23B4507496C95A57D76C2C39A36DBE84D26A7987D1B6A10A
4D6765835DEC4EA0645F47A6B2BED7E606C47459A99753B33453EB77E4B8C760
6EC36AEDA61A1E3D74346D1DE154C9A6EC3722200E422950B9D265C9CEEE3E31
53FCAB3050CA75A82E9483EC5B3E673B1798EEE3E80D9DA51B1F5E7F7E9925E3
1B3424D2DFFDBC511CAB6DABDC2EC9F4D778E7384A27AE6A8DDFE8FD576B90A6
C4DAD6D6C8EE07AF682F925F01D0B2618ED786F8E6A28A5AA2A6206FBC132F4A
BF5BB7758DA7128F76C329FAE1045C5C6E47DE0F7213002E5CEDD40B5251ED1A
79961C8A15842664D3F1345CD967A08A9C8FDB8649C5C3A80DC5E3CEACD449EF
85D68E16B5AE0AC886C1FDABD09D5C3E33AFFCF2B17C22BD326CB8701454DD7A
46E44E2F5C77937234D1D6AFCA63944D3FE5126E4C57673E669DD41726324EC6
A85A9939640EF9C7379060C943239F322B3428E32E833FD988D566417E5C3809
A3B074863F3E57F890B955358A57A2D4BC94024D03260F85EA97D941DAC5A701
0B6E748FD03772C5883574711F95215C2ADFAF9C4ED4EB6497E5FFC3F42F921D
984E7A9672002EE88D7E1ADA023B8D0588F0A374B0F9213242A4A52B198556E8
5CFF48EA6D5AA59E77FAE0E8260CA861565981D4CAEEE2BEB1B3D7ECA4A65FA5
B1A2042BF9A9B9BB4C36EA4D19DB0B758831499B6DA173FE661997EFA808DBE4
B343F4FCCF4C262A4C9FE3808E18C2E90682B14B70823CCBF28E3EB2C5A2FC58
DD2D1F29B003E56B90BC88FBA914D883F38EF4131EAD223717E66736B72EB971
A5D1BF3E9BAB479A3F9DA76C318D6D0798203FED7C048BA7C4C7B1AD1EBF9800
96EC4AF841E416430F8B440480D98E727628710490D4EAAFB5AA2AEC52E3A4F8
18C4637EFFA4805B442011F240BB73105F411BA7D761AE436558D1638DF884BC
D1C5078088747F7A85EAB2BF669770E02E68BA00B8DA27069BAB76BF95151E44
4671C18074FD94A4ABEC10897DAB271A4E5A06EB05963597ED170FA43DF00B70
9DE32F53B5FF6CAE56CB9BF699DE37471AFB91DC4E6728A1CA7BA4ACB868F9CC
431C92BDDADFE8E86F1CD55938E4C906DC4685E758218CFA0190345C07EAD837
166627BCFFAD92E81D09228398FCDA110B8C52E6E700F31623385E9F8DA306A3
384FADEC42DBC9E0C3CE22D733451A7F7863DC5A41479259F6F4A956F71F5F38
336ED4F72EF1009500E787CE16C8528A5B39CC26C53317A3A4CA7962FB6E419F
BA8354DBFD1A392B45DA7E4259CAE59A14B51246DF4C74CBB662283EA55356C9
86E207187FBBA32F88BCB5C4D7803C11E8C234C2433B9C7385EE25277D250DB7
422EFB8122E63791BABA79F350ED0919BE6A10CBB7D1E7B191C84C9A5F8061C2
63D7B0DB171907EE397BA74215C168CDC29E4F0AA507AD3646DB717301B5AA68
F942840AE273393C2098EA575E549225E04A753B82978F6ADABE40C2A15E2F73
9D73D4931E3263E89A0CC83FB6A36AAF14A550C40C895150BD5CC4DE5927CF37
D594B92F9BF9AF216F5D3160BB73DB275843EF80302912AC116E4BD5CCE9171F
E3C81517DB81CA5A9C55306AED6DC20AB1A99E57813E037B509120874B21AA7A
009F287AA5007F174C14208E531AE57904A321B2FED41C78A204A8C740583C5B
7C68F4E04D09C55078060E7F9FD97B5198F6BB49F96E9CFD1FDD58F8E0EC24FE
E3942674237B262954F2225D961E410FA4088A0B87A1FC0941BADF67DC1BD9F4
7745D950EB67D443394E8BDDF37CC49F3CBA01278A456BF6EAAD2163B2871DDB
76497570C90861F3ECFFAE29044CC07FCD6CF9DD7FCE413A0B2CF77752968584
9A0343E21DC3DFC0F2885961670BE2D2CE87F11B7F4194FFA6E5850BCF12BF60
093FF7751C9283B62DCCC0AD176CCBBB5978D4D7919969939A14CC93BFAD50E5
5FFE64861AB92B0F5D9DC9D0A91B93ED65003BD0C4D6608EBEA9ADFE8D86B613
F9E6BD8B447E504044014B09C17C6B69CBD44517068178925302C10D5F14CE4C
E1D9FB363597AD13D61857519977DD5BBD317B3402D11CD481BFFDD1D618A5DB
1D28EBEFBBBA74C9573A48E8EBB5E065B05B7F41CF563059333B27DF0A491597
07C99A752D392CF26BB8C413E95EA8B6DD3AE6D86EEBD98A422438D80E333FB6
673118F12D7665C52DFB2BCF103AC9539C2890A9DA4ADCAD6C3F8A80A011F4D7
127CA67B6A9665CAC4EAC9EAA9292428B9368284EDCDE7B6926FA86E48616F51
26E6A290B95DA276FF1D56D108AA5F588ADAE51503CA8F5C63F2AF356DEBC9B8
2C938FA20D18544670EA6DD15C0BC79F65939B07A2614A73E6CD0A8650EDD6F6
334DFA132CF54473AF0AE80410C4FBC3A45FBE3BA447A7F8BF6138BF547EF45B
3D8111AE4E0CBFCF1D5B4E0A3ECFD0C7CE429D9BF87A7718A844BBA2C252FD10
651F3CC301F18D74A03CCDF062A1A26978555088A101B9ABB0FEB8C09BBC8863
D02E7CBBC3F9B1AB0D125837CA2C8AB31C985EEA0521867422FD82022BEBE54D
643F7C2E45E2B94537D9CEF904EDEC7EBFB0E60995CF6457CF0F5FD003A9F5E0
CE1DD74F1C6081D61317763D0C226C1C3618EB02233D61F76028294FCFA010AD
BA06F53A700D3198BD5993F661B75F403B0327A58E94861527D7189D8EFB243A
03528359F9CA0BC7FD7E77265441DBB89C9C6404CD552809BCDB1E2A9DDE42E2
66DBC47A19801E80E12CB797C9234AAAE7D3B6E3905815731051460362D658F5
A86232F92FC49DBF4B870C28C308C0373A7CAC1AD5E47F742EB7A807172475F1
5F1AAE6DCADA9751CA53EF5D553C019F9BF0E9B31093AF70DB81A133E6B4D9FD
4F085F63C7878F6672C51D672D6A84C5349A37796221BD1FFD540B6C1366F6AD
6AFD1AB243502A86FB184B38339EE2B4714126024DD013CCE6E2B4DDF8346648
0BB8165D978429DEC75D2A0E8B21B62BEF5EB66D79C82CEF124AF57A5FE2380B
E8DA45A7FD3452FC17F10A319F40A8A592DE76EBBDA80AC0E8C4B87B1B877525
64280284E1E34990475FC4232A38D8F3903D81C9A329939DB53E6516961E5896
11DC0A8447508974D10893540C16E97D4EE3368AC2543D6C58A88364F4DD9612
7F8CC4D9B62B55A34DD00EDDD89AA759DFD254396FC3772C7E53CAF5349899BF
51B8F1F183F2FD61239CEAEF45CC63807FC36AB88C656291F0469CB813D1453D
986E24853C42E8D001B7C8D31FCE15B3A34123CCBBCE2DE167989F65A52386FC
69EBEABDF8E3A811F2D67B799250CAF11120873098B5138444789428F2881E4C
77381AE42D708DF8E5C93474AFDFF4427F7DBD0A6B4CDE1903873187DA86D2C1
B5D2271669F99031633A7155A83360304FD4175BBC50F3077109A3A8AEFB9DB4
D49F3FC041809ACDA455C62A76B51D7309B16B089493E3B7C7A3BE9AB31FFD0D
9227EABE6152905131C6C0F2D5F535AE93682E855B1BDD6CE95562728609B876
A2510DC749CDA64277E23F7266DDB047F528380744FEA68FC835EA29E0AAB6D5
1F94887BCDB2EB6E4CBFB7B4E625D733D197D58FD49F96DBF2936E063A86DB17
95C83F76ECD2882B91FCF7E694BBEA02488CBF10A2E7632F39ECCC768AB03B0E
EB8067F8B3A8D2C6AC69398F4904AF31AB83EAEDA618C70F735DF746994341A3
79DA956BB404CAAB9038A56948BE52FD491822DDC1FD02461689B3B60737C546
E9A01A591EA3B121B082110C6F32DE72C96C375C212393E4428547E4A3139094
59423B4DBD9032C6A3A9CE03FD8D7995C36D487F4473BFADEAD0FD05FF30BDE9
97DB689CE85F6312A6A94F0B83CA62CEB456EEE562106998F7FBFAF7313B1FA5
89C0DD6CAB127ADCDBCAF6751D42E294852AAF5F35B78CD823562CBE71C9CA5E
9E71CAAF5A17D5598D8E8BB772EF73E44F16953C449AAEE0A157C20D987B7AEB
3CF7613C59139FC5E6ADEEA1554980E13B37FEC33DF3B23FC7BFEDA3E647E53E
53B9A042CBD9DE2B19F5F89F17A00CB109969765689E81A1F0E02D8D3A3C8FAA
ECF7839D20329CBC5E0B3D95307ED45E1BD5D27218AAC915F05D77EEA1082AF6
34617D22329EBF716CA77729C6AAEFD8E6ED3CB142B2AC6D6868488718BE003D
4E96D46552563B36DA5DA851DE07322772FDA487FC97405B121569B16841F61C
7499674792DFC7909D6E682AACE3ACA14B9B7694C5C762E1B67C565A66A64EB4
6531BC2351FADCEB27C84373DE128331F2715D093D707267794000500618AE54
EA45721D0F6D8C3A1D8CDB3A7574A94AA0157967DD8B456F4AE151FA3B1FD779
5D169C15DCF39B860BDF9788BD165EBD0FDE48DB7E771B5D8C1AD361B5F0E0EA
0B829FA25519FB96600D087933CCE5EBBDFD2E68B4ECB5806358CA356BABC17B
AFDC8972DAC4BBE6EDA4D31241E009E3D03F6BA33E4584EEBE224F827A3B5B96
B2C58BD6FDD11DBACB1B5E57C4CBA31F6D67B7ED72780AE9088E7695DF12540E
7BBD928D3FF52E73696F7EE6A9A6C549D8F732F740D5B9E30173D395E1D94132
0BA2A64B42C1373ACFF3D49A16A030BEF5C410DCA1D11F770EBC2E641196A40F
43F421533B50EC14A43279E02760F37E159C9766B5A942E1CEB220391CC097A5
98D77FF64792D7F05677906C9A1B3DAB51C16D1E2C79A7488B9C54BECCF570BB
1321C8AD75114C1C0300300B9EF15A312AFFAE9B89C59659964F9E1F80068C9B
0AED83074C6270B177BAA18F1975F0E69758F15005486CD1B3524B6AE0717B81
8974CE8172F68EB29E107C77DBDBFEE4FA9528484AFEF77CB101521A0C25634F
EF2BA64D319E72F99A7F085D9DEC3446B44DE36625CDFF321ADFD514B2BA1B66
E7CFDB8FC93B69DAB9782EE17D8B2225DD8537468D380D92E1739E4711752DF1
FA7FC1DFB199C117A4B48B3B60A98EA819BCA668514AC6C52E6C67FF1AF9B675
4DB7CA7FCEE64CE04A63032A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8BC34
51B2A341ED546BB25A11C28B5846B24746523169198007B9070C1A92470E3AD7
F1CD944E91ADBD1EFF55582FA2C9438B74A118064460F8A6CB7312AB9DC7B899
600D76477AAF62C5151B948E529FFC3FCBDCE39494583F35387F2A8AAA210DCC
10B9B12CB35D25CAD10CCA98B7ACB46887315E02952C4F82B005ACCBCC9086AB
4D09E359B41CF74AED5B75C01085ED3DF0CECA0E3DCCBC573BFB381C8E0BFEB2
B97BAB80183B3A39C4BAC14F33BF9787B1A2CEAE74531005660398F6D8F90240
610A27244970757F3C25CFC3E853E2FEAF6F297269594865E9453E9B6EF22786
7D9CF9549B3B592565BC0E018F44419EFB00053102324F4C54961BA2C483F133
70C02FB893305D4CB1D95BBBD033BC41AECCCB07AE98215D4726EAA622D5080E
B08C7AC42D2FF6061893CB4DB92E26A29CE786D1E24A8B87C5B0C06A048C8AEA
E9C9724A170FAC6BCF6A85AA31C1BC2F3D686307842337CD1F9695491BBBDF27
1B5345C449112CDA9FE965A75E27349DDAEA91D2DA8C054F5AF2B20E6C3A0670
E93C00E2B855CABCF82D7325A8682A0BBA5E3FFA8BB18C7FD46A370295A0CCDD
E3DA316426D873CA2FB3C0EFE8807EC46C97979DD115601E72FD549E4EB5771C
F72B455074678DFDBED70D546BC7E2C50ED4DC524D871ABC614DA8C5DE3657D1
A80350032D19862612D8BBEE48008CDAE661378C0DA010776A25E1619AB8551A
99B84A9046A350839CC7A06F95CC4A98B9DE4976D3C5AB9B78E565A75E27349D
DAEA619E52650F8D44A7B98B1919DA870C73647C187BFD9BAFDDF89A2AB03992
BDE11AE7EE5038A81C4BA2028E998C1B76F6E9E1A73280C9A1E72A3288EBFB3C
67AF740B3FA1B24F6630F31E9066CF05BE81EAF66A0A030E6741C060A0926242
5C9A402D96950ECE7390AFEB6F7F9E6309A71C82A089CD2DF10A74C5DF2CE86D
DB34598B8CAED5B6DA81A6C816C747518720BCF83A1DDB50E23253920D112AAB
2211BD765729C4D054FF066474763370EECC9E1E60195986EB4C4BCF74BD9D62
01C7DA9C846205E522DDC3FC90FCCF6D6AD2163DFEF2651A6FF898C29998A99E
4CE824A072AAF76EE2C1C06070B1A215D2D34931E96950E83E418B529E940708
DFD0995D0085C514658D7A1084DEA5C3FCD95CB5DC9EF618EFF432ABF3634C8A
BE96901D4DC836B1FFF1416024C4AF9A9028349E5DB3808B980EDD5CFA2D4E34
7105DD345E2C115CAFA68D28538C4D2A07F2F83A8E21B0A3A0E4558B4E33BFCA
4A814D824EE4CA5383C6EB88193C59360CBA00608A4B24045FB082AB4FFE58DD
E52898955CE6DC91D4F8B7800A05DECB300CD7A8C38D774B6D9FB0FD87620B52
7100738DD02FB92820F84DC9A92081F333A71FFE65DCCA47FBB31392FE4F5F94
724C1B4C0EAB3917128DE2205D27D2ED7271F16CE4826618615F17FACA94D78E
C6097FAFD5BE455E2C97B6C512D014085A4A673DB0BFCDFF1823F3A9A80F1F7E
8F7CA7B20F2A4AE778A607C037732BD5972859B613755AA32928A759E491C1CF
2A92907B9738313B6A3BB452417F1D87BCF0C97029F589EBFA2161A918C9D739
EDE56380CC5FD12924BC2B697EAE7593248EAD1C7ADD5928EA3DECC5CF8BCAA4
CD0196D7EA238A39BCAB3E4F74E31F649B3D501D240C55CA79118BE4F2D2F5B4
D655D4D3D2906DDBDC4E25EC35CEEDEE6AC6528598D706B59A366BC76F01E0DE
B2A3F373E18A9DD16830E2806DE4BC8000E49A10AA38A3C00633327021FB7162
8931D9362326398FE89D8557300CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B79
6B6757FDFC1D6678376BA32ABBD39841AE090FAFC229BDA0443BC299A1A15D80
8C23C2CCE41F544FD7CEF8A567946D6E66C560173AD46C67891E3F4840CF00B0
25D0489FA46A1E49F8B121FB9030A753FC36DF24F2008D619DB75BBA85281C41
3245BACAFF4A4540B218101083E94631B8A929A7A402C69361E13B1B743DE1FA
11C5D0869BA2626210D7231D38C22CAA7DC31831901BD84ADE64887E6AA4AC90
D4E65D20B3EF56B9738534A89663873429AC429977FAC1C877ACEB28FC471CAE
81D2F9B206992FBA1B6D9146D3A741BDCCCB7EC1DF564E8F5BF6FC74B2621802
B29CA16DBAD0A2BF9A151AF6E507BCB19562BD225A48FBB4FF1F698369322B63
09C723F604300B995E8562B37C85E89093EC89B975E77079BE8003091B286BC4
C0FEE3F6F9B0C38F639E7A626556A96587570397F728313D2B1C52A334A6513B
3180AC41D8182B0891085C832DD6168B66730146AA18778921197C9B2FE559C7
57A92D105F0E30BBD698EEB9576115122947D8A3A09D09EBFEDF3197A5796A23
B927227E51EE1F42583C00360A382EF21A8DD920396F7F52B7D55F11CCC466F2
43547ED3120BF4959153CBC63778C1315F63CEB2F923CC12B6228C0105AE5F8C
1D033F0ABCA75BFF0B4AA2CA4021C282B09B20BA9B4009B3DD6A5FE918C91DDA
0E215A49782F144DD9F51611FADFCBC48EF1AC9D28F217747D88A77C5C5009DA
281F29ED78B547A4D83080AEB29222D619822D08CF5ACC9DDC68D89F32A2ECD7
4D501383137F464150D390E63D23EBF909C3772B458AAD14A4F5F3C628A3AFAB
C5D0922D917CDB0ADD125F3E582A8DDE862922A8F80A0DD8B36675E83371DDD0
80479D1C1E5AB2C2005DDD22E105A1F4AE4D2529C9B9A1CDCFCED5F930F3B3F5
C994D3214A2D0851F039E95FCB1BC5EB3A9F1990A0DB13C2E33342D40AFEB24E
186AC112AD75C33816113602163D500E957D7591699856E44457E3C6EE2E1B96
17F305CDE3E7C4ED843CBB2EC1D1392832C45D87604EF64DC83701888669BF7A
82385D9608526D5BA1729A82EF64710D094B07C96436C605E2C379C64ACB0C9F
677442FCF25B6F007D2D8D52B495EB8EC447B9C1FBAA7CAF93D76A0FFDD063B1
820F758BF2A360A33A473E6D63D300577B2C99A5F45D0D32AFB1B22C9B5C4F11
7DE2AE7A5AD40E10979FD7473BED3D09C60CDF17E6D6E4E78CB9D61F3FD30E78
D7EE35B414431FE391C16E60AE53C9151DA7B72ABD919C5BE4535776072FF7F7
722EB48E8F701C11FFD1B7F263ACE99D9A11725B143F935D3F4FFDB31FDC40C0
5D38F018C186A3E9B1E80979B7487BA2CB786018E20A5E0355AA372C06C6661B
D18215AF41660910B4BDE9E7492FC4475EF5D00FB43E120BED34DB66E8D610F9
A61C9B8F56EA16332E5D585BABD246585FD44C7FFBD5B878504A44F08A593335
B08CCE3B5263A7148CF1BC6EC617EF367BE669E802FCC7B68477A595DAC953D2
D9A84688526A8006ACC66929FDF3DD6C73C55A1E990A07F8B008FCFEF55C2AE2
B4E6B23B1DDA74A819B97A3F23EDFB82C88901DD89344214EE7A4859BB0063EF
EAC267B5D05C903AEB022C23C6F2BC03785EE94AE63B97F0E34213A1B0A55054
B1D85D485E8DE3B310E8DE4864B56B115A9F309C62B229981C2B0E800320CE9D
1388EB08F9A8303DAD8BDEEE870408B18FF4535E45411A09E1E4FCD42F1EED67
0768E3E4998B0E5D725D21F531072180C1D863F24617C2FD03C2101DCDD8E9C0
A421C180606587813B4F7C133E25986C1345CA88593FD61E5A0DC97EA2E4AA2D
6C07BC297205029B6A6DF1F5EF6D8677E667934F7A0BABC81D749F690E6F47A2
F21CD6B7480D63381B1E2022957AC237C2B5D54570264C5098160CC644902847
637FBD2E1DA05C2D220632CB80B40A1D1BDEB719D0F1556C31818A9B56C39B20
E14B07F74A3D278D642F424FC890C3A8B794546D610BC469454D661AF2EE14BC
C60DF55AE7013C8E6DC1A5945F27CD77EF2E61D77CF71365036545DA2D3A10A6
351592BD5A7DC8C3675A673E6E65A77EB67653211C6093FEC3DCE4539489484F
78467DAF4274CD1DFD2800C51F9FC7B77057F3A6FF557EFE61648E12A39638FB
42AE591FE504A26587D644B30D7A3FDC11F99AAFC2907180C659E171B0BAABBF
CA06E09D438052E27B75787AE81EA98B34D8DAEACADDCDCD1141EF873A4D7DCC
CD5170AA533B314D3388E0F725EEDB5A9E09F469071BB0F203F5D8ACB7A81603
8CC53396FF5DB218AE2CA8EE74F547200678D6AA962763FABC56D7731B980EF3
C793B89AD3612894309F1DD038B448F7712C064081A7EC21FD1F6781D44DC2D1
3881EB565B7BADE49A8ACA8D973CC3DF7BED1F3B5D595DF13158C921305B45B1
B8FFDE2A09CF6301F485C8B7DC2E51A29331C14E263C15078FCB6FF651F45CC3
60CED92F0174C4BDDFAC4FC1DA6FD8ECE760A9CA10CBF667B8F6CD5A2CF18209
9C4AAD383FC67EA4612F4F154D2798478F0793D6FD1729F6AC863145CB3876A2
39E92B6F7C3E8106DE5EB05DA5C62E83934C9095647DB2619576A07A16EB41E8
1108B629E81060CE90ADF3FEE957603462E69361425B5ADDF0821009F568E615
CE94158D9E0A16274BD8796D0CFE51760C4C5E1684D5EAB3437D479FC454F60E
BFE0BBF620A0139D762DCEEEA66157652028AE19B874FBF2718219F6C3328329
058C9B7E56A46B87152A8C0D9C41339E234B1EDEB20905D2369478E485206157
5DAEFC2782771202EFACD33817D7BAEB7B955CAB886FA587C2FBCE0E01F764EC
4EDBF1A7E60ECE54CB38A723B3046C47A485B062196657C6B0CA8422DC11C6CE
AAD6D8695AB317859A338B4394A3A0E36CA816F6272CB6C4647F55379066FC8C
4F948986B1F80EFD950B74E614A6E15BAA2B6ECD37DDAC21C5037E3A7AF8607F
194FDB4150BEAB0EE6EF76418EDA7CC6B8795043E5FB6F899C3F6214C69ED64D
65594D5BB730A82098852BFF97CA0E324C6F3D411630A27D7680B335819744CA
C5F1C047BDABA523B6B9102574E2461D2FAE65B7321C0093A2A34993BD65BCD3
70455A98A239D58B788D47EF32CCEA3A27019DEAB98CD57481630EC312907209
814981ADE4F8FAF3A093E661D51D533E736831FD6E14D2406E9E051F90686FDC
3F110547000A0ECF7B81BA3180811FDD7262E1BC68A7B7D5C463205C82187484
FDC27248E33893DC9BE8DEFE24369A4575E5FC0575729CE67AF7553C14824EA4
9E2EC4BD9D2C18BC87F668804CDB7996892C67AAC727020B2A036DF53945BA69
6B27C7A58E33A57E8C69598BBC0A878608407B92DDAF8B858C6A22B719294BF0
969F1F4F09E811E0CA2E52A0EB034ECC70C4D97FE7B996F5A7155B8D501AA46F
5E50EAAA1F0405D94C31E95BD941112497685BF59ABBF4DDFF868C17248B237C
D6C4385E416C57E04CBC4D21DADF555E051B9AC54BC1152C515E8E922D251A38
F9D288BC7B64713DE0A09A72A46A6B6DD883611D0B03F41E9CA68ADC61E75287
074F1F049B6EFF637F453FE5BCE8343684861D507521323F1164F391754D2631
EB1EBB24AD902E149DFF8A677BB2A805C11F366CA2EAFF68D2C4EB28FCDFE580
9F5CAF01989A4E74716DB5DFE3B65B2E75ADC6ACF176CB55697B66C4BE8DFD42
522F18E2E0E4A599A676BDFA730624C56F19668BC1A8048E67CB6709B36D81AC
F64CC7D727AEE895C7C885776585EF19203438CB9DFBB9BADD60A686D6A157FC
2D0CFD2E1A69E96F88A0849F14EB0E7D20244AA42777D7094B79FD63C0C989EF
BE4BC73CF0347643CFE0D6959D5114EA0A1EB35AAD89523702C14F3DF0C52242
9044BB07737EA7E0934811083CC684B2D131971EC182E6F85D94FC4DD13741E6
073F2138CA15DB1155BBDC58180E779FDD9DB73AEE0B319613FCFC57823381EB
D6C9CAB719D52C337D0F09565102AEC5C04C666BAA82D0A0E08817D58D57EA3F
CECE582555F5F7B16EFE8775109E57E122DD7E446745B74610D22799848DAC6C
3F22741805CDE495EA8CF8F286E8045306AD46C5417C123B9FA765EBBFCB7F9E
EDA22CA49B698D2EC847AC4ACD38238074B6FCA5B4960D3C3321B399C364E9AD
F635244A1AEEBF746F17CEDA608D7E397A2011B7FF43D36B78ABAC895AD468A6
6C62EA3B70016FD162D7CBA0AF454990F4E24BE617A491996DAE4BFAEBB2FAA0
3E32E4D88F337F4987BAB69B5EDAD3EB07700A8ECBA1D2D24A110F0E9A68FA20
3458A51BC1BFA6BBB1298362270979B1661FC20237BEEB75B5E1AAF8B66CFF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D74449CAC20DBDDD3380C5439DCB36E82A5A
72E24259E976632937402347FE0E201D60308E19DEA3902F3C361CBED5CFF784
282EF746A5C778F2C04047A5CBDB888C84AD3CF84D54A2CAB96E83FFA40604A0
1EC8E8810CCF5AFC45FD42ACE7AF59B50DC33F7A65D806A3FD22988D44043964
7B2BA0C7BC5A9BAA7896608E7C20CFA05F71EE0B7C7B67D8C7AEF4721E7BB6D8
AFFDC6C60F4F30BDAD96F4316349A0C9B26D646AE3703B6892B61D3CB4AB4187
842AEFF43B202FB9C5CFBABEDDC1257ACE67CBE6928F02D22F3D0EC630CFA02C
0F9C4E60E3A54474E96780A532F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA12
81240CC0667E2ED796A8D6BC9CE98F2B71D9862113C69F0ABD2C8E0CD7C39008
6369D35D3E5A083C3E82E9BC568943DE1A68599E2F3EF62EA528B388FB28E80F
116D6062165B9EE0BA0C870AB44BB1683934B4D442900E6EFA8516683FA3A38D
6F1EB0E42DBB8D915B114313C242915F4BB60337AA67E8C1D6099076CCFC5BD4
0026EEC441151F79DD8AB1664BAAF23691D9F9A8223F7BADD1090A3D9314EEBB
BF1EA746C7D21AAFA482B4AEA62DA76351A047D8D0C0A6E8D9DF424556BDEB6D
6FBFE6B2EEAD5218376B67951041CB6C3B3F93392706C30145CBCA745791F2A7
410DDABB73F0767894474A71335F49869093D1956B67CDC4829076E0908328E9
C077E7EAFA734D911FB31839155E86F09EFA9F7685E394EBDC3D33C8B63F94DA
672C9D042051FB5E06385F8428BDC73E408DF460EDA11739AF3788BABB313852
CFCDC2DE5A13ED881088B6B60682F4DD99DD79D9EC4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1739F678DAE5837FF6A42C21893F4FA98854D55FC9950600
2328111B4DF5E4EBC8057FBBA562518988C9DA918AFB0F2BABD93922C7DB78C5
4E81C2E4C11086C530DF109AB7631B321258281DAADA221C4D03BAA1CB2A3368
AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE15B7C4C75C0C00F4549D2
50A8D8D0B82FBBF5243C1F5D9BD2741BD5A40F43D1412B9C9B6CDD51938D406F
EC2148078B9A79E0B93DC2C8E02544DBE77CCFFF9E9C950ACE49091771604236
43684673BCEB1C016B7C469D93B8CCF13C4D3F2E729E3C2A6E03DA735F5DEF39
A01E9C18183C34B5BC85954A84D2323AC844A204BD9197E14F5CB63D98FF4AEE
AE916E7598848CF32F6904205FB31C974FC3B57E52AF71C9AD585854C18C87EA
13D0DBF19AFFA96590F4D4ABDA2C3ABF2B3E925512732946A34CF8BB86F61C89
EF28815477997EEA26D31D194DA347C0CBC918BD1629720E21956A2E03368656
60580AD6FAA5A61B3D29CA1598EF607BE11D603F92B2607D41C302903428FBFB
1F3A49E2B149F0E5A7EAAE21CFC17AEB48492007591955B78C0CD5DECDD2FAF1
925C3BE1C67CD83C6E7D7F5EF270A816607F248C5C1D5C56035A8FFEF21AA014
C05AC133EB07E27FBE8323FA2FFF9F864DB0EDD10AFE529E542684F7EE03E3A0
23570BD17A6891F887570B3DA85186B878777DED4FFDCC47019E5FCAA4855B44
2011F240BB7390D79EB357A06CD67E208494E120FF8B0AB25D953DAEBE200685
6F96C88939CA3725FB707ED9526ED054C471B82AA52B6C090D4BBC0DE390729F
6D0835CFB91437FDF5FA3F59048FD6D2A0DAE5110CEABF5CE69F5898EE84162E
8C3D2E5F8064AAADDFD36BD0C7E3455F537A947B9726CC8BA3EF4E2B18FA0D5A
7BAA384CC8FFCA440D77A9179EFA64384952C3A274C554B884C3BD8F613F0B41
AF5A423591249E21A1FA10743E9784E90BC853C341E532592376A74B7042A986
5584BFEEB4D4C5511682903BE2F3CA2AAC7BC366AEB8855A815E6552FE40506C
64D2F5A6F86FFBA5C6267A2A20B8CC7B4A2724012D4D6F088082D695E481FB78
B86BAA23A746F99278670404E541771CDCA5BCA8F492C4ED21BA3297F4C058B2
A02018ED03A84DBA6AB0884C5D19951C2F4537274E5102564EE586F97C1FDE8E
7BCE01645CF07EFB37AE8D53E4AF5C978EE11BF9366866BEEFB5572AEB53ADE6
9B38794E048CE0C6DC07949849C1EA93C8304EDFFA803800B5D37525247C5C18
9C065B903B139737C8CBC667F0052EEF61ECAD138AD5B484A5157AB718101083
E94631B8295834C8C3BAF1CCD311F2E43E4E692B8EDAB13CF5AC05D11A33F2D5
3EE26C2DA814D84D969B2AA01A9B83E82F1BED7F32F9EF2F1B4C3B55C72742DB
AD656CF6320CE66934AB31C2919E515CF5F1C05B1237C7D090F5ED1A3DDA29DB
81DDD1405ADA3E1BF030E67C7B8BCD803B4C9ED2CA50CF9761ED94DF63E559A1
67C002D9C61B46B3382E3EBB921641AC52D310C58FC911D294EE7E91E8668417
61049CFD9CFBB246A971A093D8E5027D67A89EB217A4E0E90BDE98DA5E4D2BC7
8ED4EBA41C83C1D5DA810F81C0DD92E3E329CFC4E2B36E704F5A2E99A7CBCE67
B51DF90BED14A3164DA8B2883B0B2CA52A8B48F339CFC9DD7FC9563CE02E9DC0
8B593F7487CB390BE16554FF7A0BB1C59B638E677A4FC26F9D9A17F28132B462
D36D2CE56588D1C055CD5FD63EB45C70E7FCA70912A0663CFB5DF462A15DB507
610322A4E259A6A16FD2DC1454D461B2681AAC16693FF62D9E03AB3AE2656B60
90245BE7A3DC5CB4A60C72B62704A385C8736FB41596B484700D72CE5B23F5EE
9BB3508EB12237EBD07741D48EC01A688FB6A7E95A5099DC8F7DC87CD2A1F4AF
DBBBDF75C60D2808EBAD09A641D93EE38D2D79F1D190B33F185DC6A9CA2E7325
DBD57B39F6ADE3133B8567BF5860D0930D756B35789523BB1BADC966829374E4
CA55CC716EECCFF3702438D156E64AE439117E2DAB10AD6548D0F2FB6A0B7725
0373D8383DF96225FEFDC9FAD48952E04C0C9ADB5FDF21E5146709D0DB32D2DB
F6C4CD3674CF3750F1E3F16FDEAE6A34ECDDB9C87ADD12BBA280B9975AAC64BD
F181EFC663117567BC33A2500F930762C222C7B6A68856A2E0FEA3CFCFEC4B8A
06F4C66667E569110DD83F4AABFBA34CFB4E4A58E17059A66A66132D35680501
A47FFD3C2017C5BA69177FE94D14189B85DFEF3367BEBCD4324DB24D7FBB23BC
73D4E4E6B9C279210579B4BC35B217DB309FFAB448A108F376CB90FCFFBA0B71
9C2782B71F824E17F44F655AD6FC4095D13DAFA434DA84BA8CB8D83C85DEE62C
8A5AB50F86FFFE294106E4EC7CC4F97EA37953501350E17D6A13EA9F5DBFFBD7
64118980541F80BE4F9942A0D3C8B026E49BB0BC85A603D739C6927230484039
E4F06CF0968BF1B05DEF47A780261EDE3C49EE478851762DBCD7BA1E60A4BA22
99074E853FEFDCE9480F0E55E126E1DC9EEA427027D5378898D339CB057D3E53
9E59FD7FBD09D37DFD51D49F8FB8E645FF406EF09120A0AF8AAEC5155E1F4E0A
769E95F93F6629DAE30D14F1CB9EF105609A00718D7EA6F88FC4A0DC6D2A471A
78F98EBDC2A986134C21FD607249CF57E563E6D21064ACB65D4AE61083666376
F350E769A7EB0E1B9BF5CD44BE1164638B6D95233484865CB602D83CD2DC870E
1AA53E3712C683F56B2C532767A0B0EC105F70BED7DA446A3AA2FA4194F8B385
6957B06A1720430E0DE1278C559D42176DEA4E100EA38EE694E8D7193F90BC0C
B304DF4D689A954C94491695239A1613C87392E4EA5BEC2AA8A1A39621E68215
D581062EE0FFA0CFAA2BCB8FAA7FE4D3892FBFFB181DBCF8B1F5AA618078DAE7
F710DE07291B417D0B25542A15E5333B4EC8F43A227EFC9EED779840E5977958
8063FA5C127889666862EB543696AA89DD0D5AFCA5F3C249AB96186560644235
0A75A1DF99302CF8A8F0F2685C7DA55C5E0B9F0215B2782E760633ED19D2A307
F624820AF2EE0FB40164A7C5FED819BEB1A911A3942F0169D0102F4ACA897F7B
94789A7596DB6E173035F4070483208D583BFE57D69E48B78695DBF00652DC3F
FFF419BF24ABB01E9C67335567467A61513691DC7010505C0F1C9BDDF1747CA2
F9709528597AAB3A6F5F1E07791446F9E9D18741DD7643D81A0B638F1B02C913
4BA366936CDFD7FCD6257906262C888C7CE6FD95C829BA1924733A6C81AE0BE8
FB1A69E4B2A8BBDFCC29F4A3B54C712E006E1D6BD993668999C3A8579A38554A
169249B307AD318F9745E6A9DB8D45F1E9C9E575A0CDD0A541C7C798C812A525
3ECFC20DED9CA5F44C75154A8A07D01FED1C412FA9813664082503DA2D2E6AC9
6989C887314DAC65BD948453194CF67772E6CFB7C3CA37FDAE1C496B5D0E7C1D
53E0B769053BED7A9DC380605DD868C8F663872B230E921494B129F80EA0482A
67228943095A0250411E81644F995A049EEEB89047143A4EB907F1893EE9DAAA
E01DA4BEB1771156E6049DBF210A278402DF48F3B240F5F88262DD2E58C086C5
09E253519DC09411034894A5767041163340A17A117E25398E784B1C5EEF46B1
F2BDF6E2CDCAC830CC9BB4E888245721D1A09935245E6B2564901ABE065899AB
F99DC1CB3B4C665F69DA68668DAF980969E2EB9753C5D4864014AE118F07B7C4
CE3A3F2C948CF1656FA97A05A937A3AF22EA39978F1D73EB20A1245633FB7A71
090207070B9EA26895B88672C622311B59B12516816675EF303FE4F01F1F84DE
922D69E8D183E8BC5E61484084013A70742FD2F0515A62DB2411922514018792
CA5E16B365ED83C24C44A68CC2E0C76BE84354211E3953CD7AD90239C1FFCA06
1A21652104F3E6B629E2AF299C26DCD463072AF184A4C3FF125A0308FBB31505
C0313797A2C62016519BEF23B160A29C67BBA520C76AD0424D6077D5C415AEFE
E988A756A598A9B1313CA64B3D00E8B27F5559C0B2CC64B17D898289FA18E391
0E59364B690E72D49232D229A3A43A98760A503DD295660BC6A6F743E66DDE0A
4A395F7F17F5D533ED16C38D026D6D6CAB0A90A6891CC6A139CEBFDD92309A2B
A6748DC0BA68300231A952157A8C0FED42257A27F853185D2CD0AB55040AE154
F6CA8B234FE0178E51D2EF9126692FC74AE7FF1F486B78D68E137D1E6B740311
BAA75AA8D01F20F126F94694A52779B387B62E677AB94E21C64F7809FC501981
0C4A106297F15E7E6E7B9E427E0828C4F09CAAA37CEDF28E1AF9F86BE6A16623
53BD72F251CBDF4ED16465F0743C602CEEF26FD0FE7CBCF5922B813BB20338B6
0136AFC22428ADA49CAFD61F42A103E32448E22A58D3AA008B2D94985A319C61
569E994D3C38D574BA9A237BD00A733EA05D613301D6A4D7B4339B7F91E5EA33
991B1A04499E6BFF161C96F51F7F3F4D040E889BBCE899347659CDD152A758D6
237E52C4A53A012B5ED6C2DCBC742C4B8EA64508AF6897483A2F3CC9DD70C8C4
850AE8DAF010FAC2791F4AEC2207446A62FB16ED2887C57FDBAB63E602D113C8
1A461ED958F9505B7B33D0F261BAB212A112D3C8920FE4FFA7E954CF897F69EF
C526F59DABA970CB94B8CBACF31A8EBD8AB1B96F9E55D655CCEBBBEE705B45D1
EC65D0EACD9C471934181033AF81A1516607B892A03FB6E524774D439914EEFF
8C8FAEF2476515A41387CA09174006C8F2125DB4819D5B594FBDEABC4DD658E0
2A0EC1422FF7ACDC3ECEA9D98A37E2DA191CC7BE1E0571ABD69471CE6B07099A
3E36E7CA840C31C51DE3D91A86226A3B6AC652473349FF9E8C85646E7062DB8A
285FCBC22987211F87935F9E83CE1430E047F052EC5076D0F5393DAF1D8A0798
0C947B8E63CB648F04AED391DCEF636A3AAAEA3274474FB3ABDAB2401B68B397
F4E6BE8E22E995C8FD9C2671F605FDF9C9D56FD036BD2B36035F6AC83E492595
3694F00F910ECD8C5D6D3D394304194538BD8434FB011055C341E532592376A7
4B7042A9865584BFEEB4D4C11A473A1C83CA8D73A2D86768AAF47E147162F866
FBE10767A9C9E3CF7729009495AF32E975F9A81FBD2BBFBB7C3324C0DA8E4692
793C7295BE420516A5F818A212DA6F1930B407248B6665B55E75B27DC325BEDF
738EB6D550863099C9AE6A1D3DBB5EC695DAEFEF7F6A91A1028E46D76289EB1B
C15D3597CADAE99044CCE1EB5FC3CB80149DE54B2FE9459AF2DD292951F0E41D
B036202EFB584ADF8F82E270D23A9037397D3EE9C9E5B4450986908EC3E76986
1BB34154B0E15E6E59DD3A5515AC21C4095336244CEA0DA1EAD35032ACB9C1B9
4728AA0078EE24881E1271A29F9568ACCB61B741CBF619AE619F5CF7C0B8AB74
A2BDA1FECBE5A1590A6EA8B1E09FB6F4059A67896E5792697F8AAABA87521003
9E61598ECE5F00BA30D78BE52E360EFB5E0ECF0162E0F6882EF0A24711D76462
69CE8E939D6332844EA9D12718D0CDA8AED252C2CAF15D3A748549B6F6A61F79
CC9DA24D3F966D3B9EC53E7FDFA26F060FC883892586428602BECA0F11FB243E
4876AD9015F71AC4F78C20D80F5BE8A8666701A4C384B89A91D53E0CD886C7BE
0692CEB0CF2A8118DB15D6C9B18141AA9663BA238228C268E3045ECB89D04FC1
FAAD84FEBC79674BCFA2ADED44359A90D3BF2AA3981BA264E7B739C4088A25F5
51F578189A3285E75ADD864B00732D18A9B468798965DEDF482DE601643F54EE
D314B0037ADC38D7A95EAE12F4E54E99C1DB82AC245B5134E71C17177E335A1F
7709BD7E58F62CB64109E9856CFC5D2A62DA183B416826E675D1DE07002E8696
1D2048A927713588BB8FC5EBB29F3C140BD64AB6CDC615EF85C7747CFD61EFD8
4E2B2A2EA9092D9F909889BB5F3286E69430D36A5D1279E5FE7FAD3C0A327A90
E16092E727CB2BAA0128995EB7CE8DDDED3705DFE13EB7E3AF75001AE8C82036
22C72908FB4D0018C8DF726B18D5D53200D554A759A938C2A649000454A50A66
A7F0E606D1ED7577FF45529994A69620A819DA37A526CA38BAF2C8E92056ED8A
E3BE873992E132FFD7C4C4305B192D25B4CCB9A9D05281EED29F7F78A9678678
C9FEEE3FAF4B4ABC91988432BF3E266C7E70139FB96840C512BF9AFB028AD7A5
98FB92FF2E8F498BAC465D187AB30CE153914AF924F674813266AF9200CD9A4F
18A24CDA71A04FA87F2900DF87CA692EEB2A0939B61D50FDD11F791B3CE3455A
4985ED699F01D3CD324E696A7CF3CEFCE0977B68BBEFB4BCC4737336180EEAD6
02E645AC583FE784CD69B918457FC63ACB5FA24E41CECCBF52292E6028414C7F
CAEA0A7E62E4DFD5645313C81DC3AAC7EF64FEB4F057940AE33CA443D599C078
82F4E964E0E00A028B98F990B4D015153CCC2E1853473BBA62A554641A3B6816
57DABB52BB0DF3DBB8875FF41E014C8B56DC42009DF9CD5B6E99AB623487EF30
8B4437FCFAE8C79DD1C5CD4860749F82198FFFDAE1393586EFD57BB3620C0868
AFD6C9916FF4F83185A2B9793C0F5FF3E2127F323F60824D13F79652B119EE55
207B3DC19A5A362E11F3AC415A28E039602BD7D6B973F354B99536D83723EC78
6EE39776EE06BFD3C04FF933CE48AE61ED5B4B48973CAC2D89B4FCA3A9D5E595
2ED903E7B54769B0B5FD45D9A4531606AE86CEF0D876894372B84D03D1BB6BDA
AFFF0D1623C49F3A52C4EDA18B7B6BE5C494D3B967042AFBBF507E6262226CE7
3BEB52C2B8F5123551AB6644E7ACB9507B7A2BA757530152A5A26336671AE7D9
6AC34D233E20BBCD42F78C46D62EC4BE01C5454E03202A00EBD10B9AF08E23DA
4E74DFCE510F5077EF740D318DBDE942537CD9A3C06DA77812BB4EE9929C9CEE
82C4DC6719C964BC171580257A3156FD78674E8A7706A4B528CC653C300F5289
6E5079721BAF2348D62292CD5E21C68EE096ECD3B8D6F6F508EC1F59EE227E4F
6A352AE8B57733588CC643C22513C6F69FDE343CE33E17013D4E30327F945275
CB4A4692393F561AC3395F6D9B8AE4FE34BC12859424AF93DB66C9EE07FCAD61
81F82F434EDF6730AAC978CABA16F76C5A8403B7A3F32099BB293FCAE5092C57
645F8F7284E4F4002D9FBB4869162DE96A3F9FFC30C159613B9E6CA03E2FABF9
A3E6C9DB609A57D867139CBE603A3DBB0F0AE0879CE48634B92CEB1D21B151E8
D4F7D855C4617A3D0D7F1A3B4D0E2A0D5ED71594FC2056214D74E4741583059D
7FA3A22DA1E192F5C883A8D0A79787DB17545B42B381735D83EE6AF31BEFB5C6
A04CFF9AF3BA9D1007C869E859B17A189C8A297811C9D0F7D62021E05D2627D9
3BEC9553C3EC0EE8DDC9546D4F64411F413D11D4FD4B5B36F4A5E94C0430A040
0E3EDDCCE5BE60B3AEF9BF8B58B9DB36C490D81737976009F60811385EF294FE
52C732BE93C0DC2EE33F6F8D4F3AF4B2C7D95E63DA3C2D8D16795D6DCE4ABF60
673775EE6B1E48DC653A89EB1B38329F33E30EA714B955D213A1E7DFE51ABED1
71CB2BDA1A1B4757BF7017016826D699540EDCF90853ACE502DF756C4E5A68F5
DF71FC609F11AF528652EB3D0DDBD6A7EFEEF44A34F5404C7F799FC22BD8197B
11E1B0AAD23E4543749F272CA43BE6C9B5CD3E674BCF858A46BB2A8B96481F52
AE787815CBF0CC562674B3264DF5FC0C891E848284DF3301A707606734572F80
7049EB845BD5EF60664DBDA5AFF5B06734DFD7E18BFAE98A1C243F368BE3000B
E851291CB10E58A558D6440E61F72C3299698BD0AB712CAF7F3009025CDF190E
9C4738695EED42E02F7D79C0296B034B3F80AD2AD5D4128770B8A9F47830A6A6
132C0F36D15D428F9FFF92CE5721CBA24721E4DF7EF63891D98E4EA24E4EFFED
97487AA4432468CF994F92CBD51443ED5564F7248A0D83C5806A5D2A68A0D7DE
3CF703F23838F8AA7E1651741E4CC7DB3E226045C8A3E76D78E5E03162404316
52EDF15718DEA609CF8EE797BF0B781D00CDDD6F5590EB66093B78A0DEB9119B
B0F6150E583E0AB51C2D9CE9EE84049E4438354CC6B692896971F28513592B28
18D273AFE7C9E61D62CE0FCACB72E14C2FDB87A97F47425B9DC9D5FC6630CBFA
F0BBB88A5D0EB528D09D059CDF5EEA1BBB8C5AFA6648411B5DEB230DEEF8E09D
BE901FF07FFC1D06309991624A9729675A8B9EA7A50DF89FCC637E37A17A2C75
50339CCF16751CBA601114F0F2278479E7168F2F4E058C0177456811B2D5EC95
CB93D7D9640B9469F723C84543BEE989037E08EA77661295B3EF67AEAD84CC8B
C297009EB5D21EAAD7A83C5D8149A4D1681D45410BFB5095AAFE9FF793254C2F
B49FD0192A80E283AF75C6FADB9B4CEAB82649FD0C5F6E9564FDB0D304F9ECE6
A91142D95593EF9FD51E984812B49F1B5D912D96569C2E45CFF465AF2FDDEBA8
A2433C3D28D1C70ACA3396BB25213A0F8087A08EFE3C136F04A8B74C7B33F310
9B5EFF068D6189EC26A07D76118FAF603EA547E7DC86A65773110E7CEB4D7891
054C2BA46C3809A3B18B4BE3185DF2B065FF2F04A7FBDA01C6F2B1DA4B073A3D
382C0D49DB776D978DBEC0E0DB9C4D5B31D4BF3DB1482372B2C20ED8959C25C5
4FAE85DEAF39AF6595FADF5D4F908165B18610E5CB5C20C36995ABA438032624
891D3480D1DDD17514F6DBCB2D43BE46A6C48C36FA0865423AB9F2CFB10E37F0
F16FFC043540E044AF9386759E047307A965F5EC0B2800893A100BEC19E13A65
11D4EA600B1ADC4C37498A461B0AF23D13289DB062EFE9150D1846428FD08F7D
90BD852C11054948A10FA9CA7EE4A8F31DB24F2F53E89DF89C1338D3A054806E
647A859330F013FB75DA9D17A20F6DC3C0D9584CEDBF0CEF41E2E467ED1518D8
2B08130625B70FF9B93C6AEE430D9DA4B82969DEBAC38EB82CF68A50A751DD38
39C4BAC14F33BF9787B1A2CEAE7453100566039CC435146AE55A893A5F9B7B37
09B544C8412F8BF64203DF4ED5C7BE1C1DB9852E09F62BB22A3A51BEC8BB98DE
6B6BC1D51ACF5AADB51C830D3375A6841B9EEC3438A070DC932F4992BC3BDD90
4E34A723CB48EEC08D5E63D133CC959EC5474049A693CBEBA4E07CB9B5D8DE5E
0B1C2305234492D7F4DBE3C41DB9F9DC99116C1224EE53A084EBE2A5D3947277
2BA555ED48BF05C8BD017B134DD155DA42904CB71AC037AECD69BE9AD7B87EC1
3DF7B666F8159E7A09327BEB82BEC7BB8F1C1D8540FA065E4DE78C5D1EE8EA55
63D046BD8990CA3F0B2956BD268608FC429064FDB0D304F9ECE6A91142D95593
EF9FD51E9849C3E7FE3163D21EE42DA19A0B1C9EA92525A7658E1483F941F659
51ACCC3EFE9914296F95C51784F74D7C1677CEEB42C617F6B87D60D24F43DB65
F27BBE55B994DB86A2F0D612653E3CE63C5F1C17D7739FEE56260D0D7AC59358
5B9E07C94255F8E33BE8E1BDD9B5299035A87E16843C5686F4F22FA5546410F5
575B56D3A484AF5D02AF9D91F4C1D98BA42AA91660B2AE39F7BAA5A9077FB464
6A93D890BC52B6B5ABDA37F99A52F410985EDFFA7828DADCE44106EF5359B2DA
B8797A2072D6BE710F5414E57B234913ADBBC0E1D2C9242AA4796329E67E1456
454EC3670308AD32978EBC60BCB98B9D7E52CA2B448242D6361C219815343E54
294DA62F57F8C05BC4B90DD78EB53FBD36224842791769B76536FFF8986EB0A4
0B5EBD343D9C33BA6E9C949D5095DA95FA620D387346EA0EA3D630838F6E0088
CE6CCA179AF8E6BDF8674D52F12F4BC56173E292B78D42789233C641D0CE65F0
5CC6ADE7432BB3AD2B5A7187A04AAF440DD8F00EC4DA4B4BFF0C4180A310B15D
A4EA154E2A1ADE60DA0AA5FD94C653A8B35CEABF5BE3A36153EA88A797296F2F
E302F23663DF94409E2C7C0817245326322B9CC4939BAAD44192B4775E42A235
A8448523E4FB61522B51536AD69F860DA406BB46D4EF013FA41C3213DB9E576B
7AE9AD4F5B979C9D9EB56A80A4105B168D570BF027C2CB454EE2281BDBB98445
F3FD327A316832E83149C3860AB557A620C0DC3C203E3FD40709EACEB5AC1162
66894AFBA1C099D37DC8EEAFD7D5646742761EB700766D975EFEA333972193D9
CDDCC816801ADBE116E0E90E6199B6C6B3594E3B7004459AAB962B34C9800758
D65160325837F8FADACFD56F1858BD6A250D0D5D9C6112033CB5AC7F2742C9A7
9EBABF390C638B359302BDFBCBA4C37EB3D3271FC031CFB13EE91C91B2C8DAC8
108A5A22CF1261BD2325B000A4324C8A8BF7CDBEBCD47EA609AC5BED8742C4F6
CB06BE3B3E2D8F9048A5B1E2FCB48972E4007A136572E6C3B640DB10AECE1F7B
9FD3B35074D85BDA9A615D5C324303ABA99663873429AC429977FAC1C877ACEB
28FC471CAA4BC1BF825F9C769CD611F343C793DEDEFB0A2B19553AB76DFB0EAE
94203BF88AFA8E328CF74D77049949C2CBDB2B9F3B1B48224627B776221603B3
9A31DEB68B5D80CA6288E57AE9B7B392D167B63BFDC1102565649B536F60A52F
FDA24456666C28476F9C08001CA1508B0EDD5B0EC294BA18CD5875BF2C0CCF80
8D15B325EBED86B1CFEF8F3CFF91C2BF89672C4F96919F68C0D37B466C88F76C
1CB3737F281D007F1F6EE3CBE7A09CEE15AFBBD1E0B113A24CD3F7BEA8C24604
C103831C48A2B85AA3789536D912DC15385EDA65E18872A93CDA8BB6EE5055C0
7755A6FCCD5F7F6FBCEA3E89A36BD5D28752C92AF588CC3B5147FB15E1E8FC72
2D61478FAB68C77851E179DDCC89C52E4241BB748F7D077A138AD048EBBF2BC4
A0E37DE2DD22407439805EE6C1D1F312CD890F3907CB5A8F8C01C55E1E777D1C
D1E22607D65F9E885757270E9F21A5B23BC009597BDEA4E71E73C486442D495C
241BF0CB3F2CD4CFA7805F434DFBD7B7CB15E654F48818DD76A3F20E743FF42B
04A1190B58868FBE3DB3338A892839466E31F198E98BBE0DF9C8123C157EA50B
C18B9323EE4C860F0706B63446BBB054A5EF091108078F25132450F9540DF843
8A07647427475D10CEC7A21B73C5140E3851D25DAAFC2B7F63B5CD417C7216B1
3DD10CA06A9195E31B4AB0041A3247EB7E667B2842D65A5E184D7383D6283D5B
BE12FD99B3697F30F86EB2BAB90905A89319B39A2AA063B9C5500FF2F234B79D
C65856CA9A6F6CBF2A3D0663D7B37ADE87C03A2DD1CE4DCED3C6423C5CF350D5
24148EC1E6E2CB48355AABEA0D1067FF0291CEBBDF526C18D715978400872173
8B5C8C1DF1CFD26F72EFA24A1573E6B9ED582B811FEC555145C96752D5436998
317562F96082DD5C44FA3993D3BD1D10C217EA56B73B3A267CD20A0D927FD311
267BB33D43183649CEA500A10BF10A341E595B5A7BFE2B471EAC3CE6C0BB9A04
6AFF0F918ED7A0E9D6DA42978A983DADBA4F728040D2A098A8DD49171F41A353
64E573321A926C7C3DE13338F52F2E7539FB11A82E401A42DF13634343E4A666
C7A27E6ABBB7C857440EBEBB371D8C04A76E7B57B775F889B9CE9E0BCFB582F3
67CCFEFDEF1C42C612D947DF7BF71424ADC5E04E4D59725FA56CBB593FE6D531
74E324B166BB519487CF5F957B2F2CD39BF76B47EDEDCD5A24E346EBA4BE33EE
4384986E67FE362D21462CC7901BC68E436B39967ACF94872D90CF64E3BF4101
3C78F4A702BF5FDE5DC1F0C185BF1E4AF89319F6B0B5F32883144D56858DB7D1
998028BF4BE0A72AAFE74199DA8D088056F1F1323E2861AD507F97671C9D7CE4
126A05403331F8E710D103F95D5BC9DC74BD7558878850E7378D0E77A8333120
1E3F13F3802AF740BD9C765861A95092B7CED26EF1639BFF7A1BB269CA11164E
29C2B057181802C0C085748302B43DEA5EEE14B739F60D45D102706C99D92E1C
A5018E58F6245EACF240CD5E1806A89D6122B7F23C4C6B1B456570A9AB0C9AF0
4166E26851EFF3167F964ADA8436762C258C2AEF18EAB42529A1299D47EFD1F7
74F2F20C3C1C44174995D179680584434D8A5C8A4255456DEAD9563BE852D015
910B847534A519CFC32D52169510940A9F441C58C51E508F87F1E216EC23FF9E
8AF60DD3CBADB0058B77F789EB35A12862F0FD4DA2F0B4662D450CF707BA09B3
AE2E0B1F5CABE244D8F1F6D29DB3997620BB2C296BD7472DDFD8AB58FAA53C19
513758125599564D15E402B3ABF8562E1D016CFFBCD753899CB8F87ED5B96CB9
BCFA06455E229C987A128F53C951E0B6FC5784C0641CEDEA32CE49FC76E715BB
FB44B21491114B877E71A4288B5452FCE11000D9D00C7B33AAC360A11E9F5F22
6BF5C59AB14D19EDC2D37EA94239542DD31EE14548C351857F6B270128639A86
DC6412958577C144591984D9EA42659793C85487C0571E75403D111C5EFE83AB
5351D7B771CA2ED5D0CBB0D260A1CFC71721F1C1B19AC7CB8040512ABB111653
2AD67AEFE0758C051241E301C7E13C6C27139431FA169175574A1DCFC08C659B
C8DF77FB47D712EC63901513D317665645A9F6F964C0FBC114419DBFCAF7987D
F550AAB54D47E20A906B02B3B7A728948036E0E45CBB75B7341F06D8E37285BE
AA9AB71AABE3CE0661E7D616B23D7D892ED892857231C6843F7FCB8DF2D70B14
15954373AB66CC420BDF3B63357D83C3C70DD8C6C1E696E7A4903B769EBBC8CD
538DD33D193BD3ECF9C9B9CC5EA35F7C4AF039C7D12B6BA9169218D70EF87AD3
679FFE0C3510E482B8F1F7BB6EE977AA96DFB56B1B2FC154BEA826E96D9996C3
A3A61C59E99D1B38E65A28397F992408E3E8BC9628F8FE3D52148AD0F1C8B8B3
873F10DD19B813E15DA2B8156CF12EEE75669151F9E2431D97A808C5F6CBF83E
1C44BCA920BCAD87F68AFC4596DA515B4EBE13E394455AE31795B04FF3E6F654
2C4F1C6EAEC54DA233359CE62D5BFDF9275F1908B0453B07B419015F1BD3EFAE
E427D736D900C096A492130ECBCFF7F3E58DE3BCCE78BE91C76B4E6764E04DB2
6128FBD189C68EB6ABB709890C0F43C4E1F85F85012157E885ECE99C5F294737
5222A66C4008F05FDE79C61F414C4C203C46E6A6B0269F00A8A09E87E60274C8
0FD8919AE84F31418152E3EF415F3BEE86405DE8171F1DBAA1D9E95DDA35726C
1297991B5D05BB2B4236F5D60D4A2BCC3285BCA27120C75242CB2E3BAF025263
1CCF8BEF92621606CE2CFA8C707E2BD307D95186905FDBD99500B569F8254D55
6F1DB811384DE0485F1025AEF973E3F4E5F1A14EBF827DCA38CBF9A44C70542B
3805F093A069196BAE8DB7E6581F81C57C6E5CCBB2115A4DF80041603CE71AD9
F2AC7E8DB53B169D9EA042C8A210B279F0F086050DD553553B3F87AC2CACF430
FA8D7CDF33AB3D45654D54C837EDB06438F4533245816B79A8EBBBF0EFFC0D29
E5F2BAEEAC3B948C839E2CAE08C90BFAF40BD9C5A8652C95246A640E9625BCB3
CB6A22E0079B0C712F7D2C8DF98D4830A9D8C8B70A8C5D511263D8E840ECB176
762EE87EB04071EB8061B83E0359E58AC82467B49D78F45764486FDFE6874F82
FFA0929C517D1A59B2C119DE916B29DE7054ED785232C74B7B92C6DC7809DCC6
8B023AA3650BDB4094DE5243426289B524A0B8DFEFDA12D59DE5A8E2A2AFD63B
328775E3B44F83056C41B5B2AD6BE04FA169800228BAE3E6D4040A1A4D1C311A
E3ED3B060EA6EEA5B735D0D62E41842C07B290B36D60F1DD6EAAA05069536268
C92FB0729C26A66198A964FFE70979C4696B5B05C07D62E428A3895B80C260F8
0DAD1AD150F70634FD5D3F4A2AE9B3C0E326E0B07E32670D79239ED9C23CE1CB
161F50091092627CA0C8E91C492F7075C9C6693914B9A8F47F30452D5F272EDB
EB372088C24E26EFA58FC45548544953CED82E187C17DEB4F1AA329748EB9292
58416A34D1F24F412C71012BFFCFBA0BCCF6A7BB8F8071D07B6046864713C780
780FB1D4D9B5FF090261A42EDE529B033686C1F39A8CDAC473E856AABE87F5FF
7CE82821390B2F3CEBAE20DBD257BD45D05B9050D2E505AA097F2FF446589143
D43EE2397B3A816F5EA15F0585A83F48D761E5F9F515BA2467659CCB7BB9536B
90A66DA0A76FE2087A021FF5FC228782D433DB5DFCE07CD6B383450430CF8674
08666C11C1B9D61AC1B5F69AABE2F964CBA4C0ED5416A20F102C82BF511F64CB
5483D7F51523208644416D6FA5F5C34F34EDD8F9E76F1048FFD7F31682DA02DD
0A0B0E576D84C6AC36A55C4DF64925215CC4DF3BC0DA1077DE75F932A39E0FCB
35BD3065066563083DE066F1E9B3F312F1EEA3FB22395967CFCED8C63258A3D4
FCA3A07C273ABD8D91D900B7A65FB886A2F997DE9F53EBE9E23072972E05FD4D
706923E6A4AB07D283706CD71D72D330171ADA792E12355B3F90213BFF2DB659
ADD1E9993E2508AD48902A8D2044B2D8433E743612D6589E714230D8F8C47ED3
34CEC8DF9D43B74459BD85FDA5ECA024BFD70FD472BFACF4871002C467B05AD7
A7A7BE352CFCCE52D9325C8BBDEB7605CA8BB07066B3855C49CB8396EE7E475F
29A5573A6485A7A15EACA1F473DAA137F5034CDB16A0D8D0709AF637345F3BC5
A90CCE79572D44A07DB50823C01E2F553C56E4A992CBCA5E1285AA1067D47081
3C4EE00343769F666B3AAB40F2DF4E6AD3AADA6F2415A8BCD5C987B3D3CF003C
7D49723CB3509F29909A009B6625CD539E96B6D26BC5FEEC5907086772F4BE1C
BA7691480D037E32E58D1867A3578589A939A0B9E63F74BBA9A961D5669B07AC
CBCC9086AB4D09E359B41CF74AED5B75C01085EF92B1C0EEB4C75EB7B3A707A6
D447DAEFB6250ABAC169A184030B5371C2FA2214F61F7C124EB9A5AAFB7FB948
3FDD13D95425DE9DA289BB60135C7008BFCA32780330E892EB562924278CF8D6
50060CC2923372C0A870FCD5E0F2B6F48BA251E00806A73D03794DE47B279943
CFAC8715338D0846106385A46770FE5AF066F6B87A2BE3E0B9B1D32C4A7B1786
5D9B7D0FC9DAFFF25889365D60776ABE7D7667FB385C61FFD25725C9AC23F192
67358C04B7050681726C4D377CA89ABD1BEE3C9BD84A05DD11CF18510B0B0020
BAF108DF807B6B0F449620D687E830A64B4514E83E34DE35A5260384175FC382
13E84E1169078A64E56E90A48FDBEA688E80FA438D78057EA80AF98D3B93C478
84342BE33C90C19B449645E7B5C8C949F05937E12E23DB94A0D96E085BCDACC4
CCAAC9DE3F669EC34C9AE15405AC35BD4A4795277C0923A9947A2F28A8BF65AE
3947E293CC426E38653A16E2A7EDF6D500E923779AA7FAEAC01E83B18DE3C0BA
528765BC693AA01D8B1F4F6688495F421F35EB45FBB2781CB050CEDAE7659CF4
FB7447ADD77DCB384C19539BC3B0B029FED20C07398980B281E1D4193954E874
05F8A3441BD4D94A1A3FEE7479F4497D46D286CEEFBB71E57F70E9EDD479DE21
D36D6385A2891C3C5224977B946455E674261A0932ECB02BA1D0203C86D3D328
79A5F548ECF75B9807C8A60296C747A14CBC728EB209FB5A0BF3C85656D645C9
2FFDC312A7E7C5F2D3D72E35B4E3AEA1DC06E7F54EDE050EE86BFCA29B4AAF1E
F7B066D049822B405C667ED8305E2C610AFE714FD8C13852D265FBCE184CEC42
A03EDD7A5CC051B9C5870276265C795C55AE4E6C07855A9BC2FBF17B68F85CB9
568AA9C68C085E87B32EDCAFFCED2FA9A160EF5076007236EF014B547DB1C647
753E6CED53E3678B86152FCEC9B7C23EE02FD19C327134B56197C411E3E5236A
7839C5D78446E98286E8AB5BBCC5A8C431D8D7BFBFA2E6017118C37AB2FE439C
0785F4006CB6D67EA847719BA0E2D41B3BDA6A44150847D2F39D64EE9A217E64
D36499E8D38E95145F61A7C343605A2CE164FE2634052F983309C0ED73E498CD
7FBCAC60BA7227D5A1C4B1A4519E1892AD2AB3528E7F851C7566BA8116491868
8A7EE6EB5973377558FBDC1A5043E519706BA7F342ADA85457B38D8085015695
A4B206D94F9FBEE46F6B6338DD6E5EB5FBA99B7EFE1571BB537FC01D4EC43AD1
B8F73F3ED3AB4C0CAB271CC2ECB9BD45FAA0017AC1381B40071191CFA6A61A86
31F03986FC4237D845723C5BEE9525EA73801CF417C17343950F65DDD3206D4D
9072461F746CCD07C8BC5AC4B184E13F3ABA4A18487B10878E9D800EE015B3A2
FFE0ADCBD3D1F3B66962A7C6579DE0654DF90D876B048BEE546DCA7F12728575
512EC4A5C321BFEEEA69C7B61BC71CB86A66D2262E4D10F3FF50620AB8D76941
E28807FA1928BBB2E6C2F219AAD63568B6B2F3D43E90088DA06584BE2E6A1DFA
C98532A65305D47C7234C74E195500753885849EDB6CB9DA42537933A1311502
E6D0F5FA2FD1F6136C813C949E82A7577018E81507061DD674E1FDBBD22BAC44
ED6AA63FE9FCAB710D6DC08E29E80E8E12927C72729B9270289731E6155BE79E
19EBE12173FC98BE95AF020AAE36B57C5244013011F770932521039ADA8A8055
3F052F97988D4B276110BCA39FC05FAFB05A2BF747D5699036377F1A645372E5
CF6497DFB4E6E1FC171337AC5E8807FDC9766DC49DB36DF165EACFCA241583B8
4C15688C6165A8BEF156F6AF0D737D2B09C8A88FF97401EAC80EA9A793BB69A8
1395C1AEED6C14338DD48AD94D0DEF00E25E76AEC5B22FD073701F4CAA029F2D
FD5420F6D2453D8A30572DD2A12550B2D61C0E0D916C002B02D9B025971A01FA
B3FFB24E6AE36B4FCFE7D19E816587D025EA6DC053011212523A5C86E50DB21B
30F62DF3027C7E083EE4F51AB14E086217DC4B4263E5B89311C8D330F0AD6E39
865395536828DA89CD961F2143FAB39DE2D2A4C48E0D8C4E450024909E5601B0
399C2D7ED74ABA7D7F6D429C04CD1D5D807ECC4DAD9CCFDDA302C9F1CBB3722F
9B09573D76BF6A92474A4616FB07E56619ADA1F358E075B4C8C204B79AA3BDBC
5FED5A15AE89B9E4CD3F19CD16D80B1C32767A33513C42F4A8D4F1259F366FB1
1B9A9D5FBF66C5988D9291828002DB7083AA92C55955E1D06531A5EED36C30AA
15C66D539FAD5E687976650821E6960CA91E6BD946213FEC611EB8D5E2B83066
9F8630FB55709D85C29E7014A84F5920F0B46FE978B03C604B50A5F91C47346D
E482B3A922A19D4F017FF1B1FBA0F5D7D4B35D4E24AC4A11F6D7680751305E4F
2C4D6F555DAC9A6D17C263F63D55D6424C5CECAE880EECE2D624A0A5EEF780CE
ABD8C958BE3A49E458CAF0648DF86B62D63BC05E6D3BB770AF9B5A747EB34B32
27291F2D47B02EC7F91571FCF8978A464394EA809F57760429E12CD2E9B0ACF3
AB0324616A7084723F00A7C6B6E0E88750BE13E67669EB4A632B81D1349A499B
A2D51D0F119E286225A200625466E46DF594E5D193846C14B9E2DDDDCFD2BD85
125DC5A043A45C0B9D3C86AB0444E557FBBA38173BFD22C8F111F56D53ADC645
47BA14C2B22C68FD70E972EE164F6BD2127F47880DC9D6FC7012E04273F7F591
9A2893BAD39B193258DB1CDEEEA611D47CE4CADEE94A7AD465A717CFF8C22662
94E5735FBF7FADCF770DE816077C034B67379B7701D23FBB5CAF9AACDCC69A71
3D7BFA20C6A12054A8738C2686444EFA78CB05DE51DE856E93F154133A0F0626
C5CBC3FE6E5A2796379BFA67D2FD0B2B1715FB45F69727F1C95C3EEAF96332FA
E777696F6415890A6776B7A35EEE482D8BE442C672F1AD19765B9752431A6644
F7C1B6FD7339326C4A1F6F834730E19E46C61A0E3555157FFCA9F2D5BFD0073C
9671F7F951F199375ED2222C6F3B9D7CF2256FC14BA225044236D63991615A2B
C5CF13738E35732216736F12E3E76D416DE431823066A83174EAB01086696A7A
3DC4DBE08DD8B34539AA09B1FFB0AE9669F836A4BA299D750F1938087B4B41BE
C8604A73606928362722555415C94F61D1DC91F0A0E6CCB7E581E83369CCC220
CE572540C35DB3AE4C64345BA28869493BECA44CA4D61D1769285BE8994A1B23
C6DDD92EA086F60C398409F7C1A1E632CCC3FA71873E2B949EFE8BBAD42391A6
A1EAE10D75D923B1ADBB51E02FFBEF5DE4058269ADBCE81518D823865B07199C
65A0AC71642500224B16DE8EF5BA50B0486F811F5F23A51A2343A30192278727
9D04CB9E7448068F514808FA5672C5A6CA1FBED15BD37CD47810B1A0FF6AC6C9
FD6E67841E1A749084C0602F13B2F4140A0A7DE08278DA7DF80A06360EF0D880
95025D7A154E7FAA68EBE49C8A5A4D75CCF036B34D53F81048C4B8FD8CB01EE2
68EFD0966995BC020FC00BB090534C11B89490C5C7222AB103E75B2F8A180D8D
ECFA4D3A5899EBC0B99FE53DDE460FCA536228FCE80FD44B49B8059ACFE6DABC
C6E16691D0D90395178C7D536243C46600B400494BF23BDBD70EA2B3294CF8CC
9918A6A46873A1769ACCF25B59CB4369E319EFC22046B4494D36D844F53727F4
B65D85450350A72C39CE68A552AA47F3854D2757F509F2B1769D6E7483C6B86C
38CF5F8E1554E4B6108B1BCFB5C7E9E70F8F5269001C80A5CF302500D3F3428D
883D166829B22393366D4AA25C250C84A7ED5BECBDAE3D7C09AF01A444F83AFF
9A44B8D0586FACDA34A0D0DC74662C3F4FA1736A4B81905BF34F31A748FC9DED
39C4D824E71F310A24F853F1251773D54CD57B94CF42470301A4672F71DE9D0B
9AB53F7E39849BE61481687607EDEB0B124F2A8F679390AA337C676FD356C3BB
F24050FA8FDB7E21151453EA904540EA0CB9823A62240AD90E95660242007FD4
F13294C744B636A11CBAA6E64C344F17743AD02EF950D60447F3C460F00B5229
B48BFA27ECC26F5AE4C45D6027A5A267FFE9C5280880B869D5C7381D534A63B8
0CAEACF1E3EA8C7A9EC5C3EBD311A9AC2E3A7E1EF1792A17DEEF477327894025
9BFAE980C723EC0919CE4CED39B83F3F31C68DDDCB8195CFB5497FF011A44CA5
50A5D2733A65A2DD7485F28EA5A404EB96F142C175597EEB688B27252CE1568C
B0DB4DB65F6B2206FB8CDA540FECE2A3A2FB912E8C2C0813DEA99F6FE1C3B7AE
2018F883AA804CC8271ABE38EDEB61826EFE3D651E0301E84F4B200EE1643CAD
603888E74770C07DF34EAFE36D3104DADE5D30F663E1D2FDEAFD48E196820A06
695A0BCF6EF8806E03695F7A461B29E64E8C636A0B57ABDE6CE59BB754DCDF87
E4446E2D326C0BEF4C80125934B2FB9D7EFAA0A98BCC7CA168E65F444CD0FF35
0D1CEFACD323A5F1E72F80BF28FC63164BD848F6C3714289A2B1DD6AAA651179
BE58A4DACEA1E3D3C7FB74B9162C3E718DC03660BEDE1A7AD55D70B92D139A48
8824BD7CF299118BA2574808DB5D0FF6E29A4D02B19FA07DF1266B96F27AD2A1
5DCD2063131A8680D8EA1695F8DF5F77D27542FE437467D4410060824D13F796
52B119EE55207B3DC19A5D4849A8A619393CE6696FE4CF5165DCEEFA72DC1B32
8346328607F749259471945843331BB382EFC1B0C41587D0411FC36D805485D6
19D58FC53FBD6E3F72660ABA52794607B9926C68F4DC15189B303BF5B6F8A110
A06C64EF233FA09AC348BD67BEBCE6E128C2202090EEE18481FA0033A073CD8C
6788812FDA351125284089B3BEAF658C363F0ED6B27193E0061AC2171825D538
5941FAA51E915DC4293979660928B77E131673D32308E7A259D70FDE007C9825
9FADF9D7C0E8A6CA9DFDFA8F916A67D3CCEB52CBDD48E88C7AC618B16B743803
45D5822CB94B4252B8577883C68E63FB3ABEE97DD7FFDB55C192759CA1548024
BB86A7B1E2DDDCB2BC12801C4A8ECD0B107CB61E69E977F69E967C8DFF1A287D
A34EC39AC13D5079912793F1CDD34AF6F8FB9F82D4163225D09B4D3964C7AFA6
6736D8B66C088E6F5C5CE1F560572B2414F206F4AA81BA1CFB8EB82A84D339F0
0BEAB1E738478781D603CE382F873042088EF4C28961CF03B2370BE500FEAA73
88372C46C4114B1B7DDD245DF990C4F2441340C605D05732E98EA6EA44EE118A
B85D7ADA8852AA52F3E990266C2C54591C85D37B434FEAF9B84756A9DA571764
BB1E29D7AE8217AC85B4A826DB25B85BFD07F9BCA9D7C412F535755FFA6B31BC
EA4B0544ACCB5FFF01581DEAFC030CA738764F956F426079393095D35AC0995A
9FCEDDE949E6EC102C598E5FA539F5A399A61F978021A0D9E3775383C96FCA83
7D2E7F627B9084108ED59F0E8DC53F21E264D2ECA4CE91436A853CB36FCFF071
38F0FE2BC2AB87068859C2D6FF39F1EF4AF3CFBA3A17DCF5F566C16D302A3980
AE44FCB61AA4463C5F063C600F955D53D70756AFD54C0DF38C3D61071868A4CE
3D32E81E9DDBDE693AFE84246AB18289E86DF8462CF56841DD47C18A9CE358D4
BFCF0A46EBE5B96E5FD30AE851ADAE7E27562F8FA4DEB246E0923A66DA391B7C
E5963848ACCAB4EF511BB8A0CB9D91E9360A62E7F14146D42BE6A42E566B1E9B
A0B500F4FB8B7D8E2476E19E61C7609FD35389C110F6D92571DD0B9469C910B7
A7D86224B91E6F4A30F183A66BCD03F71278FB2BF0C8A538229922B42BE32D7B
1631DD1E36137B9C75F2C99248D3C48C781BED4A07D85229BBB2BB2F814765E4
2F75C04A9F2D39E28C21F32699E27FE3593AA4FD21A35245CAC61BC59486715B
F07D19B647CDDB76A70B3E4F874B32AE960F38C5CFC7675620D01D8BBE1FB640
59CFF02723E1083920F4B7B92410A8BC375A191692665E100DD2E89EB256F8E8
AEEFDE25FD7C6ABF389133ED11DE4ED66F67FE83BC056A28A91BE85BB1F36142
7D58A1C4E213C36D22E82D5F56A0524F76C976ABC668A7DC8372C3B909749F2C
5ECD38143B0942BB6AC47DFD15C5C8BD653C90ECABBF0DCA41A780FE7019B6FB
B86BCE3C9F11D0B6A1038C957D6E21225CE90905EFAEB6A3F967A28E1E5610F5
46B86679E95A253EC3DB2E57AAB50BB489942854DAF49C086A3590309D998BD6
44DA28411430C42A3D1366F57F0124EE7C8370B7AA2F4A5A0C143F7D89F5A790
6D76138611002FE7E9282CF3792AB399B96A6577209E606453DD6A5CBCFD4C33
3B83A18F7DEFFFFA76B640FC05A08046169186702A682DA8EED8864B1E6A133B
6C9AC1E94690FA992B7C54AEE722AA5539CB0BF7DADD50769F961D061E610C82
BABB05E43C02D4975A286C99C7B69C02B112320C5F6A713641E49F66DCC25E4E
8A14A3F70B6145D8EA3B5FD8D3AC3C05EA1812BB88C06AAA46647F6956A6AF9D
A3F06BC3F33FB6AFFECC728F80FBBDF1CFB4A653A41702AF92B04EDF4539D429
AED94BE87765AB8123149D72B1ED401F6B8BEEF89E930681503FDA62C7EDFEDF
AE048EC038E7168ECABD34267F3B7BBA86E8097110BDD2514FFCE87E314C64D8
626D32572B69D2E7041C74075F4BE8D3935CFDF374DADD696D7E11D2B93AD33E
6595FFC1A33FFD961A9EC961456C0CA380F054C09310E687AE74DD0EE5E56361
CD27886BEF162B19DFEDCEACB6E9470868901230F42862A7FB61DA1A514AAB98
CBEC42BBFF7EDF2385A8273AB27798D11B4B11C778072EC956B5976A7CC65423
AA10B9F16B846AA1915BFE9730A97CC9FB80A1E71B59C6C3ADFBE9521EB24AF8
0D651C8A4F1B57AA6A7FB488A500E7F90AE93A0D8A5D7B502D035E152CF8E49F
F59D013260457DE7C7FE6CA5D661A69B25CDED32FA4B7CA91A1852552AC33433
0C62FA0291B2A31690BE52EF874D5415545D7E80B566A24B0D9F0F111F7C035D
51252479007DC1C8AB26319A0EF1C94AFAF16910044E119D23FEAA32CC54C5FB
472DDD769AF7D2F0805E1BA0C65DB4BF88FBB7B077697FC8F45130BE0A82E28A
8D951207D7C494A7B2784E050A11FE8B1888F5C0AC2B6711889B9BDAC51758F8
AFEFD0BF662F25500C78DD4019898765CBEE4D88AC0D9752B616075C0ADE09D7
A66B14F56048D61CD58E61002F85C5711A27CCF3A346A302953800F875F9BCA0
E3177253B3F83FF818863CB4281E0676BF39E867E032A59F3386DB54549957A9
A07839A9E468C2A8D2453D65A8C9D5A84FCC903879BCA31B34B3459C9AE8931A
90EA4528AD676EB562CC598BEB9579B906436A9CFF272AE60CA2B8390551AFEC
B38B0EF3B3172FFE1E5B8DFC05C41BD36EFA3E0EDA3A51442B2BB4D40EB889F9
14143708A42C4D394A7AB9B964F4168AC2135BAA482D68A054073986C22C98BF
110E0E54F9C2DD0C46A3B3593FDB0EC759C199AA0D608F06D31FDBEFFEC657FE
692CB057471ED6D92D5D8C42C31F6EE3CC77127B54442693A3E42557FB822346
BC61BA23D0B8CEF2E692143537A6492B618815B78A245FA1BF427D1B34CD1E45
36CEDA1113783F70F630B32AA3249BC47A16FCFB51D3FBC0B11226D9C35DC7EF
6B2FA3DCD2F865F4B07CF0C704B0EDD2B24D79E2DE37ABE43F0C728151E7B96A
65FA062ED07DDD16275F1329E5F0CFB68832079764F85F9D1496487FC83D1724
2A69FAC0A23BD2E434959D08DEE950BCDF3D705DF316CEEBC8148303C2F1734E
C6CD8EFED84BB0F99C8BB7B082707B2B01C1A06FDDC9EB75F27704912DAE94CC
98222C9EB98F5B13D5497F4152DDE50A4809D51C3D3575B6E836DD48F3E526B1
DEEE0F8C39311381E5A215E5BA082B68236D5C70DF009641F54B3D476D37B296
309648C048248498957751E6313CB0C12EBA31479C7175C33B494DD95E2179CD
1D70E7085E2CCE44265EFE6485F2602771A78D4463B995CF6379645825941C8B
7E1B14069733CD6445432B6CF2B9B44D86E9340F8A6154CC00AFF574DB111E96
164AF8420A7A563D795D8E9E60F5222A23BCB11ACA917354CD7B5811508053C9
B5914FC368A6A5AF60249D7EFDECC8DD734D9BFC4A3D813CCF13D5DCBB6872F9
831ABF77E16D1B0387848AD7C6C79C51C001C0FA0D40E068CA2C9E8A14DB9885
574973885F257D121E1E662C1D6EA0DE71AB1AFCC055B29BE9B923F9AF3A9FB7
8EA05D65250339775D61F97D38177A1D4F58A4A7F37382E2D6A07A1F376379D5
0482957ED0D6E2B8EADC35454892C8E64E4B6B1700AE32B65A70BE2646205EC3
BA815C375D65DA5982B548FE67F733CBF0648DF86B62D63BC05E6D3BB770AF9B
5A747EB0216DAFDC4A9828B04B090643FEAAB5CDCC83BEF62558AE73B5FA8255
87FFD6DC574B681B70697C0E98140012F3F4B0B4E255D7062DD9A9AF99B64F92
423EE0E45E9FD632DF12485106C7B28C5A6B9A7D81184CAD5663C7685E477865
D6B8848FA765A40DA007113DB3EB7BF6D523E335F5A4BE006E22AD912357565B
F624D326317DECB6F71DB3D35886741463E26AD675389D3316FC6AB1576C3F18
AA9FD3D2A0E49737141C83EA693B9DD885653A616F76BB861B06EF07F6D44FA4
9F48CC6AA1E38EE3F0B564C4F18C83E9373DB121775DD9A98E73D608B26C706B
7187EE3ACFACFBAAD9E2323EAA0B80E17C4A03D6F061BC6E20B0495320C8BD9A
851FD14F6292393B4314C3800FACA007E0FEAC7476C3A72476D6B5F5569FABB8
D5818953E5EC7F1D9750E63D31869CD531D780F0F308E384A7DC32EA43AD44E9
52CFECA53748EB84088D6A885A01A699C7BFBB36E142D941EAC32F97F8E56A44
3C0F1B71443EE6EA6AEB2517AF8D9C965D9F6E0A743A9D584182EDE2A871A66B
A536A28A42A59E7009BAA20234CB20119260C5FA700F84A86840923C74CF365B
2D522CFBB8A0F1F2167103A414A25D3AF9584EE06BCCBE80F25D75116BBDA3F3
76483DD8451FE4FF72E37B03CEF0E2DA4C842ACF7C34843E64FCBC56E92FDE53
A26F6BCB5332F462A8E961417EF535FF4FF8317E95E2A401D8C7A5E6398E9336
C198295723DF6B094CADBA98AA25EBBF228D92DA6E507187968421798335C826
FD5FC97E1E7DB9D79E66207D3DF8E4B7B9FB06E184655B5463FEAE10A4AA4BB3
3E23ADBE3F29A89486E94303636835D2FB126093A5C91F13E32605D48483A268
B0551D1E4B42551A7D7E1230E7607215A12D989974543B3403BE42197FDB111E
96164AF8420A7A563D795D8E9E60F5222A228320932280BC552ECD04E2C33B76
A0F6172098AA728F3A1A7BF337DA8B9939021638949FB0039DA5F622FB91395A
891AB4324935F474EDCB37AD458EAB327A0692FC54A2CCEEA0B8CB3128F256DB
669FF4017C8E77F4394CA3D9ADF54C412C3D5039CF18C7963E605C2CDB476587
98629B4DA66347898028695265018C6D5A2C2369388CD4CC854039B3D9446D6F
27C2CEBD637401A381FAE7F307A9FE823D235D1907954B8F5A30F6AC497821DA
8DD7370EC0DDA057F351D7485862C4401A77405FF0578713AFE7B61048A6E8A8
E59BADAB0DF6C6D023D4D3FE4C3292C747E2F7588231F2BE2026974A1D6451FE
598D2D1EB42108D8E3CF7729009495AF32699904D4229F797E7938CAA07E8C9E
809F175E7E2CAC9C9DEA7496E7D07A5E1D4E410A19E8CBD37EA99E61CCCBCC0B
39312F234D4D065619BF4231141A70530E56A19F37938BC8FE2375FF077D9602
F31151CE723849A7CCB72D68F7AEDC298DC4F6F1B8FA0541F2E746E3F5A7F0A8
4C2334C2D0E64590A7B6F7D25E12AA256C9519F4F823F3A4FBFB4195790052D7
7D0C3635D75B805B4F3426C6C6E12E081339CDBD47CBB2FA07B9B612496DA5FE
C38023C30C33C7B24A6AAB112CE96F0FAC59B411CA72663A044A853EB94D553D
5379C9A46E640D666F7B05EAD8DEDA4A229E6D2E0FF95F241899F973FD9B3746
D983B0BB9E1675AA41B9F671395909EF901997FA7F292F76A8F584E398367437
66E381531D2C60922C20215BAD4D4B6271543A4BCEA5CD5453F4D9539E597DF1
BB2FFFE276DB12DF81F103DAC3E37FF21EDE4517D2F4DE84F7193A22C569416F
518B0DC254405813210AEC71AED98317186244404D4812EB1E27AADD49CAEF54
385D3A7782B50E2A43FC047E17BBA4F8F34B1773129711D3BA7C52C08E87AF02
3C833F2E36C295847D946206E88D274DD8EEED230B27E0DF64F4D76A5FEA19B9
06D915352458CFD5817DAC157E3885B8EBDC3220DB2722ECAEBA773E59400349
9F0F90FD53C30FDFA9600BDCDE0B13569A540BFD5B31CA7284E68F44FB05AB5F
A6BAB5672822CEED1DDE69D7D732BB884C5DE486D29CB8B726287903840F64E4
F2D0904E0BF344F4AFC42A53679E5A0E08E776403F967AF0B3840E6316188633
278729806A32CC19C8D1D45A04F204245522ACA259D5500F02CEE325F0FAB9B1
C9872AC2DCD14DD59E05BB3EEAEED184B6795E5A2D2F95F72949B9CF47DCECA8
F2F975C45E15ED402A0F46027DDE61EAD03E8DE7EE3E332FBBC009D8B386AE9C
4F392FA8A590BB59A0C9F513CAE59A788FB558E05C38205D16036E1BA360119F
143835D9C7607E7BA791518DFDFF3D66FAE91F5EFF67FFA5F6BA8F094C2047DE
B00A172677774217ABBFEDC33DF60D1E7BE9FC1E992A4F794D9232AA20C29B6C
F38FC8562EE8329BAF695E454BA332CF97F6E8DF1E78599AEF347AF06AA4D03E
8CD458EF5538613FF1862AE2CC4A3F968D2B40BF87B6F1493C630063FBCADF5D
E2B9B74E856D05486560FEEEA76C87549F775AA2861FC7EB46D282F429B57E1C
863719C70EF2C8B862EE357855AF0969C87646FD77579D3BA8BDE071C994141A
94D4FD6661822848B982A5EB92662845785F5D89BCCD940DF83CEB671A6A3B97
ED96C2DAEA4904334BE55DF5BBD8D6B0FDE5A48E07AF847CEAAD3690C5D79531
E7F1A00D5605786D145714F2493BB2B98D1C8283399A3C393B8D4EC9ECC119CC
4D57A4B1D94AD14EE978557D77D233C2661C1CAD6BA6C0F1B506BFAA4F6179D8
4B1D0D72C262A23CCB48B614B5034E376490F561BE71948F64280100C3C5BA1F
5D1683478C4B70F8BAC1FB7FC9191E173820EAB8A5D47D181A23F05440BE4679
33216C0A17193F829547FBDB760560093AF7343AB6B84F18244527FD1A9882D4
E5880AE7D1A30C73D8D1ECA5A32CDF251370FE82BB5C7164B118979AB58F0FC8
FAE817D3440BC6966B270F4F77D6B152E8E6BE2DD98F8DC2E4C1BB62EDA27600
844C708FB65C4DEDEEA346D5B5D070CC2B452B837DC5B2A53C4D167550D22A8F
F7418B17B40C0464585116694CBD3D552FA651DF28A74B178F47D393CC0E4048
2678E5B711777D6BDB7D89A62FD1FB2225EAF9AE17FCF4D1C1F9A48FEFDC1830
88E52BB8B1924F057E20DFE115188633278729806AB262316B6CA23F0447CBB6
47561AC3E73728A55039E4A7EA63CDDCB2C2AA2FD7BCCDC2BC5E00D557B3DD02
C287E5F13AC40D33519DB1A68E116283BB6D7ADA1E291A6791AF079D52B96D57
66ED229A7C6D525F01895D5CD4166C8F80F6DB4C8BA53C9C936A6CE2FF7AF517
F6AE49FF6AE58B01E206D5EF3D7CE0CB068CC6933975A8344CFDE4726E188C7D
15E31A9CC66B827E1BF8FA6D8A110710DDA85C1C163C513D25B9264E3890AB7A
0977DC7D76291515826E985DAC24B908AF8C4788D6823ED72972FCCB7B9DA4FC
0633D78C5EAFA15A8D7EE2C722FA5FBE388BD158F28DA7E724B9E74B78534A17
02F6C95E87914584DF945D2CC106A45C51A4550C0D10884CFE469CA423FDF545
CBA0AADEBEA9D1A4C30F51E9B375D24D089EEF4FE0894EBBB785117A8AEEC190
9F49C82BAD55AD174D38A0F553A44F8EDCE9C6539CD8C05909AD4F31CEF47F3C
A8F38F89C445268E9081DF13ABCBF686A209684DF9FE4F776F73A93D1BECFC7E
73C7B486FF25C63484BEE448FF6C91B34553F5663ADCB47B5C404D62BF45C7F6
84E59B9AA6628DE75CDFD59D4D62B260CB91C49ED918419931FDA3ECF14ACF7A
94D2571CA84F117D8558ACD6BA0098C6EBB1AD2C08A8BB5E654836F18A3A1CB8
A8D3424283A088E9C11223F76A556A116064975734ED3E8603304CAF2BCF74B6
062349945DE1ABF68E25229084437FC43831FD101E68430521619023BF4100A3
7F8F188486B3F0391D2320340335BA936D800446E46A852229C5B4F6A84675CD
614593B75BFF7AFE7DC3807891D039AECEAC3F500A09579E655F904364C09B40
71FAC531D1CBC64BD28DE9517C0A6A4E3DCA6BC0754BAD59DF4558D2D608FAF1
6668DAEAC083B7A0147D1428C5CC1E86F682E3493E5A1A6D14CE1FF7F7B0D6A3
8B1A5EAF943A66B22CAA1557444B379906F86B3A9A69CC799863B015F949C68E
D2319FB4A5CDBB5A6DAAAAA6CA373D50F805AD9F95C4F6ADC601C09CDCC0262C
6E8C4C3F2D1102C62D84A0DB18152D56A72ECE236FD3A39145743099090F240D
1CCABC97F3829D48F5E78825737DE521197A89CBF2B0D464644727B8F99841EA
EFF1D1139D8A35EF0D6F66A36A5D81BD0FDF6E2F6A544CCFF36F8AE89973D9AD
3DD5C5E5656DD9F88D7E5B5028A0BBEE75A1C0D000D9293F2C4201F5249CF8E1
92BBD15DD0080D35F3504878414FE9ADE98F07103EC5517435221A2905E5FE16
FE502A4479ECC0A801F5C659E58DA27EA4C21241CA89B92307BCDB3226086607
D58EAB177B7E1AA1E6BE704CC098203706FC53DC0924D20442B6292B1CFF57EC
454AC0EB2C9F4180B3FB877C355347743CC41A250456C487E03BF7B26251A1FA
52F08BAE1D64B9FC32A684AE896F3FBC84AEC434427B24FADC2B172D329D0064
066026BA374BCF24FA4FB51D5A950652B335D4D08037BECD74C5BDA94BF565FD
408DEAEB5EAB6FE08372EF4D4C1E27E7E8D875C4EFE61F9F8E88832737186037
F9E5AB161B8A26441A419689E7F2ACA8DA3625DBDA1B37558100D7CDB83F24EA
F34D51025EF8B6CC482ADAC3FED84C85ABC9D5B05BE62B2A27C401E8B9BE9C4F
0AD7E4ABA6CBB83737659E06B5D21D7E2DDE51A0EADDBBF0BCE98AE75735DB6B
3AC8E3665F8EC9C577866D63ED736D38EE471C943A46D58227C44AE183D00B3D
E2DDCDF9DB098BC76CA1F7434E66AE65B5B3D05416E7635B913406E7DB2B5F5D
F58CC3D6D4159D60E0AFA1B871E308F426C46DB5E328465F2AE0ADC26D6C9FF4
E4B997656E2A705149DDF525E912B90BE40CCF6CFE964A70EA414518738B957C
21F9F65A1E0E99276392472EF7838C23FB39B6CE6DD2FDFF0966F0AC8BF10429
E96F3FECFAD015A163726E075CF94FB8397F5B8CC33A24D8EB428D850F34DBBD
63101131838C15C706E936A2E453F321F1FAECC837D00890473726B43BF8080F
F9FE6D9582A7DD2A35828301408B25709FA7CC2A643652D353A47EE953FE22B7
55CA1B83024E916430F66BDFCF959F46F3FFEC99835C3925BE0A67E48E804497
97359C554057B9862A120162EE8B3F4E8DA71604E69331FA3227F8C9D7F9F693
4B3D8E7C4719D0C3B184E4743BE1EBECB85601B90848A5ADCC952EBA3FBC4774
88F50B8A136AC50FD99F60846503EAB8CBC4F11709D0F9842109C5C325B2BAC1
DE2FA1F741D66E568797D0A56138DE4155C0C061F2F9BAAF636F17EB88960EA7
0F1F0F037DDD46F053926BD79B95B45483E7C3EA372CB4B05FAB870B9BB40C3B
28B0F44DBB92FD793EA37DC67D93D0487E7F9103BE3D25C16354255FBDA13571
652593CE33FC4F4B6AA04548A024FD8EE5C6C240D340C9F2A85F865CED146039
A7DFDA25F28F5093577F846B25DDF20A51000AAC6C86B6D199ACEC9C89EDBA3E
1E74C8AB6C344368261DC400897B7D2EE2E5F6B9BD413D4CC15B85509750AF48
5DE8DCE8D6F1068BD9FE5B4FE8DC01D8F622ECFE3FA7C32B54A5278CD76FC93F
75F11A545243D50635FD722C452AAE08844C95CCC51FD52AE64DB1186C10A768
54968B8CE8D60357CBF7E02627439E7BA518E5733B713F10C739042C1F1CB38D
78EF4CFB3F50A3A21124A0C6E829583DFD9C3107DA232FE1FB923D3ABE78293B
F063FBE5302F69F9F59670F469C6352D659FA6F3703FC79A130C80E2A6EBA8CB
FE1F62CADDC2C0452D1E2E699D8D82E35AE7F1D88C276F78187ED8FB45BF54B2
D5607CF2EFBCEDD23E021C8ACB1457FCFE94205A1A4586521F161480D75B36CE
F1F23B99DEAE9A5B364AC04F853C9612C58189EBF33343368420B00B9392171D
BF9964BBEC03013F324BD4B1E3053A0AD536AEC67146942DAFE5DDFAD97B5EE4
B04E0B479C07B41938DB4AB8F86636C0AEC29115B1A100E0941B80F6ACBBB24B
4044034791B7D7003597C4740A96A9278F53F3BA4882A18B6602235F026F9D4C
E871E5CC7EB30AE06533FCDECEBC47C3061DF4C70CEB5C3F6251F58BB6D12593
1ABF77E16D1B0387843CD39A2AF0EC9B516776974BEF3A42571D128FD0EAFFB9
55EB75BD8C8B15B69765E9F2E125D61FB011C8BF9A79F4DF0F83D532C9C58840
EE8D184BCF6A5C4AFD15904D68C140C6CE231015DAED13AA379A62EDFB1378A8
2FA82511BF1887387A29364FA563353B29D0275E10F95567168AA785FE3341FE
4018CB2026F58D771229C2A3A491455426500E410A707EF171D501FA383A1FF8
8A692FD0B734D2899AC23584FDBA726910BDB126CA471413B4194050506ABBB3
9AC7A95C0832ED8BBDECD32BE4DADFCB1B2FA2EC3EC848E309962083110D42CC
E72B4CE0D7CE0EAF2EC676BFAA8F966DB92978F5971984462BDF283E790AC970
AED53FF7E6AB6040B6D56E71B83C0A6F3A1460F555649ECE17A69F1CD8389A40
9E564B8E3FAF7100C965DB5C7B6B270128639A86DC6412958577C144591984D9
EE826EA660FCF496AF0126C34F7ABD28442FA10081266F32056B846937D0B3F1
0D8795B38F8DFFD7F92FF24854F2C2BCF92B80802C7C4A2BCBEE098952EA5E7F
AABA1B604C266E6987822BF7FF946F932852D3931043F260B7BEABB6B6F5F093
E2E7D40CB05C0AAC0D6FD83E2E9DBDF0231E566AB0ED2F0286591DE6EB19558A
492299C44EA52AC948BB234CFFA2666F506BF5A725FE56025D1AC164C1D744DC
F089676CF6AF89B74145B2CC305E4297EFCFDA8B7306916155E83B9F4E7447FE
55C0B4FF6C4FB7620D71CA9EF649A828E445603DD0C6032B986FD8CA00AF3A35
859340FA379F3331285EB0855B7469989DBD397E1A500DB4133D42B36E805556
BDF996C3032C1C39FFE91B7943786E7E122B0B4ADD1D974400A8C2642147D4B6
52A8F1A7E489ABCD054D816B85DADE28C0C67A74F8126AE35689EEDA2DF72785
97CF205683610586A8BEA497E867582A168CD2281BB7AEABF17F24254496DA22
9B295EAB9A6867C0B0092854DAA7B54F9E18142403BE85D1E2F89F77173DC7E8
E27CF34B972AD10DFD269E762E83D1FAF55AAFD5C2A24BD8AC9BB599A95E1F1C
05F3288539F05F000808F72CDAF43ACD1C329D95EC9063CBAA9C60E087FEBEEB
FE490C4D04B07BB7E08BFA5CA8C5EEF8386971DE077781A9E23F263D65977005
12C58E83F41C9E4A42D2B8D3D0A312C1E4506992D52A39B365351600F96082C2
4D60F3B8F268484E8F3A76FC1FA1CABA526EE65F6439F9FA6F27F76360341EEB
0CDCC489BCA1DBEA94AF6F37027434E22EC9306D07557F689206EB5365C156E4
7A9C1E0F96024C27EE66FD12298283B7BE5DC9E87714F3B802AD3E829A70F04B
0C9889DCE822D58B48EFD185C651E24ACD1D0A7FF87E526BFA194D78776B1A1D
36B4AC1013038AF8A305044BB482920C7BC22869CF148362A27EFBCA70F01C54
352BC96728150795CF2BA78D48AF8584028006F3F3248B5454ED6DC729CC5070
524D1E6AD15D994B25A9E343F133B43FBA30C52CA8A503F3FC4042D650A1380B
4C95188629BDA07E21439B180F32EC0E19958346636FC622603EE8B45A24795B
83984C0EFEE739D1913657FC9B2936C270F6596AF00C0F5C7D6336E0E19CA338
CCD852E2C7594FF3DAB0438C65E5A1EB77AFE9274CC1407384793FC6E50C6D6F
6E313EC2050144AB05DC94FA9F93B6FFCA7589A702EE7999C2A97A199035EAB7
BD49EEFBEB6BB78A22EEDC232CA6A04E928004BD90C2FCDFB6DD895683F0AF50
7DDFF4885399DB68282CAC77A0D589518432D792D62D6B2259AB0CCC30390122
6AAB4498CF85E21558A9B0B23479CD3B24BF6F16109F3792E65E605F1472CA88
88CE7BDF34460CF00663EBAEC8C9E8D33BA0C2BE892E8A64F8DE9A74CA226BAD
0E6EC5046011239ED7D6C4714DA76334B97295BFA4099D149EE93FBCC6272AF5
49B67CFEFB84B58D35736FD2CCBB0EB65FF74D94F8C4757A72665688E8A3B20E
7806B191A2F346D32A949ADE888AE4DEB551CCFE5837704F0E95633C6E65562A
99158D10E75429E663458D9CE5430EE3241AD81F92FD85DE9C1618C2F8A2F6C1
E1BC9061AD6D8D60239EAADD0D24164AC3F8505DFC7A4862BCB56D84F9AC469D
1C54EEC2D12FBF6F0FF47380478B53FA2A3FBFDED75739A29DDAD519705EC0C3
A425F84078E9750235B493A1170CB474788AA95A9FAD29E710D4161FA0281ACC
A8B5A4805928907FDF4B92BF235DD71BD6F615520EB76433E2A25A7366BEC1FB
859526822A2131A9F104857CF2F6D4CB6091E4B5A2DC9CB5CED6F9C2959D6D65
6FEB5FBDFEFA6CC7540BBAA3B562BE062ED1027C7D902A23E18DC9412FC4A752
0DE29A0E99761E066F7FCA3E57C46F3F924AD3D83219C969E7926D812092E92D
A4D04D0895B07B66D5344986AAEC4FEAD0D71412F8FABE5A24DE1560CB949D74
6B5C39511241C6CB3D2E2CD4FF98DC7F79C989CCC086CAA9F04F91FB31B2901C
8C2DA92BEE9F27728FE5F4CF00092EA2B587F2A5E50887AA1B0D3E5ACEB5EDAE
A605AF5FDC71E659C755DDF36379673B7F8CCEA983FC111C488184DB707DB2DE
B164817616BA7B199767AC8C8E508E60093AFDD0D434E7C0F668AF758C46B5E5
3F46EF208122D211A73C21F308890D5342531102115C86F37C3BF3AA1CAD71D7
59BFD39AB195BE5776EBC74D976DD8C9F4A8F2FD096A701E03BD5CE90DA9DFF4
2D3D56A08D7CB9A96E6D27DD8B231EEED8AB123EBE5E00D557B3DD02C2D2EF5A
588AF4825DC39F0C16353BD93CC8E06941BF81B71675405E1C9A35D8BD106FD1
B511B5AF5D48027A85A64BE0BC3146B824685401A551832A5ED1744D95E2567C
416D2BF58649D65A05158FDEBD75E53EC99F8B9490DB5E9BBB0A870C3BC9928D
C0AC818C4D8691E084B841E6A856A4DCCE22979D99B543A82E05AEC0E8F42397
4E8CE0083904A6D968DC01843ECBE178EEB5B0C659BA219BA4F370699C8678D2
A858DBEB37050E53DD4E6AA8EE1868EC97A9100D213D7301B46973B43013DA06
FF4118CDE83A809CDAC92B0424F51C89E60478C5843250385989AA3353623445
69F7D673F8BB728F80FBBDF1CFB4A8CD1911401FBC74CDBE6EFC669241BAB038
6C49A68639B66D423F11B4B68581E3834B74E53F20C0BAAF6FBF4238921A4CCC
923D7E654F802F8390F49273C320E9A17CA230A5EEF05426702A7FF9EE61B06E
514A1192EC48369810A44BDB8EC56BBEF2B917A8E8E67A32425B32DB025CC66F
81FD7D54255AC3CE51E835850E61D153F982B67F7B7DE6E1CB5C20C36995ABA4
38032624891D3480D1DDD17F0FF23C10E021ED66BC5B7CAE57D0905BD24925C8
57301585FDA690E7F50875DDF46EE841D521A3FFC26DBACC2972D44D2220BD4E
F12017FACD410123C239F97E12BF2C3216A29B2FA6EED0779DCD39D9849EED96
CBAA4FAB0D8FB4A5C0D6E3D543E11290FBA9612CAF16B6918D14A3EFC3DBC27F
7E781713D5DE3E2EF43D7BBF9757FD5A7BE16625CDFF321ADFD514B2BA1B66E7
CFDB8FC93B6765CA22723CAC55F4D5236628739606D8EF5ACD55D672C785D988
C68A2F65C6E8D8541274CDC40D332113F628ED0B2BA0F4CED1F847AB15F07EE4
1E131C730D6B882ACAA233B2FD6C0479C8F89AC68D0D418EA3C6DDE74A335E01
54FE2F952B68A3F80324C2BCCC6E7A78D12B2AFAD0D6DD89AF38C49D8258D2D2
2B4C4246881AACBF670F578A33286512B4C601E3904813B0A01DF8F876EDCC4F
384055FD37C575726BF13AC788FA12D3CAF0134F9E19DF8F5ABD86CB0F8CD703
08B152C0727DFE340139F3D874DE4D10E363B15E29B5DAF6D32D04C681C42D15
D8B8DCDEF77987C808BF07C973A4F2F1599A0296DF018D291A0D65BD272128AC
7F5F1F9E7A564EA5B099C094DA672C9D042051FB5E0632A3EE0E891CED2312CD
D8FBDFFB847FD6243DF6221BEE4693BB06D04E9F5B01B23788BC51DC708D082D
9A9FC6A040E88443AFB83F96DECD5E0B32C5EA329CB342002C9A66B422AE2311
EB21056C4F2343512A8F11DF84CF19B5F0A9391F62949070C1C61F32635D1CE7
04C2DE46A7BEA00F8C8CFEAA802AA756D295E404B2B331CD0C7DAFAFB452292E
6028414C7FCAEA0A7E62E4DFD5645313C263F32B291DA84FC40DFB85321175A3
684F32D3114554DD5A6A9E81D116EE6F2F970918F0FF11F4E78BE54AA410BB00
1CDC63D2040BF02378ED99373536E43634791DB7B31DBDBA96773A0B13047150
3204710C3B8355DEBB3E640FCFB4E41E0940DCF12EF8DF1002C1B3C356E63599
42925FE084E9D29B84EC807CBA4792B24564658504290618A4AD4969A1924458
53D02D69F06FC20D7DE3791B8FB54AB69960E269BE5FCE6EDADB8A3512329E34
73F6983DF6D1282DF4E5699DFC582F813D52392995FA63D372ABCA419F1423C9
C29244E65C8ABAAC42D6F60B248F0BD387E54F12932F5294EBE1BDF98378FC18
DFE2E7D56C84071892E0834A2DB809496CF89ABDF642D9E191449727385DBF1F
7C2DC03BD138B0559D3E5887B7EA9C9C54F8335F55C5564E2770B43776BF34BB
C2FC5095D9BEBCA430AE2061605281E278E502EA63AC05DEF59757E3060B2FC5
C3E43C7DFFE26FCDE8845150C5E39A9A43C764B39CB56007BF7CCC68891A0AA3
3ECEEA7A16305AA8605ABD12751DF56D86D0ABD16E8E62282BC35CF3030ECB53
7F1295789A9201035D4F4281E783AEC5FC4CF0C89D03C88BEE6B8F944B66B9E4
647484E7D8BF47381EB4185913374A859684B08711D1C26A6F7F424B7F222E61
60BD0993441EF5A60E1ED55B70BC00796CCB44E859248FC1A62847D146E00D05
C94DF0E2BBFD2B9D15B6E4C57AF65DFEDE105136913DCB6EFC215F194F40BA90
DA201B591549D25D6935A935A16EFB63ABEF19146CFD85FEDD048FFECC53C46B
86A89FBBB5BFB227DB15D6F927B44A5E860725E438A9FB3BDD3FBE89459FF421
9EF5A474D35BCD79CFF91F80F31459C566062672CBC3848C4A15B8310F51E18C
9C472CBF790686C46016D2DFA60982CBC90F3FBCE7DD1EB4A3272454BAAEDFF1
161CEB56C5EA6B8D83851EF98C9FD99D614F515DF664BA3486676E5BD0AD66A1
934B9CE1CC006D11F7121F4A600B3E189140764C6DC025A2A450EF74E13EF2EB
54FAE00A4648CE8611F0ADB254DA0742F42DB9CD815529FD817E2BB5D3724789
A12E213A4C6302056F7D9B85F8F4315A24CD4ABD2941B3FC1DFDB8C43D85373C
E971FEDDE3007B909DA1990A3F62F80DCAD816D501A60CF770001A0F1F6DA826
513F175A43EB815BB3EB66FC01312E70B9FCFC70C3D58DC484BEB96B0FE49BDC
DE606BD84C6662066AD2346815B0049259D57339B95E3078A3CE4A42802CD6A5
2B8964AAD954EC02C110714C8F499E446444FDB609DBFF1A407BB738DA7BEBB5
B45B086B7ADC4006548BBD1D205DF1F297E3DC26F0AE6F4E4816ABB927500077
A774D1881533FEF515F8EDB6703470B136F88018B488DD82FFD461201168BCA0
60E562B10F3FDCED7965E22F237B7FAB484F6EAB470CFF413429B3CB7801568F
31BF935B5346CF547FFE5D4C2EF9C94D753086D77AF972AFA3C513075A8D3058
24D35500E840B4B0BC6344A170BC88D99DA041CA77BA43EAD88035496BD5F2EA
B7D68AC1DAAD39CF4FF09EEE4C69B28C57E1CDA2C46A1574A39BCD4DEEA6A14F
1D51D08F1E2E856F5D835D57475AB270B5922B68DCC6A5DA7CFB25F567EE113E
D943A3BB7B071F25FE70F63C3C7E083A16463D35CCA4CF5483D7F515232086F2
051C51E5FD03FFFA19FFDA55866602199EAF79E2F2218A8A653619A8099F0C7E
A866AE2951245B76C997920C890D09558B27903473057D4A9F9D5960942F075E
2CE927F2D6D94D73BA51C87CD7DDD288720911A4031AFD744C94B6099FBFF7D2
721F9E2D3AF9A09B13D07C9FCF122B92D8E2D0E7761440D9276FAEC0EB2CE707
F0EF9A78F1F8F1ACA6967D02039D76F3EA42B5DCB3A99323325620DC64095D44
21987582FA2BEFDFCE75FD756DE238E3807E1AAAF0FF4212F15062AFE348FCF5
6C1D4F1A7DD5533F87913478C4F4A919E9947293EE2128D799A23D6103805E17
87FA2A79D99095B36CC3A5515E6F1BBC83045A93B004752170A26D465D4B56BC
CB6347EBCFF6FAA2B16E5ABB33FAD2335BA6E946175AE3E9E9A40A2EB15A09F4
B3ACBCF73294FCE2E91F7306E71DF7517CC76DCCC84DD0F0C5EFA499CC5DB15D
CCBB765401DB42C45CA97CE36A4FE7116A59CB05C4B9B7BBD01E04A412631402
BC172CEA0E87B133C776508ED0393AB50E883A25638CD3B812C83E937D89B04C
7EE0C09F389FF897E4A4B3EEC01EEFCD0D6C75964BA3F05BD1B2547AF27BBF83
D36F7875B179BB02858CA17477D94DC7B632048F69C2C7AEB949ED280DE55B85
860D442D6822B5C93C144FD17EAB196752712646C5A66D801932CD2D61E454B8
1F85986E8984FDA12F0E9B8E37EAE812266982EFCCEBDDD81AF2EFF027B990DA
98BF00676B94CBFC6319EF842F916654EB885FB2D8049D7A940A8F4B3E4DCC91
F184A290808F16BE8A08747E824200F2868DFABF3943C6B7938B77A76E681167
6032EBB20DB72CE1CB46149F652313AC1959A4CB9F818D2C365CEF77F4CE9387
A332F0B038124EAD08D7014E96EDBD28143A6401E15B7CA3C62DE4D90B8440FD
1540343C303F4CB477316DC54EA5F0E50DF18C110B396A2511FDE6A0CBFA48E0
B1D5E422D9E0510CF1EFE58EEF4FB8FDC6A5CCABBE6A2FF6C357DB09794F6D40
EE5C8551028FFB88B56EB7989D1D51E2322426B1F8E4B3152B25DD9BA7EEC6AD
C22EFE600DBE8E6654301F43EF421988B7F840ECBA224E29992114915DDF1A47
225E2AC844BA8B267BFD73ACC417CF7FD11B360675567594570CF25B6158EF37
670F5E8B68A3505B94D8D6BD84A5074B5832029BAFB45F1EF673CFB7B9DF6CD2
F6638558D83FD8AFDD8A7C09065AB82D2AE9FEB0B277D73B332F1914E627E3E7
560FB8278F40A5728B1CAC6B707909F80C238AC8A7CA0E7F5E6ED9E6A6FD4F03
96B0D062E9E615A0F3354F270E411A399D085032E4E022CC733E12C421144525
18C2D677EE9C8E260EDFFE6A337A39C59A08AE03A44066BF66F28BFC3E670046
6957629A004A5E3082B38F310160FED9344E299F9E619CDE8F0C41BD36C06F3E
F5CD32054477F939E181364035506E712518D579E2DBE8393934621B642E8019
E7A1FA198BA414F54E01B68948CD30D5B300AA76D7B48367AB19090927E13D03
404F882C0554F1757A301E0E3B472D9ED6235EE59969F3A0D35827350D9EF8CE
B0036F3218D0F537BEB7CAA765CBA5BD5E68847BC5B41FAB62648B62431ADE0D
A50621CE8C80D58AE09EB9056029518BFA16EA4411D28BB3C5480C37994DD362
2F6CA36650214A6212B8A897EC22AEDEDBA2038E0ACBB88AF7A5EEAFCBF4486E
5F8EAF595080084273F05A227C44AFE55DCB0723D60C72097582AA887EEB5858
F622DEE2356B941FE1BC0FAAC3746C7D71AA6749CF1CCC4FC6EF474A8BA7E70C
7A0D3A9C04CD48A8CDBB60AC61F48BAEEBB57470EA312D97CCE3B6E93390C879
71C29B6B5C9240618412BD3D9C9A1A97B165C9C4FC1F4B9D03236401ADFD38A0
48DC68B92DA803D6B8C2652F21CA7B33105563D805E54BADC97879B14329AE2A
A409A45F2B6F86F050049BCA197342329C7194DBC2443FC7F06BD1CD82C61DF4
1ACD5D614416DB7E6EB461E2059DD6D7CF0617A5814C3853E4C5EA1503D1E0CB
C59FEDB557D8A89E9A22A6432207314C477F758502DE6EA612B23F9DE9F47CC4
DC76E8C59FC39701A3ADB919976D4DBF1BA214684A8F32751052E16790E81709
D6B5EC7906814FF05F954956D5207F849CCFB180F8017A8416D8910C59D3EE68
CCBAE3AB0C32D97BCD24E7262D0B88F55E32CD5922B774F037CC928B5872580E
379881BEA5B5C4631D75119B520B3F20E8BE1FE8C4E5C286D600EF5DD0A7E607
B6EFB2C194C2BD0401740C0EFF1714C96C3A8586F38A73289113C34487FF2504
4805C168C8893495A029F7CFAEC61194F165C5D9A69A10CB965837EE192C35D3
F80CAAF5BBE6AC2CF616884CC7B67EA283D0E95282814A9A27E281C96282C99A
4B46E83229C5C33DF817546E5F5FA65A116E308772E7FA7711F1F06B952D6D52
255A7DF6BD8BA14786A21C6F99872C027A276AC7CA15E00F20B03B83E64EFA9D
926377288CF28A3D048B9CA7320B8A342557D797336151189F41955B2CBC6670
8F26EEEE0D0385206BEA81703F80BAE57591A2C8CF89D62B536FAFE93276D927
8C8AA3F4A9B0C9BBE32B5A731B85AF42D64EADDC652B33BA9BC6BC9A75D2297C
21593BA0F615D79AE15510C75CE16F316BBAB060F2E8AEA1F3FEE0FDF1C82320
D127F66598A5B0050D3A573FAAB4FAEB6DC584F130769D75D619A27EAC6A3782
02D437BDECC606E157BC5587A37B8C9282698DE65E8A731E09DCAF98D0ED394C
CA51AD27262DD11C9A5138AA1ED0751CC9AF6A595C1FDC8F0735BF603BECF6FB
2DCB93B1D32B38F8CF65B7A7EB7051285BFF7FD6FBECE7CFE33DD811D3F2E6A5
6BB5D5D416C5CD3D6236464E9E5092825B9AF821F0BC40D4A091CBE55242A0FB
847D87106D7D22C6AD5BEB9EDE6D2C999150C5E61210F7287FCF6D5664AADAB6
17B65288B88625E4621CAE438E5F9D0AC73865D838D8162FD79EE3ADDB6C3617
4FC5F37221EC27A8A67EE47A8C600E9F7FFF00B514A1B280582315B5183FE06E
A102CEC4AEA9AEB9CD80FBFF828563E48108AE87023F1FC668ABB3AE62267A79
3F5D82AE7FD54B5221A4CB065B2CE14B53BCF5C751864460BB4A7CD1FFDD1D7F
222C2836F2479F6D5AB7722B840FE469ED244745C50B0CDA33D13BBBD899E179
8C514FE94DCE83625F45454D7AF415C3FABC361E6B5BA04EBF4D0A9E79020095
039BA2E566393542472014F905F5C3D5AEDAF67DC21BA617ADA6C5861811B71B
D9E9486F3B1154EE86F83E8486FE85229FF12A8ABB13021AADC9950E825C801F
CE5A69F8E7A21D48F1F7586DDF9C202366D41C0E9B77103313060F6439E9CCA6
127BB65EF05F7A91B552AB941A9E748458085F17D9EB2E9CEB74D788DB7F7AE6
7DB99F9E16A2B25133751492ED533BB10826AA7F8D15F50B7207C36E9D344036
9D7D9E0F2B581583F09ECCAE0491B81D084ECE5E8DC646C936A485AD634FC7E7
3720E72557A4A35F82C72E1EF69601E3D22732CE867FCDEC2116584C4017B14A
2409B610B46F40CC631DBC61824926973816FC41744A87D56CEE0203C1E8C09C
EDC855B8A97BF99B4033F5E392FFB2AC7A94FE3E6C88164B9C002C5E91DEAECF
5317161E5FDD481F176606C2BE18B3856C99043B738E81C75E90A73114092574
30
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE503DBAACC843B2D054B3D7DDACD7D5EB62F3E2E7B16FF53
BB396EDB8A4B7B07046F0089F56E044B37BC6D86BD3281E84EEC46E015BEB6B4
1B3F42A7DC6C54ECF3801E5C266B6A683FD55DF3C02946DAA6596D8D9A37844C
7C6D9D856CFF936CBD583DA8259E113CE1257BE6EB5872FBF1FE69DDE14DB146
2E4F9859384B15882C6B0E2215D2E74B5719114C0DA6D1B05EE88107051E93AA
C1EEF9DC595980CE50933162307293B1567EE8D3BAC9155FFB9BD94337E6CA82
F859B5E4E7355B6D179AFF699D69DB25BC41D9D5893FB341D4742D2D54AEAC6C
C69AA022ABF232A44262D922CDC694C0A0BFE83E3E95F08F5FB761C442515ADD
F084844FF1B2B14A0C43F5BB9FA2C36526B2411B2B72CF351725928A70E0F077
05286911B646600FBFCD96E60F83254804C9126F6A007AD697659D0F4B9B7BE0
BE1D4DFE778149E5795166423DBE5D30C0453E411C9395DF8F3807EF11C82E84
E736A060EB4775CAF2106549BDC89AD08FAB3A14213EFB6D602C098E76E62A5E
C284C215CE71B98086E3722B28571052662AE666F725C46F9DE29DFCAC798130
C0CE5C49E1C5FB11EEEDDDEED240805D78448DF7E49A11B2F211A64EB78A90B7
4992D487B9909D602F361AE26078080DF8F67B12B9EB935AE0DE2D8839376A78
D70FA44F1974ABA413D5BBB2A974E898F62BFE90F132A37E2DCA4F43E13DB135
2F73EF4D5E5795A34E6569D002BDF5FEE796AE925B34A27D21AE1AAEBFBC4855
F579AEB074F92F96570BAB00874DEA64EE39679FC56E7B100B05476FA019E37C
01BD3468D0737B7870EC94F5BDA0EC4BB48BA285AA9DD245AF856CC2DB7119F2
7B189ACCFA1CEC4BBEFC9B6D621DEE3E2C9F1D4CE03A9168075C0C90BFCC5B88
D25791305DBDE5B638A542AE086EE2F94BDCB97FE3A19F0530BB8CD7A023AFED
DAF129C543D2C5A851E19575CB33820442874AC5B6F34764F5F73E5DE96479F5
935B081C321A67D4D469E0C27AE33432E1D202D044C40B627BF0C4BD7A4196E8
8F8C778B8B2A590510F51D3971460F90C5DA5723525853226E6563B8045B8C77
C498947240D06FD0EC215FA716153F27E9FDF8D48823850CD2DBE87C26088D33
E097667B1615E248D54B89A79CFE0525803085B358D26540796CB9DDA7F78147
3EBD9C22DC8350392976AAEA2E426E84DAE1A786CE6B63AB56D8809E904F78CB
6C97A790D5259BA57CB7CE037059A7BCE6C7B7A2FCDA4E07592494E14A33140F
F82513CAFE7BA6A641B105BAEC1E24A29C4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55D9BB531F199FEAC8C5CB21BE95FF283BB9B82D69AA1D6
9095C8368708983E28AF4102818C283F3B0F9995EC08E1DE0FD32FA1999CB88E
26939D38DB2F6D29ADDB80A225B4AB07769FA91A58C18B3026269218BC45A6B2
402D0FC042A7CF32810C68ABDAE536D95D46BCDAAFAA5A8301F63AC53A51C484
3802081696785BF15D76F54578622195A2E0802FC871CA864B3ADB40C28AACA1
C469C1BA6CCA1752015D12C8EF9631E7302185E4751F5E05CE9EF796BBF90289
3C83399D0C9F7CE20612ACD2E1727190539E12540F013DFDA4272FCF119B72D1
205ACE22DB506EE5C4EF4F6148AA7B421BFC013728391BA228211C06AA109623
2D7603A06ADE52EF4F768148C131B26525D173F07ADFE2C2AAF32AA5A2088528
2382FB1854E2317ABB61D9F28207671D7AFD88CCD7FF2C33B1C5EC90FE63B741
B76AD71E90FB41A1B1532055F21EBDECD9DC19A27CC0E50CAAD46A0F8B85BD89
CC0CD1C08CE2D2B5DCF98AC75AE34D25351453EFA3CC0DC9DD86B4A4727B8067
173DDF734D89190A50A51C6A5A21DD4B3E6E69F3820C6404FBAAE9BDF79A904D
22773633F194C04D86BB5CB4DAECE9542D7ADFB2EF67FB6AFC6817389C8484AE
90BF8597520D43D67C97CF417B218758F11D09080FE7637DCC9CF63D1AA500EC
55CA4EAE07666994C4813345A965AF20E698947494E0C47854244FD1404665DA
061E2161911A2B4DC8A5B4A5751D60DBD662D2AFE3C27E284AA2BA47FF3B7874
100C6909EF0C4022473CA2E0338BB13AF0D6D4E913BD72AFC5065A50CD203C4B
D5E6F578BDD1825668C672C71B0FABBB4C89E346C291D00D6D35823349A6F8A4
7E1AF88FF8F02318E676611E2FAB4C12E27C53FE576FA3AC9FCC4A06354BDEA9
38C326E81D6BEF3A6C089E0C18A6C25694B97B341B03E86D6573A6D50DD3E8BC
E763DAF19D58162323CCA894FBBC0A2719FC56D60E6084866CB10624C115FE53
69E0E4212433A9F1F1C9DF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Italic
%!PS-AdobeFont-1.0: LMRoman10-Italic 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Italic known{/LMRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Italic)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-458 -290 1386 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8002A140BB230DF
940316C3A88DBAFEF249FA61B55B4B56C598D4266E12F7B0F006143F55F46681
A0E76FE1183A772016AF636A2B3034E12B12BBEB3C227DCEBB83986A004EBE89
2D913439F0E10163A557CA6657B435E52611E8404129383B1A6857EC4B4926FB
C6A2E74782F935A3FB0FDB05CB18FD8BCF8F1AAFAB72C03340EA56DF72DB59F2
1B103ADCC57B872E7AC079964DEDC0D0BA062E3909C7D7EA8407C5D92051EA96
76AE0F81896E3D4085CF47415EC18153AB906BFFC46DEDFC1CDC2ECDA3D07871
97F6B4A4B8935DAE4A24CF479E5F93A4D1C80CBF61ACAFAC97F4CB46501B7530
44421E3D88841F613D42612F738101469C10D7D537B0D4D39296A9AB3F132DA9
A3B459B0F850E2811A6A83947BD5840C06145EB2FB2F57809E120B983B414233
98E4973496CBD3ADA7B5AE09498C870396FAFBF91AE0ADB8695D003366F550E5
F5FF65E7D0109CCCCAB8C9822B2C46C3821C06EBF5FD03C11BE7C7C2DEA6D331
1306D1F3DF31BF4BA9D145448CCD5CE52177724C3C7A1B01D39848BAFBD45097
2F94109C077B406B8E33B274AD9FCEBEF0812AA149D3D37F02C28000206742E4
3D4297F0974755443E95B9967D2F3E5CFEF77E1BE7FF33FD7FB8B81465057DC2
2989D3ACF41AB2FDA0FEBAAADEC2A0730692B12652C2BB9F6E96601B1A789BE0
415F85CB8A653CDBAB242410D8AD167644497CD90BD0962D625F267AE2F88DF5
4D24666D0E11A19B0B169E1B130678D6AA963FDCAD53908D5B476BC8A568B56A
A17A718F13C71D70F35947F9268EF5D89E26850F4BC9BC2AB1BF8609D3A64D1C
43BBB187FC37B4DF600B1126F59D266F3957F3BF373448D14C24BB0AFFD92B76
CDBE1E10B3FC037552ED74045C08871D70C0C42D4A1026001EBE0BBD0D9D3FC0
0A5FDABCF029A45C23311338A2BF06BF5B745E117F0AE99E24AFE7490FEFC3FB
321996E0CA919B90DDBBBC078990D53DC76FFF1B4583D59148324E787B32D80E
4614DB94C9D7544693DCBF32C6FDE542D24BF86079F3BBC478D2E70CED07E366
352CA729689C6F2EB6B9E9AAEAA7DAFD44C996E914CA4063BCC8EE90AC971079
9B3D11C979649A736AE27FD9A9522AB5851F8574AD1CFF3581FBBC1DFC047784
8FC0CBAA6606E892B2E41A173AA590B6C92E248D08AD0E925226F6B25349D776
6C105A0C3CFA4322F40C2ED5F9D247F0E3DE8233436A38D5E1CDB2B8BB46BA0B
2A96E810DECF6C6DB8F03151EB9F0E99E293ED60152108652CB1D729F35FA285
1C69A8A1DBE19DFD88B3993CAB581A7E340178D6574F6C07AD98651394CCC742
D048E391EBB2D5FBCAE22D727763D9EF68329D5CAE9EFC75DC15A9494E876104
FCE913A7D645ED0050BF55E6ACA05B0254162EED9741D13D7202F1D8B438DEBA
D3C2D45341B2285356FEFDC7A85E43C6E5A4F99F0133D4148F48ABF20439F999
6ED8BA752A7C1839B5075C8314C20165192F0C199E08AB11E021B27915CB4543
8F2DC4BF2D389770ACB5A33D046B0ABFCA115414EB4652911C21C71EF12B80AD
FBC28AB07B83B1800E41C9104A62A074B44B977E8CC1335904DA22349A847ADE
3C060AEC69C2987EB2A33F83FAC01F1A052E23200E94DCDA8807FC3021A529D2
07815F79EEF626A126E8005FCA77ECB3172F54396227E1D03B98C42383BF31B6
8F6A6309C9BC01222FE35305FFC71211EBB0E78F0DCE9A1928EF6140FF367625
B5924F5370E9C13F0A66881FC91A4FF6F1AD487156FED518164901F83DF3BAA6
A0ED3E1145BF13B631C784A1C4DBF2811D2A5440E30E79AEA3845BB350C953F7
7B5B5AD7E02CCA12A44CAAE0DB157CC78936A24AF084E7544D8A76154942ACCE
D03A7785D88FE0DB6330756507D8BDB3F97266E6A31040AE138A82F2352C3FD9
C0527F9576C9CA4DCA2FB7C7EBBE81AC61C4B3268589295571F959A0A7213888
9852ACE42680AE0A2CFD33813965D88BC90326B7429F01435624D4C3AF770984
24004666BA8435FE10EC622EBE16E64F3C38D574BA9A237BD00A733EA05D6133
01D6A4D5D11211DE4271273CF39110B40FEEF6B961452F14E1BBF64777F8FDD4
5418BA7DEED9C3ACAC1F7C1C713AE6B9F47CC51D45AFB01CB6558FEC2D3770FC
07531D3BEE4384986E67FE362D21462CC7901BC68E436B3998C83CBDDB25A0D1
A489EB0BB10369D89E5E7CF8E589EF4DBB83B3C77432EE201F41C83B213EBBBC
0E6BD435FBDD7DCFEF07F93366AF7F26F35ECF8D5AA73B24E8BBE548A8C92D6D
52BBBD815700DDBF74140C3F3DD07B9A1A1DBD41DB89C4200F685FA4011468DF
B48B2FEE876EC79521622318BB6960F7588E6392FC1E2A8A7286BDD41AC562AE
DA5BC1B4A7975A24E2614A2ED207815F79EEF626A126E8005FCA77ECB3172F52
582CF4F8EAF073497C25E75040E1F9A5056D77888DCB95C99A614B1869F207E6
BAFA869CB82B6DDD4DCFE579CB5E9F15DBC0F5D3771EE6B6A3E8E5FFC09D89C9
13A29DE6B7B84AF75B80C7685B16F3F33A59C2A8D92E17F44D2828175BF383AD
06F224BB9C8438B783660A4D308ECECEE20AD96793284647ABF2CB166513EFEB
45541CB32FF7D147CB85CD34424CE13529BC008EB29C8C564D794FDAA23A5322
CCE26B31363BDD6D8C307DD211433C8276293FAEBC789B1F6DF42411B2ABC0D4
990CC5130EC9F6DE383C674C24816DAE80EA1476F31FE8955F98B6EB4F83AD59
AAFFCECC01B36B5299D0BD87F6DBB5CF39C981133CCE565A47244948A8AF90EC
2DC348618B108941053DFA51F0A495337FE9E1F6647DE3115C32E72A117ECE77
82B2D44AC5AE91585D24C91627F49E83271B7498CBD67ABDE015C89F478ED0DA
FAD0958C9C7A80E665F2C00F6E192B9FA36E297A866F7D92DECE94F3EA29DFFD
42DE8E35BFCE59CD95FEDFB910B6371422CDD07263005CD5709DC26C831BF6BD
5DA4F1154E8176C458788E6C283C6F6D34D5DD6E0378A1F7D1A254FAD9F125B2
599B59AA5F283C822A47B5069F7527ECFB9E79DF4FFBF19FD75795EC8ECB99A9
6D6FE3793AE72EB3D5FAD68FA215C623576A523D336C8523AACC8882547AC619
B7153CAC18C9B29574AA4FC9027AB682AF79E8EAC789CC0DFC122FB0C7588801
1D844407E0410E9CCAE5F3D4B3F51C2F1DAE3862CE6FC4C59AF4C51B407D4446
8B5B9FC7AC6FB71C40F8EECDA336259BA0D0151DCB3F2DAEB7490556C59FF1D9
066D38BA8190707725C13B85703D2E25CD1E5BB0CD6685444271EA2BF01587CE
8846B752AF11A279BA06F821525DD0F47783117684C9CD051938DBCF63442E4E
1621C7B4A3EAE77A96BC8E2E35A7D112AA3F39BD94F21DCD05FF887330D1BBD1
388EC8AB3867E917C98CE630833A36F018B6309FFB7EE59B9CBDA3DCDF109071
C2469B43DF46DBBA6057E9FACC763141BB17A96BCFC81274142D452C210D2257
F590155BF03A84F0DC427C57B71704D2F4FE43700F57187ECFC0EDF5C1A83578
340AE2AC05CDA9853EDC698F4C6FA5667BE5D25FFF2E69922C496CB4EFEE5F8D
8735EC6EC9E847FE8D54CEE9CBC3B88AF70F676B2EAB2276195F1C8AB164BE9E
46AE5F5E9B7B21B0BE874360F8EBF20EEC39C37C6FC2087779FCA72E2D86BD44
B30C8B4288CD98CC5E56DC4D1333DBA8FDA1289860BF8A14AB6E55B0B851D2FD
A257448B557E058EE3C1BF3A744667964722B69DD498E95E04A726A72A830EEF
021FA259BEEDB8E53DF62FC14593FB104E0D4F53401701EEF17EAC1C7A901496
F86B39EFC0AB5ACE088B3ACA4E03A3CF8C5DFF4132151E1300915379DBE6F6DC
F9A3C3CED6842C356858594C63EDBA233416D0E6AAD719A820F2262ADF2ABAE1
E46EB10E8D9B35F71EF07D9740BCE7F7351840EC9E4553B37EF41267C745F2E4
33CF9879B17762A428C78744582EE409C6661BD18215AF41660910B4BDE9E749
2FC4475045AC9BDEC7AD1230772D7B98333D5398A8246523886EB7255870CD61
C8CF7AA8DE567D174EC90945404C5B9510E44B9DFE0DEE815B76EE3E932A702D
09248172CB7EE0584D0670E527BC95332D13B3980549FA02073BC4FDA41AB1B4
803CC515471D4FB80DF03D2BAF5E8AA093975115A88FAB1C999BD8C391F4F045
EE1155E8E993352BA414D7171BAF725B98274C1DF15F81DFD2B70EAE00BF2AC2
0AF2F22969804D5A884CEF35791B1630B8CC47D381EE6B063A416ACB95507901
98029F2205E51C0598C2F3CE6BFD3D847DA4F518B81FADA81814332B622EB793
C9FA37A28699D9C0F3EE94AA32E3C58F8D7F803B5D25117F6F40CB8387218CD9
4EF127847A48B648FD0B60D60FCF712C0C0CBCCB4E89492ADA71B9168C6AA9E4
272A2E80AFCD60F29551F39AFE3FFAD1623684285DDA851B6326FC81BDA50FC3
126234044386036954E9BE82394DE926782C59DF2A8D383A09280F36634BF9DF
DB497005805AC2A83A6264406B36A46E7DD0F0C8B8EA7B18F9C8F439E0BFE3DF
69B3BDFEDA4AA2F15003996D966AE65F193996AEC4092C1B220F544989112CBD
3BC340616C1420A1F6AA8CBB9B5DC32EDA308F149704EB45943BF0799883F660
2661A65465936BF2294ED64C656EEA8A41B7477F2B196F5BA65829D9109E395A
486D4AD48D6DB1595189A216475D75EEB838186C788942057588B3DBCE20838E
0034288E97C143576D2AD37F46E21F017D2EE7016C422FCFC22D86B42FF91FCE
7E06435BB294023283C95B88E28671D18D03697809C66D774B6716C278816C75
7D918CA55C5DD4A52A060D1725C26E6940371EB4F959F1DAD4E176B50DB98341
C8D442F31C7CA70CA4411D3DC4A85E43C6E5A4F99F0133D4148F48ABF20439F9
9969C884C1C89C0B70F7654DB9EDF8305228BA8CC82097BB790BBD39451AD006
2C6D1CEE3D463FB5F6588F7623A0D8B3E26E65F4C501E20885FCB7D648FABC1C
7B0B4B3EC116BF6A36F4664A3DE9436CB7839559D98C723973174FED0223734E
5A7F68B96A1184091D122ABB1E3896220D23FA5051B3D743AFEFD90A9A9AECDC
E9993C761BED20B6B9102574E2461D2FAE65B7321C0093A2A3499511D587D9CF
2FB4A626EA3E546717AE6E23981338327E1BA00776A74A77D10C6C1DFC91DE62
C1AE05CF60692F2F17694FDED4B3EDBE4FE9C3DFFA5E45C08D537491AAEA6E19
C9B1F9D62740A6C1E4ACA130DD76A67920DBB5216FE6F118FC3499F108BA1894
F24E9568F4F1D5E439053FAC1895E95D0E66F18703E0498EEE088787862508B4
4CF4A623C63A895FE66E14641959655F235BD056D594C934894FDCA89155E705
CE4875605498197A9A796A9D88A539669C3098666CDFB1E317462647319E38C8
A5EE1BF11F62984C5F853516C1419DF929D29EAF4490A3A39A09B75542EAF6CA
2CAEE117313C66EF1C56CD1A07BFA143C0DB4273AC81C68EBC2B8D9E9906F4B5
E57FE7CEA76F020869427242D783CF0D5CA4661A6578FA0C8C04E35DC80C6BFD
57170F1DA7139D8696B56CD4E70C28C4C6D3A71BA2D3F48A9951FD6B28227893
84F7D9EE826857FA49628CDC2A8FB41FBF08C850C509FF5EEB4E8CA9869C7A58
0610905847A649E4477773B87686F7F28B3326F116B667887F864FE14B9986B9
0BE6C4280377C63BC9689E38310E3E238ED8CE6105F38E5492F48B32096A411C
61D8B3624F4EEBC57CE06AA9A9C2805F46DD31F0F6D4C4C6CBD815B95655FC8D
6A14F7BE3E2111BF076BCE5D80B4B11525BD2B8C3F6F760C8245A1AD9F508819
7DB2E8AF3DB3E40BE9E22D7346A518C7B6B747685681865BF5053CFB253C24C6
5B5AA6221F458A151C340BA18C6AF3B50B742ADE8264DF57FD7902194490A4C1
3B587C37E38623E0DCA16B183EB03A367918C5AB7825A21193128D0C9D92CE1A
C3301B7E99A4A14404AF24867D9283C16070C4D6DC4777ED7A723EA37BCF5808
E562A93D0CA5043B8BD242CAA7C7A5AE5240299623E3941AAA562406670A2BB6
2DA3D8642F1E1C9F38AE9A61C6A3E9D38A408C9DE54FE6BB1E52CAFE32DB3305
BC555ACB1EA108A2A4254B80C17134D2308CDFBC3BF32EBB01BD6BA2DBA0702C
0CBE5EDF6BD0A5B47D7929F5C9317680A132703874D4991EFD61104D18E85A53
B73A1FA96E4890D339C2B2F371B1559D8BEB245FFAA7955250F08E8F59BD8D50
9C64277A9AFD2339BDAC1F73578793DBC567422D51C29F596279152991FECE69
C1D1B0A1D662D1A895EEC2D558D47FD0D0331085614FB069CA8D80059115F741
94C551826A537FBE9B5F897B957CDB27ABA4802F081B3A1ACBE86A393BB350CA
DCB55BB88D44319FBA904459034006CD33AEAD858BB6A4448C1243A03DF92D4F
5AE3B262BE062ED1027C7D902A23E18DC9412FC4A75204A53D631AF42FAE6609
15711E6C2700B38FD7F4E03AD188FECE9B4DFFD97C21A534C8A75EBE18C09C8C
B07D857CDC5E4289F24E742ABE0538FB7A82BE7DDEF5CFC307FFB415616AF611
C0D7C1A57B747534B3EC85C1A110A2B2C2343A5E7A06C9115395DC2F92EA95E5
ECE5A08EDD1CF333A0EF96C16D45B427465DCB1466D62F4436EC6A4A78607D23
2EA5942ACE88AE8582BA140101A62893A9ED7577AC3BFB5ED0BBBBF6414EE585
8A463D1D1546B49519BF40FA8A4A7B8320210619F4FA4CB8003758487C8CD485
8614188B2A4F22356187C8EC6BC71173E3B08EED91709F66FE8B0BADA48B50E4
7EC0AED73FA6DCC88525B539F222D587253AA8719E8B14653F7E48616690BCC8
3BE5D11DFA17A3F10D2A23E38A8CBF571DE30EB469FA21DEA620CF8F2C474CD6
BFD36D59D2A74A2C7597E1E5A814321BCF3A8B088437F58D148388FF8C3C0E30
D82AE132DCFC69C2657833D7FDC55F10142B57743CD554622C51394F3D287504
9B31FDA0CDD5E01F3B14A28ADB729E7C14E801A129FBB5E59C675E8A5DC688EA
81DDCF841A831E70260FC9637311ECC2C3448FB4495FA4249B56F203BAFF9BC3
E9E3EEFD431E52CB466FE2BBDB5E1F70D124C85B5C5A336CAEB676FA09C7B293
8076F7EFA66CB5785877F7730C70EE613A8A8FB1604C987B129BD6CE6C746A88
20352CD00D393D9A18176C24DBEDD2808DB6749B7CB81EB2374992009A28B699
901B1A6F7C9D6986CC5C0D1526EA8CCD820975F84C242B533C5F26688210FFEC
043F33FD3778024A3CBA9DC490FD77F0F3AA902CB878BB45350199017B180CBA
3A79B87815D8BA1CB39F0A09C4180B7DDB99E3AF5C45072D5FDE12DD81276D73
0A5AC7E8261F0CAF9CA00E0A0219C771FF38A45647D7F00B900A54D9B875E95C
A8166B84CCDE9FB92FEF1C87238D9EB14AAA9752283E94DAA8F0389585B31F61
BDD8B403C7FBCBEE39D1269CF59591E093473440FA2276E9EBE5632E97CA65D1
D2BE3644E84A35070D8E8B67E27FA41C2292EDCBD09E0FA9529732824413A721
19D2484A224B24C71FFCA3661C091D322D3F8FD2BBB632411AF805FF34798718
B4077F2FB06DDC2C18D1465FB79523B22FC95F55924BA47AD840C5390EA458E9
CBA91A397A87DBABE3D5362ADD92CDB5E9ECA0E411E44BD2CBAE99B81F14B283
578FE82374ECE2115FBDC213125B54A600300390B90A43942B1356F83BA15344
086A3D674EEE3EE9F4AC75CD07E28EA416D83C960E7B23392808F4C9D3D2633C
A66B5E631A21909A31970AF227057722C6BB6BEDE18C3F9C2742AE15202BB6C4
6934606198A5EF9CF59D78FA796822B4A0D95B3EF94453FE07185BDE46DC59EE
53FCC59444A3FDD876CD7C67CA2A599F1F4BA039BBB26179F2A72599892F0F79
92E69D23E9FD278CD5F26788A7E5D8476DE8E214B53B375DB5675E54C76D7531
F8D41028432E91C7ADB46FA6F530420B6517A73A255AB977D4F9AED30A343104
8D9DE4311BE9AB45B21FDAB27C8A28207547267FFD6B838688767F42131319C2
B08BEB451836FFA20A22DCAC47225F97C1A80E20385D4B83145AF95FEBC160B0
436A5D24843D955A35B70900EAD57E09228E923A91B2F77DAD4108CC4D9788C0
E3CB5664C60D8E524A15FD6DA7803AEA50547F952AE97DD78841A24DA9ABF40D
D1F36D67F20E0046CF004AF4D76C8434E66ADB72B6710A1830B3A8773F95A7DB
137EEF6F9B963304FCB76A2C1D28C57D77D94712304723A557C4C0F1191116F1
C8B82758E41ECF62AD56BB2B348C551767F4AA82DF1FBF64BEFE5CF81EA2F86D
26258A210A15C3EABF35EDE800133D57DCBB8698AF6894363B2114294E668644
46DAA5CE259112146000AA3C97D8A1FDB6EDA22EC0FCD2365BD5EBAF673BE7E5
02F67937F9D7769AB65396D9E6682DD396150422E519EB8AAFF0B530683DDB44
6D7589F5A790B13F142F10413724789B650AC5AF9427AE8196F799DCE81C976F
6233CC693E6F2E480BBC0FB84425CEC21CAF8F60D465005946417207D29346A1
F27FCAB1199BE0E933C567526160DE63D4CF5714E083F809339E5EDAAE1233E4
4D23A75AFAE5713E1A9AFD3E17CCCDBDD467A4124C630B8058641C78164041F2
242765399BA881A7977C64D417E5CEFB9060A0A33CE20C97AA3D34B1A58276C3
29FAE1045C5C6E47DE0F7213002E5CEDD40C1C44DC6666BB2350231579E82A4A
8EEDED2E000BF86242EE6B71A0E91D39A856F11BE21F316D94ECBCAD9BD4E7B0
9D9FE70A9C4D0076715533B2F948ADF90E8319E933C9CA37FDAE1C496B5D0E7C
1D53E0B769053BED7A9E8DF45456B353EA0D2FCB03FD86FD6A1A1A68C4191BBF
1C09B9E81D6D5E001B17A8D845ECC703FF0851D4A53054573E082B155D45427E
2A28377D1336FBD8CE3FC59069768E5F6AFC8EE6E2EE98763933D814901FDEB3
C6B5DD9FCF265A4ED6A5B90EB70E2BB7C7C23B7B83DD252D9D5137E8382128ED
3AE89F06F2EA57E3A7A6688008E11CC274042BB89D28C4DC21C8F3492A57F81F
55C845D090C6051B7060935838E474E21B30B609BEF5130965002377C66A8E3D
EAD9ADB6D9ABC293DDF7781E5E437C26A66BDFD810CBF197D55CE63F12950167
935869EC0E7F51ED9624170E1B554D5833833818FEA5F5ED726D42502525FC08
BFD08FA0800DCC0592D879092830CE4255CE3BEC2EF3F83AAAA3F4F68A8E892C
3D0529A466C6A31705A1BF76DFB0F2CD2815C6A4C22518A5D3953256B49CF4E8
5C0024D93ADCEF1102BAEEAE5C1875DBE42C23E62D68907F25AD9111BC334B0C
16F2965D6AC9C1B17CA5BF8994E3A541677336CE9CB590A8ABE634D07B0846A3
4AEE870F21C9E55F66AA6BCF8680F5ECC44BAEB2FC46E5D40C1AEA9C0ECC5E17
87985544273ECCB27B5D1110A226BF5E4C75D7B9426F419A31BD9E3EEE0CF4B5
2849622FB181AD1584E26AF5F6F841665A4FD1B196F658BBF5870F9B28C9161A
943B5764D907ADC078B7F723F6FB780CD50B53F10D753DA56A85FC2FAB053257
3A8768688B5B34ACF484FE6861CC55D04B5C36445C99BBE099C1025F99975EF0
77A2E407A06CD37F1D583EE498765142BE6FB9E9EB091611B4B9FC7C60E9265F
4466C6424106172A6A86577A865CB5841EB8DB4F30C831D4DE942B7951DF1FE3
C8CE5BDE7A2C9A124900DD8F1732791A32ED4820FFEB6754A20928917BC496D6
AA2AA99F2FD91BC4957C7983BE2796146E427215C73BEEF20E828A46681B6BDC
ECD1E9BD49F4C1524900738C7D8D50C123883F159DE0860EE4B31E80A4676D23
FC0E90F03456E1231CFB3CC4E45048E525349511B5CCE0192445743E064A53A5
85C8FC8D3AA9E8C2D786CB4E75B9CED103496C03093961B820A68D9874A3F85E
82C396D9E2891D8E0D6E5571D4EF121C936995BC020FC00BB090534C11B89490
C5C7222AB608E85EFFF31273BD8C22F12467B61057FC53C3BC05FE1FA769C38C
48754B5E3D4A3EA489D7DE94F9BB46AA3F528B3F2C5FF185A72F8B21D6486CD4
1A80EC051E875DFB459FE6477286EB7914B7BF4A14D94594408AD1128BE94DE4
C2747F40513D3A7383D7F877F1B45D9AA70DDD06568D9B2144A9749127C0F72A
E27F55A17C4D92B28D30687F2FD146D760727435015213CFB157A1414B13318D
30F97419F753FF9C5850EE37E59A4A3B90EE6AD37E0A5F943978A64F1539B283
3C618875DC4939C3418A61414BAA4C9145042A3AAC758995A7355F79D0696406
7D84B208317D4C933F30D085D52C6C4F5CA2C9BBE16D807BCABF269241C0DA67
E5BEC040A958B14BB3D78215135218BF1370D637D76C3E3EF6962EB9294FA639
F8424C2ABF7A94E27270B41AB70586880A7EEB24A6834CC1E908D513D9E19D42
A419FB6AEDFD768F9E302BEAF964400464755D70BD5E2BF0DDDEB2CCBF9AE69C
1496A8BEA6A7006168CB6D42230045E7AA3F84DC7F506506EDE0AC300CCD3C2D
1D035A7A1A1FD3A186109C415E0906FB2EA28028A0B65E2228C7FAFDECE6B6F4
8A6D51526F9423DBF784320E03ABEC9F5B4968B313D9C5E8A896BAC14D14ACEF
7570DFFF14398FC9B31B52CB0C2556F3DA8C8BEFD34F4CC2007E80B83051AC6D
DD4B310D5E0E06A35CD1C801EF5272D18251B9DD34520F8E3A3187E81EDCFCB0
F6B6DEB25927B9001E6ADAAB86BA6B2B4E28F3C65566E4B0BF8B1AD14D60862A
AB2F2AA9A9B7F03F530456D6A55C160A5DCED9628B01EC6F47232DE5CB73A83C
1B82D501DBD6BFAFA574C89BC62032F460C2ACADF2189757557314080558CFC8
D79479C3228EB0F733C9EE13BB62940B9846657FE87EFB947F6EF31DCC61CDDF
C39A2771832B20F446F7D525A2E897FE7FFCBF8C9968EAF96E7344A1328E9F4B
2B1B0E82CE1FD16B33CA5A42CB96345F3610AFB10C1E4E91CA5F7A54D5F433E3
C4634AEA5036686CEAF60EFFA06545EFC162942911B3230B8D462CB20A3E29D3
7ECFF305D8C59C900CADDA2B06E8C69D2C5A04B512787974F7593F2CC8CF006A
EF8B1106D9E42E1BD079DAA602C8687473C07F4671206794D6EAD1708AEE49A0
B29B17E090FCC1137C613AC61B6452571F9A33E04ABFB610F9A0DD26B8C90212
2271A38B7923957A15D11F15ED63285BB6DAA544104684AE094361E45F4DE72F
F690F92D9744EEB176A33F6190EF3A270698F6B9230D2A063584CEED0DEC3FD0
62A50C0E36B85BEAE85AF88A2490E665911469F5DE55D0282AAAACD9DA3B1559
BBA47951C7CA31CE3807506FF35794D027CE342A66A4C27C0995F4A4A9D8A9F9
24028ED77937B477662CCCE77BADAB35567D75B147C85088703C68C018951631
F2EA80DF2EA35D27D8FE5FE873E98EEF621E059DF969C14E19E1CB4625D8F169
5477B7BB307553BA7EBA8ABACAEDDDB4078B1531B5C80138263B8E0DA1FCC423
8D71517DA163420C300087FF394717EFD48403E301699E50BB542741364954B7
5FD346019D2B86EB21FC2BC6F585B621FC39F5572AAE573BBB163DD66E89F2C4
E2B1A15300BB08D983698624517ABC1951B2F5FEB44F59C055C5D6087F1FE799
C82B1F6DB3AFA1BF4B117E4BF697898780190F135E092D9FF563441C51E317A1
C20944C84C955F1A89A13F2FC801167F0840F3EF427451F2250A597961B66368
334A1DC2A8C80A9ED14A027B59CB9A0F4115D7DABAD25BA29BDAEC3708AEFF3A
0E6E57FC88F41EF68172E0D016057FAF0B60B94730BEE4FCEA18980D0D31894C
3C4DBF948CE2EEAFEC10ECA86DBCD675244FA279980B91B1C1971524EBE44199
949AF13E05EA2ECB274ECC3FCCA3E7F6BC63934D52A44E36C743DC3FB1A5F961
E79714553FF367F8DCA3B5F674D4E56982E5A019D84A227270D13E584A66AF59
DAD680D649457B2E75DDD203B12B4A5AFD8B3A81682ECCDA4AA2CF829BB74C20
C39E157567538D8588C30C25057A23DF1469CAA260ED4AD93BC9534EA1BE44C9
54A906EAD36D53FDEC9C70BF01856A65B9674D03D9E2DE91147FE91F51CC413D
1078AD46A5E7B7BA4E49ADA7B8744351564FD4E82BFB94A1F6C35E1C0A7E87D6
683014ED96902B67BCDC6AFEA2CDA4C53332359B8595D33A61622899A6CDA1B6
BA77CF4525E91037F30CF2C39A3556020E108B332B09478C729F228F5177E12F
FB00D72805E2042E248A874E814B3D78F46AF4F001A38F23544F2C662A989856
9E109DAB60B870AD2E7DAC2D9AB4577523358DE4A06B547EB33806C4F943CC8F
1342F846F7B6F6C298A1E4D21FDF8F62B467C4997EC131EC9F3B54D2ACDBCF27
30C10173C147DD9A770AD2A21749E4BA033A587AC9523706FAB55BDEF2D9A3B5
0D9F5293B9AE981BC36F047FF6BCA7D2B30B63683747CFEDDFEB2314AB513AD1
3B562C5EE145AB39905815D6C3E8B60AC7A66B5D1DB3167D66F1848157353536
29661E08732CC12C03ED2F504EA1F92B4D96DB412E5FDDF6355DBCCFF58ECB4A
112B6D4E11ABFAF29103ABF419D2F80488457C6209EBD10B9AF08E23DA4E74DF
CE510F5077EF740D30C2945542DC03CE3C79CC2777500C3D08C9BAA0E46EFF68
E6C1897FDACE081033C2648F76C255145D67DF638855204B7D4536F3C11460CD
2626DEE88BBFE1CAFB5E63F82F9F2545F733D5E5BBA258C916B98D0AF9852614
16AC420927993D1E3D64D048CE34560BBF01C461E2A4BE4A25C42D62EF18D763
512FD86B2EE22CC785D957EFCBBCCA1791F8E112853F74C475451EBD128D0BDE
6837264B51777E2FFF6F8BD0DDDA24F9A1F4CC349ED95F66B163D517CE204075
2BF94A98902E608264DED8C3241F0D211368693A8045F2F5C4FEA50AEE55316B
EBDD68397F89FABDFA705F328AAD4BFBB6C40D8F4D72EC63B0420ECA998985C0
68941DF37927BD4B4A45CFAC6CEC9EB9F44C1470E08C365BCAA589B9FB46E97A
B020DD38D71B7B82896AF4B3203DFD65D580C860D5E426D107C511E4D8EC581B
BFD9589D9FB42768AF8CAFD1490D4A0B81934AF18B6350B352014576858A26DF
969402AB30E0F9C56CADAF2A950F3554A99D33F5C5AB146659B0FF64BB5D9138
098CEC212A30D4391FF1229E4F84AB4DF31358F020AA4E552670790DD6EE29FE
ACB73088DF117BEA075ECA725E0C83A50F0733AB3264B55E03AC61818DCDDD6A
2BF0FE9932B38E256682C68F3DA790E9B0ADF4D5EF841F23817C0E94AEEC901D
DEB541604DEC0FE90FA0685AFF4512504CD72A82F621FA0F11B18744A22B3766
4686A6BED916B8AC07831E41FEC9CC96EF5CE410D2AB109B8DFBBE55F509788D
A6C2B8989DDE361B3E647E74A24380913686B3B9FA6290F8A62EF992237E07E5
6E9FC168EDFE4C6E23478AD56C865CF48739976AB5AC152FA12A6E3760A8BF30
6700778714A8D7AA7699529CECBBAEF486D6970074813A6BAA4F7CF2CC57A84C
FBA77156ECFCF21C4AF98CC8406C58FF0958C886D21E0680503D7A796D7EE4A5
267D952A379B660FE3A9671DD13E01433F2F6E87336BCFFAFC0F71433B47B553
59AD40D487FEED3555BFF5EF1088EC186353B9C4B21D7A86F61DC5FBDF3F5C1D
2B0BB34F9C9378F5EECF7AB9804EE6F29D00C325FC88292D20D6BDE27B65F917
6558D8B65362F61FD87D987ADF3DC36A2DEB505DA944FD138408B4F94BFB4234
4F120A4A0442E910EE2D7511DB1D70576C69420C33679A72866A47F399E09D4E
D56A73AEA5A2B1D5C4C6A2BAEF7029E4E54041F97A726D2708EDE5A1513CEE97
10990A3211489580229DFEA4CF551103450057E27BFA25D69A1864806D6753D2
3390AF0FEF7A9FAE4339270B8C5D809BFB3139EA35AB802943B5628BC95CEC4F
BB62C5383C2EF4161E0E82187082675F91CF7BB877BC1BD97582F444BAEDA5BF
150E373526CF55A76CC97FA47FFDD7D89509CCE4F9DF3A174028CBB2A2717C97
FF0F700841CB19F79950780932C8A88AB1CAC0C3F2BF7937F8E5596DD15ED739
DD517431692EE1FA1132ED0087D8EF5E30FD84E05C04D578C1E449853FA9B6D4
2C49637CDFE9D0D56B57D1F1265517D9ACA0526AAA65C66CFCC6ED8239419BB8
0787850F9073E30FACA80736C0BF828DC7E5A8F8F1C06160C3DF99FD8A37EFDA
8A3CCF56AD9EE9F5DC02453FC101F6474014DCFDB71FA151BFD05B61C2C2B9F2
159774A9AB0C9AF04166E26851EFF3167F964ADA8436762C21538AC364812298
91A689CB8855AC2016EF05B724A446C3144C5C1B7EEA47B1D6D6ACAD39130B59
BD9BB9718CBC3CF3A9129FDD04F9A09482ABEE624C540143A30B3E4C32EA38CB
F518502AC8917F8C0C4DDE1AA36C314EABBA5A982B317D8BA90F3F44F6CACB1F
CE05A6CB840D922E327817D3BA0E2BB98DBC10417A546A8A3A0BD405757DE2AD
DB423B67AFA3772B4B9303B1B444BFD0A00A04526C93C55879A8EA0224911F07
28FB73B1C2DF53FCA0F01BF86BB79C1B3767BEC03FBA3D25718E8DE11964932F
E7916C69D015E9FB9765648552E6BA4CD3554A331F6EC83AFCFCF697DCC8808A
931CB62997E29B687CA0F68B0B668CD16311DF9993D2AD4F956BCABA7F2572C4
B4D5930EA44AC6C6DDD2C128C0393F026EB0025909812994B5D34C90B4C4CA0B
697383A569C8154C5264CABE46251C5474D6499604D442A5B01573EDF475607E
FBC6291F8D1734F7D80E422F77C53DFACA54BFB00CCCEE058AE7D260181BC40B
93C62C37DB28EBBFF38FBCC2890CFBEA9F2EC53BB73D1EE77721720C27834570
C10B05E7F23972A4AD6106D407EA0E44E6A3F13A44C5CA2F05C5C2C82F068E79
4CB4414E58242F9229959B7F9F99A7D8C6C9ADEC835E71A3940E6F67D06EB398
4053DAAB56B1075AF05336263F00AE566FDB01B21CECA9292F2EBA1F85C0E918
F362A2AF2E0EB863C256F65A734F27AD7A358DD96348D56101F81E1DD9864EEF
3608434AB39F01F8BC3012053AF93F2109857A233B199792A6BF7649B3AB511E
288D66C90C2256A16A5C182C775FD887712BD6600AEC60512132EB9F6FF8CD55
8C23B4AC6A4AED0BA8AAC4DF2D2F8C8D1A3F35EFDBBA66E581BBDA8EECB76E4E
87D6E566E92EBAC6F7FFF12FF2C25ADF4C44F1FC3EDB3420BEA45D97CA89C4D6
9B1A12B646AC86E4B0540B553BE35448663CF765884D5E5754C046EF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Bold
%!PS-AdobeFont-1.0: LMRoman10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Bold known{/LMRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Bold)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-486 -295 1607 1133}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A2B97A2545FB4AED6E864068CAFC11C1B6D53
286E0C557881AFF6159BD803AD491E349272C4420D2E2274C589D040CD3285A8
9B4CF82A5D6CDBB3A3687E0643D2A256757CA467EBD41D83C4068B5F571BDD53
8E7B7B28273CEB38BE621F8217E7D0555F034EACCC39DBF40BFD9FA372B08F97
2001D6844E132A16F34B8B7234D5EEF957099FA45E43170CAA6EF70241E1A720
C1322AA56561CAC98CE90766897AC0611464168BA543C5664242BFA41B3D7688
3D1F10E97CAB51F4BE34CDC94C0EAC376AE280720C33DA72613F8C2D823AAE57
05F548DB3DF8D58096A65BD301502685F53ADF37350A323E263CF938292ADE86
4E420919C2AF30A8276BBCE4CFB3684CFD43C529A2C3203616CC19D8C144F695
88C9ABC4B49497A29F2E748D7C8F5637D9C9D7F057BC0A7ACF91BA7809044D7C
28A2C3C0B39DFD381EB48B2811A3B289364B9AD88B05EC6A2B79F841BB4599A2
76A8D31BFF321CDDF6112BF0C2C1E565C889A49EDB7873A2A09E0B2035E8E5E3
E924F96B97B49382EF212BD25A0E1CD7F132B4D69A79D085D4B3B4F7AB8199D7
54C5C273A119FBFDA9F913E211DDCFCE950DAD1CD18206D7A505D1F6F0BDBBC3
C6692C9BE7A04DA687BC96166FFE480FDDC1ADF8DF328CCBE1B11027E05957EA
41C4F0C0F64941E6A006433B78D17D537004045CCD22F9B96D8120CFE40CB7A6
FD8FD92293D3389F42A29F4F61A8D4A782A141035935D0D6DB2BAE585A54CD88
012870FC97E3FDAD1B5100045CBE72B72E82A6E26D2FC22656E4DE50233CC0BC
C7A54B9F67758563267093C77A86ADFB33603FB3A876C770C80B465A53F2F2D5
8112FDE19AB9A4079E0C90855C51249F2C2240B6EC1B5E300C7F388406E4C645
9490E4F6CABAB531EC31521D635B141538F192D31E24E9D288F43A978909439D
7A156AC8F37C032256BB99967897E536D47EA366FBBC2C9105B7434040077762
A7BC54551705281FA3DBEA2D747BF4EC1FE15303621A12288A2C6010594C8634
3AC38B8DF7DA899EDC907556CB0E315523080E6A2AB98CB984085788D5975852
3EFE904806262F049E69436E357D68B13040C580E9515013E4AE9A29CF63C13B
40CE2165EEF09471B8E6A3E58986C54B7C3CA24B7130A94CEF9322DF0CCE8FE0
405D523BD800B3DE120CBF2CDCE50EAFB9B4957B842BBD708F52A3A0E98FC71C
AD89BAEA80D288565525B1444BF2AEF21A43DBC273DB1BE1C1F5E1A5436145BF
8491766AD3F80155E920E05E6AD03A0C8CB629C6AC474AC2F118081AF2BF003F
30990745F489487179A2E91E4E911F74366983E8E2640C074C521CF379526FA0
FB75CC1D909407C9361039B6D297D934C7F01C4A836B41E43F6C2F11BCA28310
F5A1C98BFF1C73259669E3AE2639BE0ACE6D50AFEA77528149BCFD7E7E0A23C7
5927B4FAE9E687F69757335FD237E4F663A9D860D38443A0264CC224DF908AE3
E9BBE4AC0AD95EBAE53E28EDB2678C3E34B413B86E867D0207BD48FE8067168C
4412FC80CDBA62F8B197C199ABA21AABCAC412960C8DCA687FB2321C2CF3920B
6EF07098D4E97FEBA8C650810E23D6351C7E66DE68657BE375BB78C141535DB1
784F2126C001C2354246A5A1BC4BEEC335A5C78E90E121BEFE8C3E1729F6610F
0F1A900F658E65A28FCA65062E70F4703BFAF170560C0AB39BFD238A0859BA57
0499CAAA419F556FAFA343A4F0E10031A8D199E5499AE2072E8471EF48F865FC
FBE96EC4737CF89BD48165E45DC671B5255F21CD1C797A817B3F07D7CBC20755
BEA87379F2D211F2AB473D2BD104B323DEF0CFCFB809257276B4D2B21990365F
281C1318173CEDE77EEDCF5545746D5D8AD88303969340CC4B05D9F5DF57D97E
F4580F633FA842B9DF64946EA241FAF1EDF50092203B12232138617080B3C7AA
BE5A34B45729CDC48A7575752D12BC8A17FE3C89841584D5BF8D58CE5E34B90F
E0F5142F182D1D02504BED42472B74E8F6E1B541E3939B1D202003469068A5BD
2017D3094B67D6A21F2AA9D59FF3D815B045C9B64FFB8DAF846931370FF1C2D0
0769F859B4AE356D1DB317D31ED2503028DEC0CFE03D1F094446601305A72657
A80F1CFB288E54B2A341ED546BB25A11C28B5846B247465231691C2B55C56086
35A76845967CFBBEE7810EC93784B7C2E2E06966C4A23F3F49740365E82A7A29
3938440D2767A2DB075A2CE1E2C033D0CB407A4EF26BDE164B9138EDD914C688
E7129D0A90AD3EA1E36E5474A91D738C9D02AA08AB74DEA0146A63919538775D
DAFF6F38DA89F5466006E9A148F39874A1488F1F0458409D442D2CB6A0146AB0
8A3DFE98951927F9C3A83202250796C4EEF76083AA9BC41826C942C841D1E97F
CAAF1A9A35D3CE8031E1273A9000C8139BAF088951C2DCEF712380ADE300F316
23385E9F8D5318E8C94F1CE6097792C419ECA4A7C3C21E322AE6C2B6732D6063
3B59C2DE2DACB9F1C9CBB82AD5C5134A39347787CA96E2E00BDEF90240610A27
244970757F3C25CFC3E853E2FEAD8831559C8B61790857547C6FCBB35A796103
67CE42ED7CAAB72BFB900699E6CA7B672D208B1FD63B00284173DF465C27AE3A
558D36A8DCA52875B5E59A5E40EE64BD01A6BA8965E3BC0874039470AB20D378
6628488A8E7B2D4EBEB45D64F9810105EE82DD07C6D4A637C97653DE7C661ED5
D3477A1BBEB61FFB1A113E31160C8324A768AEF34FAB99998EE77CC9AEEB43F8
03D0B28D37DDBD1715531592F851CB8B3B30484EF47D1DBCA23513302A4F46A7
1A59F056B37F03846D50D21A217D500474C66D82042A7F90731D9C031EB46AC8
CCA89FED056BE9B0C4964AE88138CB39EFB206FEFC81EA3A88B4024C64A79740
384D09CD8FC988128A0A15C6653CB85BF452ABBF5E8E9D8CCF2FEE905E3FA70B
901CD5D2C49144778CFFF1D5B63E099BE5FD7C40DE0224F61857D6D1EDF135A3
5A8E10E1791D93BF0533EE75223739B2C40F0B848E5F1C5CA9A52C0FA5E10F44
1BADC966829374E4CA55CC716EECC1B186986DEA740D744963AE53A1B8DCD067
A4C16051CC8940A65E5F0D1CD06A704E946B53768B5F92C8436CEEAEEC81170F
40C2ADF359D8B6002BA1B01A8F00554F2EEB8C2FD43F2C55668185AA03631141
554C3D1F6DD4A7A7C2596DCA5DF89F901B1FF3201D2A494F82C6E87477C9C784
3343C7E9E3F40537D461EF01991A2705E323EDB4957F9A271F30E71EA8E2F40D
99096B99E907FE5C491EDD336C6F661DD25A5D56725C7065C299ABF128FE2511
732602A5885A6CD283AD3C1963CBA7FBABFD2A446D883D561A94793EC689B512
5A3164DD3EBDD80706727CF0F544B776E4E6AECD3191F83A92B3F8ABE7FCF57A
38E38C28FC1163D775A7AD32658972647AF59024D30F80C706C928A414FA1FC9
E9D64F32F6CFB9EAAE7981DC8877B7023213632DC12557E8564BEEFBD55097DF
EA56771C7B51FA8F32FB10CD06184AE9C945344D958DF5C85F1CE42E38D68E28
25C8A95292A77C4347C5E66069D56F6579693CB65053BF56062972DE5B5347D2
C191A16ED86E07D8E45FB322FD0B3D25692D2F7B1385947B28941DAE7306C7F0
244EDB76DF56229C2BEB04A439D43635254CFF36C827155FC7F5C6703D38EF74
AC6C3DEFAE7CD74C7C03634341123E5CA484D4A83ADAAE5427689ED559EBE5BE
E0A331DE6080D7EBBD13F3E3ED205BACCB90974CCA4FD352113F3C6D422A7832
956BEA0528611520249698594AB92526903C96F1DF07C5ABA532ADAE9881BB6C
E76FAFC31B2563CA333839EB957D05DD9C5110070C283F2CDC03BFC889CDA4EA
23EDED36710B873C98E7E802CC91B5BA979758892B69BBC78FE123E3CB9E4EF5
BCD37C128178A0F7938DAB79438F28BD4D270F57A959F26997929BD1F88DB4AE
D5544B06AD48DAD5E377C2F375CAD13A9044127FDB111E96164AF8420A7A563D
795D8E9E60F52224026E6DA17D2763E1E130164942DA5F704DE35D9837631576
C35FEC78C3AF86F43B518C3969E35AA9F2B80249FD6342DAC7FF8A4BC90C6D9D
5DBBBD6D42C75724CC75E63F283F1424743DCACC0B4CEDDF122A4AACC184C675
CB5F90993D09ADC292397919D94ACA8041BB6B492E07E4DB88EC03A7608CE77E
F1E843C3B7EB450233128BDB6370FA61522B51536AD69F860DA40C69D63D5B8B
42C34172C5F5B536F44B4F3452249DAED8DA70174FD46DA36BEAC07DF24404E0
50CDB6C3DC67B1F9CF94C24746C3FDA17F2C848A4711583826253E426DF9562D
021B182BA2924AA1DD4DAFE4CA4729D13E7BA6F80A3B750DB063E962E26A130B
B340B62D63D816029518A84A313834E9E3C9722947CE7159296450F384A3ED3F
80BAD4BEEB39C3C16C6C9C2CE8EC07EF3C27B165EA8FE3B2E77F515CF0596879
7241B5BA06E192A16485B5393B876ECEC4101176BE636CB678AE18A2C284988A
4890FEDAE6CE190B65036D9EF7EA0F51D5810AD4540701E1653DF36A29C8C325
4D402D0140F5FFEDA15552B8E26BC4A7D233105724D3ACA93435328249AD9A77
959E12A6A42C89543196FB8FA21E8894D2C09DA430FCE077FDC984EFCB4556AE
25FD1C98C243367B2619CDFAC213DCD7A4A26181DFED9C34F6913CB64A132922
8AA64CFE778149E5795166423DBE5D30C0453E411C9395DF9D7753771F4B609B
835A6293782B98DF6D611220003D88865FBC10316F6EC4806316954E90817A74
BFFE3908050026146C9BC16AA48128391FC3D2B57EC9E383CB8C68E0B05EAC32
76696D5967E896441037AE3B9408DCAB3B2B7D233ADE79A416297D2702DB352D
087431D08715AE023F2B4A7B0C6546444148D9A28603F91BA1E5BF9897E75E98
FAD6BBEB0896586854605D9912BD205E8FA4CBF945CA336F20D85EBC34A51E78
46785B47E27FBFAB667B609AC7201AFE350331379CBF1DD81DA819E82DD75725
51B1097BB7DCA58B471691C63FA2FBEA7BB5AC25E6962E566EFA4F596B104C58
04923B822F13445E6F7891013CEA1DB7CB9419DAEF15AD6FBC0F91EFB4ADB3C8
E713340C110924E6441E61FC59ECE8FF86E5068EB1C90211676F658F0C5E129F
62A20129AE3E4BA05DEB2A78E15F4FBEA198573B6581296F85483FE343D54EAD
9D29D5AB7DC23CFC1FF48AE4F7AAE4A9D1779A747EBA5F945E05D1A6D910BB58
1E190166720490A124A76A808841FE81D39359DFA86A6901564423F1F8A3AB5A
EC5A549EA5707353F50B152F12048317F4628F7570D3DBE35B3F60391D13C26A
4E476974971985326ABB5BF707F31ECFC84E6CB5186ECEC94FCF60D33CF0386F
6A52C8265C910AF297CDEE3DAB0C3CC77027D8A3C0A06A48BCCDF5D6D6770402
B4F7D5A47E5DDD4315463D662B9274D2E29312ACAA9B901B93784B622D86519A
9A42FB03DD17290E01444DE0216F433BD0ABDD83226C25C32643FDA7E4F9F5DA
3AFE74216E828BA34A56AF169E5CFBC94507E6D97A1CDD7F732AB8D83A616228
99A6CDA1B6BA77CF4525E91037F30CF066440BAF522B1EE90448387DC65F1B6E
5D964834D39F65A385A98E8C2289567906FE61337CAD44686AFE62DBE110D427
8BEA11CCBD331D01F6A9C361CD5118B5DDB3EA793400C74D81D8BB0D87E54A0A
D2C4C81B22BBB923CEBA11D3EFD92B56C3AA4FCE302713F2D03E73FC22F88446
7845D8B59BF7447DA9415C4D4F92C8F6ABDCB407CB55C3F75A0616CCEC0DFAA9
07B96CC50B34C83623FB5BA693308D8D8B1A8028B073456088F14B0E5EA82661
822FBC407EE68BF805D039CA9974A531852EAE8BCAF81DBFDDD0B158AEEE6BB1
730B9E3B0398DC2F2E1134C5CB43CA38B6FA33E7D670C05E170DEB0C7D98EB67
CE6F059FDCC7A652097BE62404F5919DDE7B2F80FF7EA271019D39DB5B7BC261
378F345EA56D9F24F9C75AE7A9948D1D65668A62106E490193208D7CE9CF02F0
3E699872CDCF4C4A160F3373FF47D707DA7220F1416935CC33F093D691999445
F23012B797542CDDFAA6B5322934FCB329953875F95C55EF8381B2F5168DB2F6
53569C01D265CE34E1F3D37687AA3B2A80FEE259DC0A3F5A4764B007330E8B09
C04F7D75830A646B007A9AEC19CF77494B34F46433CAC90EB63E7E0D25DE6C8A
0679F77FB427A87086EA10A597E1623529F8734C0E096F1E5E92A17CCED52E42
690F9808BF40C0FF302E4E863FE639386DE98769691F9CE7ADA0F5D6C1AB83B9
8945A1F9277C4F27F5B212999D21D23C50687F8B8D34306301489D1390DD81F4
52E37AA547862476E5E4F6D25203B7290AA415C8326461EA7F206C3978E4EFA2
5AD37DD976AA53F9750AFF6FA14CC2242F7B6609A12565A3D8CE09573C5860E8
77242A04F7CD6DE2870D6F30A4C67B5FA690509AC157F89DFF8C5007596E9F91
9EB5EF964EE4ABC6FC04561ED21AE022E86DDF259CFE087C8E7DC9892AED90DE
32A234E50243714D42FBE4E1F4E9F1316BFAADBA913556BE20E1EC5F7F53DBA8
CDB761D3D2B15492A7E1CEFAD4D03974E19DEE2FC4A480F1F4FFFF093DD4F978
024FB2968A4727E0288BF0C7533C0356C7D6AB6BE4CCF1C2A978C9A8DAA2BC51
316400F9059E85CA54122ECBFFB23D7A75DE5B6C8B5529AC7C061D56CE72CB67
E59EAE0D87FE8400FACF1F3D52E0250364FE5AC95D316535E1AA189B13BA39FE
83589AD667E1A06E5A4BE4DC4863C90CB52949603C0727A6A3FC27553081FA9C
ED02E69B4C058DEA4F847FE19CDBCA7097CD03FB8CB1FA267164742287C9F05B
AB96F90BE00D8ACAE49BBA679D9E0D06BB86BCA7E5FD3881744E9D8DF91C94A0
FBFB4ADAD535912457D02FE2A5EAA282DF62042875F338587C80FD855F1733F5
0F636A4C7426584812D889C7E661EAD3B9310B9F706A8642CD6EBCB1ED62EB00
7DBBCA06E09D438052E27B75787AE81EA98B34D8DAECAEB88D533BC804C1C805
9928ABE24544F41569DAEB22BA43CC5A661666684C07055F1043E38234086B2F
93321EC74145ED69C8AC5A1346BBE8940C2F9B64EDBC28C17FA2D1C3578B5BD9
0ADB98559F2BC92D811CC6DAB621B18FD848C2A52B31C0E5093AB36A62182A6A
899956499748E34D0C2E929AEF3C8034A681E5C185DB2E6090B9C0C3CF9CE8E8
FAF564CCA85F904153788A60AA13D1FF8EB59E0F97561179C2C0F08E832E2DDB
E7C66ADCEEF762E34060F98FC38430DFD56AAFEA4135F59E74D46C35C5AC101E
91B84180444A0A928894F8FCA116CFFFF88D138761334720113FF02B2C734749
091BE71BE45DA4B338E1B0C7B5C121106509D02C6FEF286C526C019514E3E416
B0422DFC5718733EEEF10A2E54A8082A9925BE024B707D7EF11CD4322E8DA1D2
12C20281360F60B0AA1CC28C2DA31500445B3ECF6C6035F883EFC0DF2AA75EA0
13F66734602C39047FD0BAFA91D2389F1C2E3B262BCCBF7F12425CF626FADD7F
013DBD6E18D63CF46DACBBBFBCAD4418C925FADD7DF27A7AAEAE52FCE3DA1801
C1B65C7CE75AE288A81702B5D53D7FA71F20E220317B9378564B69EEB8584D6A
C888FDFEDE4783A639A6DA91EB45623A1690655A9B4287545138B8049E04EEB9
28256A08C6FA356BA823EACA5798470B9FE2E3D5E8082CD99B70C73672546AF3
EDE43B35792D80CE15A6BEF1CE5811DC2B072C0C6DFBD2AC4CCF96760637BF10
42155BE10CEBC5A6A61A8631F03986FC4237D845723C5BEE9525EE453CBB32FC
C219DFFAD9A7F7A6CC1703EE06340147CCC72AEBEAA4F656E9BC0423C31DDE18
178B7CA0225176DCB71B7083CFA90832EB06617471F08399B1453DFBEF7D8270
3C9C47AA9D6753E1FB20ECC1C9369A36F8951CAFBE129BAAD438E87189F2F6AE
7C86F4EA099DEB2373FD9AC88671715A436DD4EFBFD0DD1818965337B8CE9CDE
B852FACF258072F733DA1AECC72715A99013EA30A2AF57FC31B227430CF55057
B0D3795AD53F1ACDE16331268D2DC1981D3904F85D8EEC429642C96F6D3C578E
8242A4C3B473C5EF5EA99AA922FAA53D9D03C54706B5ED1F83254C6A640F610F
2D84E7E4441762DC8DFA3836C9EF5EAE36A55AB66D790A65432FE7BF88BCA870
01DE299223DDBBBD58CF5394ABE26324A63773139A2E27A763669EF26D649476
103CBEC37824D4C02333ABF3CC70A2ED8C92CC6DBF83234D321C49821975DA03
DEDBC7B3EDF60C7ADED39431033CCEB5F4CC02D42B0C297B9959E9E678BF7806
C7D90F8C2414CA1669749E13E6748F7C188E556DBD5F54C609517FC0AB69CD22
60364701ED85453DFEC10FF237E38BC8E19B81502A19E0BD113AFCF86CE4DAD8
923EE27F4E0680D685845826BFB35CDB2F89AD86815826A0132FCFD809E2BC34
AED85936859172ACAC478659C278A9FE1825AFF2BAD4443927443CE0E52BDAC9
A578996AAF957B963C159EDAD2B14BBA9894075A1F619E491372A1D7E5671D7D
483AFA04B3E76E22CFC7B188D1E4902CBB38AF4DFA01B0AEE3ABA7AF04C8C747
7167C20C6F31801F823E6B21EF61C7E869CF3B0AF9B6FCC5FD4CCB61CC8B279A
83B37EECE68CE511975D69BCF210D26FFFA12CFD0E9247BD4F2CE894D6189EA6
0561CE2631D52BA0C29171B40E2BC4E567B4DC63A29B0886848594FB07D42C66
26F4AEDE9AAD2C8716CE9AB3E4AF188A97630C430315D82C6BCC3463E77EF0AC
2D1AF5160F6241C94302FBF237C39454C67E01F68736F187FA7494D01EE5ABEB
C875173CC3CDE4C4D73E774173D214D7456BF76BDEAACA47D04546EFFD1AC386
043D6E178BBF8A49AEC88F39B64379313F14AF45B3B5DF38536B39F3CD026A6B
E7E3044DB7CA7FCEE64CE04EA3094E780A9B59F3176A5C5AFB83AB20AC92EEBB
2361DF7D79FDC83F65B0E6BF7A62FB6C2F72A7EBB5E65B3D3A51845A44FFB46A
93CEE3E8A0263882542F7F103D10B8AC0AA12D10B73C29990FDA7947E6F8EF25
45BEF547BEE6021CBE099ECF330F033AC321D463A27632AC5B4A5806DE587409
86A9667EFE80A71D28F3A9017780009B52B83B942847FDE355DB3C39956F9F91
4DBE112C8395F41B85155FCC58282FB23867D928A14FC94468128D6038580F6F
6F786A20316B992F547DE9372FEEA0BE405022C33A3330AE55F39C5E29D5D4BC
46373A2EDBBF5780B5A4F17FEAB6088FDFFDF2E125D61FB011C8BF9A79F4DF0F
83D532C9C58D4AC1BBCE0055AF1446D3C9A163230C5D3A4A94455AE3CC68166C
D727639D26DD574C550AA3864CAD2FE404C343935CE6DC91D4F8B7800A05DECB
300CD7A8C38D774FBBCCF842EF5F146D57D0287D62D1A34793E173D032F66D7F
881064CCEF0B4600A60B7582D25C82ABE700E55166F2D6E3D0DC8157A389BBB3
C8C2D91E42A8F3E97D7D468D36EDBEC14C5256B9940F0800E6DD26001BE1FD4C
A6BCCB64471AA58488620156738617681E0A664D2286C6CFB8337F060FFE21FF
47D8FE250804AC5A885463B6CE25AB8ACC2E93B1551E750DB24390D7F0804F28
A5DE7778C103FCBDD935769AE28F1BB1EA4029C7C87BD07DC726FE414BE100B8
B78ECC15D31D45E3623441B5C603A8BE1048D4D02A987565B60AEBB0164A7A38
2412CE4D62FDA00BCF5B6712462AB6BC2F9FB538DEFD70215481723BB6B76B4C
3CD235E8477985A0F86E0DC891293700BDDB4E2A68BFE6E6520FFE82B8EAD68A
C5D74F34A5742E04AC3759E0AC9BC62CC62E5450773EE176953BF5641EB2F325
7A53249617F3F452C41422DDD1BBEEC3DE6B40E074975D1CD5E70D07A1818040
7B33F3109B5EFF06712B9D09665EE980E0393405F62F6422E743D60D4F71F6CE
C22A583406AA0C6AFF44BB559D31DF42A1661D656C27C4864FF69822883FD8A0
466654C1C2E9F820D2B1C9B1598BAEF7CE0226917D674ED43A042D289A653949
F11C130F37E27A62B17E62CF33D67B24ECA9329513ECA625CC1C5FC3AFB291A6
B75A593804B97DC42357ACB54C3E68A53FD4A142CB1C1AC5FAA0B87A1088D410
AEA9CAC3C1C46158F508D7AB7F99ADD146C9CB2ED4351666F90CC1B2CD008B59
41734D40464588926A5D843F40FE063935776459C824FA2F48C9A6446FF68DE4
F6DD9DB5A351BA579E2C5DDC983652D0E7CA253B39DA4FCC849CEB3A4F4C4C19
23F2E29BEC3089D2382E0A5C9A1C1B39778132988F62AF56BB1C140022F6C982
1AB92B0F5D9DC9D0A91B93ED65003BD0C4D66089B4B91C9E9A3EB75E31431F56
20D96EEB8C55193AD8B04642912C929018D4C3503CBED9CE6D260DC546841B20
165CE0E8811A1506AE38F13A4407E66CEF10819E7BBDD538A48259DC08D6ECE0
EF01BCD9EEC871AFD57FD3DF1D9CE3DD8CEC4918D7FE142F2FBC5F9332C1ACC7
C1367E97D4ABECE44199949AF13E056A10D76061843CE00D8AFBA3E4242E7BCC
EE51EECDC99613799F81514F3301194447ED73ACDB150029F296E5EFC66EE236
2A832AFB2E71E8A88825E8912C86CB6CD5BBDF84CAAC10B49071982039742230
A4ED9F01ABDDF246C0FB741303E40B329F7B3F7AB9BB690B3F1F8D5D92B0125D
3D3408D17A983897CF201E3A4AFDB7509A19756865981D6C109D9D4AEFF058FA
CBE963052FAC7E5753BBDDBB6FABAB6A8B8086FD75DD0D1B7A8652B30AC3BEBB
F1041466A7C86EB2D352270915680C1610576D93988FC7CBCE8F8EEAD3405227
F8B50922247D81A69837ED9404D7C2039816785ADBFAF132C911E3A9AC9C7D0F
84DD55916AF27033EB70C8A49EF8A294FDDA952D6D1DCB0481C4DBE8A6CC2905
13383812DA577F2F42423A83972F2F36ABC8703D5AE868A3E00A3D3E50EE9345
63FF9416FD0CE199660202348AA17E88743D7EE30E15C1651991A6A9CD120668
78AD3C301F4D3A8A3FC67D9F369BED60C6E321A55CB96FC410A30885282382FB
1854E2317ABB61D9F28207671D79393646515B1EE31660B76219EE4C2F891E2E
A012B330FB5938C3BBF97AE7C6C4425883165E85D442D6F6CE73FBEE87BE66FA
501D5DEBA893368EA3FDD3B3A4201D384F3824ECE4443993EE94A4B4016F462F
EA63BD490E1FD0A3D344768EB7DC6A46178EC6035FC8F3399F07B6C875CCBE7E
57DAD79BDC506F66305DED851BC8F616A8DB63B2A2CE3879CE965818B9269A90
EDB58ABE571006296D70F66E2A63C856C853C3754756D2FBD0636C61A8435C38
F5039DE133CD7BACAF9F7E48D8BB3DB79CF256E4CCA729FF94C41CF27DCB97D2
935ACDCC8DA70D533949891A49AE9BC4D8991CB26D44DFA0957BD12B7F6904B7
0062C170FAAF08633A13C303EAE11BC30336E36B5B02D2FC02738AA6FA7C4CC6
6C88F5BF25B415A164298E5767D6881C64BE717E10AA577ED3D559005C78E6FD
95C829BA1924733A6C81AE0BE8FB1A69E4B0CD08A1FE6FA61A1B3F44687041F3
7ADD6989E85FCA231ACD4BA4DC0AA1B54D55FA959DBDB3A3D59D187984CF07FF
A882575B6426A82F101D8FEB1CBF633184CB857C8FAC9C760E2F0056228FE28D
B22CEACE9B52554777AD2A3D4C8C9B53912E217C0010B6078592A085707414BB
4E9D6ABB33028BDC48751D2E323C65C3D953D33B66D50BBB22DD1B68A0A278E0
2684B907CEF368DD836DE73761A42A3E80BA6189672ADF5BFEBA501D718777D5
4443981EA2489E6F8F6BF4D8B5DF13B690D788D9F51233128B95DABC4ACF593C
A80F3E58961CB4947776D74FB0086CB081015A048EA8A5BD31E2FD4A3C65E04F
45CFA4DEE9DCF4CC48CF7562D5D69CBB57B28D0E0E070090C9BD94ADD389BFC6
49DF66557D0E93B2E5BB2497BD9B65620840B8631DEFB982553339777EA791A5
03CDE266BD99CE1D2976040390CC6F15BA96475D3AF367496E34A2E63D693D00
6CF3E868E5C8992C8DB9C7CE5414E5FED0B0BEF2B5C6463186733F7EFE053179
9FD9C1D86BA3B9C0205FC2580EF426EB6B30BFF1F4A94CB02B67C9EFE3A2930C
444B7792A466868CA28F5870230E9DA69ABC80788F2F72CEE5F5594E449AABC5
B7123EC9D0708FB4A2CCE7CA5591627DBB310CBCF9214788CB73E4B343ADBF12
083709EDC26146F30332622660DBAB749090871FD2316356C3CF06A91C4723C4
52AFFAD95E18348CBAE03FF8269ECC9C3CBC78B4D82DE0F07606DA710885C3BE
E0FCA40901142B171E1D71EE18523F07BEF10B0BB14C4D4DE4F2AEDF89BD8957
8F69DB1A997A440C27F6B3D45356DFBEB0F12864B22E2A029185AE13AD4E96C8
522735074AD649CABF39201BFE419BFD2AE20A0FB0174DCAF6823A371CAFF56A
1A6F744F6CB8C374E0C45BE51CAFEA0A456252D1446648C73185AAB636288DBB
885C46C5718498E0A8C3AAF39D9A429649A1E71F9F41CB8BC1EA6C4880C531CF
4859A76D68311B5FED7935DEC964AEDB4721F177FC89A5AB13A12C5D2E791B87
D4136A05069433055575EE2B52D2DF36AF97963436F1B526B5A4CF3AD27EA5CA
C1BE4E5AD2B8B31D5323ED3496F69F64086E77474A10547C1BB5DC54CA686A95
BB66E9002D608A929061557B2FAA7C4150163B9B9995470C2ADA7DC66857AECB
DE1D3BD3710A1EBBE2615319C2C9AEDDF9F3D98900FB56F5CE2E7B2B310CB5A0
6EFE60733DE9DB8F7D59C8940168BF936734B1F57864035FE4CA3A87DADFAB36
65957769CCA3FD911D0EACF12E58DD926DED61EB7DAD6A6E543C730889C891B7
A20E83C1C9B860B740F2B4D53A8656B4EABE3095AF2E5DE78AEF27E536BD4963
C694A57B12AF3CEE45979BA190FA0F49283090CA40AC9B210DDEFF02379B2BEC
B9CC66728E5C64EEB60A467F7DDBBC496CD4CEF09B0ED0FFDFA3285821F806E0
68BA068BBE958C834EAACA821ACB6BBA78292784F5FE400A3C60F6468F8B032E
5F26D2DE6992D4DEE182CAABFBECC9B908CC9442636D325E79F7BAA6C640D47A
F86948448DD00039DB41E9C5BE1A7E6A8B2615ED76FFD70142E86EC2265134BA
FF2BF705AEB7D7C81454CFAAED3C30CECE4FD7CFA6E4BD0ED071182F12CF1E85
3272B9CFC744A71B4001F9CA02A6E5FE2C44491BAD97AA7AA98DC6CB5052261D
715735810768798846ABCF83E9683ECD6C6AABB289BC700B5EF5835B8481A455
37EABD8B2A042FABFF483882103582209E9DB258DD5EF1ADE67D3AF7F5940E56
1FDF3EC104AB6EF99A3785BAEF53EFE0CAA60432FB85C125190EF73FA305264E
CFA9E0AB1944BDDAE1FB609F621928A3A51EEF53268559C5B178FE624B1AED5A
A201D467D1E213B2A0E953A6FF77691AA267859AD4C6FEA6A5915F4BB60337AA
67EAA4FF63251C667912F605356788B31059712DFECD2A617BB78FA97AFF07FA
05D23A01A37B13382227A754C1E14FBD8EE0F0C862742F9A5F889F5C57CDC1BC
C32B6E3D6C1D8D767C3DAC45E4D8F3BB9EC761F0490CD3CC898EC1BAF53EE9AC
0EDD494087DBEDF3E9C4678E6952E326842754EF68A6F45AEB7201BBCDED53FC
161D391E60CF22B61595B16AF9E044066353662414DBD469C92C458EBC35A2E0
9C012CEF743BE11D57529C07C114D1424B7E359AD70C303D946C141100367968
CFBC2DCF90282DE06DC751E1B64DF5D843B0514647A70CB32D9A9EA27961214C
3E714C90B76219991D21E34C2E2089A27762BAA59CA950A0D4C3C5629CE9608B
B7E77F5201C8A04618183E9F7CEB198392CDFEAAB4E9A75A7A4817071CADB863
BDA887E7B2E096CD2E5525399EE25BEE707161B044474DC5E2D3226CB034D1F2
61A00C76FAA4EB347390DD0F94C597D100AF9BC17825D62847A988EAFC7B4DAD
A776A96283CEEE28EA85B42F24249A929520F0BFC0D0DDE30DCC5D80B4B11525
BD2B8C3F6F760C8245A1AD9F508AF19ED018A917B10B32ED08E7F6CE86751494
320449073BFC1D06A6F3355819580C478B6E2A509CED4243271F0FD8F79AC220
0622A13BA8321863578E15C7B59E6BDE268CA23E22A3B0DC696248FABE1876F9
3CA24CEA8F74789C445B0CE59CFD89084011AED6E918BA1FC040AF055F7F9C4B
2FEE740BCF8F66A707BB17DCF1991BCFAAD260B4230231DE743A60BC0E04F067
A5C13D434667F08B19F73F4CC39C1712E057311DF474799C7449FA8F57432B3D
BE614678C070E5C8D318C9D04C98BE7418101EB2E4CF79378974A281B8F07445
6303CAE324705BE07519A9CB1E6BD2C89800409EB1790485F53C020767B5AABC
4A915CE75D020391179FD995E5020FB2B56B488D0D66C8A78278CCAD5FA2CD9E
35988FD5B8584B58D2A96BA65C81FC4CE55DABFDB38BD5458189D171F58F1E99
8F6EB43D0972EEC0BAA7EBC8A05043E18E63517FB66E333C83ACE30AEEB73BF9
79B76603510EB77DADC3A90F91F2A7C65A5662DA978663984B2C0395E5756C0B
3675F3CAEAF795A8A78B27ED20C2D7A33C1DCBD8AA217A5B8C1DC296E43D4BB9
5CF70387C6270755A3BE7042F6E114D659D3FB8BC7A1AEE0A56BE8085D76D15E
B463666E0807CD29B3D3D0BBB426B6889AF3057173323B6A9E5D5C9C657A5256
B4388BE0BFDE518C3F79BA7B78FB84A350349DFEE9A706788F2BDA3EE9970123
FA7FC83B1751E405955B8CDD83794B1D8E0D6BEFC5DCDD5D4EEFDD6ABE86DBD3
C8170187CDF780CAF45A8E0C2D394A26B50F8BE7ED86FAA7132BE44229304ADC
8A686D6732B0207BF2EB300EE32F3181F98039645643E15D25917F38DFFD8BD5
F64E1EB3E85EC2F094AB06D427B5E1E7412B3369336D20BF11A65539707FA4F6
6CA22F388B0BD6D579327DED36B72E3630FC1D9B1FFB3BFFAA6D0A20C0381ADF
48E1B2C1124A9CC2E373ED1F6F3EAEBD1C8C533E943977A0AF27B94EB181D294
3267C158AC94F834EB78FBA8079A6CC68002CFC7C9922DADE3577BE70F3D4D71
719C1182573A527FB8826F7F17E5F5D5C98C960B3F7873A164EDCFE7FB24BDB8
485E39CC98CB7276D8FF902DFA75BC447408BFE7129B8FC87B571B2F7CF7AE4B
A146ECD84F02764C37014675A117EBDDC79D09018ABC98113FDEB96E3310A43A
6A68E4D42CDD2484CF47C0FB3A68121F42423A047D1883C61EF0334681CCACC5
D024F39309DDAE771498F9FFD8090BA7D3F1B16D748FA531452C7BDA4E2C75EB
0FE15878D53394C0C7D5771B0E9E6859B0E657941C7E58935BE5A9105C3164B4
7223A893DC58A24D65F7D808B6DB39BB10C1F4D149305E6D442E7D8B58020A04
69FCB6F6C298A1E4D21FDF8F62B467C4997EC131EC9856D5B7A5B18F88BC747D
C2510E822259DDA43D30C33B0F89CCF8C27B8893041F84F2C6DA434EA611EBCC
DB65EEC83A858CE09E4587B808417B54E603A6E083BDDB98446BB48BEDF193D5
75ED95BB4914D4A5FF9FDB15EEA3595AAA28B66BCCFC7855461372B4CF5400F4
B7BCF0D8E3138DA111A14094FF9A979F99AE37EF099A4DAB23CF3FA3F94728E4
4D6271121286EF517780172D12AE96F427B5ED069A130E49C18CF4CFF96F4D57
DAFB1629719BE89A8AFFC667D0BE39969DAFC31182DA4A939000AB0020F85372
C60FF7CAF704B31FE5885F3E095314744F9CCB1367944AE235F4F872E636F24B
A68ECAFED1366824290A53471631464ECB612BE19C84213E7FF228B69E1BFF66
960C845C5A2B81ECB5A523CB2915A925B1655FC69798473F5D5D911F077A97BC
333DBFDF76A4A16023895653B9716843F33B7143D941433B11A9FEEB5D4A9ADB
2E63341AE169A334736D24CFEC8BF8E7F0206FF63B641F317AFEBD9F11638572
6E908BAB7D1357504048C0F5A69F445F10907355E926ADFA5757E73CF123CCEE
639A228B2B5A163785EC96245A45B4ED6B5BF9F0750DC173009189847F8EE4A2
A279348346C7BC326C4FB78A42CF04705AE8198367C7D54AC750206BDB71AA43
24F87F4C7A3D2CAAA2E1A47767726BD5568FEE2FC810F9149097B9EB36087D8E
E5CBB80AB303F36D640C1DEC8136302DC4A82F4086534390215FED63A94EEA0C
4887D955B77BA7CFAE6C4C9F01745475B1E3429B7F0736227E92113DE6B47E57
2A8DB0D0565F05E271CF122E3770490B395942348913DCD823DF8673A3ED3D91
ACE4B124110BEAD1F342AEB1783E9549B6E792B1FBA53AFFEF94FD342BC161EB
D24101C91398605EF9467750D982CCCD4B937C78B66346ECC52789C75F7900EB
E4A8801BBF34D10B1624F66224C46259182E8F03D67D73718EE565F9C9AE0CB6
61A5D4A4A2055CD35D520B40E15FBE17A440784E4F52E9A792DFF7E113E18F1B
B31594F476D76445B4E57E8EC08C9D5356746074519505DBC4F8AC480362656B
F7258D6D4B548FDBFFE3E6B0DCB52F9BA4A10BA0D35E5C6E7CE2C7CE17006D21
50F6D378FA4C1844C08D06E40C5D0C1DFB1F1B7224B598AC585AFC792F2F5F04
FDB35F1F207E4F2674B5171A78B05B425795DAD7EAD09C442C371B7A7B3503F6
B4CA4588D5430DD9943FA6EE299A4FDAD093377254B981CAE483B8C9A80BADAA
EC8F1602CA48F9F4823D235D1907954B8F5A30F6AC497821DA8DD735A98B65AB
E2703BB52ECACFCE5B1A7E46E3F2ADACDB61EF98FB3620929FFD88F15A1BAE76
C6EEFC79C130434BDFEDD5278ACEC4A55F1A082D537B3C1EE890A6FD2EC85733
A30BC2A7E86A768D46BA78BCD7605C487A00CD29B29E19F7D23F8A75F6D1464A
7A8025262B1C95F281E01141C32B303AEA6B90706004ECB3764B6430F0C5C491
689306B6D6E9979556CFD400721EAC67C16221ECCD04DB682DB4498C0EDAA9F2
93E7264A221A21C15AE0743B8D2A78C5A83FBA022CCA318172363B1B4AEFDFEF
230B3EC75D51A5C4E44700A4B12A886AE75CEF0729F6A652D08F39E2045D5794
5A929B28A9AA2C21E05D767DB0DE6BC52D87A629277C36A190BCE3C3128378B8
FF538B6B34EAA77D4B05540EDA577F3759A940D23E73451C9670B826B6BECBCD
412A7D6A0F93A57C39E2BF0A9AE90D009A003CC77027D8A3C0A06A48BCCDF5D6
D6770402B4F2E67B40098AADEBB6A8AE4DF924A93308654F1AEE0B98EE8075E8
F3C861CB90E032EDBB29432AB3533DCA6D56D9AD9CA263E1622FEA5CA9977503
956CAD343DB3E670E3B1D29ABCFED7027D94228D330E2F4E2E31A0B0D6439B83
A164B82D3C3FBF6D1C7B96B726329E0436DA0F278C415D187AB30CE153914AF9
24F674813266AF9200CB3432F78993EB5958548EC62C2FBEDBB75167DFBB7EFC
F00A333AECCEA316CDE8A62D377AF3CE7952B654A51DB4C614805AA562591C39
69760019C54EDE008DB2C2FF797DBDC0981C25E3C081E278A3AB9359A878A64E
9138E0F1B23D7BC51D926CA86263840FFCC3BAF798B72E59F27F9F179EF01BFD
7E637E171B8F2C7547249332D8E0A5B17092B6596500AA70F399DC0F72C1F50D
22B1CA7078797F25625D53DCF0B9E2386BBF0900E0E011E8ADFBFDAAC2593CE3
874702EE51D15B14730C7BE5794100207FC58AD15560CE44A39581BD6B555165
091C5D4107166B86708DC404283546D7814BA53FE7FA161FF626461F430205D8
B675B261FCE9455E95B57C84214E9F17E2566C0CBA9C877E260AC58B70027B0D
64F633DF5B6BAF1E92551C7D72EFF375CC4D0754FBD4107B9A801E9D4CCA6772
C10C2692938E8B62D0BFDE7F47A6D7C9E547CA8BA00D87986CCF6E14D41BD9CC
986A005086494D4A35700EA524C8217E924000A0F81F7D46720081C49801814F
F0267343E8E3BA1E4E2F9D8EEDBA09F0462AA8FA3A04AA5F4FFF573016B65737
2252EE24C8A9AFFEE819C262B73A0CA7FABC61733C8D4C355955573B0E3B729B
21C0D9FAA6D6B7D0C153225E73E7B2A46E9FDDA3A373C33A9602549AEAB63408
BF98A3E0B53373DA63CBDF4156BE1D39742D9F946174CBD09C967CED3A2ABF9B
D089291C58D9B80D04F977BE3820BFA15EF30B757E28F2D0EAA9968DB87C0083
64F30EE1787844E29541676D5AF5D878E1B4A1D282C3D8159339E3CBDA0495ED
FC4A12F8C4B27C5C38BCBD3C8C441C04A64A0C41F8C9F34807DEDDF20BB1BC30
9586A28F9E159365941F774F8CB1006B17446676755A4DEC67C825F18D19EF08
0CBECDEA62DF14BE677DEF79E10A3CF1B30090B9D1243D1FCD6DB1C56CC4A20E
3708B9152CB10691C6534F9AE4F003DFD4429659559C8510F721B22E04B8C465
B6E21BAFE9E040539DF962D5396D938D2FC40506092E9E0B3EB5554158E3AECC
86076B5BB2794AA3BCCBC3EDAEC69CF5663062F3328DA417B8A345D4C31A814F
2493201FDE2D2E1EA7349E324829A88CD39230CDD470B12628C0F838AD7ED830
886303207DF666D3E2E7A83E2C950EAC5A902B304B5D06FE54F10DD11F2CBFB3
DB0D49403A883CB22DE47EFE59835F21DC12BA2187821C669C4C722706037E2B
86C88F3E03380875F2924B70E4C660598B1D89AECDE3C5D8FF297491BE8EC4F9
BCAA29E82977AB05F44EA2E305F140485FD656FBC913B140A2A77DAA74BB2A30
9EA8BB0109F5E2365312E8E6E677F25E45534CD4B65CAB7AA493A8C329B3EC30
597A56106D416A4117549316FF400FA1BA444F5C8C84E75904A2D372043D83BE
BB427E01E60CCE30B0F2B691E3A8C1DD510CAAB71D50FDD11F791B3CE3455A49
85ED699F01D3CD32497D461626B5EC47DDE14A666942B10E15F853CC86DAC16C
99C47055E8F5D1A42D40CCFB303653C5AEE23A8B153AEECAF5A08119C31E8F84
58100B51615F6DFF61809F89D11BB6E330F06EF4410A6F117CD0A22DDDE0A35B
21A096B220A1A7F97DE343DB015DB62F4800CA9648627BB3B00FF68A0BBF1C61
3A6C546DA15B3FF3B1C6FC0878C36508D4DD0DADFE734BEC65B610BCBF61D6AF
7A7DB810D3E26ED662B269929C431F13BDA571E3523E5AF46542813C9F0883F5
3F8CF6F267B35795C7626A32B6E41849E35FA0D627EB28D5D20002B64F49687F
559DD9A48217F19E8D2F4CDB2E78D577EDF6E007C0D748DA944BA2C659F0B764
37AC7654EA4F9C3D2070F5FAE32EED8DEEE7228878109FA59C05B85B93FEFDB5
7BCDF4B98476954DD0BFC082F3F669829D6EFE42CFFE6D8E1D899120A3A499E5
5AD66DE1A7861549108DC7EF0C993A57E12FA92DE9BC3DE785DA2A4EE6F6C326
F94814CEE3D903CCC86DD77C59C6C45CCBB46B88C3C35F77D41CCFCB9F98E764
2E5B7504E8E3F9E6D6626CC108573E1A50311F4FF876ADAF43D9352178217879
909DFE3C012CF2809984881E57668A2CEB52B1DF86A32A0946A3BD1E8ED4B742
EA90567D57C7EB9F062ABB34EB073598F17484D20A23816F6F84318A77FFBF15
9291B59A52BFBB8E9E310E08D89635A47BE4A547B505E2111EC5326DCD8F00AC
497DC7774B8BC4EFEFF30269AB6F32B16D9FB84924BA234CB641A61D862FFEBF
404765C10364F9D365A72C1155CEF957023F47EC0C6A10867852324CC7D79285
B74809D87C2789B88E15568711106DB59BD31F0C3F1D1FD4E01960EBF017EA5C
25ACA44F2C37B88B6FBD6156DEA31D8B0ADCF87DF6CBF7CAFEB2F575861CC4D2
2790BCD0F1E868413AA76FE4BDD1BECB4F085845D39491FEB49ACAAB78D15A96
73A58D5AD92CAE65BF5DECCEF7126A96C576CC4CD3C5E068B67143538D29199F
4F6EE37E0B9CA2BC67D997598560886690ABC9E70B95F148BAA426FD4D59535D
9687CDAF438DF84CE83EF23C8F8DE1577E0220A381B10DF5700416C5992B522D
E63FF69F18EB6DC034C554F805509D693838249DDF26659843024E16A23EB002
AAF529DBBD22BDF52AF3C080DBF5F8F83853CD267FDC0BBB307B6E3C38D0A74A
968757AFC19E45C3C94B10CF566DC51D99516B2F8353F69FFFB5D736F85D789C
0FAFED0C1F15F8D5244699A2C7A19184D38560D2A888B67B60E86AF0D95C8FAB
7C591B4C53B02D28668471251195965EDD91DD94618AED3200445013CD0A38A2
17B04B656873309615C347DA62453965AA1D3D9B303EDCBC8226DA79524955E7
791346088CF601C941C66E23AA22DDBDE8037181B2B49378842275701D9CB615
D1A7903F91BC3985070ED99A5666259191A1A1147A9752023F4168EDA727CF0D
FC3ABE725F0FE01EBAF6D43E3738B1FE6F1A7578AACCE5E275E11BBA1D0821C1
D0357396D5F83D54A389FC2172DA93C47D22E22208EDB2FD796F2806FDC4B192
CF6530B8FFA0CFAA2BCB8FAA7BAFF3AC2302C08791F29A7831480E17EF470AA7
49FA5C902916D81DBADAA3DF3C2ED508A5547C4B8B182CBE28DA2B293EF880D1
B9147A7CAA0B6C48D3ABD53A405013C5F047FA3AC88BC2E1A043811D8F5F7CBC
07FCB99FA9AB587A002096C53EE514545931E53FF342559A7EFDAD4883891351
6AA8E852FD88AF41E96E2DDA1EE6C8758A0E8977323113ADBC85BE146DCDA5E0
804C1441FDFA17CDD83FBBE710FA0BA8481A356A5AD24A193B4193461C93B3D5
CCD1F60FD3DAC38663E410E0BF2F9D314721D3C15004C087434725BC971971CA
9533168304814DBD45FC3FD89AE09FF322EB01B1222EF05EC89BF7023A1CCE4F
7E381217DDA94199B106E20B57E4BDF333D06962815B235B64B1A23A802278ED
6635F3A42DEEE11D408DA76D9A2F9F96D45D538AFC13852FC7AF1DA794D7CC69
3654B529297E4E8AEB9E349683FC5E1C323236F7133AEAA52406037E2B86C88F
3E83C98EC71CB8627476F40AFB8EDC911414475E9EE4972E95AF35AFD68AEA6B
A4AE8D8A798737AB7DE333C2AE7B466F77838BB725189F3E60520CB57D96B577
543BF93773179B1C1C2D350E02C5276761DA8CFCA6A1129E0E1E848AD510E451
DCD9C3C6C359FCE2DB7944374972CF711551EF4CDBE851EDE93199BC51037BF7
F360694B3DBB21FDAFC1BEE27ECE9ED39E7242C84FA499F11167A88E47942D7C
3F028AABAB38A59159D28EEF8D5F7B33D0F261BAB212A112D3C8920FE4FFA7E9
54CBB0625AB22364382116A593A43A2564A451C9C2B5E8F20F3CB520EA9464C8
203C7331FB8C8BDCC3564A45CCC3B2E6C15DF4DA4120AE6BB7424A76B49084DA
A4E5997234D4847C8260D9A06D9CEE4499D8C2C46D33022CDD53D5C96B79D745
EDF39BD1323695BE8B6060942ACF0E3771A9CEAF23100219B1CF3A1F09D967E4
29545A65BB9A136D1AFE21FE707DB05C0FA723590DE96C27B86D279F3DDC7F57
082C15028148E6B0EE7BB7A237B670EF685D4606BA04D435CF1CBD47A4F25678
B9C1986B82E1A21021B98576FB348F011A56B10A21C323525A6CE361B7C9C4AB
8D6763B3D2CF6AF656B426A936BAED123C81B5E134E17AE9565160895CA8D5C1
19C9E649899F6FB5DC9FCA3CB6695C4BE1E0F6F82FDAAC5F5F221014E720E52F
059559555CFAE6843699E4333C84D0CC95EE3F22A180CB839D469D31B09CB1FC
3FB825AC667C9226EBA85BED9FDDC255DF78B694C6D7FBFC8C208D2A276C3249
1763B920EC4593585638550E4E834A2E18F1A8D0DA9000E3ED39378FC8C452A7
37C4F9082E602FC417FFDCFA04586BCC39523A9E877EF44F84284B87C14E3BC4
060095F7271512805369D13596AE5796A00037F6C9EA7E947BC71CB520F43275
778275FD4D4DC55C461B7BB78A3ECEEB8338293B2372438641645169C9AE75A6
FC5AC150E7E322E45811FBF56F0FEAA20B0451F2767A6BF818B657B2A5C1CDE2
B37C804F50577B6D1308DD9C414C5C10EE0E3C999564F64A1A197E2A68D05F11
28158CAC9855E65AB582A90B78C5C8AA47B64DFB0978867769AAC7BDFBA614E0
7F1A813FA1CDA8A8F7A8A5B0F60CCC0EAB925FB4F1DF935E92C82E2A9FCED64A
5F6F8AF4F18C6731BB0705FF8A83B0D552ABEF5C86F68CB548AC66A1728D139F
3E30BBB9516233E4A380C74BEC282C5C4BB9FCC401C82A14CB799DC1A7D64C3A
E40AF9CDC89E9E95893F75C4C07D24CD6D0D15084B44C286626F25B1A5609757
153A0B955CFD860345F16D91D52977B459E32FCBC1B02EA66B28A5638BDB3E71
923EB9DB3851D6A4595250DFF0B9AF3EFEB9191810E2C0AB3A2CD7EE11F44A54
D3C8468A4BE08D9EE3459FAA1CCDF7568CF7D729E37CC3041659FCC9FBC004B4
DFCBAA05AE613C9C5F76C2F9071A4BF4FFF2AFD7A0B06B3F26FF6D7792110510
B81B1D598AADA642549516E6C4E63F52206692FBFC83F4332A5DB7FF85ACE0F2
5ECF30A3C900B3B4C26ADE2DD3774D903024A13EDE0D58B50937201CDEDEC0CC
72F52D8F279E4959BCB2AF9EFBBFCE77154D8C9A62944D027DD0BF7FF0F73B02
83C8843E9A3001B934A2C0D6D1559DE16723BFEE1B4FBA65ABFF7C516F5E928C
8566A3E5DF65F790B7D627679909F5CE6D50AFEEB87534E0CF214C9C7494568B
A189D2EBA4FBDB82C06D39C8EEFCB46E6DD65747A981438EAD81C85FA3CF7A54
6CBB5AA0DCBAB0A091F57AA482DE2580BDA57545AA86538FA50C1D0E9BD9DC04
B7D21648A9E2080A453A6BECC564BBEA08738BC822E9A924E63D83C062ABBE61
0F83706D5EDF8F3C44C56A09C74FEA2A8DB268000609F4AE88113F5603738D1A
74817015AC7AEE6D4B5E6C6B69FB83639BA71FF4A8208C689BD01FFD0CE7EDDC
D3B83C425B52B45AA7E0BACF56E6A81F46AC904C9773425C50A48A4690688828
C0FBD4240E75CE68656ECD9A42DD15197C5A2DE7F1B5E194793AD3EFF867325C
DA995A30B8144AC113A2E2412F42D4837893D2BF2016CF8F004D6D37C0286219
FA8EDF861536E2F66A2B9F967FA72705F8C488AD57CA900096EE170AE0145C0F
5FE46408C18A4D377950AFAB1778D44D909B826D5169125378C8A77A1383460F
0AFE4C2D27ACDFBAFD1E709C8361BF87F4AE11F17A1C169380870C24D726749F
5491990F59BCCC265ECA87283342D7365FB2C5B0476619589CC2B5DC7224499E
3CED8EE2895A696AAEF0EB67902FA53D9E8BCF2B59476CD8B62EEE2C58BF09D3
0DFE3109844B27C9CE653901C88B26A7912C6389454B8392B9683BADB41493D4
7A457CBD0E27D242AC286F389DDAC19BCB3B09A631C522BF846C4554F683D929
ECE0DEA59CFC8218910ACB30498D1505103CE6BC9E49CDA0D69B48CBBBB631C2
728EC805D1E5B82EAE2D54B07B9CFCB958B67A5EE49EDA9A580F62EDFA412F2A
917B97A920878315D488D1E15CCB1BAB03B2E1B8F18CC386797D2A9A40DD7EFA
8609D2E30EBC8E091EA43D081F81DDE88B2D64C4FE2A7E42C5EE6A9C5A8D86C1
06679FADF3E2C108112B3410C6DD545F7B04D12E41FA74008E7919F1710B910C
1606DDE3119DC1C99554999E7AEBDAC87D5E25B998284A6F868D9A6F99328DE7
3450462AC1FB753A41D8AEF0DF67893C1D06F1906A2A067240C314037C7E13F3
21A11F10249F19F4F39D481BB9F55F0021DE11DC2402EDA659AF90161285F613
236EB82C35ABE2996E485A5610ECE7B755AB90F48E91D2AE58FAC7F9BD7118C2
37E43BCC36BC5A7DE111B268EB02E852A17B101AC4D7EF91B7D1509C5A654B57
FD48914E72FC476A3D4019D08C25E59C8297049E92A7DF9313DC12E050920A13
610136D6E150380E041B711C074A9C05A17C014945F08547DBB905F8DE72AE46
9B4494F7BB4331B6B2E9F6E868823771EA8D72031081D0CC7C8C48CDD889C379
B0F3CCFCB3CDED6D370C7EC5FD4316FF1364430C32778F6D893641D914BDCA6C
7E1B2EF60D18DF81E422F9FDEBA026A654B9D030067BCBAEF5DC7B097AEC4C54
E28E87A570DB97F974D242BF0ADACC47243197A5688E0D0D7CD1CEFF5E355D69
1E098D1FB67AED1A47A1E8E4DF661329FC2710FF62DDBCF951C4868A41EA3123
8C83DBB5E47AC0EA6DC98916E823C45690DE122FC8B79B20990536E070A58988
992B1EBC6837AFBB5CF4C3D398A0F977D29ECDB26BE99D660D82695536609C1C
7568D605D073E021874C8DA3233E7DF0A2C22BF4441454D650098C5B7DED6374
3F272E00F8860E60AFB6A0FD5671C1DA26CAC3FCFFE7C6728D9E330928C1E5F8
FB5139868F02138047E9722F77F39C29EA6F8251D455AC7A2989E311B03130AC
A988305882A38AE0E11915AC319781BFEB0FE849E292D6FA3E7B6584779D8BB0
7973F7E58C8107A98B612A4BC3C2E8B2504E0CA6E7B65FEAB7A79BF8F1E840D5
695D70DC4C97884A824855D271FE389BFAA268D83B462FC0BD10BBBB8DB7B12B
B1011EEDDB3762817731F30F60B22B808E0102F0F13104AD668D5D9C582CD43A
B1B2097DED7EBE2FE1B281B707CE3FFD2337E7F024EDA854D4E210DA837B2F60
92416AE6CC2FE81F2BDEEB2DCCD7C4B742DC3CF9CAC9D7E3D281E9C1B1BFB5D2
4ED5D673E26A25811D4BCA9D693EF8ABE7832542F32F4C32ED1ACE9C30DA3D7B
34C2DC4F35968EC14E63EC3D38876DF77E5FA9993A300C39813F788E173597D9
AB3AD89740749BF8CD563179BDABA0348C46BFE2F6DF10AECE1F7B9FD3B35074
D85BDA9A615D5C3243063624BB879BD6062EF555AE24118F105F6770EEF2A57B
AD6E91269F30FED66BD929918A29501B77161586A6D3CB0B04B7592D85017426
5A477C0683181F567F7ACCA25F102930043D6D984D21E08349B8BE1F2C07632B
519224775C57E2346265A9D9B4DDC301936A65100FB57B1A94FC929F48743EC1
8678FA414D2F33B16A28C4A677FDE2C3435C59250E09A0722970B560097CA8B4
5C55E1B8989A445F10907355E926ADFA5757E73CF123CCEE63984AFCF0D88898
B214195ECDA182023B93D931DD68559560179C7575FE59448A4624D0B1600BF1
F9272582B4A55FF4A1C7182A5E35B13B103514216A3C8A44993C537F05FD549F
4D4D5DDCF8EC0F505BB9B7AB53756337C1B0D9AAEDD981F68F15ACE1C2701F6C
12F3FD5543301C70C3A71D409827FD133AC943DD1BEA4A303697EA12F26321C0
EEFFBA7C464034283055A466DB744A42B0FD920B941FD7870E0AB280F71DAE9C
A69E103B70F83952F50D22486974971985326ABB5BF707F31ECFC84E6CB51869
C080D1CDC12201101F004DB32DA55AB66D790A65432BA8697DD639D9CC828F52
311A94A494127574D94907283BCBB6E717BCB2A266AC3EC9DFF61D53D182CF96
05E58CDF009C21AA04BC6B893BA13CE60784623C27C72585941D54088EDCC567
357EB66FDE159FD872180AE58B1200E0D5BE419FC41EFCBFB8501D043F67B58E
207104C3F2B5C0FE41F9A4E2C08D950A27E2927B176C755CEFDBF36492D265A0
EBA641F4BD73AFCE72BB502606610206D020115CAD375F69EEDFAF486F58FEF2
5284B5B5618A6762967822C5CD1B81264E78EDF499107FB92EBAD4E83F192EC1
A910C6493F2A9FA4B2590EEF0D426300AF0295C77943CA79A69995BF10AB0EA2
73222FC11305CC9CACF9C14DB93FB498D21B1BB1F74559B6E245417902B988BB
2F98BDC3B721DB34D4C6186E5CB2E597FE273231E41D8E30249356CDD3C93C16
67735D8E666815E5F275C71D425F9409954DF168966159B2A302B801CBA1E633
C73A4BCA1399C9CD243FA385624CD42625616834D6C2F67124B5CF48327FBA64
5C9485D04E301A710BFB3D2516D990A9EF32C2A49F13D67C94108BF38BDF2CA8
5F92918CB14983C4A35AE1EA543617A203FB65CE21D552D6F11DE5B1FBC3654D
B1597FB1B79FDAA2DDBF83DDEF98EB8037E37F390A91A732B34AC069FFBC2F60
07EDD972B07CB644B4E1CA766F19FDDAD7999D4C6ED1DAAC9BAC5C515886FA6C
A49A33AD34099438B4B40ACADA919FA87768042B78A27543C21E18E2432B55EC
C8CA3A2C43E050BA8703EB7A8E81CF754483FC0063D502AEF1F6F1FCD391A2AE
AA2F95E479422525B457BB897E6F58ADBA0D6D012BB00B2407291D9DD5F9D6DF
F4ECABA974C0CB53E3A4B76DEA1C22DE7068833CB683E4E04ACEA44C5BAD0D28
4AECB69CCD0811185FA0005893ADDD71F0378DCBC2252C7BE1A3CC54474A1BCC
34E4F775C8645DC833DEA4EFEB414F26C049CC42A107DB8F52DC35DEB4063863
495463658B21DA28065552A4F0977045201E64134B68AC548819D054345DF144
731DD2332B0F7F5E84C46AF173A3353D128AC01DDB12947B1E56023418758E8F
6615753A07F541869E3AE9CC7B6087C9F370E2431E28C32E249567FEC59BBFD9
378D8E8982F58F3EA2DAD6E20C685608370599FA7B58D6244AF0342030F5876C
86CED8E65F130EC8001C84BB0044636CABA978D24B12EC90A8078E716ACFC562
C790BF24CA1A48B97A3886FA8A04EFF66FDDB2710B091AA85ECCBF7320050EDF
85B462B9982C571293D7F367FDEE695858694DF4BB18681B5323F93312E0CBB7
F34D369C212A3E25FE5B7181254132BA1F12C590D28782FD6576DA7ABCF7EAE0
D4CAAC717605164193674A067C6F848A868241DE406924C758EB39B567F894B3
9756DD3301F4C4EB5F7A46D1EF564F9D4A077B558A6A33FCDECEBC47C3061DF4
C70CEB5C3F6251F58BB78554DE49D65F468A51513C6C0C4E7C73BD8E43A845AF
D408EBA300B5D5882F227F5EFEADD582C932F59D55E90805CBEF544FBB086C2D
9EC33A23E8DBA3C73055E685FAF36F7CFD366BF9B140E1940E13D7443EFCEED6
1612FDF676966A3E6CBF678BFECA2DF88BF148288CF569AE390C4775D00C05AE
65EAF85FB57223FA553494EDAC86C11BD0303CC174E858BEEC37DBBE1180DABB
EEB174160E6979E332D6423E07B092D8E28E4B265AEAF52EC042A2B68D50429B
985F23EBA0C907B6CCB4A57AC0CEA9F0A1EA1DD58D7E54398EF4AFDA5A404E19
4BCC39BEADEBC501099CBB7CD57325B5A34CC379AA56944F454E72EE9E556568
A828EFF1DA7FBA0BCC41A82B3B2163887B1E13E5B7818F12F98D22F8167CF64B
4E9FB1781369B363D2BF1952AEEEAB9AD39C857EBA17FEA216B3F64100B56497
589A27735FF3B9EB0A1BE8206426CA4365BDB3566A526839B597386E852EECBE
1E315834B8173429AA306A89B60E01C8D8AA2B2A13F17B8EB838C38B70859E10
6E1FF4CFD07444051DB0C9C9843DA6DD2481EA6F6138883A9959E2377C1B663E
B6E64083D7EA5E9A012E039811D7E3548148CF0E315B931B5722E43EDFC9CC2A
0C4FDD0BEF1BF4DA1A9A1EB8173CE4724F92471C65DA79C9EADF148DA9D19810
5E521EAE6A1500B64835A2E855F65993EE512C27FE6F61D8DE083054B93686D5
06F4C90120A918BB368CDBA7ECACFEB1A1DE233F5D5B2E40CBB50E3B8289137C
760355A74024E7B1BA69E05ABC7F59AE8387F59D7FDAB5380CBF6172F37B8CDB
6A122A70DED859911B0A0804598D0E3C90E3AE0DCFCCB19F343DAD6839B59738
6E7445368C4760B40843FAEA390892CE154AB3BEFD59E103DE9DC90981F56BF2
A3CD76FC0D6F79C51802DBEEAA6286AC239B129C7D9260E89443A3941E74A7B6
EAEF6F0AAE5F86D0A86D820935161A714F070388531C5BB9B3676EE853A006B2
FC3D5330E6FD9BA5490A43152CFDA8CCC94C03258249062BF80229D451A1EF41
60497DD730EC5D221A4289782DA98D2F03CC7BDD931F90EAAFB470D9DAC2748D
3AD97DE7C009B40FACF815D57DCFDF5AEF6A8492F020E67407CF321E01EE8F28
11A9C0A80F29A6A396F42A330D1B6C3619E2C081F4DE7D2AD9CF4166F578DB81
21C249FADFFB69F2296D9F724349DB4CF0578C704EABA8A055F8A2E33E28344A
7A9EC8F2CD1FC2CFB0A783296EE177A97F5C504257A4D6DA28C50CEC8173F7C4
45539BC2CA725700902A9010DD038524EF695005FF62B82ED5D67BA72E0FFAC0
56863E893BFB220EF05F913C074EEAEBE390144ECA2EABD1ED2BB6C3EB05C351
8422CEF3C41D748B5A07A0EA50E3F6C38E03D5E27D6904608760D111F44625B2
5F470A3FF2986C6D5953B45E364D4C76A47A1335CAEA0ED17FAF84DD6E44BB79
5E10DDA0BA953B19FE4967E25642EE3899DE4C4D470AF14AD1DDE0E54E7D0AA3
C8F86500ADCB8C1E42A8910D20B214037556D6E9C3326F8592F1A8E23E12340D
6D90782F6DB283E949A747F2B0EBCB16B82465560BD255F0E8B7E6EC288621C1
2EFFE5CE74ABA28C8C578549FF773501FBB081D7E78C44DEAEF007F7421EC91B
233C05C4EFC9B610BD103014CDE75223E802DBEEAA6286AC239A6D4360998FF0
F2A095D7F3BAB5120C4F83209F1FCDE75076E703F5C659E58DA27EA448401347
6F55C3A03308C80FDCA6942344B4EC4FDE36ED952B6A49F239036A6CDBE9BE70
E4B79739F2FB995A4687CA6C3859C1866A4845EAE1465EA9D63C064A8F595728
3CD9698B571A023DF46EDD874683FC7AE67D07BFD439AFEE5CBDB7B37D47CFA6
D326B38CBC003A42A5222348DA00906C139F599EED1439E755986AA88DF9E591
07C8919BB5DE06EBB5886888D4A6C5C7AA46BF45AF4BE80776DD6137B73BCD20
97A2385344CE80EE7389CAF1DABBA4C47D234852938403FAA5AD122CB4A90F47
9AEB32B0CEEBAF5602ADFF175C1ED1EAADEC439EE105C467F05ADE9D6A3FC3D1
1F219538D8185042970A76CE5E9F64AF800EF6F490B68D2E69B368375C74FBE7
16F5BEA6035430B399A4018EFD0E8A2D1481910C957103417141CF03E81A47A3
FFDEFDBAB83C439772126E135E97120C0E8057D2DC470283D734B790E9A8ACE0
C5185D553E6E5D7F1F303C414F73321DC5FF5E0C9B4697F94F59B8AD259D2DDF
433930B270C63EEEB9E4DD02D40576568262B2289BD805DF76CDB22E1F984E9C
F446CD7C05F0C4B63DC1C10E03B9D34C6727AACF14833CFEF3E610CEE0821C68
FB994E4EF6DCE7C566AF4BF5B956BCDEB0F3292A8AD108AA64FFEB0CC4106C98
849150713917FFCBD2BB09CEDA3CFAA35DB22ADE12102275D9B31C3B79CC12A1
2989636404D1AE3271837120F7AB25190D80ABCC821BEFA442C89FCED3F619BA
06BE6A24BA92F631E5BD449154CD86E59953642D6C2D216C6D8BE5790068FFF3
1F92595FE56D439417455C5DF2089F515B31DDBC7C4519325DE15205DAB756C8
439445E8D8D79D660362486C475B15647DD7268B1306671DC9EF5A4C43F07B60
72193EA274CB27630A9B04301E65E32D62F9637AC3E4977E95A4B4BF0A807867
7867DA3E932C8BBF928B644276D106E370C9F20A160173B95A0509E79F3D0EDA
0F4F7211B5B5CC0A348F325F3E4553178175463F37CCB5C6F49F964FB9EDAB8F
DE5AF3B0271B04D86FDCA9BE21E2E5AACC0CA21154A3D5E6E348E30D1754BB28
F6E4FBEA0A2E382E26D498BB4C0F9568C6D723C7CEA8DBC052426E3C9546B51F
622AA682A902F008AB5B922C9E023F872D483196350251754193A0103495F21B
C07290C240D91BE5AB10A28CD21C14C991762C0D278229448995F2681C34040A
107D925304294ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2AD5445FA132CF5
4473AF0AE80410C4FBC3A45FBE3BA445C753479685AA9AE8DF53A2A21D951A60
E73E67169DC6F717759FD67200DFF251DB7C95C09E89EA1F66EADC3257D7B6FD
7600696818D3D3CD78604674650E4B06609D7AE5C6D6CD198B29532908C44B42
DA92FEAB15171D24939F4FB18E7CBBFA3387FE25CF70523EF42AF93C5A12AFAC
8BFA3D04619483953228AF4C7CF60099F3ED7060F22B07F24A26DD806097C4AE
F5E1E1F02AC9FCD1D87929953EE6CFB6C2FEBDAAF70B7ADBB35E0F1641F66881
7E64481B4479C73CB1F7AF216F5D3160BB73DB275843EF80302912AC116CD7AC
F550E672A1A93BB6580D07075A259A9ACECBC547FEC4242BE6E5420E0D145E3C
82485AB07E93D34E70BA04FB158884B759AC9A551DE5D4DB804554D23C10F87E
7B1C3CC0C0042B48793475561AE2718C4742058FE11EFEB9AC3D8C274AA862B9
369441EDBAF6726A73053894C7E29F90FEF7B4BC08EC3D1F16089A6C4D67EA00
50A520FD932122CC04FEC35A0023F82192384592AD70FFB544EE0E8957540141
BAD899AFC4C8A656A7EC50ACE67B88C2FBFFD76DF58E255556FF3CF3DC114009
CDF5B02103A70DD16D94EE5537FD244DF8D6AD68ECC29592EEF70CDB511017E7
7DE30E4887C0E7B8F2A0D884F8C09A5EBD381E3F3A59BC1388ACF5FAEBC72425
0CE2D75BFFA06C81330C36FD60FA010DE7B00C68B52F3C006F4CB5E3D0C2CCED
B8B73DE06AA84522EFAD55E2FEBBE7A5076FAB69FC914BC701D06064A7348BA0
476212EA23D958AF63F65B369357A2F4B94F244D365B70C19E23A8BE84A42B32
247BB1741C133467E8C6B76F727DD275D8D40163288D69FFBA0F8D78760DEF4C
5AD390B17E1995617A900BAAC5DEBB31C678B49D88365E7B7E130873188AF63C
A5B2E96A88F4F9A2F5A5D4E544B79C75B722FD059C4858F97C79D08492ACE3AA
3E3C9EF2EE6665AE4E133DC1A8FCCF41B71CF582343250BA953452E63B8DBB9E
22D50FAE58151D8AFB0CF8CCF782D8C0BA52CDFFB13F08DC13655D7241194A25
388FEDA8896EDB201593B2E2990ECE96EF6D712B4FD78087539392EA34629188
AFBB6A2D10D335B76934CAEC6AB8785BFB6A876E3F4E0E2E64636F77F4A0CEDA
6815412C9200C5AA03482817329B1B30C213CA73E745515DFB5E3CD8A2CB8E1B
D1A3DC9FADFEF45E209717A157AB0CF1881601EF26EBB0A8A854FD0C91A95844
5E95683B0C3A934884BAA69CAC31C88C9A9E4F56B7C1F6417B810427A63160EF
D90DF5D300118249B27F5F7BAE49AD6BCE4E68B5CE1526C4E862363F66C0DDD9
04FAF6AB01A82A5E230905B36C682F37F6289B2C69832C060FDC409613E0BDA3
3FCCC92CC8084CCEED328F3925D37219E3DB5F6068D2E199F6D7D4CD15C3CABF
B5AC2639C7590304394CC229C56C54A7F7E2988C00C40B5262D1E19C06F9E685
1A64BEC3F7869EE3181CE8AA186AC14F798B2719D9BAF6807337B8BBE3F30028
74511A74DF98963EA40E702874DEAF5C865DEA06501B0FC5362A45E47009E128
19445BE9240D8EEFCB10CA128E8B9AA1375B1F52076030F9ADECD4C78676AE4A
EF0DE4163EB88F2592E37F301A03F5B835D2EF7B2424C2CFCA7C64CF6C39C230
A6A9F86346B8D5F3CA635184ADA4CCB77AAD095647EB85042325C7A822840BC8
FA3E02D9B520F7E8785DFEF225DBB695D27B04264069FCE544AAD5E290723AA3
5FBB650B110E4360980EFA1C84D5348740B8A4885ABE1FC79E819441BC5F2817
55B0743FBB60F2952D9041F7F6EEDAD253A4B427C7D8ED04B4A6311588B431AD
A2B667B9A1A648DDF5632023EB775FE7B11166F7B7B6B183B2D5CBFECB839DB1
066B58E4C322B453CD516787E516422AF06425EF612DE15585DD5741BF8FA561
5C67DCE3740E009C03B6EF463282A5FFE1F4E73AB0D91059EE4CEFAE9E32503E
19103E641A9186246271E86F3B78E17A8751B8A1D97C63750404EC581207A112
3723667CAA346973A0F5066F1FE1971379E492D6962EC6AE415CE7AF5AC0FFC6
BFD118722A55A1553DF42D668127F480DB722E014B646C4EBC7B0BE5614469C5
29C31F9E8C66735C59EA38E3BCACCC6F85A6E45E327EB8FD3A0DE24773607EE2
AFDBEA8DFB1539E7165F1F28DAD85F4733240C06BCE3C95D260A96273B951CEA
1F6DC6527835848FBD6FD2D909977882A9A1E80EFBD64AB601CDD3C429BD4CC3
F96584C065FAFEA3EEC98A1FC657CC6213EEDC75C8890DBECB670000924D3BAE
8E7140713AF222687DB9CF10CD88109B0AA050F06A64F75B8BE3B8964878C023
28BD308424854AFD3AD930AF49777627658B257FABC2CF76D35FADC354CE9369
D5B87FDD9573DA8CBEC2E6CF74853B93B427A89089E953E1E2FDB27C0102E816
03260D4502926CA36DF7FEAC0256D2E3F3774A08F51077748D1F0A951BF74B76
495AA9C0A311D3603B748585EEEFDEC03F78EE6AA916EF44A4C713145CDD7322
C3FEEA48C6B4DFBDB48F7FFD497736E320CB2F9021840CE02964F1901A7B50DA
CBBBC081C6E776013EC2F851BF8AE5FC591158A0F16A69023383C852DD6B78C9
B469AA6D39862817F889315EE92C675CC9143DE91EF77879A073A5CAA5F0B947
7E6F64C0AA0C5F1ED2BC24B77548F1EF06DE64D7B25FD01AC3E78750E6C317F6
93DE407D8006A3506393ADF296C7A9189A9F1674F5F57574C2772609CA0FAAE6
4AEB35ECF3BB42B9A1A169D9F8F281999CA1755815BF8CDC08CAAB21D27B0D8F
01C131D8994CE5018E332C88A3238E2B595595D850147443651A38CB3B073615
7CE246CC8D5C9E778C02F804CBEAEFA6A8006F34EF4539CAA15F17DAEFD35BE5
8084ADC07C972AB9DD5870A1D6E13BB03BF682465B7210A1728D0742EC26BF11
F977F0A82869341D66D9BA612D55715B293A3D7E844716CC0E0BD8975AB30F4D
1BF988F1FE618F2B41F4F40479969817D107B1AA4C38913E77B4B27E2B7EC315
1F50BB9D5CDBE449D6192798CE9700119F4A68898B83254A4EF5A21C0423FEA8
124A9C1F98B06D8E4C6ADF8EA9911B1EFC9440723B84CE1A11A7A97BF05D5E5F
D3A0C5698ABAC2EC22494E509F2E31873F15E4EA92B3FF21CBC135B5BEDA3A4E
7A97AD888C0973844C950B9B7777D1509EAA43271D3AD1DC83364D0C10B884B6
945EBE29FD31A0A9C4A1358DF1D51513A6DD94D161936BC72607DE554DD6C11F
53B2B1D7E28C0D09648565F6F917056E8DF4851784EB30CAB13F4A1DF0C3024C
FA01D0F3C3076BB653AF7C020A2E09723580D78094F93E66B36DB6971931BDEA
2000459D0AE25E48EED5F3126A14EFA716E85BEBAB99837B01623DE4C7EB65FE
5840D8D199E3F1D19BF4746BCB637604A99B73708E9F57EBF7215EC13F33D2F8
63EDCA2A49953C6D2330663D99A323A328404D56E9C5FF15E885D38170D413ED
56758D24319C5630E976FE3383700A594A649428925231A8506DED42DBA6E462
75630C923DF9E5C9087C803F3E49626FF6C908D09A8216C839BEABD6BDA6FAA8
95239696907E2B75FEEF90E342B53322EA46ABF115D3A9279BF6CF32EF31C329
A289F5FBA009CDD676CC5F4C4307AF04A7CA1906279307A2BEE4D9D244861662
75807F3306DF06B3BFB090E3434034B8BF4B8B3FAE9E6BD1C5D498E662360A4F
4DE3388803128E1F63A4702794C0C35481FCE9FA73BBFE1916A9CB1AA1668C3A
E0BD27CB313C42BD07A0894117670ABB605CFA85B47C8F334C63D7FFA7F8CE40
3D8C71A78A548F6790F69D1C986ADDA167FCE47750798F97741E40334A8F9DAF
CB8BDA763AD574BA9A237BD00AC92D7A88149EF15E4CA6381136CA26C949718C
64431CD1C81A132EB0B73791FD234BBF1CB40FD47B111441F0AAD3273533F046
9CA16D9ABB9FF58AC5B6E4D5B5659D56D16DBA25E2D00FB5E033ED5F68277FFB
26A6046D2DFEA4D3EF9EACA522EE1BF99E92DE585B34F7C938B3E5D634BA79FB
0463504CFADB52367FCE9626CDCEF898781731808ACD6E14FAB1C7BB1BFB125F
BB89B5017A9FD2AFB2B6631681CEF29AF7AEBF12416C70CBE8E7AF181CDDBD05
3DD222180629C708C1AD39DEB36D61FBEC0678AD1EEC2210AD2BFA98EB325D9B
4567CE2E5E725E2FA3EB4D89FCDD4AD69FE1D8CBF47D2E4E84D702AD9C821379
98460781ED5E7F5C2AA01393E4FA046AE32CF6EBEFF24ED2D4257432BB49AFE2
18883BB7196269A5B877D2A0ED08CC9D509A437F4DA13F57D59E27F46DC070E8
5799053D39CA24D8AC1C8CC91C836646DBE661C9F8F4675DBA55A5CC53621133
EAE4E5E2BDB273892DDBDD781968B19CC8756AD1987CF16582E7149BB2BC7C44
EDCED7BB236A825FCF6EA2B2B5B3D670C554629717CDF135E9354E972908BDF9
8D41906772241551FB7215D77423FB58E3BECABD40CAF3D17C770F8B103B2F16
6FDA22E38AFC4ABFA349AD1C3E74559F8D3D72BE642D2C870159E86BBFAADDAB
DB6A2D842D7B2977846DCF848095B58E04FF23334E66B37B3A36B85B1075A621
FE74338E8E2EDE8113AE4CFF363C536FEF404F9A5D6403E17396E83E63CE460D
A97BCDFC77D845DAC7F7417D200EB1B639498953B52390D856D0E41538AAFBF9
E720056033C927BB95300FA15761822F55DB99C48A7C01F6CD7DE9AF55DCB1BE
42A767AF96EB233688307BB4A1EBC0863AC0DCBA26AA4B702C4CEB08ED8B9DF9
24B6CB5C4DCED706BFAB2F71AE0DA93254823377B7A5001096680FCEC1F47715
AC4B85A39E26E7E6A9F08E59FF2A6D83FE83F7259BBC81B58225CDF337E47A58
36C27B66AD63221DEBA3689CF67AEADFB07EB0C82CDC8AD64924A4D217453977
63BE5795DC1C544534C258E3CA070BD8311731ADD44BF06B77A9437BEAB9E503
9AF183A45D82B53A4F0C497E314929A836ACA991BCE5B303187FBBA32F88BCB5
9D3CFB4307A3505C40F6956AB5D5483C4D286238AB7D522C2602A6613ADDC1FC
B44C4F2C4D6F555DAC9A6DAC201D6C33A15B3D254C376586B31035F0DEE38B24
8A56D0ECE458F6651A4087071ED8B4A37A3080A57AAD5175F8E2BCF2A23B6E88
846357E400E9BB312EC64D6D7A3BB08213892D9DCD7EF30BA2379710DFD34474
8ED15C9F3599C361B7E5A4FF2606A659D1963FA41892DFB6B39DBF65772A9E24
12BEEB6A6C970BCBD1E201BCCD97279E59E1625C16A3EBFC6839C35B64E26FEB
C979ED5C1F78A75CE73960896B49FF9224C49015017F57EF9D0741BF18219497
DD7A98DFE254772F9EA8C5855DF80ACC3B4EC08E3D7F0D04A17C9D5C7456BFBF
B37F2044FCBC6A1BE3157CE9597753AB203847D20410F89E68B4A0FCB1A7C0C0
1CBAA10C00325BA0D682D035306F818D7C4E20EA42A03305CC16EC6E1CEE8BA5
73A3EEA5967FF689BA2741A27ADD96756376421F8DAB4E2FC290BDF6856F2C70
682CE95A5049353FF82D7DCC390DC329EFAD0C61DBF85C6E09886791A20F7FB1
B788D2874B1EDD69D98FD6B2B89D8DCEADEB18FDF863C2119D2AB5E9E96C62D7
23D02A4C8B8FC77FE262EAE2C71A684F24D1AC3BD35843E69A62E931E49F7F47
B8D931C080E830182C021C7CCCBFBFE5806C699C902F3FC3EE5F1ABC3058070C
42A6E7287766539D39735060C0ECC29DB2E6669327998945F42C9FA89EF74E11
74FFBE8DCE3C020880220EEAD4DFAF1EE9AC4149F86E12939567C2C9E7DEE6C2
2A5E6DD93DA0B7FAD5747B2AF207545CD7A0D68012839957586B66B091430645
FCB7B36D3CA88FAA9F016F1E8092F22E3DDFDA2046A6D0AE8C531A4E9328B970
AA5F8210E470C671841B8FAAC67A2462C77EC0EDBE66F574B9E9DEF10525A36B
5618213CCA102B50B037B48254C2E792589DC8B9172AB4402CACE2A9886A594D
2E81882A3744124BF3FC0BA485E0506ED839C47C4469A9A99FCA3CC59118AAEE
C022F1418A40CD05BA06D1F9E3B5865F2B4611C667F3A6FBA5BF5B3FD77A40D3
2132877C399F5917F36C2448BC2B5428C5708FCFDE4A4569836F9E27A5A6181D
B7ACF2D11BB6B18D9374191A9E8FFAF3A2C7553D25591EDFD28763F18C5E91B6
CD6249F08568029992DE61507380EBF93E83303A890F22435CF235131A489E88
3E4909B2107CA1A63D66456A8E1C4C98D1702EF82903D2385959384031B2308F
A216830EDEA93FC90CACA1A9C0601AB285F1F00B7B111B7D67DD59B2B29454F9
9DBAC7890C3C20EE8F376A7CA476D9B16E1C0CB80BFF66B96634B565B490A303
0A742CFB77A84094CA3D07023FE9FE5CDE2451E19D3F4875B19768106A0AE40D
D9FE89378E3A7204BBABEAC512962075D94027B42639933A1CF33EF06541944E
F4299AD2BE13411DB2565E8B120E5A81529475C9209B0BADE6FED80AA06607A8
EAA959A99FDFE68B62C51577C0E1E1FEA2C4D277C83A43E078D911B300D072B6
8CE5CB383804B9F3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans10-Bold
%!PS-AdobeFont-1.0: LMSans10-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Bold known{/LMSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Bold)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /LMSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-460 -297 1761 1134}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFA25B3D2E21970B61BEF6BD441C0
853BA8F00600E933C80C0916170925A5E999AE3F4523441CBE8209ED95298D28
7897FD39E60633B3341F7B1EE39A74B7CFCA379A6C2390E7C26A4B9C8C556F25
96A90868B428CDFF58080D414AFBA9B90E752A5C7F4EEF6EAED9684DCA7DB0CC
268AB1DF914EEFDF740F44F538F1E841659F02898565FE3B1F13BC87C5713FE4
FB373864385E506D1C0BB65A3CB8E10A78C20E5BE320989BC3E8C8E8E399FC24
E0BD4271E70E8D7A8F7683A4756AA988C5E78DEE26995F197F2360620656FEEA
739826F54E14481B446F1D7F68111FFA8C859137AB1F8E90583B98BFAF5C6329
59CCC441D095D44570B010FEFDC0DAA465ADDF3CBAB31B8A5E7672C9EEAEA7B7
A345AFB8889D3C53E0F9619B8F0C11FCFA80839B0574D91CE6AD50613E12BAA0
115864303556F3EBF5B786035121016A72100BD90BB46818BE2E8AA15252FA00
9F20B1F01EC0EC35CBF7D6C9684AF91F00880B4F0721698DD568E1B3D09641C0
58E5856E324DB2E378120A56ED141762775C5AB88AE8BB5B6B18158A7A9202E8
651774A479D4308E7F29052733CD2724314AF8C61999D544071407B7774A5610
C7A8F6EFB5792C23498F7D5347CABBA2DA469A957BF2BF33E8E3045016270416
4B71642412D880A7601B66C002B4EEA76041F2746847EC01F5EB5744F1EA82F4
163BE681F7F568158C214BBB58CF2BED8BA9B4030D081D755D41B0F8DE4AD0E1
F33A1CE6E38EBEE8CEC6203C2474727309D75E85A83DD36CA1A05A37C9D1FAF7
E1AD48F23A222889F92F15AE9C33A8B3E343774FA496C5BFD6D9C1328E16F748
4D6390CDDA8EA19D086DC2E49DAFC1535299AF0F42A16E89B2D395B183098334
286F4678662DDD87FE71DAC85B1BEA9546CDC788FE623C0EC28B6F1208F01B4C
5956B9402DCD2BA235EA01291DE436B80388FE6B31D225383E1054FDC6AF7600
608EF8DD116B8443675F86A09522E784197B8AF0E94FB9D58D6EFB2331717D4A
8E8F6FF1BF9579B1F34F5531F8268729CF0433C0043389EAFCFDD83DB8587A4A
5E4093F98C7CF2C497B2DAF5748CC962423593E08EF566B55D4BDA83DA713D53
3BC5A90CCE79572DC40AB078E228F38861F2C51F5CF5629CC41AFF7700001FC8
38E8843F5B2D5D6FBC1E930909D9A6A38BB39CA02AB2598B2EBB03A60FDB795A
3BFDCC677895D8CDFC66887FF3C563185662EEE213EC8671211F7317D00BE0D3
0EB7BD4463F7A542C9A7373C3A40BE476AFB688358F195BDCDEBAB71622D0A07
E8894B416C8D24FC15F45E5961D4C11AD4C569CB28F6C6D112762B8527CBE338
1953B0908617A28D2D6EAA59BD102BAAFEAF854C1B48B036052A3D727C050806
2BAC23C2866945E46981F9406B6E4F61160966AA3922C4B0B6ECD515EC314C74
93E8924708EFB767FCBCB0F795CC6D377F09A17FB2C3F45B2E98C37EC1F64848
F36CF72B5D3FD84E73F22023C63FEF39B8BA4CBB8D50429B985F23EBA0C907B6
CCB4A57AC0CEA9F70D952224811BCECEB52C86E3666430E4FEC39C474463806C
E627529201F1A70ED484FE92F0C684F4A045E61AD94FCD6D373246804BA5F217
1C5C56B6562A13A43B92A806EB2F90AB0BE445530439E0E8AE43B439654E6175
E9B3AF676603DD8C5F5B037022B38CB7DEAAB749F802FECA58D6E39A107ECE8A
3EBE7E645FC1DA735CF09EBF4678CFABD1A6D3FBBF8357D4DC0527C2DF2E6C38
2CF8541FF7E243AA7F16F534CB8E4EEC56359CF1068CEE7B5E2928E43D4A764E
F76A128CDB6111E1096709BDB6D8C9510DBF277B31B8BF2B86755746BDF7C38D
8480A71A9FCF98F4F9501DCF69FCD870565A7154A43D5879042740352282BB0D
FB808522CB0CB8C0D4B64A6799C8449E97E13CA0AAAB196E8A40446C77F005D8
97D944251600E7A6B304DD76E08FB03B942847FDE355DB3C39956F9F914DBE11
2C8394C82D57D654286D5C2C2D8E6A24B34217D101BAA3037C63ACE221E3BBF2
A45CE39B80FB268D543A28FD409DB32F938FC52C0AEA6475261702FAA0ED37FE
D6546463AD649C32D00F99B504DD1602FBCC202CC8046BB4EF5E5E1F85305297
0408E1B96714C7B1D4F806F88EFB99AF0D7FA4DA1316C3C5279767142D132F62
EB21701C915003C885E577E9097CE4186BE217A2F3DD498FD152C0CFD0662D31
8787C108CF6922C96AD6D8D0C2052FF4A76D691AAD97701382DAF90A28C0896A
C2934C35E1576099082701FCE199811DD294CC46CF1F0662D1D1E9C9DF1DA786
6A772E358CDEA9FBA4EA2EC4425B0A4947CE3C4A3EE986616449FE094A5F910C
93A5B74FF64283F15EAA51DF4C74CBB662283EA4ACAC860B567466240E3A598E
0D31B4BBA740CAD470D8BAD77608136DE5C61CE6B1953A900D0847C53F2A87B3
226F5E1F4560A4C061DD345142D8F2F4A85CD7DB687B5D2BFCE80CD03235A95E
DDB64BE30EECBFC6618D90A399CBD792FE3855F316DC33187662B519FC5AB1FF
FE0A6A33736CA5A0A7A75023BD9BFDD0C94753098D5FD28E46480B0DD99F4679
772820B94DC7F8D4C2B5A8BD9D9858193BC1069471D0CA4DC7AA32B72C9C5816
34E789A5C10BC1E93488DCC273143E753907B1598A474A3945350FD2837B4EB5
50095AD512BB5AEFD8C0F4CB0FD2B453BE811A5BDDE437436E21C3FCBDFC242B
A22DE7F3485B361FF22160C2FE5C0CC653373F102E39529212B65E7565AC5AF0
2408DA6E9E32F903296B80F87B179719D63387559490051BF8D85907DFF2849E
4C3C7B62E653903867AB4707BB2716A0A15521CFBCF3BDA6B5BD673BE8DC07AF
FB6D25C8878E0AE2CD2CB6A8F5D480878EA65EAFB3C4BC2058C407F125EE256A
951D8CF895A44E006FB7BCFEA8CBFE1F62CADDC2C02317D26E7BADC9821C4AB2
6B152BDDAC3B6286D645D0EFB8F2B182C37521EC206C5ACF068911EFD0CFB268
307F4CD1C56B301385A81C8DF859C8E410A1DED65711B579E0B60F46E593CDE9
C7A986CF2EEE20EE2DCF174188380EA574CD78A8230AA8D1991266410CFDD2E8
D7149219C8D6CB6E19E2917C8DFF1A287DA34EBD4AC57F55BD24CFA4D86BD1E7
D85A98CD8D71BA01CA74D342A75088082B648E439E3EF1DA39316309EE927BF9
08D57E0BE9905301688D162C7FA895DCCBD8276620B10E6C7E03FEA26CC932D2
853045D5A283D7A2C7CAA60C3A169EF902F42B2E8B377F5FB494E28BDFD45C37
FE38A7AF80E934C364998F74B32F2DC2604346B36438B94D02F5674E0BCC3E3E
57052444394E46201B34B583A55D565F9676D886295D55E47D1905E2BEB07286
F13E92BEC43CB618349FC6ED24879F02A9B2C2924CD9E921B848096856116291
6242B2240D1236D610856541DAF49169730CA3AF44EAAC3063B0E652019DA8C9
A7838F8B00D336290176B3E0B546698B6A12F524DC97030DF7577605AB280053
0F414B89D4EEC51F0CB7E9D9A86A8682CA36A3BB347CDA0C2E3AABB4D0AE6285
563D8902B3C75CB9368D70ABB56BFF966AB6C821B1B553CF3A7CCADBEE9CAC7E
77D79BA760EF4C53A3C98385361FB9009DC1FB985090CA164DF0AAE5DF997D62
69258B8171D61C586026861AD5B6F039B09F94B5758DE757B5B29D0BD0729765
3D341BDAA6303FAFF112EC2D324C60F518EE6B939CBCCA90FD837EA47FA3CBBF
92ABD623D260F7A8EF5AA2548D5A70F7A701141598F551EF516B3A2F5A8284AA
2FA9187C32D91D47628C18D6B28C7DC21D9B88457317ED84FC7977241F34056F
0E89A63DFEBB88C4646376367464D4753A931935B20C790EA4403007F4C7F02E
3B670EA3664F8BD00C08A277335665DCE91726125C32B8BE4C9DFAF873A037C6
E1A54F9A330B9729583950615F5721AF6C3FF776ED796AA66498EC5B23CD2137
95168EAEAC5E4676027A82BE7DDEF5CFC30F0FF1BD856DAEF710C921B4896D04
E61B913B6C417E0FFEE246506B981C4C25D9FB5C08D065EB272EEEA5E10D973B
0468FD4F84E83950B76B1A05B4DC73008CF89C90FF5C9EF7B504550A98C06A18
D3DC68E13531EA4D5440C74F31670E47560AC3B6A80C385903B4410B919A108C
CF28ADD9B2582CF6C3178700E56D15B3A921339E298FB3B1EB9C376E87B346CC
0210DCE05E31AE20D43D5CA79EEF3D4974B169B20887DCF032708B9ACFFE5753
0F476E52D38BF9BA9AD3CAC53B578BADF15348CFECE6E45236E548571587D75B
1E1BBB8FC6D761FBD95ECBC414640C733DCB82B39EA37525A46FDB864C97582A
155AB9928B3E0676CC131BBB42EEB95D1A16CD6B1ED20C0AB3E91BDDA9D98A37
E2DA191CC7B866B51835BB1246CCF238F394F8BD72279BC3B0D28DC3777EC06B
C9FE94C5B89747B85F1D107E7FBEE52ADFFE3CE6C8B3B0AC0E75AE8646784B58
8CE0DE89BEE5E5A438BA09476C504EF844C1ACFD30E3C6ABDAABB083F6F0B26E
8A106BF35F9060144E812983C01D2DCDA032E7D26958348859690E918B1F43F4
B7B7AD9AB673C87D621FDB59A8385466AC97F5F8F4361DAA66686A89E3C4C1E3
8C83F2F595DEA5468CAAC2B78E5A1993F2B6373BD245CBF20697F3C699FD557D
7E3CDBB0C43BB4DEF74A983EDFDCF81DB674AF26BD3389F8ACCDF1DCE3D915F0
FF2A82E219D733D37296CEE1118362904F622FC22656FA5BFFB230D7AF6ABF63
C7B805C438ADBE8AE3408EBB68EC85E3C03E3D69212E49DF05A42ED088BEDCC2
539F8C81C6A798B6E803A0A99CABA87DA35B532BCA16C510BC253CC45C7158D8
9312F84726F3677654FBFFA4E3A2642A93F64831A6B4924EB4F3D49A5986FAD9
F7D46C06CCC29B6F75C799F437E74F0E185AD518B7E446C30415C8A350E2504D
C6092E53F92783E0AF62957C5F79B80DA2B906210FE250E64C24A95C9342F0DC
C0ADAC14486166030FF41D29EA8262E689C52530CB43926685FF502BBEDAB625
8A37008484F27750EAEAE17A63DC636EE6CEACFF4661232A95ED2B05C01B32EF
1CAD05AB36A40A0F84857BE3FE4DE1CC269861657DAE11CA5F1565C3CEA89BF9
93E2F85EEEEB0C32EE8A2F40E30BE8EC1A9A84A3A5881DF03A41B814B8DDE80D
46AEB4F109FC99CBF5AC6B0AD38D1E7A627C3FE5D8F062D7FCBA5245B38B7B7C
81EE2F20F2DAB3612678BF24A2450F6E99DE896F7F3E47C76D564D07D976715A
B3D87BA81F0E2E8EA0BF223326507E4DEF6CE2FDD0986C7633CF5D3EE91CF5FD
A380B1D0C278DC7D453F813638EFA565CADF3958184CF236F970BA198881C0D9
8302B116A463934A5A28E8EE8C15FC06950B9FB33BAA1560B6E30AD78DBB5CF7
F1BDCC7E2EC0911D4BC8F03084DBC222062695EBC2322303F2F23AA2D68EC56B
BEF2B917A8E8E67A32425B32DB025CC666441A456AF64058A403CC63CA5572DE
3BDD86015BEC6406C5853E61DE714E59438AD9809161F8747009EE6ADB140250
7F833A9E65F859061A3897E0BFD061B64D327E8645F448A43E8C4B0EB9ED9E66
709402A9DAB915EA78B5DDAFA9B3A1AA0AB96B71854B27E61664C83BEEA09581
98AE0AE0E053D99FF79BEB8A88BE7913502E5684A8BF4031B2FF05CF35E3D2F9
0C7807FC42516B6F7F7138E02333C892AC77F69E9203D6893CD2B43CA2E06AF8
6228F0099D542E9DC755359A058BEF688E70AC347A16289031F88B223896EC1B
BAAF7CB7E7ED91CB43236FBCC50D20C11C6929C93AAE02559CD4BBA960C6183A
0C8892CB53E6B9688648C19FE664BD4F2D5163CADE45AAAE02FF57B1628C6CC9
AAAD37B881EE328FEB0692AA733A3822D3CB26ED9010DE35678CBE626B87CF0A
F0211035F415C5B593CA786F52C11C7A18859EDE149FF3F07B59EDA5362CDECC
BC03A4223574EF646B86F3F1CE756EC0C78188CFA7356588525D98B2CA9BC97C
804325EC599D755882E751A70A0EA84B6DE7BA643C32ED9984DFAF5F7E5BCDC7
F2A7EC355691DDB003E817265F192A9EC17289B7061E41E35F1C09F402ACA5C5
0906D8C4B7172A48169ECE75E7981C6BF8B1F1BDFA705F328AAD4BFBB6C40D8F
4D72EC63B0420C578A9A205D3C7159A63851DFF56094875FB1003C099F525597
87E27C22515F25EEDE33457201AD3F671582DAF7BF23D11844BE36E421823C6E
F7A34037F06CE42526302805A0FC41A267943125A76D7886A4E6E5F674F6AECD
7B93DE75CCFDB723E2904A1C720147B105B6495EBB1C8959BB4EC8F67755EBA2
F10ADF9144F5FBB1560375372C1469769932A1904105F11BCF37BB052A6CF39E
315CEB65D2C484BEC6CF485CA6C259B98FBB721C2095CA9BD88EFDD7E171D89B
69CE420CBB74084CECC414A478053D537CE6665D8C4432AFFCBF37F6900013D0
DD0D4B5407E948BF7A01BD97F34FD6BE425970F8C35D3B49240A3160C7134AD5
D0447045AF93358ACF5DE07C87C7C94DEF3F5DF5F7CCD561DC7ABC388F453942
4239C618F1D92B1738BBAD22C404896C6490EAFC75CBF6CADA6A6B7ED1D9E12B
7A80FEE1AF3DC958B687F6541DA16CD63169BCD5E39C9D5C62A298B8BE48AAF7
9E7C22E2D14BDE28B85A2CF4F8EAF073497C25E75040E1F9A5056D778888DC51
19626AF346FBD5F50796B79DD498E95E04A726AFB9F2C2FCCD16E95C9143AF92
9A15D06D5FC36307D8A4367271662AD1F1404A836A801A94776AE8FF00313290
16D2073DAC2D5EADE4A84FCD99EB09E131D6395DBF45AD2FEE1BF9F05DF95A2C
2F45CE722D9E1C8D4B202B904CDA8EC622C9E512A9B2024A9C0EC0CF7753FE13
B5B74FE0FCB731F6D39DA40442E648D10AADA23516331D6E946D2F8CD69B4ADF
316B992F547DE9372FEEA0BE4053BA66A1B4C5E0A1295DFA75CC2C2899BCE11A
EB19C10A685D8084DFFCBAADFE1AF8356BCEEEBDF0605A719EDD4702259D8A9F
F6BA35CF1E1DE68DD7DB418AC5957D57B505120FF35E760AD363F6F09B66DCEE
A83512FC056E9B8AF494CDB21B6C976164FC320F322CB6B2DA0E1594AAE47574
42444B13B230A951284C09101C02EF689C8ED0FE74FC9783BAD5DA960A1BBF95
8DBE1DDE280A937F0199A0E949007DCF8453E70E60A519674D305523D33BF117
BFF3788AACA2DC8EFBF1825630B15574DC1FEEC782F610DD5B870EBA459DCD04
A9B13E4174F27F5AC1B1A53A9862046476ADED15087DA8D19A2C3B7260FB6208
D6D97633D312A996791F48BFF3535DFB0D05AEA2DECDF90E8066F347EE1D6DB9
5461595C9938581921663D384B963B62659842A7B90F8B2165401C7010E0B69D
C1F4C118434937BA7ECE3B966FA4A35BEE2036FF9C5C423A2A5452537DDF2795
6B459526E5CD19579F3127D1D8CA149B669E392D15131D86F9DBD898FE9EEAB4
E3C8B1BD920505A873CCFE928E92132194E96EF9706DD439CBD405BC412452A1
F976B7A481011C7FD0CFD23B1E1537ED385A488F036913680E3EAFC874AFE60A
B11BDC4CE96F261B619E491372A1D7E5671D7D483AFA04B3E76E22CFC5D66988
DCE85DC25277E37E62D09C6246ABA3D3737E9CF349CE3053CD18E028C0F81791
0AC1A65B60D1AAEE2EB7C2557C27033737A162B1C30CBBB59EE0981B0F6B4AA6
E820F9C89089D6E93E537B37AA80AC7DD11E9515740E0A473D2EAC2F9B94FA22
3C45C32D38934E40372C917E7E67C90E0CCB2482450357011732325272278754
DCB8D0420507EDAE822C094868ABA4C18CAA5EDBAF9EFD026C4034B5A2C6FEA5
7D50A9ECF4529BF907C09444896F4E659F4CBCAC34142F4E33BA61DA1E50699E
9F9DC9082A4FB0EA09E150319A8AA055E3E63BB78B7DC149951AD6C244D36FB6
F2A10673088AA9391CAD3D4BAC7004B64ACFB1FE71C614310AFB51163ECE573E
AB9DC73725344FC37E8EE4EF7F2450F67A96D44A2CC71B3B327F6D3B0E59147D
08F25BBF3EDD39BE705D8A5AED5F1BFDAB2B505BF7D84597813143C60D3D1A51
5D52CB8732BA9495FE90C29498A23277FF1E33D93913C29A0FE8B6822EB5364C
A33BD7970142AE10B7C80C03876B0FD46A5992D43CEE71D4F9F578518E37E431
CD2798239CC4C94F3D34D46E2F5AA2BC7C534357A65C25929B54898BA9B09720
F7569316ABCBAF5B9672FF8D90BDBFBA0CAB5053A2533592F99F803624EDA5DA
0FD71DE95427E61B9B2E02541FAE6AED4365A5152E7A0F3AFD06F2B219A6CE38
9F25D3ABDBC8CD3907AD5C96F7A59C33C614D69D0A6BF9AEDEB96E4C3F6F3D70
BD587BE7BAFA3EAC91AFD9FC209936B5B79011B86CE236D7D91CC13592573F32
EC6D2193554C874914892CF60002DE1A4B18DE71F20FCD193F994BF2E9C684E2
C80951B24AAACDF129B2BB843A335BDCF51E2B694582DBC021CFE1217CF27274
8BB9CD76256B056405F1094AFB2137E531F829BC2AEDC874B4CB5FC8A54DA338
31938E9392DEF7594DE827864CD1D0B2F44557DB421D427E28CA6143F63B988D
41D1A114387A0736AE3C09162E8A4FC6CD4741B38836CB599DF98A27F4957F06
1B9FA20CF2EFB32200703EF58C425B9A7D24A12149382C03778F67FDECC3DB4B
BF0897CA4B909C802A580268148135A883BF18DFB558ED898A4B67731DC05534
F3795D29F2EF6A2775F327B365B077C744CB7FBA8909BACE4E8D26405777B063
247CD0F1D75102D7BEB12D5F6D798871D0640D0ACC03CD2BD48F18EC823A5D4E
12FE5671C1DA26CAC3FCFFE7C6728D9E330928C1E5FC302DB4310AE24068B586
C679D09BFE9CA36B46B1A4AD52C5C45631BF269CC8B89441B674EC0697CB2FFC
E8893E42D8D1ABFDDAE449FE68185327170B046B27F59EF10AB637D0E26FE176
8E05DB3BC25F19D9565043816BDEB096B5ABA942FE0F7E1CC26DF0F139B04229
B1035587BF485307E815E95AEC89927DD97CF502E051A1FBF641F887BA1778AC
C487D948C0DB7D036330953D943A53FF699361ECA0BE81C9C8D7B6938CAD55A5
115A0DBDF30DA156C3F75A0616CCEC0DFAA907B96CC50B34C83623F836C151E6
718BE7511AEB1F990DC016DD1DFC964B4C24DBC71DA249BA44E0D0D3F6724561
ACB8D1BB8CC89389CA59F40D0A2019680A7B179F7E6316FE1B236424453DCB53
B50264F98CB091B751A58D4412A949B9E6E8CBC918032D2AD2B24A76AB48A5F3
0BA8F41A4BC3C8794BD8FF6B1EE32B2425551E7F03D504F27BF98F90DBC75FB2
7C028E8970E70524F9F7AE081E64AD1F71D6CC6FF054661E3D272FF301608967
581C38905B333CCF344D4257D989A7A79AE3E5A9D013F904770B1F2E9B707453
F8E9A7D7FE6A20604B1984ECB3208C2DC55AFC5016FB2C4B3E5D838615E18D79
E23B34A5F9869DD15187C07058B91A8C8FCAE17B8C982B8395B1F8ED435BE07E
5CFC49B85122CEF1BC56E92FDE53A26F9395671BD1653E8DF6C272EC5DC859A4
FA50B834CFB828D7A0F80BCE628414318CD2194B1817A5D4B8DDD32EFB45B567
DE081A7A9EAB5D9906B027A1E5D547A55BE0E8FD19AA6BD9207104404A78204F
116B2C354852A9E33D2440FD85E483A0A0BF7D84512DE776A9DDF64744F8EA46
F07BB8A4E027FC97BFD1ACF89FABF737E42204D7CA411E72AA4240AC015EA525
9B91414970B7BBFDDD78563E1D4ECD4DD8B065A8155E0C8224317BE91DD624D2
5C17C01C6EB24F8BD762105DAB0D31D99F3C202C277B9CEFFD6DA61EE997A91B
9637E44F55442C4053B30A15AACBDCC8DB585D05EDE54134D6D668F34764F90B
5E8A643C8CA2B2F12BBDECD1EAC457F3881F60996CAC3A8DE48A068D1C93F641
BA7FD419E1EB79AEC531B4E058314D4A47F2CD64A2F09D98584F0EDCDAC45F92
D194E89EAA9EFDB3AE11D6EC221728C045DB288C6C3B3C1AB46BFCDDA190E9E9
3C8DF81A76436A69EC3497D2D84B19F68EBF7125FB02920466AD93CE35E206C1
99AD291CD4F0E033445E86EED3003DF9E1158AC0357BCA2054BA19904BE3D91A
86226A3B6AC5AD70EAEDA71AD36A1E1422A76D86F602E1FA74D8AD18B86EB45A
2972D906C53B7C1E0B5F7006777AD11B3564DE25DE804C125D97F7149F4C3F33
DCAC5FED08DC5185E085FAA1644FA922FC56B0B93D32362BA966DDE41AE1B17C
EC684F397CAFF417D6C412A8F0B0A50A868AE11E38441AFF488EBB29B2939059
51355C4D4A4F65BF1A71E1353B42A81058C34BC3F8E4098C22E5A050397513C7
B62CECCD5B627839105D27A32EB653BD28B7D7315236F21E8C1D859D45F35E20
C5554B0D72C262A23CCB48B2CB99DEADFADFC8BCE85D2A7E4CF939DDC479252D
9456747090AA7DAC6B285A4CB0057689E72DE1D7D5770F0A0AF6E2BD69C5BB80
849B85FCC583ED6BC743C7AB0E8913BD6FBDEDB0B7D8AE9925C92F3000131DE4
08C2B7E194437463A5BE869CEB87DE10EF611B802E5B34CDD28F12302E126D63
B329E4FF36D1D478E7E56F6BBD44761323B0FED9DBE2E0970EF2443DBC653EAA
60868049AFD063E232E15265271E6E9F502C0B057C5A3F63F8659F52BA67EC83
4127B278FA649D6626B1BD577E38DE7C917A9F5523B51E65113305932CDB1FA7
BD0B36275E56FB18D3D8AF2C6AB5E2DB571739092A476FF45FA1A1CF8989364B
561B4413C38DA7401609733F47D9990B238122AE46CA23576A523D336C8523AA
CC8882547AC619B71538520A57D53E36D8081D645083CB8C992985DB99D9BD2B
BB6FF931B38C1B6DE01DCE214039661FEFE4192FD1027D4FE64F0673FBCDF58B
AD19C9CFA9D528D104702E4ADB150101E5A6CED7955DAE29F46951712C354B1E
B67E559DCADE34330BA317B27B4E249F1A8C5DABF4E62D731D683174D8876188
AEE1C0B9BB4BE6F66BCEF2C09E16146B3B09ADF83D6F3FB82AB1D7E735982645
23AABF9DC5B2E494B2014160CF85023E0F171856279D43F1DCCE1B5DA9342217
65FE0CC6A3A745FEB2C19865479671008A9DB1D3D27326EC057B1883DCFC095C
CE0D9202E19500D31492FDDAF610CC80CD098D1E968B18EE09AF09D20721E27B
888606031FDD3014D53E32719381936CB0758C007863151331708AF0D8068239
23CEA6F87A9E3421BAE202E06C5302A0AA8076611164AD52FF3CFCE4A3434278
7AD291C4F0BECF14318F0C968433143A19DAC00D96BEEAC4A4E3D0E75D66E142
864B587A06D7237D768F83D81215967E4FD41CDD60D6E413059A58FA556EF335
8B4851926CF3F0DC1CE20D4262847EB62ABE8AF75C28AC4F2F8A56C95877234F
9FD6BB97B3AB5C0F27DBD4DB124B10F86C01D9C9641201B73FB8B48E107D6A48
A8E6738C7363A5684BC68E8477E5CC1E500A3F795462BE62323B2D8E5C8C129A
E6DDC88039288277AA477D07BBE2EDA6C83F83B202EAC8DB0E948EE3979D2D90
49B4A3B1F779BBF1045055F162A009CBF703FD54101BB80A110A4DE5E78CFC2B
6D4481AA22D69BD9E88E5FE0464CBD7891CAC2BCEBF870EC12EF096A2BE42692
EA401E2A3A136E39B5F6C3B4FD9077D2E0928A299F0909BBDE922D6B4BB68410
67A0B618D05A149DFA46587DA67BA7005F556BD954435EAB031BC8901A89EECE
3BB8CA2389220359DD610E060A90CC422043B8EA8F0B0654460B4ED94691305D
9FE28F51F51F7358CF4B8B6C91B77EC2113DCBD78B4F0F36E5B0018C20AB43FB
4C215C95659DD7D7207F86611FDB76EAD40D9798E28E803BBDDE19EB95FB1400
3157F04A5025EBA0BC7DB7649E776DA567DDEAC9AF17D1FBF643C56ABCC3EA97
D5FB273B83C2DBFBB4EF256B7156955121EFD5D365D18FD9E5EEAD68F99F8E35
E5A8BA66C0F8D4A12FE68964515F37EC3D1EC098C144D60AC1FBCB365F6F5071
32D4D38598D4756D91BE85315F65F184B284179E82B79A40CD609E86CEF1C8D3
D84C9892F62613F3FC722D561C0D2CDCD183E84CE1BF8F83F59D1920458000AA
7477BE9549F8904785BAF8FC671C636947EE42F1A0B83CB645BFC27FA6CCB1FF
14094FEBC224574A15296D35DF91D2428E772D13EF14B6DEA21DA0F2203F9CC2
41F97C5013CF5F947679755C4CBD2D05F9A170FC269B792E8CF7A0400E8EE425
35B16E6F765DD95AD540C83C4D71240B5169A393DEDB54D215865DE535A61CDE
1602F08EF7D141F1FA92E57CF66198F1F2FE8928FA00F718CEF0E2EA461EF974
D242BF0ADACC4239DE92556B38F254A74BFFF2BEAAFB4F0EA0D1DA71F7A10E06
80F1E0C94AB5509CD19279CE7A23C71963F36930DE3CBEE1FF2514948AC8E0BF
484B0A702514C15510782494AD2E091DD7659A4DE4DE812FC920354999BE9276
860ADF2269E52F330B4B9081C54BD3A8F7E50CD99D5DFD2FE2575EFBC3F9FB95
1E4C6A881D35642453CD3674A33CF1DDD1138FCD3D8133FF476197F30B005D70
010BB17D73304B66C6BA835EBDDFC19E88CF11D2E7FBC54D041F0F10E38BFA8A
6B112756C704C7969BF710B690D67F6C18DC6ACF5CDC8A222C25D7D7F48A0A94
D2B63CC597D7B83FE88A4C5830E7293505827D992EDA8A7651B0F77660EBCEAC
E5CBEB2D332CFDA72643FD7A9F5D3B85B3636DF51B3F92F4E3681F40F1FE8680
698250F9CB0DF3CB698730F542F14B0140956714F9E17000CA41168508F669BD
531EBD40F60C2966E53B67F590AD3EA1E36F7AA39F28909744DD2A0E854D72C2
587B6CAD29EC5BD6A843732C0F5C811531DC9DBABE5B5A768FE14AA8B549552B
CC478177F585F15CD2912847D0F53FF2986C6907E900675BA045A8D89AC58B77
200A09C675E4537955C5FE3A7ACA2BC270E4E404F8A08B6EA22077FDDCF0DA0E
634244037384B36372980DE4F1819DC2B4F825D7F75AB41F6712A2AEE10E4704
6ADB1DE7FFF9453F98FF1FB1E7FCFA9D92F96615A5922333D102DDB3F48F2ABD
308B8426DE3B3D389F221A05A6D6BE4415388F0972D138CFB263934D52A44E36
C743DC3FB1A5F961E79714553FF5CC5E153A306983849D58F61DBD9851718C37
C2FAA72CAD7E8E633408FF890A4296F3E9B0D405E9DEBF3A7D82DECA91E0C88F
F6F0EBFAC5F9837A7EC7AE3F0134DA9BB5BD50276F8595FC6E2DC97AE7BD9852
81BDF4F0B6218DADB4AF180671B6EFF4B4AEEA7CC556F584599D06C234CA6A8C
B8F15F9144E36E456648D754560459B7CC6DB7F6F3383B80D637D761A7A992CF
58188FB0A04FD46001A45C0E6C112F1CD5A5708C65CC4DB4078D6097DF56C12F
D2B999DE15BB9EC58DEAC2DCBA40925D29B3915B99DEA056D705D285B98AE381
EDC905276B7C9BE5BF5E7C37432B01750AD448731F49E12F1FAE92E92DEA1D40
AB6B4E5B040BF8FF666F7C1167CD675098B616D5A86312B60357631E8FCBF5BC
6EAB714EBD60E1D3B1927E24DC4FAA83436E8FDA7FF9F0ED52EA5C3C8CAC5278
78019B972EC5B389955A931A37C06AD33548F4F4AC1885F4A95764CBB38D4C89
5235568F90FE7150C1FBDB908EC854C93306F4A89AC8E95965A3C79C82898315
CEE46EA1ABA89275D3947828C6A9675B8FBB5ACFB75A80A16C12D24A2FBDC4ED
DACCC1DDB52E196DDE7816C174146DDA650234115C10B5CDC5920699437B7A1A
31096F3410121024D44E8A04BC3D5940B02F9EC5A477985FFC96CA6AB82CF8B8
A7D71C1B106C8104BC8DB6AA0E3A664DFFF58C319A73F84CE822BB61C6C628BD
648CCDA44DB608D82C6000683AFED2AF2CA96FE37C42758397C311E01BFA8722
1810546F0009F98531353C9A8EBFE7DB9C9A120B0F3B02390230B01950FC6AFA
E6B3F4AB7E65048997A16485B5393B876ECEC4101176BE636CB678AE18A2C78C
11F14B3AD58805DC0020DA959EF524B8BE47F16C0F18E46D5E86078B95597C88
D44E617C5F530D6C432261E47FF107CB781E2093B59BD4F441A42C82FFC652D3
CD1D06374F1BB5DC96B5B927F693F3506D76C9184F8DA9C5F9A9F1EAAD5C10BE
AD7E583F9BC1DCB1EA3B8DA7C8BAE148BF7A01BD97F34FD6BE425970F8C35D3B
49240F3FAF1C827FD9B5DDF4CB8F20C84638A585FEE65D2704C5945211983399
5EDA4207BF15B4BECF94937CE559ECC0C0B6E3A06E957827E12CCBFE31342961
41790179045CD8435854CF9F5595B56A90380C329B741FD07F83BB9DCB64D93B
3C247EBC526C2F6C8B93EF2E8025EFB02951D6C3AA3F46E30A2EE663C2CC64E2
DA3631AB809AE254C82BEC52B478206ED9F8FAF6B0A70F46877976C12ECBB7C8
C95C18AD3B61A15D637CE0D8617EDB931969D40D334EBC70F615B86F0F94CB22
42B9A1A169D9F8F28D67A1198F31E2B8282BED7392C7BE2B61691EA52F31091C
4537B2C25CCF3AF3E0E78A42FA0F970C9B27AD62347F308794AD2EF7CF6103E5
45E449F08C2C5000002DE82C030FAE1CEA92C44BC47BCD66C4D27AE82463D640
85266E0C6BB9167136A1638B15D4BC9AE7F57F252FCB0AD6C86A186A6D33F60B
0FB53754745A85858019428DC7E315E8D98416D772984988C4219051A2214B3B
FD19886611BB88E3A7B13539E9012133D3CA034C9561291B060816BF46364D9C
8E8A7E042AA371E061C368E357E57D1463D414E6E4D92A5FC32F5BAC912C731F
1A77DBFF89C8CEE5D0DBE738084795BA938A28FB17FB62CFED0839124EC86112
A2D9E80690D779E5A9A4B01B3C370E48F151371E388ABF0767E7BE27FA203AB4
536C63E84658ADAC912E327817D3BA0E2BB98DBC10417A546A8A3A0BD35DABE0
A81376F86BCDDE43D2EE0AF274AF99DF6CF361472C63ED92044B80E0D7A1352D
7D4274677B103477A30C3FED8E2F79999D0D5FB2D1F10866FB55664AA7D6B51D
68592D548B4F0E0AB5EB81214D5EC5ACCDF2C02B249D87C7C761BD35610617C6
A55D5AD394D2A1DEAB5F005BC780D725B3C0CA9868A1B4B066C40F22F2334343
E1B3C82AF7C0152DADAD834A43DD5CB510F4E2813868F64B3A38E6FCD3139104
5048E7307578E0CF768A37F8753CF736D030FB2B0EFDD9A57200A82974EAF0D3
6C036980A3DAE149F6483523881EDF02DAEDAE3EE928160342AF11486531C69E
8D6D3BBA2860F25AAD9DC341467C27FDF80D761567EED3DD7565C4419B7D05BC
BA0D2CDC7E7B4AACCEE49E15DCFC537A774E8F036EA3BD1FB35B44A54DE89A19
23604C1C63D0F34546B5678CC353E83E7DDC8B8689CF391A95DC4C962D8ECEA8
E753C2DEA7E42C8AEC06A17CD69552295529C8414B6DCE99A30CA2FCFBB9DFD4
30391216C1F404E0895BD79589861F3B824FA82A179136CB9924F00FCF022C6B
D7CE581962C9DE36E82C21F5EA1159468BBAC06BAC2D60811DE69271977AF130
346863FA73E29895CBABEF51AFE1EB024F24F6FB7AD4B2A7B7B9AA763F56FFFF
E98E8B960C5B9422384914C124D2B6C648E57A4CADB9551D5B6876F38487881D
739D23AE5435A542C8389853B3E316D1F592FBD133884244186916E2ABF5B2EC
4E5F9957BBDFF06EFF38D24488838183F9DC471ED6488AA685D04243BF460051
DA59D7DB0986D3DC4FC1E20A83DFAE731EAD0363A7BBEC37DF72EDA130BDDEF0
D2002008116120BE3E47C31D0B5A0E2906235AA8C72B021754E2FFBC90A212D0
8F73B02784B2BD65BCCD8580E3B39391DA58096830FB6A44FBDC68026392FA7B
8AA3866FB247E9FB01500448E7447559625C2FCA8DE433C390470E429A803095
B2E72760EFF224D97462157E6D94CC34A4E8E3C92492497C655970855FDC35FB
42EEF66886F80532618647E6A6669428F89D6C48B36D603E8D09061E486AF75A
8C1BCEA9D21057958BE60A854E1D4C655A690689B7B5A19F8162E5D8454B7F00
7946E706B69D795DB3D6A419D82BF5D03DE88DBCF67378D8B6B56E6D899A4F43
A8D839B656022769E7767507E188CFDEFF949914C4B69F50F6628F9EEC6842B7
989390CF5121199EB486424448B45EDB617EDB931969D40B5EC6F68A86B7BC06
7186BCDC0A56EB2F2BE12BB9732D7F4F25BD6581217D977B3592C79197E9EC90
D4EB50FA9F4F01FB87292A9B91A4B23807EB0C84FAFA0C6781633B3FD40709EA
CEB5AC116266894AFBA1C099D37DCFB69B98005391F9658C979B2B09CE5C3BBA
4B56D34A9AFFC49EDA693A284FD65AE53BC897EC7BA6446656F2ACC09A32F7AD
63F5716194F5E321DB16C380C5220FFBDA5E563E0F5A9CC7C841C2AABBFA90CE
BE5509654A916823D19E03086E183FB95F360FED53F1A1E6E7CE34EEA020CDDC
109C4EB9D23AB50403B8CFBA0B318A206241AFF59CF25E5BA83C69FFE8C0BEE3
B551BBE0072CCCFF230D5474C836A0A50D8BBB2E0EF842E744D6F2588DF12DBB
94F837F0FFF91A2635328F0A5E6FAAABBA55A95697BA8828F8C83803992132E1
6AF8AF6D02B1B53941ADCA87981D1880A7048295A277AD1D4022BBBEA0A9483E
EE8DB9DBD4E05A596025A24F1B49314A2C4966F09EAE9B72B207A27F866C9C0A
FF5C36C2EF1EF11F3D2EE51F9E27FB5673390D853D8277AB6758D68E11567ED3
8212B4F66F7F23E21C499ACC7B5B6A1A3749C1342AF400984CFD2FD814E46335
8D70DE7BC6BAFECD377B48633D010242F7D7A5210CD859969CBA45FAED42F2CC
F34A25C1D7879DFC2B423322A0AE12786688C1D5C8740F766D9190DFCDA21236
070981D64AC418C51DFEA19A42AFE6A232BF80ADE1BC40550DBD475801848196
FF59D705A0D83EDAB9C288FEFC0DEC4AB6F9E931F6AC379F1D0261DACE7D2F23
5F2E1A5A36B8759077826CC325B1E2FC8491C7F6B4A1080BD883DE8D9798D30A
9EDE6936EA527F5BB233FF584F7DCAE9619544FE8CBD926AB84D5AAFEF355003
4ED596FA6A922B662575F23B53B7C6B245AFE9025C3DF4D4DBAAA13CBB938744
33B04EB8D0AC3511A660F897F58340F7D727272E4D9457D8C2A1E937B47C4027
1A270C598137A6DBDCA5FC2604AE70DAE50451FC90F481BB0DE3594598F9D3C9
8F98210C5DF95DA0CED5D7215DBB5BB03850ECDAF201BBABA430326604E56F26
766AB8D573DD68A0421ED9E9D07EEA401241782D7E93AD542EF81D09C8950E7D
BC216AB359087D8B27F4F7C38152DA01F5B3E570ED47DCC59E67DF990210DCA0
B584944059755E0ED8B061E82530D793EEC3E5EFA20896B346FCDA312A333F98
F57EEF40E66F956E98933A8C0E3DBB1D06B76443BC8471D2E993F5295713F3B9
EB652878D2D7EEAC4061FDB2572E1DD4EE78D24DACF418B6AC1E4520E5E1B0D5
AA583BA3071A842560444831F001EEBBAD4BBDE2581FCC57267668A760032C6A
56C9C2397905EFB3882451C981B51F8E8451802D4821A82B8A241DD366C399BB
0BD69475D7C8CEE1255CCB36DDAC9B974D3E6419A4DD269527D01989A45B5543
596F832A953F8F0CF61F34DB5F1630A577DAD1FB9A9903452B216FCDBBD49719
05E1ECC79BDB8ED9994E963269C3DD7AC9AE2208F9B16B0F33975643C8ECF819
763F7EC33502B7A1D443E0ADF6005F187A00E49A0E7C4D1A04B406A96D0B40B8
A77317CB5F9C1695E4B1D9EB6A60558AFD86DB56835DA15B144AC08131CF5E53
C38BA049A553D104872910F526CDC83DB22CEBF926B0C4FF6674109BF4DAB1B4
1A593F9B461BEC2666E60AE752C2DF03BAE6129FEED98C072B6D2B266FB7345B
A36A1E4569F2F4629141CF756FAC27DACC81D3B0B0BBDFFFB514037556D6E9C3
326F8592F1A8E23E12340D6D92D7DBE5BBE7CCC7F6D6093495DB0E6D60D62B0F
2F6DC5EE0871C62261B578D2574388D48F97D3914616E6068729A9A0459DBE9F
5CF537BD0C236F63FB65E2E1CCAA6FE6623B56E1826AC2E5B902EB415B923B2D
82A50A87C8AC3FA960228B1EB1DE6AD00D8A998C4539FE48161670593F457192
225357B205373A0698E7AACAE8E6D0B568E1E2D5568C3A8D5F87C12541AB4F5B
819CAB1BC91BC2BBE4FE6F206CFF3902D64929BFBC269E019FC7C839A94A2063
6BBA90A3FBAB71B04201054F1C8C1C0355AD8F4D4EEC9C3577250C89DF8C7471
DF8780A89B6E813D9223A95FEC0D35641FEE00260B500BBB49620797F020956A
61C93EC15ACC8EE5F47D870C0854892093700FC74B0439374F251F8BEF1154F7
01F3F968B6A653498A071D4F1397B4ABFD8DF02DF71286A13826FEEFB65FECBD
A4BB89EDFAE2D6A52C31C01B3AD72C280290A1C2394520D09923F16F3816C977
5FCE5AEB0F87B5E30DF03CBEF98214DBD2BAA5AE04DE16A0B6C9E221FB6D5B02
5A7B766FFA65AEA58C77DC4ED68C27DD8341FC9C9DB0985ACE34A56BCC27BE0D
5852C4AB7901F890978DF5C85F1CE42E38D68E2825C8A95292A77C4345651045
9BB90886A9D3F3B3D28B3D3272BEB5EB9167E1B3B7518786EF38F5BF06F73DF5
3FAF013E6207BD04853FD47101F6ACE30051D6E7D60A9C421889066A22AB0578
1328DBB6749EC08D9B25CAC699CDE4929FFC1FEA0E00CCC76A8D01486E55880D
F02409AC7D972FB083250902B1DC9A68B2966D7BB767D71155AD4338BE2FD186
5697418634286AAEFCC802402D904B43CC0FDE715A12B969E4E1FC171337AC5E
8807FDC9766DC49DB36DF165EAC92A425619F5251850B773B9AEE7DF52272CD3
7586B12015C69F57FEA489603A9D23D3AC7A75E7CA21A9A52412C7A216EE8C2D
9C96FF0A04F2EBCCA2467174529C5E10026851E4CE7E0420FEC748DCD88046CD
4A643BCD5CCBE989F7500B393E531E77C5D38E2FA764893C50807F9FA64F1DC9
AB27A302E7159A49181B7361CA0E3E304F757B201D3D31032AC8A1BB77DD481E
807EF825F48413CA084BCFB0C3250E81B78AE3D2579C577B6D816FAD917BC42D
80E83E0BC1242EF89D7602F38FCD0A3C36F5DA3028E0F07606DA710885C3BEE0
FCA40901142B171E1B909C72EEA74D8F11D9AEF8DBAB341ECC1BC725C7D167B9
8073F17DEA693649E782238B3A6BD6DE232CCDD88DF3748C9C8F0F05173448B6
770BF6CCE5649AA75DCDBBF3778F8C024CAEC7597E097AC187A95F8291B40E07
71E03BD3FEBF6344749BC309C4307F7C6E5456199567618A963AD7068862D5AA
A93EC283B2DABD5BE92586070A5198FB3CDCA236B0CE3B5BB11E258420212CC9
24761C3BAF25E1D8F7EED523D2D201ABC2BC9C88D9709ABD02ECED38F4E7C70F
C4470FBDC820272D681B75045895A5E08073615B93BFFCC196109823EFB35F38
06E5CE14A18BD449008B940F08973793C777E710DE95C4B46CEE4329615068C2
E2F49B096A07C82FBC1783BF10DCA1E92685168539BDC693160977C56C348A77
FB733135AAB996CD53E79DBCD8EDAD23B9F1C411E18FFE4860F3348229304471
9077552FCEAA70D66432AE5DBA545ACD75938E834CB091FF098A8E6D04A9C73D
F0C7F451EFC226CB3BC41B415182F40F55425D9E8C0E01A1B8EE9BB2CDA45513
3F8E7F06D46E123E68654EEC38CA4CCB5F26D1C2D5C8005D2871DCD98A5D60A8
E21C464BA2D6CD239CAA1B000C13FB98E41076740CFFE948E7337D72B82749D8
D0542EE0BF3C5C1DB7D5099480748C9013296C849AF956CE409002D2AA9DA440
03A19C7B2649255A6F048B2C6712F76F2DDCDB9C3A7C453A89CCB4EFC906B84B
BB47A754FF3869C24490D7A6F79A3B1800AC35FE2C326F29090704D06AA53B75
59CCD26C3A1276047DAE14D431D216D9C57B7B8A99DC6A5D903B6D5C78B08FAD
E7F897DF81CCB6AE7B126C45B8FB860925BE5A839A7A6E0FAF7F415B3CCDE7AA
DBCF72697BCC9D14602093FC2B351212FCB66B4CE90406085978F8EAEEA93ACE
3211F84D6009F314570BD06F66FC357ABAA94E09287EB26A40D8F82C12CB5071
999E9C433D65E13906BE810B83572E96B9A5F4AAE6F1EEC742193A4108E5B457
5A7BD1639569163EC819AAE07C238541E51458D8FBAA99575B693C763DDCB334
435B815D0AF3E9888B767D8AA14EC60598548762C14482191756BB88F4983E63
E5097B3C418049903E3F36885AD45509FC38BFCC8CFD41D054B08B9AD11A4F25
CE3652A01C703365AE3D83D6AB4CD433D12A603BCC6FBB25CE554EA70F39C3D9
AECF4E52B9B0BFB154B902DA17735E974BA3C7D76BAB662AB49D0813916308F0
C9CF873E75E9004FA1D09F1EFAB200B9F58D91F11878CA6D31E662E3F99243D2
0DD62C308D575A409EFBAAE5D96D65773EBE8D69A606A16BF8DABA745D356594
62E92935F859422E93ABBCA917CA94CAB9D51FA9412407E10C4A4FAF36CD27DA
3CB90D5B45F6202A96298503F94188128D8335CA93F73C250D885B7919BF70BA
44C46FDA8A9D5B33D2E2EFE88CF4ACB910B43ABA9DEEDA24A74691E89E0D76BD
18E7A3D501179E197B50B711BA451372D0089D68D9671A3D764A7771279B763F
DFB8FBB69A81A375D899E5F8FA27100CAEB06F4081563B18D391AB704AD90BC5
FF3CB9D3C40BC4F6A3CDF009DBD278B3D7102CFA11FECE107BBD8ADE967101D4
76F6319464B54A9C686303DAAB3AF5246279DC472CC0113E27D355ECDDBF1D95
FCFEEE32F189B1F6477232AD8B11FBDC0CD05A3C3E9546615A0E247AB348FBE7
4D1EBCF15C2A867F42F6F4FCD97CF3756F137A237753DECF6B9C182464645EAB
734C21750D736597A6B0199560A057DF893266C28CC206430D09B3D718C8AB99
6D9C16A14AA8A5EE7B4D89DA8F3835E8225AA49239D6CC9CE80D173E05FF9FD2
0117D1CADA2F0CB411C5CD3330A79FDC1E5A335993206EAD51E8E1FB19A58B0E
C5A002257751978E5B0B9CD5BF66C35F2ADFD9D42E2637E8918867F04D4049A6
FC4A7C55713DCF6434AE97F67BDD87E81163E68BDD4B8FE26C3A928D252C6E5D
D599F32E60A1D5251D270D0D2D0C51ADE6EB760E528A8A7CB1E78E8CBD5F9412
659725A5674E760CA12B2CA1C8F5A130049247EC92CD5E35949DDBDFF060D5DF
D66F262A21B9BE859DD27CB4B23D2BC548A02C12BC77E3A4F5DBD8BE9505E7F6
6AEAAE9552A75AB00867FBDFCFD3062E20E83FA69D9B4BA8A2016A9F739F6A5D
843F40FE063935776459C824FA2F48C9A643B33FC45EA8B7525DAAFF7B70A541
4E182FB7D57AEE11E4BE4CEBC2831BD005C7294B822EED59E9975FE2FC20DD07
38A05F99A4407F6F47AD0F9924453442B3E3F614374939F4A3D16979D5CD3846
BE53810CFB3949E44D90555FDF7602F4AB2DA5543DEFDC3618004C2526B70DA2
E9BC74292CD2B2188B0E51975FE54135FB2787FE1A3BBF4370AB414761B66F75
629E8A6D4D6F28B660F3DC30CF5BBC840288C4F295E39CDB54815C728E2FB57B
2BB93B9C402C6F0F98877220F1CE5D3E86B4DC855CF79C7C9885972044E46737
AB82D18626C64D233E20BBCD42F78C46D62EC4BE01C5454E032462FA3CE376FD
D5BBC9D27F6D857C35FD568C4B2107ECF600A335F5D403518871BFDEFAD85796
8CB89756E1BBF93FBE9189E6DE0BEC9F0D07A47A715C1C33C5C56661E83445CE
402700E4F6522AC928BB0867AA56FADF3E651D85804871314D5D009BEC8C5951
422C3492BE918862A4E2A2452D8EC8922E914FB68A6F31C8CC8FD8222D125639
2961160C191D76693FBC62A5184C4BF062EC5F4F8F7DDA5F3469BFC41E342FF7
CD42F6B821E75DADFFFBDEEF85361F25C8B259B082B92D137F81811DBECAF88B
DBC90E4435570615F8826DD8F9666C4D9156AA78257001C561AAB16B9DF17605
1ABB7C78512D6F34A84B9DB9FB925375BB9687E17C209AD143B9F6F72F92B61A
9158E617E6808D98937A7AF5F2E15801E0708687B0522040A6570EA460E36E1F
CC24D0148C458B745876A5FE591C503E93B7DBC13E8E66984826F1301300FE37
C74CE40E61FE024809927AF3ADE81FE911EB8181BD4767284E64E86AEBA8FE17
289B0B15C33CAB44E9461FB09B9B2CAAA9833CF9558EEE5E17E13A1258E29DD8
63E7964081382A0BB2B7658DF687C9A775D9EA3C72674A561939FD21A8F04F08
F2F02F17C0B8C688C3CCBD2BC6A26E593FD03B2EB3D3837EF582125213E7FFFE
5B26A1F268AC3842671C3381665948141CA2FF95EC304694FEAA8215C8ACA937
345EBA5995673CB82C886682E6E3EB568F46CBEC3A613DF718FCF9190B3B86C3
8960B5D418A3D4AE53C904541BEA23FE2041BE9D41C128CE151FFF0B0DE1AAB7
CFF7281EA10AB3727E59F1642702FDE51D75E7F4935675D193C84EC6A3906D61
D57E4E77FC68D3DF4B1B509462CCBBEC4AE3B41E585F4C0F11A9FC5721DAC9C1
E3A729976E095E9EC9F27D545DADD0AFABEA8C80E08713B4681E1A56C83637A1
913D5E8A80518B985D783FD28CCDCD674B510C09A2BB479C57B9143F8C021368
8E62A3B8EB9F5002AE1230C4BC5F76AD2134CC4DDB0863CA8DBAC0E3C6C043C4
7CEB610EEB1C7C304449084A11FAA8C52FDDE5DC2794707DC72EA36F645E4951
E3A798A09BB90476A8D3D684C0382B6B7D81C888A16012044DC652DDAB55B916
A3E13042CA78F2DDD02D8632B42602C95C423896AFE066E7C1E80836831BA9BB
D72A2B159A673D6F91212484F66764A0D815C7E354B73B808F50AA327F8B59E8
A7AA9D45889CD4D6B6A19E38AE2F07471330E7D27D202BB69739202BD31EDAA1
20CE54ED0DE7EAA819A1F6166685C3FDC27532C931AC8B86E81FB02236811FE4
13D62496D758AEBFBD494623BB80B90C044713650395D93AE476AB1532414904
3E713261671835DDF16723817B2A28BD444DD1B0EFDAF667A918171169D8669B
A14AAF79410A422B9831F443C48DD0E5B0B2C42BBE5DAA93C0BBEEFFFB52CFF4
8DC639DD9A89D4B210ADBC891FB5F7D7E58D9C61F7C0F8E240A540D6A8F6527D
D6B9BC5CE6FB153E5941561360B0D964ECFE23A3DF7E1768B89B32F7AD63F571
6194F5E321DB16C380C5220FFBD8FD5EDFA30ECD347E1717AA5D4CB03B26C4A3
4300BFE961E2318D56BE2225A82EAE9027257F2186CF716C68567F0F30591E50
2672B17951401EF4CDBB3F939F4E4E456F684C55DAA2261609A61F76060A2BDB
4C9AB74B20FACC8882284E43002EC30D1A9DE11223B3FAFB64C0891B14D99333
3BF4229BF696B159AF031D2926ED0C9A92315083DC25494905C482B190C7FEB0
4E13FC963C0478D72B621E6297EB503A2D1437C4008E97C76D74AD430973E848
FD4C281BF64F6E80B5B84E99152BFC817C23C624C216F98427D3AA5AF2BC4423
F2FC4D1F287F3F28CF40C1414EABE568A131AFC767732BC332AF54087065083A
6524E335762E77207E6022E9D50B282B1284DD9EA66137C294A202E561EBCE71
F8245BE46883FBBF86FC42D933764ABE9FF58A9813080D0D13DF2D681EDF7F07
AF550F3C8B62DD435854CF9F5595B56A90380C329B741FD07F83B926E7B86016
F847845EFF4DEBCC1A2CFA0BCC95E3FEAF3BBA6447F7DAF2599EF2718C3BBE73
7BD085229CD7C24A2C846D652EDD710B648CC72313AEDE0CE988491CA1AD0812
D3A1E0810B01C554FDBB8EF9804F5C2EAE78A56FE27BE347AD490C5F12862DF9
FDDF78F1ADBD73F19B3E1E854751F661F98B22E1110F2D1A6042E44CD9DEA37E
98B44C4654E1D97750CD6596B4DEDF194E8E9E33C1ECAB308C9C9EBD4B0EA25D
371BEEE5972B80368A39D854E8841836A407C3243AB2A1A9297A5C73A78CA8CD
AAC39FE833909120E08EB1F26250585DB441F2029B09A4C293ECEB28F6173426
346E1C3B8D9E1EC79E84ADB7509164FA5BE5DDDA98C1EB551077AE13D3D86406
F7084A97E065046318CF2CB79A8A4F1E975981BBE8FDC1CD74067020BC3BF32E
BB01BD6C55406FB4024114DBC1D9BFAD07695C8F35E5896047EA4A6D4229938E
5C5B2532FC8870AEC17BAAB7BFDEE0CF8D3A735838A7FE08025B5CA3639451BF
ACB4AC69B3DE5D2E964EB7976BDB0BA9541C3D806BFA4FB77C5EBDD940BDEB9F
5002AE1230C4BC5F76AD2134CC4DDB0863CA897B8A6C525F6F3BCC8BDEDF77C8
E12DEDBA491D5C231AEFB26A165BF75291EF6E74899AB3A9D824CE570B05699D
260822E618B71F2FD585B9685A7A51091536FFAB9571E4D78D43F8279A423942
A5CE2854B8DA89DB999E038DE6B48E4D7FF27AE4F419DD5926773D2259633797
C1FB2B447E5A9D3037B7059E1849E63A0DA8F78AA0C13CDA7AD3319009C3A212
E9576E25EB201C38AA12BE61E2E6D4B23E9BDC6296094E1E0FC28F18CFBF2656
D0A5F8453F45B79CCE9C6FC5FB394169622625F2493AD95E1A2BFFD0BB02333C
02ADAE6AFBD7842578CC7D5D745F0DE62C03875A15A7C1651CF31D319EC3E946
CFF341E7B705B7CA5814004CBE11ECF5D752DBD2C0554D4459199249E35A4569
3FDD37830D68DE211A69AD883F892788AC702CD6EB55025F13560761994A7D47
CCAD33572C36AAF5787B986F028B9FAB1A6089E9807455A5DD78B2EC3090E36E
DF4AFCC740467CD33ABDA7E803F7745E4C1C988226D1D7EA894E3894775B2DF1
F871924CE2C0479EA8C8C337504B645EC87234D5594796765CBDDE8E2C766222
1E2CBE5CBB2B4B7116517ED596F3F7BD651D9AC4C4AF100F18732947DD5B7AC8
BECC962105575D61683862D5E4C2CF89C9D3D9B5FF090261A42EDE529B033686
C1F39A8CDAC6DDBFF0069858293901A0273116E89395A49AB5121BE9BB7D4EC2
FE3E1D71BF5CB13EF53E8B5993B89B96146F88E7D1CF451FFDEF67FA97D58086
B1BB39BB1AF6C0BC23914D355E2D35E33B794FD84C274A4D9C2643EBEC168BF3
A2F2F226E1363F29D198F695F833CF2CFDCA9AFEE0600401E33DFD17F6080B00
A9B3BB548FD2D8337556C4D9F1F43B5F2C93E3DE4D211B78DC484B802016095E
684E87227BA12221EC01667DAF458F8C2F61D829494D540D35778E3BB1B1EDE4
A453F3188709A85504074B80E459F8C055DF28F5447BA7DBA7F38EDDEDE29FAA
F152562B15B43AD6F76EC0AF3761859189D7A93BDECC857935A3FE7F38132B7E
187B4F875CDC2D0810206BBE5A3747BF484526D2DBA06CB803B0E54FB18E1D3B
530E8F75C29A21517C777FE5B14C75337CF1EE64CA7541750A556FD8A0DD620C
4C9277D3637BD8087E596DB6D6B122BC2DA44C044970A853844934D8439CA0C6
403B775ABAD62FE3C61D6B84C27F161BA9BF3AC183DBAFBEEE50AC4FC0099D03
A9B6B8CD3738EE108988BE87E309577263E7B3061BB6599DDE35A82C0BE15AFC
6D052F79B8FC23A4E6FED2DFCBBDCF4E5F8F745ABC6D79FEC5A3BE33A9A0285E
F5BAE463184114121B46D6323843FFE132EEA49E11D6BD6E0DCEEDC7AE3663FB
7D0F9B72B0B0187B4752AEAC66FB3667FE472CFD0C1F2396D00025D84A37F882
59548245BCCFDDE3877F47AE8D42293545F332E1F7E027B10D0BA7489FFF668E
8DFD4034416C03D9795EF2421BD5E57F37B1C070264933FBDF35BA06E80AA6BE
0A001415F381236D587301CE3D64E4DD88F234ABF6FD9A507BD8813B20E099A0
C751E9F753AA892BD9A7AD14F509BA49C6320EFB42195D642DE1E3AC0A662937
874153DA92EAF57D6D9CAAC34F89D28A9D37D1EB182F0772719B6F398DB7B747
DB4BA7774E72C9ACF7E71468888DAF2A7A1D01761D3A68F781D150389A8E828A
9574882240384386F6DD985C40B1D26E97307E6B8D0FDA58FED35CC96CFB69C1
9BA993473AB198B4D253969673DFF8ABCEFE681765B54067A2E8FC3C5D3A6E16
8B7BC85A1F6D3F7CDA424750AF8261D8043FA511E4624C7214E2BEDFE7B99651
71FF22F317EFC36781142096A7719209AD3226D3C07F56A4A43758906ED07B07
9F4B1FE2A89AD72D1D1AD2BF8BC6B31E4AD929ACC1C86DD243AAEBCAA2D59460
B39F1849B483757BC0387DFBFAC0A6D60143CC3D5501ADEBAAE6C1D0E21E3484
F9FAEF6877AADD20DDAA9B92AB614AB55F2051F9F97689A034BE79A516295D24
2BA1769DD66EED5324061AF19A220235BF13206A3DA1E622929FD06C0E2DC5B9
9D42C49601D06164CF75F70F68188F22E9AF223B7EA064DFCCE952BD014A5E96
679ABF0B4029FA3F773B665ADFF0135A65ACB5311765991CF8A2497E56A90079
CA7DA18D25F3681DD0131C46E14DC2C435CBFE3E0BF24777EB917E73BD2FB9DB
6751F7C31DCCB0AAE1BEC4ECFEB38C54549BF4C27D2C9F792B326C18842B5B97
0CC74AE8A08E28A3804934FFA3EF4A16931C19C2A8C80A9ED14A027B59CB9A0F
4115D7DABAD25FFF24303DA3CD71A95070A9FE43ADCAD26A4C0671097E22AEA1
AC5DC311A762B8B785369B724520AC4D6A008981FD576A0FA938B0A6615694D1
A83741D4F258C06B05F3EDF60883F13152D70D8C76E0BB114F84862E6B8228B2
C08F8E2A06C327B57108030856E5E8BD7F439982F511FB2CD1C5811F86578F44
E5BEB7F997758232B7EFE390ACEC15C30BBD458B7C032659C5F89187EA9BA0F2
1518A2D6F03661719C67527EB25CCD9328283C9F0A171B3B9A3B602EA2729AE2
18F44B4D9BCCC7507B2C2269BD8C10A2ECCB35B69369C888AA39917CDDB88586
06089E4F5F9D6474F0070FE57D16CD12153DE8F3770281250B159D478C99FFF0
87C75ED783FE3DE2756FE91B306823E49479DA096E1F56D87595343D1C24BC14
55EEF85825D026A0CD43453352D5C5AB3E3F4D4D5CAD9543A3ADBB5BBAF00414
2161A7701192F6585586FC5DDAB14D19C383F335FF95CBCFBE6CB3C85D2088E9
623DD2E25F1CDC0A053CC134930B868DD9FC36A722247FA31962915387882395
54E7D9855E01803A2E4A4A44D467EB26AD61D377A4F1C35F6938DD79049927CF
A9BCA1F6164C53B7673B119161520C5D9CAED67D9869D7CC5684BE0ADB2843FF
BD5A72B52D8380C5112F4CBCCB78C3DF9F8D82D9EC8438D0ABDD83226C25C326
43FDA7E4F9F5DA3AFE7427020A10519CDB5DF1C3843683898DE0071DEFE16785
4210B689CBB4AE7B8AEDDC17BDF457835F33BDEBAC1DBA12B8129BAAD438E871
89F2F6AE7C86F4EA099DEB23760FA2A4B9F6214465171F3AF111E2722605554A
46271C07572F826B7F13CB803E2B1D3E833B9F86AB3787C9DFCA728120547AD2
58AC77CD8FBC0E96636EAAB676E720F7D6E0504EAFEC90D0AE1BB20B633D3129
0E01C2CADF99E49D45EB0453370647B615E56986C8D5E2480661F17CC0508DBA
86A2ACDAE6B930FB8DAF846931370FF1C62BB6C4A1D071EAC263297A33CDD908
F8CE2CFC49E0FC28DA22DA465986E17D04696548393512567DFE2EACC14DAFF5
8665A2B2A2399C57BE1BA0D45CDD151E01EA0EAE35FE530BBF2D38E8B49287A1
D890E8CD6EF325DCAB39DFDDDCC9DE88F4B9C6243A7B5C516026965CAAAC2818
B426EC55D57B5DC09C95C9AE4B4EF735A5414D985EBA01425DDBDE628AE55448
972C4AF114F730722C5EC661FFCC4208FA18CCB93DDF3784D054AAF95DC58EE4
FD6989D6FC6515CD7471054DB68CA7669F7FDC3F67F9AF285D49B30ADA383485
030AEE93AFBABB827D996E563BBF802BF7FF946F932852D3931043F260B7BEAB
B6B6F5FF899EB14AAA9752283E94DAA8F0389585B31F61BDDE5B22846F5CE9ED
7F3FDD89733004FD53F4731BB6385EC58305F7C6D5F9A8BB59A813C66373E8E1
0B6C92AD0115B13EDA4CAFB3DAE3C39B1E9D5222A83F9E39E4E85ED08A56DC42
009DF9CD5B6E99AB623487EF308B4437F95857AFC4E6F63A24B5A2CDB4EF4032
DCA5CC6D1E11B9C15980825F9C769CD611F343C793DEDEFB0A2B19553E873ED4
3C680606DDBCC23EF80D9D69FDEEB18D4FA03BDFF890F74BD39E7438176060D5
7988F9B32D331AA8D21007B6BA139A251BCF348F2A19EDEBB709068CE06693E8
267D4A82C6793D5574AF08AEAA14C4149D46ED42407C3ACF9550B7E0BC61B239
2D4D6E8A50B343F60D3DAD2007833C017EF611D241773DA36915AE8215FBD4BF
EF73357869A116659A785D887CB1822C6DD659E4188BE77824B863FA2680A5A1
E7FE51498983DC47D993929F1C11066FC4B15D651FA8B7206387C05A403BADA0
BA372FDE53C710AD7B51F572AF6B77A4F4A47CB626742314D13AAB1B0164CA86
A4522CAE0ECDB6CCE69CF41D77E631C06BE27CF033B6BAEE95809CACF6885263
94C43BED45150EFB3DBA90552A96BDA5EE5928CAF3D6264104BFFFC328F44E8D
DA59A474A701070002D99FD1700CB3E54A5C26CF15D6B2068C64A141ECE3AC0A
6629378741BE017EB864303681CAD7A991D4A421C8BFF715FE3CF429A89D0C47
8B7D82C2FC22CDBEF111C83FEC26F9C3FD135DD123E307AF803B636FC3376D78
3AFF931F3FF458ECF25C2CD5D6819B44B3B89F031DC7E723760247BC2EF5EE2E
ECD025E8C6FFC184FF26381B17CEF7751CA2DB1E51E1CEAEAB747B1CEE4173E6
58DDE4C2C47E05B1419279B521B59B757F8F7AC35B445C47A3A81C365467D56D
210B18ED5473FCE383E39732EED03217B4CE585B21D1DC1E6062B717043469DC
36DDCDE027D562EFC577DCB81BF24FA583F98E6ED7EE8A8F9033FF294240E30A
E4B1FE924BDEEB04E969A2A9A909C8C89158B396361F58F5849C7EBE4707EE53
B43C43654C60DAA7414C90ECCE1DC3EE6A443BB1E0440D64CB12556479B78E72
2E40FFBA3A99F015EFBB2589A3E222FA56DB5C568AA2D1C3A2438C52B0BA82EC
955CEE4A9B43E10153467FC0AFC99B03C4179F23AC62511B1B549E26ED8B4167
544D6F6DA00E6EE1E9CC50EBFBACB503C3E206FA9B12EA6ECDA473786A75850B
9948BC3542D780F402E42F613944F89BE49AA53C4C39F67DD2409F919AE40AF0
B15F35E248BD0D76272CD37589A91F59CCE6DCB6DDCAF16CFFF1F9E8F7EB5F15
933DE58069AC071CAA0809E57CF61432F2E89B472838729C3A133ECA860F17B2
67B49624739B4BEFA8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (jedzad.dvi)
@start /Fa 202[44 2[44 44 44 48[{ enclmec ReEncodeFont }4
83.022 /LMMono10-Regular rf /Fb 78[53 6[45 47[60 71 6[55
6[71 41 37 3[61 75 60 1[65 9[139 6[92 80[{ enclmec ReEncodeFont }14
119.552 /LMRoman12-Bold rf /Fc 201[42 42 1[42 42 42 42
10[69 37[{ enclmrm ReEncodeFont }7 83.022 /LMRoman10-Regular
rf /Fd 235[65 17[65 2[{ enclmmathsy ReEncodeFont }2 83.022
/LMMathSymbols10-Regular rf /Fe 145[50 110[{ enclmmathit ReEncodeFont }
1 83.022 /LMMathItalic10-Regular rf /Ff 12[42 55[37 1[37
7[33 6[28 3[37 3[37 42 38[37 44 1[60 1[46 32 33 33 1[46
42 46 69 23 44 25 23 46 42 1[37 46 37 46 42 6[51 2[85
6[57 2[76 2[43 5[63 60 8[23 5[42 2[42 1[42 23 1[23 2[32
32 40[{ enclmec ReEncodeFont }45 83.022 /LMRoman10-Regular
rf /Fg 200[42 1[42 2[42 42 42 1[25 46[{ enclmec ReEncodeFont }6
83.022 /LMRoman10-Italic rf /Fh 12[48 71[53 4[44 3[42
46 38[42 50 3[53 37 38 39 1[53 48 53 80 1[50 29 27 1[48
29 44 53 42 53 46 8[72 1[72 8[91 3[36 4[73 1[68 7[27
6[48 48 1[48 1[27 1[27 44[{ enclmec ReEncodeFont }37
83.022 /LMRoman10-Bold rf /Fi 12[79 128[53 3[80 4[37
1[79 1[73 80 2[75 6[96 15[75 4[92 114 9[44 58[{ enclmec ReEncodeFont }
13 143.462 /LMSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fi(Zadanie:)54 b(JED)-94
117 y(Jeden)f(r\363g)3287 153 y @beginspecial 98 @llx
530 @lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: logo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 206 3969 4 v -94 314 a Fh(XIV)32 b(ob)s(\363z)f
(informat)m(yczn)m(y)-8 b(,)34 b(grupa)e(p)s(o)s(cz\241tkuj\241ca,)i
(dzie\253)e(0.)f(Dost\246pna)h(pami\246\242:)f(32)15
b(MB.)198 b Fg(15.01.2017)-94 513 y Ff(Mam)n(y)30 b(dan\241)g
(tablic\246)h Fe(n)20 b Fd(\002)g Fe(n)p Ff(,)31 b(wyp)r(e\252nion\241)
g(w)n(arto\261ciami:)d Fc(0)j Ff(lub)g Fc(1)p Ff(.)g(Chcielib)n(y\261m)
n(y)f(znale\271\242)g(prostok\241t)f(zaczepion)n(y)h(w)h(4)-94
613 y(k)n(om\363rkac)n(h)c(tablicy)-7 b(,)30 b(o)r(dp)r(o)n(wiada)r
(j\241cym)f(4)h(rogom)e(prostok\241ta.)g(W)-7 b(arto\261\242)29
b(k)n(om\363rki)g(o)r(dp)r(o)n(wiada)r(j\241cej)g(lew)n(em)n(u)g
(g\363rnem)n(u)-94 713 y(rogo)n(wi)37 b(prostok\241ta)g(p)r(o)n(winna)h
(mie\242)h(w)n(arto\261\242)f Fc(1)p Ff(.)h(Do)r(datk)n(o)n(w)n(o)e
(prostok\241t)g(p)r(o)n(winien)j(mie\242)f(na)r(jwi\246ksze)g
(mo\273liw)n(e)f(p)r(ole)-94 812 y(p)r(o)n(wierzc)n(hni.)30
912 y(Zak\252adam)n(y)-7 b(,)26 b(\273e)h(dw)n(a)g(rogi)f(mog\241)h(b)n
(y\242)g(zaczepione)f(w)i(tej)g(samej)g(k)n(om\363rce)d(tablicy)-7
b(.)-94 1187 y Fb(W)c(ej\261cie)-94 1368 y Ff(Pierwszy)39
b(wiersz)h(w)n(ej\261cia)g(za)n(wiera)f(jedn\241)h(liczb)r(\246)i
(ca\252k)n(o)n(wit\241)c Fe(n)j Ff(\()p Fc(1)k Fd(\024)f
Fe(n)h Fd(\024)g Fc(2)14 b(000)p Ff(\),)39 b(oznacza)r(j\241c\241)g
(wielk)n(o\261\242)g(tablicy)-7 b(.)-94 1468 y(W)28 b
Fe(n)f Ff(k)n(olejn)n(yc)n(h)f(wierszac)n(h)g(zna)r(jduje)j(si\246)e
(opis)g(tablicy)-7 b(.)28 b(W)g(ka\273dym)f(wierszu)g(p)r(o)g
Fe(n)h Ff(w)n(arto\261ci:)e Fc(0)h Ff(lub)h Fc(1)p Ff(.)30
1568 y(Mo\273esz)g(za\252o\273y\242,)f(\273e)i(w)f(testac)n(h)g(w)n
(art)n(yc)n(h)f Fc(60\045)h Ff(punkt\363)n(w)h(zac)n(ho)r(dzi)e(w)n
(arunek)h Fe(n)c Fd(\024)h Fc(500)p Ff(,)i(a)h(w)h(testac)n(h)f(w)n
(art)n(yc)n(h)f Fc(30\045)-94 1667 y Ff(punkt\363)n(w)g(zac)n(ho)r(dzi)
g Fe(n)22 b Fd(\024)h Fc(100)p Ff(.)-94 1942 y Fb(W)-11
b(yj\261cie)-94 2124 y Ff(Pierwszy)26 b(i)h(jedyn)n(y)h(wiersz)e
(wyj\261cia)h(p)r(o)n(winien)h(za)n(wiera\242)d(jedn\241)j(liczb)r
(\246)g(ca\252k)n(o)n(wit\241,)e(r\363)n(wn\241)f(w)n(arto\261ci)h(na)r
(jwi\246kszego)h(p)r(ola)-94 2223 y(p)r(o)n(wierzc)n(hni.)f(Je\261li)h
(nie)h(da)f(si\246)h(znale\271\242)f(\273adnego)f(prostok\241ta,)f(to)j
(o)r(dp)r(o)n(wiedzi\241)f(p)r(o)n(winna)g(b)n(y\242)g(w)n
(arto\261\242)f Fa(0)p Ff(.)-94 2498 y Fb(Przyk\252ad)-94
2737 y Ff(Dla)h(dan)n(yc)n(h)g(w)n(ej\261cio)n(wyc)n(h:)-94
2861 y Fa(5)-94 2961 y(0)43 b(1)g(1)g(0)g(0)-94 3061
y(0)g(1)g(0)g(0)g(1)-94 3160 y(1)g(0)g(1)g(0)g(0)-94
3260 y(0)g(0)g(0)g(1)g(0)-94 3359 y(0)g(1)g(1)g(0)g(0)1890
2737 y Ff(p)r(opra)n(wn)n(ym)26 b(wynikiem)i(jest:)1890
2861 y Fa(20)1827 6155 y Ff(1/1)1569 b(Jeden)27 b(r\363g)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
