%!PS-Adobe-2.0
<<<<<<< HEAD
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: odnzad.dvi
%%CreationDate: Thu Sep 29 02:33:44 2016
=======
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: odnzad.dvi
%%CreationDate: Sun Jan 19 14:29:05 2014
>>>>>>> 9041300ec0e250fdd22e21e6f958f182424e0b9f
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLMathItalic10-Italic PLMathSymbols10-Italic
%%+ PLRoman12-Bold PLMathItalic7-Italic PLTypewriter10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips odnzad.dvi -o odnzad.ps
%DVIPSParameters: dpi=600
<<<<<<< HEAD
%DVIPSSource:  TeX output 2016.09.29:0233
=======
%DVIPSSource:  TeX output 2014.01.19:1429
>>>>>>> 9041300ec0e250fdd22e21e6f958f182424e0b9f
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F626D6B609235E2
9B7E9F3127D1D8C8A7CEA28D40FCD6D9B32185DE8C592E33C2243F227677DA48
200551FD1140A4F25DD65779019E678CC83A1A2D62B299187ACC0F680A66A9CF
8F56BC205F18C6088C6DD81AFECC3B1A51AE4850C6FDD77B051AE1826675A5F7
CC5523D27FB37B08E03DB5B38CEDA174CA001B312141BA6CC5B99C850C4A7FCA
FF73E3C7106DE30A0BE3EFD47261CBE2F070C178AEBFA1940239BEE8FC585142
7F8FAE45D1B02B4285E6B9CF45DE0F5CB549A5E0A3C3356C5A1D6F56FF059F99
6B83FBD1511275A29FB284F38140F048E98D29500AAE888596D0262AB6252494
32DC72DB3E25A9DF8158DF67183B0FA6ABE87FCB83408D736745F975DBBEB205
EC6A890FE0409E6E1B2AD9E6E2504891557AD5CB93AFEBDCF500010696CA208E
72B7B067FA0F0A2EBA9CDD4623A905532F771BDF7F58E13069AD495AB6F42764
B791AA22545893E4A3E6C92762820CEBF255DED91BE00FA6CD768A42943CFA03
EB41DFCB6DE54C71B8FB02BB0E8035B537A70F9439B5E8450CE9A4EA65F921B7
544355E02384F886EAB951B1002A07E58C190EB29A0CC7E7545AB9AAFC3B3494
82489688C131FE445266FC4ECD387A978B75854B3FAD9B7B4D469E1FA038D633
45F7274BC5EA9293771200D778AE6511E0A30395785EF56E9F4BD782F378F4D7
213857122D756C5B3215FC1E1F982EBE69D544A5ABA3C525875CD25CCB698DFA
D41E4A3F75BC07A965729EFCF965B1054233F0D41397BD4CF70D0B41E039F6BD
E2A737B6E1ABA71BDA9D972DAB197E9379C12C56F11ADD1AEAE88ACFA9944FAA
90D884D2027B584BBFADB41221E54A4E803E838393FD786BA703874B4CE62F2A
382D1CD540EE2E1705C4BB2D40F73BCBB85880E23A8F5206C8175B2696754D67
B41B8D726CEDBA1DE1ED3947D2330418550710564E9924695F8E3FFAA6B77027
01B10E916A81CF7FE6F28D6912765D041F2A0EDF719DA22665745E1472514BB2
E2A31D1876F1AFD248CB0D61E11E48EFA8D082D7A1CF4C2184602ADFF130B042
C7FFEE859216E6C1B9A53F0F3F6440684F791AC7A9FB234385938E60D8DC58B4
BD56C69979BD9CCC2E1EF34704F82ADE1697AEA62DB682C568EB5671D91C776A
4A52667042970883CD836D16681B2B5323D09A92F891017A17DB868FF48ADF49
E211DF72574ADE1F1ACC80EAEDBCA9BB7E05DED2B9C2390BBA19C9AED4F8F681
E53EE1E33579EC21ED56864D80930166AA97ABE30553785D64E8178BA8A908BC
48DB444980D09A39B5E837D635A7C709D3606277A1324BD782B476CC25E503A6
609CC36B2190F79B8A88EBC35AA2C0F76E2B6E38694C8F8DC44FBA56B3588C90
02B684E5C5F32AF15E3682376F9E94D3F95B16445F7D8155D9B12AF8C0D0703E
3AFFFB335BCDF0B7A1D7537D25991953A5216368E682801F2D4C0CBD1FC533D1
A0A1355223B87E04F7EEBC4F6B872B63C11BAF9562C7702714957094B4D77B34
F2A97503538DC6056713A6DCC44904935D6289AB60460854E436491C329A06B5
C720192686601CC4F4B52EEC9CDB0B5E6E64364A9C461F35A1244BA9A07FE779
5A3E6E03F1E0A11DB389D7DFDCC24B7B353BC4E512578337875FDC746DEE9841
B214692CCA84C9BB0B320981C60BE1097236598493D47ED39103EC24C456C677
5EA5658283344A23E3357855A03B5212B91463EA60163145C65D1505F9937B59
123C7E8CCB1DD74E71519E9DB9F51C68085176BF525AB408629E3A1905B780BD
1A97DCB565FF8397E8227BF280DA35C88F64168B150D9F3AC5A38D2A33483CC9
51A0198F82176504167510494206FC33F65E67F3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic7-Italic
%!PS-AdobeFont-1.0: PLMathItalic7-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 33180
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLMathItalic7-Italic known{/PLMathItalic7-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic7-Italic)readonly def
/FamilyName(PLMathItalic7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLMathItalic7-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-1 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F166942E28C8AB8F1060C53B5724765FE28571728FBD4816AA3B9061D818
2C6E01AEA946C53F8D5253B037F98A39A0A54BDCEEE91A3AB6AE40600D30DCD1
48597DDE11727CE760DC74B749BCDAC11EA913E118A6B353A7C7B5BF72A0C8E0
A246A563BDD4F3BFCA697082A08CF326EA8912CFE36570286A6DE009100C2387
E1D37DFA3256E714423101E3F7806025405B6EC5A45BDDAD39589C1A6BBFA393
170E7908D55CC1B570BA2BBDCF3EECE31194BA92EB03A7A77FBD6DF87FD4718B
1684B464F4C4FFBD4F97A1903F2B52EE686402C0E72080E2685AFD9E78BC7EED
245B9D1F2CF292EEA22ACA0D39AE27642002187134D55E9F851AC15E345FA1EC
CEBCCAF659F0A1D0E143F06020F0CBA556F380CF3920627CF6B95F6EF028EB4C
4567A7BE6F097F93D5404B73183A99D3D1000341981149C965D9025A5318E3AD
B4367445B690245E812E49CA06B0B4D968C5109FF036FA7FD0FC8962530A9837
6BD26C39075D9EC1A987BF34C4BD614EA7496D58CE8BF62247CB10F893048F27
81BB126FFE6BE23910E7F181D048F238829D43DD5B7AC8BECC962105575D6168
3862D5E4C2CF8802FA0753A44EC9E581AE3691C027FB01BEDE9F7A75573080E6
7AB9F074981BA85FE7B19453C201308F2172FC810D86604C883BCDADDB6EF524
27E0B2AD5FF382082B46F42D4E1672B2076DD7714172F78DDC205DACF00BCE93
0F6409136C1793AAD1ECAA2A3B2D7F6904B70062C170FAAF08633A13C303EAE1
1BC1A54F1C48527544E28F808AAC801670C3D6BAB0DA02D56ED69EB52BC90411
BD034E11E6B81735AB30E65CFBE0C938782A18FA9A9882C955044A55AB970C2E
64A892A9E7801D8869EFE48A460C875076F3C37065CE978F9D0F20E64887CA43
D33ED0DBC13A21473C63BC96001A84962A5DF94C6BD05FF3A16AEFFE33F44BDA
EB7D26FDEC637DF2A80E2F435E9FE2D40AE7DC37454CEAD9BA3114AD95DCE180
D0EFE12CA5C2163C53935109069BBB9FB6246A6207915876A249241C3E717DDD
CCFD133C91C1AC68C2C1B83E2DEE7642AA85B1615F9CBA1C3C3197223C9BC61D
76B0AAC17CCAD6353F06651B9D5B09C17883D028F2BB04A721B6B0C7DBE1AA6B
43B597550002B2737F76EF634FA96FB94E96DC2D0E437E119950277E7F17E327
B928E4410E361E59D541ECE44496E5D0B74A437F17BB5F05E7989CBBC604FFCA
18F18485B0DDB4EE9BAD9DE1D97865F8C2D9B55C114BD8277BDD2E80D42C0B49
26CCB9B73A8847B4EC479380641C1F340A1E0D52E1A8D0C140D9870C55B79971
0662B4FE3DB3750C61CA24EFE8AF8F9056AC944D776AD1AB10289B6FB12B699A
2FCA90DFB3DD730D96D100DC5B1BBB1504114B1E6AB325FBC179472965BB6B99
C21D0CB69884C55AF0293FE27E698D4BFE18850717B51AAC0CB0FE158C88A253
D74774970B11342D30A798FFA9B26CE29D4469DC7E5A9141AD2C56C395D1B154
2BDDF61B58EF57A74EAA4CEEAEA98AF92D5E758C290A579C29BF0B67F9079A1B
18B0768FA4C03A720CDB13A9FFE34911DF91C6F3D21FBBAAD00FDDDABFD9997F
399B54A6A344AB66411C98531B2CCBE9FE78BC1AE4D42540243A8C82E274A0A0
FC2BC1A334AEDA418BB909362F45F65951ACCC3EFE9914296F95C51784F74D7C
1677C64C6C246D4A5A7C3B4CF4FCECA1FE4ACF98A0F30EF11588D1F0664C1EAC
0EBF606B6630A8845A3ED806FFAA092CE32C60102BE0378196A107DAD0FB7702
DD5A6B234942404C46943A761BADA6C3B4B9C8B9A0EA2DDDC2402AD389465862
718B6186BB2CF4B290AF5A8CA494F850BD820D668E9F913F1AAF8216CBC34C75
0E400517411ED880613336943D822F2E133A03DB0CF59BD5A8404282D7AF6827
9457739633DB5CBBA6E4E1CE3CB99F13E8EA78DA56973F4DA6241B500D66ADB9
36178FA377DB2DFEC1778F60167E34B64959F20B487B0C06AD32923521AF5AD8
6AD0D4C138FAB5815D9B4F7D204B10D5A4360BCE999891361A68264E8CE1670A
BBE0646F119772FBA679A4D4EA227B4624D6CEDCBECA38F7FA6860B7BB0D4137
1B71223297306A38CBE9D36EB79E5D8879E768ACB7340B4A18CCCE4F57C533DC
72215A54215364CCE05F52876D8082F55F8160BA0D32B0AD7919E39697A2F75F
26A21153C9DA43401554B865BC003C9EE697B82E1A0131385AEEFACA4E2E6A34
DC9ADBC856D2957386E6CD4F070ECABEF44FA9428BB0B3505E2F3B201A557793
0B42F528B67854B4D486666116B0C4DAF66E0E2BC4A7E2E841A9BC124444
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75E4EEB611B9C8A2F
CCA90E75B2443C6EC3969BE68DAEB153CB0DE1660044390C524950888817BA35
48735C48CF3454524B0071B5582DB3C83564333DA0F758DB6319970BF48C3014
5D2A12BAB7F5AE51EB0A8BB98D9FB5EB919A1D92B47F4CBCB931F9ADB92E0D61
990B09C6A749C3666D004CC2E0A360373E7BCA063423BF653F266B62582B938E
D8DA31BAEEBE739FFA32545089856E54B1A653498A071D4F1397B4ABFD8DF02D
F71286A13A917DED24E2115D16B2E47E3DC85288B93BB635F21AA1489D0174E7
13B976F3A0B36C575DF597A3D032EB0138177F7BAA9F7B6D47FD3DC952FE1491
8EBBC312189D77F70AF8035C331FF71F130C31ED8EECB3F6F2B78F3EE8713C62
E48F5C8F62344E371AF8C49D25E46C51D541D23F9D2633D0ADDAF128E4E336E4
1B4B94F0D92A7A8A44160BF79651F0E264F81770C19554999E7AEBDAC87D5E25
B998284A6F868D9A6F9D7001091DE33D6A472DCD3084B026E49BB0BC85A603D1
1133AEEA0BD95D56C03E7072927F790E4981671E3D01F904E211AB3D3362FEA9
B831E269C4FC8B2C7574D369753B77981AD11AC315AEB0294B62BAF5C7D61883
DDA219E891E8C5AD303F66B59D25CF8A8AD6F3D2D436723EBBA72247AA25A389
8659360D81BBAF902A911942D8B6DF4157FEE703D444FCD5C18F8B4CE41D1AFC
925E5CE95537B825B2FFDE8E799DDC0CB40D65BF919B7FA8ECFC1B16AB69F3BF
0575F598ABC5B57218EB1A6AC960A8E8C28005291E4D768BAC7378E124713CA1
8F3592E6A583E4ACED15502C9F238548A869DFE590A22DEB411FE48CF96BCCFA
F7A173C1BFD4B934D3C3358C406452EADF75C77F1B4078C0B0B09675FE9EC168
A34C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44CB6DD0505F551F95DDE361
5B9F1E6134534A315CF6317F111D5BC2A9EC89E2F19716811BA35FEA5AF6530E
3329357D3C3A6403B9A7675DC69ED861AA0478A60D44D5C4C52C626E5DDEC00A
1C9E7A650438AF260A45327984B781D64B6075D35EC1E3507FD4FE2E7097A246
CED40B5D21CF191A2A9F427CC798A40D1BAEFF181E6647EE6143A68CD3CC909A
C69AB5D8F2823781E781744D1F3A5880CC0C6B59C82EE156EB3AE0CC42669196
8D3FAF44FDAC9C60B738185A70BDEC3EA98F14355A95D5D9B65FEF03135E00AE
3438822D3A7894683CCCFEA67A54F947BCC97723738CB11EB8690231291C21B4
4D8FB3D4B72E486A596900828777A6603D9864D9435B7FAF4A47258C8476DB99
335C22615EA72B207266BD5FE1F4F03B7F8F4D46FCB9FCA46B1E5A04AEDD990A
877E51C5DC014823812F36AD4064A0E188D441AFBCC6BE8EC73E48F85E76544D
DA751A3E0E056472DF11AF8C8AC0CD960A2DAFA61A62E2368D8B1114FE023D09
5E938FD45B008A79F8AEEAF6C5F324D997297590E7C9FDC7008BD271005CC3A1
5AC10DB7643FD730F00C9B2749B3E9D82654E3FD164B8F0CF01CEE2AEADAAC38
5AE78D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC44184E183
3BDC0CF3D97EC8E6DF2561B49331578ECF6BF0E8003939628B934C1CEA33D161
1D05E59ED9BE05071BE95A8E1A84BA0C4B54ECD961F0EEB3548BC968950BF5E8
4160FBC4C2709D6B1A9863A27EF5934C5CA2043B9B0E5081E58CE7F78DDB9409
17756A2D719AE12C53BB38A15021AF9FB97DE82874FE58772E82FEE206948CA2
8F5870230E9DA69ABC80788F2F72CEE5F5594B2AD33DA5F0E0E54A39325730A4
38A6EBB464931916CCE9A37170F0C02A9C7143D722CFC08677622DA09CBFCFB4
CF3D13A7D2321812C81B5AB9FFB7279EC7FEEE5B8D8919E0D1E69B1FE209C5F7
4C4588B11876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8808C26A27C674BCA1D
A029B6AD3386DB54549957A9A7DCC731D0F06699DA05CFABBCE8EED734C62EDE
D4A8F360F63EFE2FC361E1EA453299493D312C76192227BE5824E9A8CACDC4E3
CFC6D20C02AEB57014209F2FA3C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A
280C40D63870B38E4100D67ACF9EB4C072D3196F99FC3BDDAB879CD224BD2B3B
D4873BECC873A9C71796A4714883621CA300ECCB25BF1330E865801A5A5CEB09
7A3BD2680A776E288BEED70181DA51D0B73139372795868271605175D3B08598
7172DC1CD4920DEBC3C4B0D6DBF2A3B3A9E8762D1956F9E3F9FEA1B89B964A7A
04D3F5A0A6E35A3550BE250F002073A67F651E70BA8FCA40C0D866A56334B972
95BFA4099D149EE93FBCC6272AF549BC12D2EA7686CFDA4AEF92A3CFB5627E06
3A63A468AA662A4F03E53EC683044391E90CBF1ED0CC0E69BD3DAD5F8C32E857
0FAACF126ABE694F703C6FB1BD99CF0E973FCBBD21F96E2DA427F09FA9408523
385A386E7D8868F47B080716ED92AA9622E7730C26A70C09FB28FF51657B8A92
9CD02CE318175604B228BA1A08DEF7D871A1D5C5EF59A3C0DD2FE0F32EE88454
734AE58354AF10098C395570670CC068CE9AB161EF7DB88DA4B048B63DAB3A21
01A272DC971D3B73E6841176BF2834BF39886F0515D1D2E26906FF4FF946A5CB
42B59BE0C6878FAA4B2E66AB1BB4A7E6344A0C9FBFA85D103528A79957F00BF8
849A73B9D49874E01061C89D81B3C53C5B458EAC70ADFC54810310CB0FA755FC
00A521B5941B4A74D09E1EC4F2201CA9FDAA3F2C9737FAF9EFA97C5FA817558E
CC171040C734F3FFB4FCD42C5EAE4277451CFC84A52743F6B545E989D8E07E72
05BED0DA1CC465FC4CA9F5E215EB4853B5FF467E3605DECD9D47E4669B250CCA
42F8428E27DB4CA9E61A8AF0431F373DF8E1A969C52A99052A4D3A280243E21D
C3DFC0F2885961670BE2D2CE87F11B7F474BACC8F587351A0F3247039946C764
BD2088A3EF0150BE2D07493302A5492BEA01CB223FEA3B6CA4D0A35CAC94F38F
735C17DF38ADD1FA4019E1C78B8C76510E5C3386D1D094605C22E58B9F9C3E9C
6D2F7025AB0EA9C5B92A11EDC335D079E6ACC69BD64BF071A2E72CB6ECD62DAD
0950121002350D0A3DF2848607637958135DBB27457FB4CAE16197347611DFE6
3DA3C7C9270729D6B9D8DC1427FB23D6E763BD772A98DBF491359EDE9399E5B1
27D646FAB0A8612DCA1CC8DA7A3D042F660E4C459352F8149CF384ADC403524D
40A8038827840118055D7132F83D2E08076387B0CC7119D8952DBF1AFC9DDFC0
0E0D38D6DD68CCFB5D5B1A9049ACF2C3568466C9030FF1215872715967549F66
5E4D31FA89D07F9F7B71AC2A563E8545D12267B73080D802BE7341B5F4E5D10A
A572BDEBF90BBB7DEA2AF943FDAC97E87B957DFC0B9303D6893CD2B43CA2E06A
F86228F0099D542E9DC2618B150E779FDD9DB73AEEA11615E7DEF726AACE3349
3DFEC10FF237E38BC8E19B81502A19E0BD113AFBCA88691D35FDF7B2A3B17C64
56A86FF9C72B59ABF9C2ED843368A40C23317C6AD3EDF0ACBDE1C823F1E8CEF8
4370CB2812E8DF9C6EF0F015C8184493FC6CD234B00EE34F824317E8766999D1
7EAC8B28132D2BCB5C2CF001309841CAA6444E7445CE86724470B9BBAD8C5C19
FB751B46C7972BDAE3C044E0BBD0FFCFB0E66331A52984269355B641D8A0414D
327EB4BC88FA85C6463CE5C32B054A731210DF35A32EB4B613956535222595A0
7CBF1BD05B68870AA4FE5CEAEFF2DCF003B873A253C5266654D1AA1FDD19A246
74F7A8D5A62B612C89E288479664226DBB6F1171F9EEBC7E1273D79030B988DD
82FFD4612011CDDE53EE22DE1EFB9A80AF0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF7A1811E4BACFE7CDA4FFE64DC77A1B6F11C534DDF75AF73EFA33263
7AEC878C2C7B98F040D48EC01A688FB6A763A142304ECD0E9BD9F990BBE1CB85
43921670FD7849AD302EE93FA7FC7AB2EB7A33F628CB95D914FFD5808CE86813
174759152FF71FD44B35937A7756C345032011D936DE5EC22E3099B40A646A7E
8C8F0BEAD7C300D7F22CF391CFEBD10FF59972B23BFC19B9068BBB53D80AABB5
2FF61397A500FA5ADD5797F53262A87C0DEEB3A89557747EFAD8D0AF8CC4292D
EB08FEA65981DF4B6799EC6ADA66734B2653FFD4B16C0F0C6BB8F4ADA69703A8
F2285F08DBF9FFBCE1DE0C0838B32F00BCA22F8D4EE4C19F8229792DB4A1B87B
F1F028E27BA8A0F415E8786B9A272A23CAD74F428DE3D99F90F3CF286C2F355E
112C1A9A22CBC95F58BDDC6C0A0192AD6B2201BF6CDE9BE27999DBA223F6681C
8C8D00D2E4FF4CD674495A73037647AC0E1E7DE225A3AF1F48D5F3368422A56E
726769E1FBA0E0D7F36A380B299853C7B4A9D53BD179A62F3BD78502DCB7D6E5
072511EAFD3D7291391E7B94AEDB58AEB84F24723D95F9615BE77A98D67EF432
369C5635095A806DF1212964783D78ED5E617E9DABA3564DED1331217043B546
A1C2EC81E672D7072BE7784A6E61DB6E034F352DF37E4B8B7B7003804708DD8F
28E08BFB6332018164DC3866CAC953FC4FCF46A19F97B5393FBA09A0ED6AD580
08BB3C784B5D3298E0F9CA1898CC79E3A40E91E5FC7059986BEDD1AB8B34781B
8658E8B2D7E0503E72578DF4A6DB327AB7CAE482C461E40E4205543BAF5C0E25
FB1967EC5E8E498EC9A672DFCA190570B1B790C437CCE45BF40DBCD184BE6811
99E357D9712BFD55C7083179A028F1D1F4986A63967D2D6F4A5AD2A724074E0D
A4A8F43A1594764FA4AF22E50AD13A234A0834F236EB971201A14FB89C1439B9
48F5CF5573C6ABED921392444B311A9DEDE4CAB67063F046C81E7C5DA018C5DD
13F83F7472817EC95EFA7DCD46D2A899CA750DDF073110ACEC7E2DD455C75E78
DCCA84FA436CB8A44321EF1C06138B497F61DD387A80D2F43D902C55D748F9EC
0E312DC357793F39DC7FFA0CE69E128233F59B440CC0AC400D4B6EFADD17ABF7
638B39FC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C6897CBA116BAFB72AB0EB87071835353368D815F03138693FD510
3767DDF6FE6FFF496B106857BA914FACCFFFF55192E10DCF5EA55CEE833EAB43
CD441A6B455C18C66C38B55221F5828F6470FAAD5ECDAE5B43D8A97B0A082986
A8842DAF3B0BB5DE1948B588FCB3E2B37A5C2F39F9CCF68BE7F0D3BF5A607404
D2387257B77A69CB5C398682578AD40F2243E60DA5A30435FCE91192754A9EC3
4D1F38D98B427893BB37E8AF3DBA58EF7C2A978A5621CD216F97A098C113BF6C
6FF493D20E76D1845A891F5058D8DABFA6B5D17440FFD03CB81A33D0041C9857
78CACC4DB60700C22ECDF227008AAE8B3549585E94245D9EACE7D6BEA94C108F
E62827C0BA9DB2A54094FEB4A64C7721C7B4ACD80BEFF23D302C6688EC3ABB2D
5F61431804DA1067221469158415996B0671C6C421DF8296C48B56F43C62D3BA
63CF109A3499ADC7AB1CD60E39376D31E045038AABE6DE8C790078B668D79D26
DA019A6B7BDD9C0B2ECD9EC55F129F0406ABC54E3B4FF23649826A2091A48EC0
E46292E803045FC7D7ED27129CEA43EF25E03AA1D0FAB54AA5821C4CB010AE17
9F63473ED3DA2A47FC87C5E3CF18CE4227ED29B9A8CF29DA98F0060A4FCF52F3
2E017E9EB5492088CBFEB4A03B6BBC1019F646FA3F67BB7A2C1F64D94F9EF1F8
710220648240DA37D2B0CC0857D5DA9B3EE1E389F33ACAADD2C782090D827236
F88F30ED88FDC3DC32A552978AC81AFA5B8C28AEEBBEF358B99F3820C596AF3C
8F81FD838DAB49F723CF34D0D7356F6E3655663F9EA134C4494FC7AC2B573CB7
7586293696659A97169FCBAAD83A7E1A9822321FBB7A1E21988DEB02520A8B5D
0C9BB684B7C48F5FA3C6363BE5792EB81C20D162CCA4495FF7EACA7E296D0D6E
19C76AE7ED814733E13E1DDC438E7D4B3E0CB75677B173AD9F901D26B30FBB23
114B9CDF03235CC96E832A27D6D3F9F1E0D7C6FA37A28699D9C0F3EE94AA32E3
C58F8D7F803B5ED4F856AF8CF7D678D9916169C55B1918B37F98E57589D0D572
737A6818D36BD40D2308CBD321D74EFCA6CC0B4D2BD2D2299C65922FDA56A476
4D36061E44A0E1E3EC8DF250B41A7282041466E12645CC6C25101884D5861E75
6A85E1184C2837691909DD66642C351FF9A5635B53048015927C1A2DB0C5B8DD
14A6C05B3473F0E6D77224C7869C939526834B06C961E73DA1DC5EB5B7313452
359586C47344360A721DACFEF771C491DBA4DCA1A3F2AEAF7762C655ED743D7E
C33A8371EC60CA1EC6E80A95C5E4E518E99528808E4E4702B9EA26AE7D8BC19E
A4E22AFDC4B35E149F7EB05AC2BCFE82D329D1CE2A8CF832A524C8B374AACE6A
1981CC030B8D917E2D09847F9A03A3C70BA0AE60D00A3C4D2D2DC543AB420520
8B963423BCFA92B5472B822B5D0B184C9F29BBFB97A064C0D052756B685B29C2
A6845EC58C154157633D226BC263CFDAFDE13941CBD1F1FABC2B782ADC2AB5A6
7FB71911E07C871BC80E6740AD53D50AF8E103F301AD9F046112A902F7A7BAB6
885B6DF621A06AB0537AE58A16EED02859CE427333CA7116EB39F6A7CF1CFE1B
70C5C7635251483444C1383A2D6AC58D17D55FC38600AF5A3974CA6637BCF811
6E1106E890E56CA85D498FF7921321F2D0305BBF875D7087C3805514CCB97938
F3E012AF4D68C140C6CE231015DE212D5E306805EC51AA2954E3B1FA5ED82681
428F1DF6448E28094C5EAC2E0F61622E653110906DEBB587B4258F06929CC17E
923E480C418243F9BA6E7C2FC459F939B7295B57D3957CCE79CA02A223ACABF5
FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0114C0EAC9889FBF269C4301C5A
D39C601FB86D4090A78FCAA317D57D9AF50EBCF715D2D7BFF0A62BEA1744F4D5
3B04C118F0E0B32273D006AD288E3E40AC381CB5E6EED8E4D729AF645C7E0B20
74992A2D0BA0560FF7A1971E39FD57F34B1680DC5DEAF638C0B240753985D5CF
1B950154C4709A842A048AAAE1894BDC6076C6A3B9DF359DFA50D4A96522A8FB
0ED980F4BF74E118537E78B929F3E0A29A4F67F1617FF924093B69FE657E0C8A
55CB9968B203C2D5314897422139DD5CB2A1715C3E6AB79D37E3F452F9516124
27A24B996F98BA4E5745399DC1A9FA200F391EED389AC49F917FD95E9768453C
3DC03DEE2825853BBF13AFD059468E38E9801D2EB0C523895515658E0A6C996B
79CF3B9D780A9CD49BA1A59C41743F800A1125999C1F5BE0091026F814EBE5F9
77420C20FAB4B53F4C36A1EAB57E3D94961A53267319F6515B36EF9B82AEC44D
CC328B413F11A396740F5D43BEF2B97AC4C3ECF194D1DAEB37EB0EAE50C9539C
ACB2F6780D7DACB1B1299885B59F5E18CDC0B723707D1A37CD0C8A8D91903A93
5A19177BBF30C4391B71FBB8D87C4DEE92645AEE72D3BB416CF33FDDB373F32F
22F253758D1F2DDD744475A198A8CC6BABAF12A19E5F50A151671CF46238FD28
D02FF63885311449C01C12DF0BB686439960169627640B4ABA46A9C635CE595A
C3132C7BF0E66DA9ED6D5D72499519BB13D5090EBAF7DCF9166B6CACB653147B
8ED8A016FEC3F208C12C505029BF207BBB394F9AAA79C72E01D59E264991E3B6
123D75DB1F5D1B66FC3030FF6EAF97F7FA79ECE49D69AD360A543C7FE4BC6AB5
DADCB2E3143D95295E23EE37E497C4CE609CE0CBF8AC2679BFDF3654987B24F1
2D4A5D3E8AD0A95829EEE2A1673C50F18C80BF417A93E7E8AF1747AA718A9E15
5A2BFE6D055580AF465B8BB794B2093DCDA77681675BF9A6D9B853F0AC68AA4B
16DDCDF691AFA9E35E6DE5D8F2B1B4737B631358D3FC010FE936F3CCAFDE0C24
08E39D31BA46DBD81F733EC51463B1EF42B60D749502C05B22CDE10D6A55BA72
A0B295B22C2263D136B218DC2F714EF0EE4F9F1687F433E2C67A22346CF15593
0698C2E76B71C22AD65A7BB8C288FEFC0DEC4AB6F9E931F6AC379F1D0261DACF
259C23F90F9B898CA7BFEC385870F77D533B15B16FE7243E0BF9FEC3F5E52140
37F6360D774964C89D9EB2DECAE11F3A66BCA71F635AD4656A8411543FD8B3DB
6B7ACB32CA6E4B7A16645FFDB0B1EEC921620E668D20A9C04B43955F9A669E50
90F0F2133D75491687B5A57E68C3441B72612289A4943E56645A737298E4C1D4
2C79E65214FF638CB4A3A9496B318283B80AC6BC5C9FEA4441A739CAD46612E8
841019FE5023BEB08E94F943A1C25BD46A6A37253D184B292A2426B0BFEF4338
0939AFCDDB78288E14B7A1F9CA8F95A34ED9AA279F59ED573A530FEAD52B86EE
474BE945E826B26DE608B949230FB50AF679812D95AE6598AC26193135F5242B
BC0F4221FF6B6C9E66EF11B08721C358C4148C221921434ECCF66634DE564A54
7CEE2E86606EC151134A99D85F49154A39B9C53EE2CB0E054CD9313F9466F1EF
9798DB2CFCA285E3A8444B26E76BD5EFB9D693DE6329A438F2A85F9436550733
9B1D90113137D4FEA023A1F8BA9D1007C869E859D341A99AD44539F07928BAE7
5A209A75B43650CF5BA45CABA55D3A08CC3B4ED0CC1E6593BEDB64F65C63D244
B5D481AAA4E0464F52F36DC07ABAD3F725A7708D2044DFE183EEF39AED664E71
0AC92AE915608F20F4F12BFD6D06EE7EFA0BDED02922D84FAA020AB651C794CE
F0F8A2B502F38FCD0A3C36F5D858095DCFF46884A1AD7C81AD55FEE036634EFB
88A7B85E67BF880AB2CBFB7909B93FBE74BEE6955D3E4CF96B0CF5C0E809C179
38DFB01CBC782B05978D992F4DF26E7A139EC8D793363A204193F78172FF911C
16FF8D148B333B227D98FD7D7AACE727F2E8F0032882832BF11497C7C5D25EE9
D24123839BC2486FE40606A1A6D89064841BC9B7B76C7CF3CEFCE0977B68BBEF
B4BCC4737336180EEAD3FF2A8570054C243ADAB55F1BD0A2AC1D73029F6E083C
64DC71629D041E4669A05B6754EE7CE90EE8C3B354D043EEB32E261F8BAE4665
BCE053D88D55F1D5FFC82AF36B05706661604092F3B28D391EB9D7ECA48701B5
D4DA98E407A99827B8C043A19B2EF67386F05A45B152F929A439F6193C303919
6238B00AAC96F531D688FFE0B7EF59215C7F1003E5B414EED9E1DD2A35EE24A9
12A8D51204E1F6FB5B6311C7D3CE156C93994992C526D18B08258C7918C6D6AC
4FB3406AA27FEC1DF795F820A2534954EAF50FBA1224AE68BD3F58C8E45D64FF
0AC96A7336E70C94832B16BBB72A57757B2CBFC6F5D915C260859C43D16849F9
659AC5508CB82CDF587E5E263F1DD8D11D49F5D1FBF5584F0808D5CABA4A1F3B
D1B8490BB49095D776959639CC4EC34BA440683363D4AA8290CE08F2B0FD6B0B
F3F5A57497493D82715A6386E4D84F5895B5F91D1402E8BCFF051D4CF5E57AE9
7926F8BA89970D21315523862F695CBB2772B384F650A998FE06AE158F2957A1
03CB2F0D9F617DB9AD6A775A675F8AFD5C5631A3D9E121E1DCCD57F09C029DFD
240DD1F29D9AD73A2EADAFDA349CB99CEF9BB41CE20A4F4C45DD388EBD9BE77B
70E3067493C89E50C056912254A49BCD5B7769C1D1B2FB77188ABBF42D0C45F0
665C668080642B2E7109EF585067C704B1E85E24FFBCDCED08F2134BEA8A6550
5160481383748325BD6608A3861BF875A6C332C699B6E53500B21CEFB9021982
1DE4129A26775F2DADFE5CF1560D33E230DDD12319ACBDAA30A0994305C5275E
12F69F82175C19BEEF0BBD9CAA1A3EAF85DE0D3E576B6BBA701496B17E998157
C044DCA9192AF9F60B8DFFF90625815C0EFCAF869DE476F5C06737DFDB1E7AD6
DB2AE73CF2EB514BCAEB6A9E25ABBC4296B7F28E6F0CB0E1E2D268644073591E
252274B5171A78B05B42BDFAACE2CB36898944DD14A54617FACA3AF21BE03AF9
8AA1F3F10E1DD99AF8330F229D12BCC897E8B220B9185AF952B68F57D0FD2A41
B55D204BD4C2B409C5745B268746327430B423D30129D2AA474E78B3C62ABD05
C7E79E40C40A57DED246BF8AE750494274EA64F8C6D713A307313307189EBFC1
6EC76B1CD32B20C8AC1F307B2109A533C453A45BBB4E151F992B3061D71E2CA9
D6690800638618309E789FAB413FBCF2BCD97368E731DB0F39C2931B85BEB2E5
7A66E0AF418B6ADD311C9E28ED03EAEC476F460AC21C80216BA11E3AB6BBBF7D
B66EA2957EAA7E4C45E4D9E1A69BD46B5B1A191AABAACEB6507A63B3DC00E53A
4852E14D62662F0618C84DB700F70918C07ED21B703C37B4ACD8AC9FBF383B33
64B5B4E0750327693243A41CC656C33BB610251719BA52DC3B5B3FE36C12BF9A
3DA1DAC4CCF65380822EAC26E1A6FEBEF86CA460FC86C17238B1D947437DE8FF
A9ACACCB43748A75AC6E58F2E8579FB66590F72E55D8B2B917887A6569517612
0AC1BC4F2F04C91991E8318930A08FA7FC1B27E8D0143B0D97A86F326243EFAA
AA08E80701D1407B67BE4F9919311D82A5C754557F13737709EEAEB5D658D704
F64C52A77FEC24C47E5A07C835F0597954B2D4FA72914A73556184AD61F180B0
B9595CAA43FF2D4961BAEEDD5F2F033DDC1D453060F99909922A8480346C66BA
E52F17C05474BC002A823C0E56927A7FECF0F217893577298276AF83C487EF94
275CE0442D2E487C9425C574BFF26D1AE51E7B7ECA6919E2E1DBBA2733DA7D9F
4E3070B22FFDF52BD6715D2E1CB0131081D3B35708BE04F4434AC7FA27929D2B
CAC6C721A00C16BAEFFA6D4498F66EDDFC1212F3595E7D01FB2601BE3E73653F
3693D810D5F72F8FD9398CD7E9B8B40D66720E4CA0156FA6F828E7EFDF4F972B
CF767F2FECCF871206B5C00E8F29A06F0B509B516E1D490D30A43EBAD82BDDE8
1014ADD814A7150CC6587DA9DC6363F032EB59FF4A86C903C5B59737BBD6C22E
F6FBCBECE616202AFA45E87447D9E60F23C74765D26E8138AB200D4871CE5A0C
F571AF73CAB9F8534514A2809DE60678661C78E71D35A49E42DC7049D6CFD4B2
58BFCF3CCBB2F20A4FFC2C0F842596B4434B4130C96CE312ABDCEFF34BE216F0
0C2B07BA21E8B07CCB0577C9604A04636CE9ED580E2631A8DB9C889299F724FB
0706ED50E5051C0FF425CCBCA6EBF706D8B42FA59C6AC8A54E31ABFC2F7DD8FC
7ED8FD50EE9CD9D7517A28932ECAF39D00395A1C2CB5668B4AA8BE0E19F3B1F8
677E4D182EBEBD096E5E38E574D83C1FF3D794B4BEE07F616E65FE70FF15A9F7
C7F297B680619460823EF4FC5AEF40961ADC3E72E0226869496C7CD8D513E04F
CEAFB52B631B733E9F1B49D36E313316EFCC3DD0FB8A996BF61AF3AB80DD4716
411F33D451D4E8EE299F44FD95B15D71BA51F2A2C18688C13B2F5745558650F0
E995455C3E914A53EB1F6ECD7F3C02751F93CFB393C6ACF0D67116E10D4AA86E
B3B71736D85443CE9AB4817A6026231E67F7E7B6455C51BC0CB999C6DC12032B
FEFE0D39833167139C9EE050B1905A17F4B2EEF406CE559161817E958AF9C74A
4FDD9C1DEEAD67A9A310BB774818A0936638E8E381D2316F40F90C5EF0891F5A
5649230C0765236C96E8BEC3A127E7F7B6D6CAAB1A45BB519D2DF9C7E1149768
42B60FA09FA8341FBD29F9202A9595C67DD607AF2E8418EE0782E4C22A35CC8F
6DB806DE71AE60F35BD25AE68882B41AC664764936743C1EF793E27E0C92587B
D4B89C65E770DAAE7A080E8C03E05C0590A28CD7ED26675658962B50EE7B1842
5E2305BC90F8BA76481FE6CE07FAB180564E98F10FFD3B6787C6E731A24D576E
A61B8A67E5DB713A0D04777E01CDE09D7D16CB82DCB7EF2A3BBFE69A30E09131
E6782EEA6284C8085240E1D4A947D6C4CDC77D8A33427874A49778432E6CD81A
2B0B8A9BB353255E7D546E33DF8DCC0A3B7C298B36645A69B9842363072B29C8
9CC5317C67739D078529CEB5CE549D9C3ACCD9CA3E66C6658663168C360E58BA
4556FBA22F88BBD492DDE3022C44F971775F67FF0E7C9E42D2016CC43256A16E
04DB49D22319FEF7B8C31A8E7B7B8C2BD566087F0E4C368D3239AE15DD46EE7A
616A0A6C0029FDE782125D39EDE063D06455CC0FF101B58C792E73651CB610F2
61D87FCCCAF3C7515E31633C1F96282C08F288D323298CFA815F48147D06BCAE
DEE56EBB06D1266A0AB54F475F58DB47743EFFF65A619EBBD38EFBA0E8B3E47B
6CFF0D2D8A126680236458291976ED583CF7DFFDAB31E31595150B4946D2C229
4885D47F58A313ADFBD5E6AB3C9FD93F2A78F98BEB4681D8FE28361BCD35E2CE
E6A966DC4FBFA85306DCFF7B893CC31F79490B280BFE698544CD8C196DE2845A
8CAB606DFCC0F58010EE077EC2B16CB40FFABB7CE776DDEF478E74B2E4785E03
C3410C157CEAADB9E47352DAD6EFF250CDAD30E75A63D1787466A372D0F44322
E085A3997EADD33B0D099BE75FD7D0807FDF68EF6C7A717AEBCE20649E6914EB
FB600C4DC29FC3C25DADD5837C24EC9D8F1BC5B44277CE14C79067D7DEF1ACD4
475F7304ED897BE0F472CB16AD8A730C0E99E1D5E7C27C121A2C15126E9C6DC9
31645C68F55F2FBDA0581BE879245E38AAFAC9C7209060B2B7DB1AA08C3BDC66
5FBECAC0A074696E955B443813852B515A607D19E71AF5CD9CCFFC134F9FC42A
4817E89D8B7EE7C173182441BF43622F491459F9782157C5E35394D152B1908D
DBA9601CAA1EE5838B688897E436857DD1CE632AA256D0D1F24EEE9318C6EA83
4183FB93F215CE58B4BDA7213BB999549F980006F29E145596210B913C65501D
793F3F0ABAC689DE742E0550AAEF8618CE104E41A4194499D0FA3DE261C46DF3
47CBDDAD4E09270D0FC063DCDD378117C77598B8E6DB7AC82A4CA3D953CD643C
ACF369AFAFB4E20326E705AA35D4212160DB36614834D5BB26B0AECF3E827FAB
92777A73E40AE46BE438ECDF94F704ECCA1C518577B7E16D957F4CFEEE2BCC64
837B05A9F1BED7967519936BB6A9E22215AB87F30B1D3334971E5187E9C43A86
72308144F32A57A4764E0C942036E30D883228FFFF237B5BD3AA36A1FD9FAEB1
2A4E67B7034DD2FBA61F7040D24D74610C5A2D8BC32D733DB0B4F41D2C57D887
CE35246A04AF25200F5D5E6B6BB3698E9F1B0A051F93D4D5A6D539C1112065BA
4688DF0953045C78F6ACC41D89CC3FCB6A0894D72D4EED037B7671C5F3616D49
3DDC4E00BDBE2AA9DE835E73C3F1A45CBCE44567458C6D458E5C7C0E2FBEB165
6E0591E4FCA99D43C8DA102B26C46D730C0143FB919CE7A6E2BEC3CCAA6A878E
C453C9E72BF8E2143D430DC7B9DBD1E9836F07A9499946E3B99324D66B9B0ED2
9AF1C8F546AA7748915DCD3778DD095685AA110C56E579B41D9C6F990563A7AF
2C9BA57B54D987B3E5BB3034670E0A2F4F5C85625881BEC529ED22DEE4ED90AF
97200AB7A9BF5D56ECFCBAE6FBB8918C8A7B19FB56476909B82CAFB896169A68
BBDA89E155DDE4828304234FC559DD1F7D850775503F8F8B8C48D1D2B7D330D9
0A74567D2731B4CA2D957265B885BF97BB750CBBE2F95C1E4B4E4481EB71E01C
A5EB13F371BE1A7FCE0B24FDA440AFA91CDA6B28D173666B57218AD7226ADA65
10C2AAA0F722C97C7C12824901E449DC60DFA9D24DD8A45AD83A9673B6B92DDA
8293D7C7C9A4857B08D2F34ACFEA4F96AB8D60FE0C2C25A9649FD0A0C09F19E9
603A39604D8C070ADE5E7B9E6811507B187A89800B4A797AF890FCFDACC4BFFA
1C3842C02E3D1C41FD465582C90A76DC26554B05BED01C67608F9C515E845F74
ED4584364CB4C88C22050044E0A9AE1833F6477D810CE9F651F471EBF2D6D311
E651019862D8E67EDFB1998A3745BD1D3B657A9C9CB7300AB8447C0698B471A1
9464E59CFC445EE218E0DEAB363232178EE54A591F924C3DAFDD3447C0F857B3
9E6B759E52170D72217D25FFBCD8E10C1CB4DA21D41AB7AF3938CA066CC3AF0F
A3F77C7BB27181B612AFD8A7A7C2596DCA5DF8334C61F2BD81CB6A1D0F7AD8C5
DF833592C61E0EF9CA994B84CD2B3148BF61E75D64A0AA2F2BBABCB6F7FD1FAD
37453D082BA9BED16EB8B004D585E71B5D09822A5FDB3D9F027CC73A37FB6B55
F246F34575244D336D7EFE4F3264DE906B4382591A5CFB2F5BFF7468077D35A1
C99A87D5A9C5E93D898F57080A13826E716F224C1CFC32ABE7325F2ADA046B42
F3B25EB4DA42A1F667908A15BA50CCA5EB2C12B26A2295E900429096982DD076
0EC8D147FEF4EA03585D33CC7AA8E362F6CD858E2009D471A5F684CE0CCDA980
5BEAD95EB7157F7391E8AA0E5626D51F3DECB84141EA610589DFD3D1DC6332E8
E1D34A74BD2050A48869A4C1047A27ACD03887EC971700B99778F368D7346137
6993193033D9926E040925363A45C8BD1338CC72105137C549963612B2BC8E8C
F26B5DF34B19D107AA67E090E36AC0BB7DE051B9195E352C9614B8D0057E9A54
6DB166F44437D3CE2223F67C3E7180361E50B0F27265C6732A051519735FE5AA
CFE82D642CFDA68E1E49F7B8B51833EA220D844B0BFA6A9DC950870C1B2177BA
3EA8D929FC6799CB42438AE58DC7EAD1AFDED1963DFF12CDDAA3A66508BF9185
812386B8A53BD19F5608CC3AEAB925D84EEA0172F5007E477A7DD894FBE9B89D
4D98BDC778CB49C383BB743F3F0217A71CC80EA7569BA37F8FADE8527562E17F
B6DE14F1B9FE5A6ECFE00C7E72F7FA07B53524B6F08BA8CF13514931A751CD11
BBD6470360B35CACAE9183F3C667D0BE39969DAF55A0EAC0A168ABCDDF22D078
B9AF3E2EC4E52691868237CC7715E344DC2E6767C9393DBE3A44133C02618A30
5CCCE9F1B93459D8E20A30742D4CDEB68D1CE32314823F2D25AC8BA7181572A1
8198216BA6E61757A87A2EDC0DC105DE80A6DBDAAFFA71E7E85A870AF3CD1C0F
36AA7CFA59867F3194C450FA6D98ED5B4FD5B65F3627EE1980E81EBAEC9EF01C
3D484F2210219B21093C3C28747F7746A70B5E92FC7833FD55963D9A5A2A9043
30F3E8A58E6D774FDA5A1C8648B6553103434938DF55285F2A6BE1CC06F81BB8
5B341546CB334D7D4D96F128285B627BE31FE62B118FAC58815EF498CC08EF27
5852A40473BC9A7A298CBED512E65E5DE66F397D1F4DF9578FACAD9BAA3B94FC
FCE439E1D556FD927A96B428174C2AE8DA65D8ABE56C59AEC42A052251CAFEDA
D86A70EA69CE2D7E98D7587BCA1C4DB079A3F3E33CB80756E804B66B2D8FB2BA
8062C2661454FB051B3B46B1777952C00A9E32EA09E42C5A9FE443CD77D1BBDA
325E6D0EFD89F0106D51BF9061766570F30918579821D8B34683B08F8E15AC95
79AA78CD98834EB325392DD3720C58773A6EA194348B76552C59536543E96712
7FC4EAFD1534C9E51EA5A055EE921560E15AD85960872E5B9339A26341AA5AC2
DCE22EDFE10642B636062AF6C60FE4690B2C5C2CCAC152BACF51EA9F8BEA0993
76D16F0B79872A45B6888C80AAFE11CAF1A2456A87125569567BFFACA6916801
BA31AEBCB7C3A2EA6A81137558F5F1535AC2B4A7C80A74E20204EF471792D3D9
B333E762B615FE684A5703864698E17935943745D9DF4043CF7CBC3208EB294B
E601D7C3C9C1529A95A86CB78998242544C94A47AE62DD87E1C59075B9BDCEFC
4B6538B585C1058128A398701580AEBF749E232EFEF2F1914B59A22A6CB5DED5
F8EDD7A325CC8272BFDD261B251234BD743C1540E4411E66A7BA0AD5633645F3
87050584D5F7F76C7CD311312BC41B197AE75D831E3FBB33202B77FB576EBEB8
F7D74567BA060FD920B75DFC5FFFCFC0CBE14AA875290527682D423E997B5E34
39AF79CA6D57D4D1349EAC4014913CEB939CCC569C7C80DAF0896DA1C33991ED
E4D18E72BA2B419F6510F6E87E3B4D75D8488BEE1127217F1CD8D5484109BAFC
C4B077AA7B22A73C4C0EBA9D6228C99DA3DD90A7593CB5867571829923D0CCEC
B4196BD0714CF5A7732F17E0E69D07708833DF7B4E2409FB4A3F08A444DF910A
317AD857643799A8C55EE327613482019F6D9238E282D630FA17EDC57D407C1F
2BA0A61601A0087293978F37635FFA3F2AF8438C92BD068D5CD17BDFF6460675
55AF08210FF467D722B030970366750F57F27A800E807CB8E40CD6C4FA6963D2
E2B435D357B7E2E4A571AE5740D9C56B5B1962D7BAFE4EE122CD210916D742D6
41A35FFF40CB13055D8BA926CC6021C05CC9FE8D9AD16DA8EDD8053CB5EB306B
7136B2A31BCA8038DDE9276F66299672E9A253735C599798FFD007DFC1246C36
6F0370BABCB9AE3A37A38AAD71580F9B0DCD775A927F211F13B1B212AC086F13
956D0BF90C5B09767FCD09BDFFC45D9AC34D49045ECB9FA40CDF08530859A705
8331166D3B57141711E89B4CF41DAB267AEB49
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
<<<<<<< HEAD
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD4030A2E0FDCCBD30949E58857ECD00A27739DD3991
F3B929FFCFE761DFBF4CC6E06F7F4EA2BA9C2AD6237E1396BC71BAE2404B0737
1FD2B9383AB4333598622058719CF3AB098AFB30AEDCFE4981FB49F42BE5D89A
4DC7B40E205941151073718B854A1AD40E46E70266A52594B9EC99A79ADCAA91
A185F605F69564AC61ADA8940DB8BDFC235A06DC5AB286968D25CB445DFE6FE9
8B6C06EAAA8699C5C08CBBD2F49235D3B569B9D184D379B8DCADBDD3AA864CA6
9C3419C4ABEBEFC92A6A7F9C90922BEE5C4554CE3F46845EC0701580586B4F7A
8548CB8A6E354298CDE742FA35CC15DAF53D7CE95B3416B7FC8D74A03CCDF062
A15EDA17E3554B1CF06506BD519B5CFD67F9E8DF3704911AF8CA33D33AD54486
E582D03A623F960D9C02B69C7DDFF32643A426FA4BD13C0DC26DBBCCD775300C
537E987C3B9970C3501958333399C486F0A502CF039B2E2C3B132F539FC789B1
A6222191018B1576F1EE05613B60ABFDA4A719D2F7631D1EDC0ABB0F717EE910
16A86640956A756DF27103358DE01240A7A90B0CEB4C3B413518A32DD464B1CD
13DCA3D3856CDBBECBAFD36746FB849EDF608FEB9DB06C0B3A7AD3ED8DB60FEE
053F28D9EC7018D01FC2588CE969BC26EC7472730BD28F69E4200C0A8280A846
BF4BD33B8AB62B04FD1642EBD4BF577523EED6BBC32C35BA48C117F1B375EDCA
2422CB5DA1604407037491CAAA05512A48B1F1107E7E89219FC5B0A2AFEE0F7A
321DEDF57EE52D47ED5639C50CE97679BB3B57754F4A7E6616201E67D4328839
6F95A8BDAFD293E393B6142EFB42720A6635FBFE14FA20A842097AC3DE3C295F
7D01C6C9117757D6706666B9DBE556633552ED68791EE46E9417A5AB168F04BA
5533169AC95CA775AC0AE711D731995A03667DB6F5F4AF835B305DFD80650CCE
1A8B7428A32CCE366BEC18052ECB007B2A0FE58439095C832D10D39FC743553F
C5B706A844568409F83B207DECEE6338E9D878011FC681DFC0F619EBE3487B5F
2D2250DA1AF7FEC6165AD15E5DF413AFBBBB2C685C9C73787BC3CA9F35790162
AEEE229778BA2929C14132C8134B02BD625CF85C925F874B7FF983996A4A371D
204B121E542D78B1A2981AECB895AFA702551032B85EF8B0534CD8D7C0E8860A
F3ED0483F1B7C7C8A69B8D05860BA83C38B1FF56276C4884C57CECE0ABE4B485
389C38395AF41CA5DF49145D8429ECCDBCFCFC951E6DEA92EDE27C95DF5B804D
8A4F8F9CDFE02619119EF1734E9B19AC705E57B6E9B01D8114D2E7E88B70A0BE
F781B99034DF5E9AA3860AE8BDB093ECBA8F8BEFBDE3A27DE9D997D3D5BB6CF8
9B0E23FB004DE0DFBDFAAB3E000C0509D12252AE4331BF4FA9B9EA9B942C23C5
6811234E197E2891D97A4D53AD820F8575BCE0E11A8EB674A93FE16CB400549C
EFB065A60D0BEAFD5EC8F3C5432672768641B86F3E0D1E499B77A33652A0D66D
BD9FCD643A0094FB9ED0B040EFD6792569CD4D036E9C67C91EFA1445AD4C6FB2
CAD0A821166CC7324117C0322B239D54622F2528C6BC2307B4703FAE7F9E
=======
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6244A15945205
661D1604BF43CC75C29272D8D1ECA5A32CDF25668E5F3BA6E63C2FBE2C035779
D124604AA59F973DB3B49CCE64613E527459C4AE181007AC7E0C796555994EB5
B75BFC6C2916C5361066A73E433A347CFF70DD6069227D9180758CB5E40FAD2B
D0E4A563D1C5E94BAC3B278AAE457BE71903E55F76FA4EC3273507A4528B2630
3C6F314EC6B11679E916AABD5C467828ECBA2D7EA5F3D1B1B84960F0FB847AB8
7709AAD4FCC3EE8BCC646F393724215F535FE991920686F6574C85668D17B5DE
1B8D5A413287D9E221BF6768D98EB16447046EEF2AE810351B7FCD69EE2BF546
9670262EAA67DCB9DC94301EA34C3872A7A145184E7661CBC5B862753826C5EB
56EC4F00CB76C6BDBF3850A455A4BF834D6D93399D380FA3A3EB3B1952DBD67D
F83AA89AFC3864A237BC0486514F6952862F207136E1E16B41794BC1700E8AC2
E1EE384B0F6907DA0232BF5153AD6573431B2BBE0E8478945588437D4BFF6C26
513246E002EBD38F0DB5BD23B4507496C95A57D76C2C39A36962393D1001A05D
4C79BF703F773E575A74386DEBBE440250B12E20239252CADD4C97377315695C
92C8F3C9B0075FAA6FE3D21E5C1928F4167F45530C20E87E1731054F5810B772
FE37524027FB1807E2EBB95CBA442A0DCAEFA2A20B54EE054AE15F26A7304A9A
97B5EFA85447F14127DCB7495134C584257D260AB9E6C130121D5A26A64FE348
622C6CDA9FAC1A26DBF07A94A68352CD22E77594549E5810ED4B2A01419CC245
01D71850C81E31DC424E008D3648C230C8DAE6E410E5AF7FE664D88B56E6F9CE
AE61FBB850C398377A8B3874C41CC2B831FAC8B35A70EB34886F37C2D18213DB
1193B3630A4587FF778F661590642D1B53CB86D761B7300605B9B8E5F686536D
2C586421D462D8286E23CEF0C8D2784D9E8AA3E3A3438942BE3BF6DF3D26F87E
2C3F2A4E5099310672F072B8C476C66585599E630ABB22DD1B68A0A278E02684
B907CEF368DD836DE735989C7E41FA568BA1FE13F9FDB3FD8B52553EC9982939
7C3D4B3BC97F1CC3EEFB3E577C48B5548AF393B0C4A1D071EAC263297A33CDD9
08F8CE2CFC49E0F8D3429709776F04C4D5E4D04DAEBF5C475C7C3EB2E8905E3F
A70B901CD5D2C49144778CFFF1D5B63E099D42827690BF7B6E45B4F8674A6FA2
70F14B4944F271552581BC096D8D56C91A11176D6BB480D2293B26F8ACEAAEEE
0AC1EDF4DC2F53275011EE991AA96DDF4973B21AC9F5DD453B1D3838591BD4A0
179BDDE6524896DC8452D0F3C5AF89D64754D9F00DB8B4F16252C727664931A7
48FC9DED39C458A8EB2F78739F2B7CF1304C63ADE304189A993413F74081530F
BDA87E66F83CB77C65736CF4DE904FB5AE36286FC74158421FBD893FFF42CE5D
0AAB28D29BA62C2BE02FC7C9FCC92DBBD299C662F932D9ACE5DB35BEA759F586
AD85B58DA259E02F602F99F4E8A352091004AECA34251C99D03AC73A4BCA1399
C9CD243FA385624CD426256168377FBB58A04CCF5560C9BC0F1062E5F9BB6238
01E557EA13A7D645ED0050BF55E6ACA05B0254162EED97452E38D459A241F1D7
9D4958D052E0B8752B7DA94D3A727C8B2E92C0A1800E4FEE7E5C815A19621A9B
C5B78A85351DA764DB623D1E0A59B9FE47D7D4D67C241D2F112342E63BE84EAA
60FF422B21DD2A015EAB861548E58A7CB4A08F719102D33FC44E4F60F1E032C3
3BD9D55B8CC6FE268840400BDEC78CB30A2F939E9171A627CECEEFD28947BC07
BBC931938F74E26E1F6BF3ADB802D43F883E1C794B9D3EE9AF8A5CD10A347EC5
5BE6FB153E5941561360B0D964ECFE23A3DF7E1768BD8B1AD14D60862AAB2F2A
A9A9B7F03F530456D6A100A97163D6F8D2701298CC9F26934459852BFEF01A57
1D826692658F3023B8672BC0214CB434253365225052ECAC87214A1B9924DE9E
DDB672E5CF64E5F89CA22929839F4608CDCEEDD003C61EF73480A4CBA019D4C4
866C81D96AE6CC86E8B493367C1BAB3BC0C3405741CAD569BF328E0BE0453B6A
0E16138F3FFF582E2F392CBA996F6090245BE7A3DC5CB4A60C72B62704A385C8
73610EC96396686444F42CCF062A9508DB8C7B18CCCAA254B8B7ED72BD5CF463
86D697CF269F8FA847C598D709437900F3DC41D8E4164972B8411549970EAB31
12D76DC22B0D67B53417FE354CBED3ADC85492F3C0ECD7FD212BE6EDEB03EC82
95C6EAC255B7A9BFA6EF315B2134E232E2A25A7366BEC1FBF6FD17063F8E6D4D
1A8F77199D09D119025628DC8DDC2993BAA42F5167E18C5ED22D7FF5488A592C
A561CAC036EA09F5A37A406F6CB12759325B3FF74AB96D945E03B4FBD81C058B
24A7419C27BBEF3D9E3441F3D33CB826CDB1D0C22608F82BE73E174E038C843F
442B955D4146107D58A6F9DF8D9DE97FAC2C11CCDA14A249DCC5CC22C1896815
8A90A4F9716D2AD06EA367817A2F0421C19C1A0BB0DCAB51BEBC5136707A1C4E
0A3971B229E622C730F92C1D4300196B2DF84A5F1A7416D078EC791A728C4B02
6BACD9E4E8FD28F0F6394AE9600B5F50A79A7CF385019F6F4181EEB662967C70
7F71C714CA35F5A50ECADE502B51645DAAD0EF547F2F0EA7D5BBADF3C36E475D
EA0D4A6FEAD30B68D6F3C8F02263F907A972A1CDF260FE1B5B0C3ED86C33023F
AFFD116479101CC14DBE6E2CA2E438A8325D540E6FCF15990045342B412FD244
6EF4B61327C29BD671E7F2B4C396ACBB6543102A83DA878F16B204305FA02853
200453B136172FA9828E503D2F57B46AD74E1B4F3272A53C56CEF266D8FE5E45
7D86A631394694F6D6D253A7A865C511C142E150F01D788D1ACDDCC0E458A1E0
46750095D3C05627CCD2DA2564A3677733B0AAF666E2942CA5BE2CB414BAF515
62E9CED2E2CAEC8220232F9DD0BC10CE059D9EEA4E0BEDD3A439685EF36178C2
37CF1C18ED35625DC4673CC533E5F105DEA8C8442D4E478AA3D437C45F6B5A57
EDCC325DC59C1F49189EBB0F8494F935D1EB57DA91633F75EC2728775EB0F459
42130C142E8F305BCEAC7F163E4787C201C7921482D22B0CCE2394606AA81E95
CC41F297E02F17A15B71C1C35B2E6D4B8DB2A5876730E95DFCC9F322EB729587
1B03010C44859E804060AA3F81B88EB26D0972526E4FBC0D1651AD53A869D12B
42FBA91C5CACF0F953F6D80D59C8D94FF375323DC33F857E44E926160EA9CE56
B63F80FBEB8AFC789AAA0F0A88E1575CC00DE683DE30131DE3BF092440D811F9
B4D7BBE8E50F83FD51DE9A737812431CB458331927F0F2D01A11F87744386E67
53D766BE26EFF8C13ACDD6F2CD681FA601D7A038845E32183888F0D105461BE5
5049EBE910D40112F720BA26D9CECB6FD37B941891C077CF6FA565BEF70EB11A
3F60895B1F4D80E65959F7D09958177E5D3E3BE5C1AA54BBF861BA54770FFD6C
1EE19678DDA01ADFE7EB5B27A2BE8270213C98B766D5671738A38B08F6E820FC
8EA37ECF6B0324E566D88B20E4336CF2728B1483DCD260E5F7AC46B67DCCB232
37D35E0D211A0ED09DB145D6D5D8A6A4EC8BBAF1A853894F63271B0089B0A162
E6F08E05D84EC6426212E660A9DCC480C83EC65F3D3F8307391FF78C590ABE1B
7476C8EF3F6AD8A98B9D767B6813CFF75B41A2EAE0A606363BBFD516BD2DFA3C
E070E9D39615D40273EFCD0212EC9F125FE7B899D6266B74DFA5710BFB9E71F3
F8C55218B542B3DB6CB30AB8402CCFCCCC051640B9684A45A14D236E68C5A649
FE9BA227ADE9FFB4EEC4221D66EA105F0934B2F6677D09C392CC61CD6E5C074C
67
>>>>>>> 9041300ec0e250fdd22e21e6f958f182424e0b9f
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
<<<<<<< HEAD
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC196EF
729BB5BF404B88E88E169AA5732CD54207DA55A47B3855826396F4104A49A022
808893BADF86EA656640B9FD8DD7D1F131D312C2CF747D35FB85DE4C4B520EDF
15AFFCA053668051E605E96825738C4996CB3769A3BF11CA27B0493E70E97109
73F1F62A3782C23491F21AAA616D7A24F1824B59C686B7EEE397F0F3F04FE336
51BCC72899997EDC90E99C505A5585D4DE3A360204906947872A643372038F2E
13082839CB2A701F4C8906F3E3D6EF8045731E29DA6C9CD60F54AB0777483BF8
8A04EEFDC54E8F01BB78C57A738B775B98AAF7E932C58201EBF9A373623063D1
119403A832976D73D17591462C31F929F554BF05C909C417BFA6E1A72D89633B
0FDA064321595E05393598A870C13DBCE520C20E6591B1F9A12B73D713A4F471
9E66EE3C64292C209A832AF504B1BCEFB146B2C8C75483D7F515232086F5B242
F4576A2BDC7EAD2E0CF1B9195E0402C187AA699EA5DDA7F8D68782E329005CAE
B465B2B4A7CF342DB612D28E045A6240DF518DEB9AC56B94438148A1A9EC704E
7CD10F5703A946B61C526ADBF636B4F60DC8FF426BCCDE39947EE38E632A04A1
4A7EA94BEA9964127BC951DB04055489DBA72C24342D68B5C88E50F6254E6A4D
3B38558C6287C81A6FCAD90C56843028E2C8B6D05AA6861E3ABED84D6761ACED
E777F2D3BBEDA43DD2ECA72702A4357D241AA942314ED22A79084B9EEC298FF2
3590730BEC61ED49BDEF56662CCCB4D4BDE57D58BDBDF02AA83F6F0E433DE8B1
B9AB60D5D6CB69C04D69C37DF1DA442A342077AA9EBCEDA2BC978A7C055068C5
03A263CCB9596205BD11CDF65BD04EFA6756E7933F46521981284F0B49C41C0B
23DE5EE2C86E167E0B9E5BAAC206CE2D1A98DA9D17A20F6DC3C0D9585475BAFB
B0C2CC97274C6E5C643E53E9B1AF63287F73E3D78ADBFAD028161A0159472A88
111136A2C2ED57E1171A8DF334D2055D2D23C4D8576DE52C139D35475111D080
86D2DB01C9277A18FA3EF47B6B635DA12B2355A2BEFE2F1B71DEAB80DD43345E
BE79E2C76A183FD4F45E8EF6FCC11B2FF946C98D4809C085AC2D60FA355737E8
45C7FF01A6AD7B9D4FFC87B6446696282EDD1E6883F642BD304D2D1798BA41D4
F91213B6531F449C11B8F8644A15F3E85D8906BE2DEC1EAFE2DC8E4D91AE9D40
9500069AD6C141AB6E6A242DF32F60ABA700263C57C321BB014B0E9B5C6D595B
0CBD001A5A448EB4AEBA392C38699BCA1C0F6F3F7530F39920D53F04F396CE83
F0549A6AA9908ACE016F1773387D9DB1FF355411F603E236D6B1F082381154C7
4FC2CEDF0770869C51E252D15FAE0B235FB51680F8DF376B4E8E191E5EDBA636
8ED368696A7A76E746B3D70F4701AFA1519ACC89F74EECFA247153807E3CC27B
5FE08342FB4FA5F8C05966C69A3EBB52D9D6245D35B8FE7467AE82A4FC48B89B
2CB0F518F452B5CE1CBE762A1B066004D6974A3536B2CB4906ABC9C1EF70953E
83FA7C8C103E8EE58DBAE6D670F5CF0662976F7DD974C9989DCCB306FCB523E3
07D6F3E9A0560C188EAADF0DF449FB9D09F917E5CA703C7E92E30CB2CD741475
AE26EEDF1FA520CB01BFB6C1B68B57110505BF29411E0A908DB4E1BCAEF75C34
B1C0A67F447CDF00FF97794144F034CFF128597D8D9F48DCEFD046BEB6B55891
26EA294A6A813E8B116475D4DC435EE31256647FB9E2AB66765834208142C0B9
108FB9A6030063C3D390A2674066DBAD1A9C3C1FFEF085A2242A42A78E635E57
68203B733EBBC6F6711C250A7C347E177482198213D954CA0924AFE26330C570
0ED001146D3B89C5E9E908ED28166E5FC3BCE52C110332C24BC2D66EDD81132E
44128EE1BE623EDD5DA9A6E5217C0F69D4D0C42D85063F79EE76B68F6328A6F7
BBAE5FE0DE2D8839376A78573E72A1C1DD7E5A0E30F5090C322E4F16D93DAAAE
4EBE49554A55C93CB29051999282459697734840F8BD0B8A1CBA7B64E68CD0F5
8CE1D60E5891AB5BA93B1B72117B368C84661E8D470C8FCECF87E141E181D826
EA07BEEB69D1D202871BC2B15EEE8E1AD13E7308928E731360D641DACEFB5C76
812DDDFFA60953E618FF546613BF4FE23DFDA51D40DD9BF5DDD3CB175F3E1E61
2CDE864A177B0724F860C76601359426E7A7D188067DAFD599B78545A1AA4E33
EF3F14EDECCFD82F9975D8975DDCE8BCEF94344ACE8D6A425146C6A163680BFD
0032E9FA43C917D7E27506694ADD92C0936AF0B8A1183EDB32EF3E7EB4A72707
B9A257CEFDAA038197481474D8E4AA5E2CA3566EEB4CAEBB04D578FAD4737E6D
19987C190302B590568214515AFE8FC8635A09EEA2CB69139B143D5E6DB3C762
AC7FCFDA15BDFB2EDF7D6C6879100E7045B930267F0EEA9BE820E13291132AEA
C6E66322EE907D1C3FF4A6562E2AC409F8A6677FCE8405261AA96C0193B195DE
A33659D1723F744EE402603403B70329CBC2AC2753316F976AB67B923D5B4BC7
77A6FABBE669F7E7AF2D47BA0200B2CEE91B535F5668808E0C31A589D0764E13
8B8A76AC6C4A8FFECCA09AE8210DC0157687AB090CCE8249E41DC16DA43F79D4
C8CE6C8C9F8C6B7FDF17CFA1598DEFC33624D698D3FA83EDC6E25404108B39E8
D478C3E6CE58D9397D04459E0FD7CA88C1E4B0F06281C06C2221D0C892D2F9B6
DDBFDE36956CC1123445C8D76D7632947C4AB3AF767747DFCE7C298387EA5CFC
4363CF8FFFF663F42648572E9C5DEC65F147D6F231B461E247B679505797A536
2530BC0A0C34E716E9EA84AB5AC55D031A2A37B656F875EF932074325629DBE7
E171D1CAF50171AA18F27DF0CC841181EB23772FC943927B89D650F61F6EF434
641E74D5443843F1A6D6B49948E56F8497C8889F77AA9310C94B3C32142682C8
F71D1B3453F68A2B34528E801DF24B4CA279CA5CCDC91C186795BEDABC7C4753
2B4B80F77BF6EE43CFD08C92E2545C91DD9C1EAE6D72382DE07F7BB28A643B5D
8309C7B00135C817B691211D48DFB521FD1536BA490E6C308657D62DC3F52AD6
E5137A48366EBDDC6F6FFC912CC341AFADA4F9CD3A1B4F8868FE1432B9B23023
0DF2369ACF7EE9C839C0556F46BF2E9AB20ECEBAB8C31E1E6254064A83F6DE23
CBE6A03C7594AC8F195038907F9EB5166E9A4BA55D2FFF847B152A0627A65E7D
DF4D154B5C899CA359A5F1FE7DCF86D9EF066DBE5DB12516816675EF30A96581
95593A9B4BE9CD3BCEF6BF04D3BA21141A5372D0B308D38734640038F287AF76
6B222EB6B974334DEB94DAC8D2CC04F26563E5AB89B61B65BB1C65AFEA48DAF2
E9DCBBDCC5A6E28C9C575A27CD28508B5505806138BF547EF45B3D8111AE4E0C
BFCF1D5B4E085F452D3B835ABC68EE4F0A91D2B720BB2C5A1C9673DF7717CD54
FB14E5CEAD55C5F2EC61150D2E80B53DC655BBDFA80B44E7B86A5F864C31CEB2
ABD660D2B3FE385DB4489EA39B1945336E0989E393012334DB11EFB702622660
3DA37D8D9291E25AF279829F8D47B4FD36D030FB2B0EFDD9A57200A82974EAF0
D36C036ABACF9C909449BDD74166B19FB2AED6D1F283CAA452FAE46DCDAF810E
2ED6E0D41E963C93AE5F9D12A06C6E503571AFB800E4885506CC27B03B0C1D81
101F8CA382D2869FCFFF226C07B9A03B778AEF62F8FE9C75C0F505BE626F1497
75B107B57B80116C42EE5E92E750C933C4D590DCC11AE93962D3CA8EAEC791A1
6CA42672FC810D86604C884C3CF91BBA36B764E0214B7B8FF6F34245C0D36553
7257E124AA2A73655E4C65606809E80C7D729B8E59DF2E6F9C3F2F251C51CE2F
E02D8A3FA89D55FC9F79C50DF812D8CF9F07F433F517BAA1247A4E1119E445EE
3720261CAB35EC79918526A823A88C7E731F6488376F18F189F37B0F7719413A
5FBB4A26DB72520237908C7C39328EC6C9F530147EE690B73CC4BB0E3FED6D70
2909E052F85814A7900F9310E0B9CFF690D165EE08D048B30C8B4288CD98CCDE
66158E72259BB4F132138637D0045533F78E6DD3CAF0134F9ECEBBE4961FC6CE
8ADE72EDA59CC7E51DD731B95230AF5F63754F0AB3108004C5F582E61CD6EB07
4A252C92FC7EAF6146B78DFC7C1B1C7C11AC3D9F41DEF5AB3CED744510D420F5
0A612B0127BA5B48EAA47D728E20874E5FCFE9790068FFF31F9259889DCD98E3
CBDC3F8B28C6C8856CAF9E008C54E6E08F620F1389066FD2CCE6655C435573A3
36821711979AB94113523B7ECA4C5713611F29329D0AAA96C9A0463E8DE12F07
65A5F04B81A7F79C2987AFA3D79CC283F6EB8B0E453EBD51E3D79E583E7F3FF7
9363C718714A38B27B7953DE2DB2D70B70DF96ADD5DC7BB70062AAFA2C6917D2
317510C4A3682AF19051D8315ED5DEA48697AC0D7859734D3A37CA488120F1FC
D799296E8B1135B5533C1B6184709C109AB7CD281A9890FC96DB4053BFD58D62
FF2BD6690D125DC8455ADFE0E68E46A36B25AB0AA8A19379A8E961610B8CD09E
F0E5AA56A0BE274A29B801292046F4FD4C8A859260017F3C649302CB7A3959BC
A5D4C44C01FB5C8691FE6DFCBB6CFD703936CED353D90032E041C6274D5D9859
7D27EB54D4F9540252ACA2A5D86EF35FF4C535EC21EDFFA8481A517151DC2DA2
35D077E43A03FA6ED9D3947EC669D93013C6531E961108D7FDD0C8BBE3288869
03F78448B4944347CF0A6409CD43A8A46819A8980A2806CDF38A4DDA476DF925
BD87FE3093EB2E52F80B4E7B1FD5C9563D14415F9523811642497B4F7B7F5F8C
84057BCD7AF8D078C6DEE37CFA5017407440678D4FCCDFF0A97A0A75FFB5B85A
17080406A449FECB5CA32CDBBD212BF91987FE1D57E0AECB5CCF9B05D994F866
9479F2886566D83DBB4FF65BB26D7B23DE0CB4E49E7AB04E5412432E63CCC830
DC2A2784F5FE400A3C604F788D56E2906C8507F7B777250DF742DFBF367228E4
74EB5FEA1FB0FF6C3C29469B119A49BF7A01EF4437E0C96AE681CDF61433C2E5
3282250D1FBFF094A84C349C1484019D48F9A9C88DF4EEF53D4B37768EC68C3C
426ADBC07B60750CB21C58DCA897A70D9784265F75C3CA0E5BDCA7F73A5712FE
966EFF18B3F5096DEA727217205BAB62A754677BF14534A267EE165BCAB68EDE
CF2FF2CE927C6C3EF133D13E45F1278F02FBE9A33F4183FE46AC7E8C4CC16762
B636C4AAD171E7578B8F5913032815B94E43BB05AF6A167350E76BDCEBA951B6
1B1CF29E35FB629175FCCDC97E0D398BBA3AC53960E0E660E923BB264B32A85B
6F7B012D1095EBBFCEA70CE2ADC55E71B7EC0FF16021053CCE3B4C7E5A5D474C
FA76D327DFB49DE7C2AF76AFA3937EBAEC6C8738A325DE7FA1B98DBCEF88E17E
A071867AB9719CB2EEA78ADD566EE456055CA459082124144B38FA58D248B9C7
4B287D3CC2267E8D45CA4D487391EC59CACFB20EA73512ECF1D0A1CD4E4DBB17
88105779FE83C6FB5810C1C9D914F1AA1B95009F3DAF39A4358602215C8BA4DF
A1E78D628EE89246AE8FDC0E26F69286B37051C9DC26F58BDA3F0EE08E40BAA0
6214D44A6D6B8367ED47BB19E437EE6075EC4C589156F972995919FB07F61662
CF34A01483FDCFA16728F82E270B4113B69D68110DE1C5A71DEB09F01DD01ADE
3FFD6C80B59F3F1355683A3A2A620538C7FD7611F7A3A0E79395450EC793056E
6AF0B51411DF89C37ECF7832A3F574238B64C40DB2B818ACE28439D8929A0D3E
9D6D5E7777F5AFECA012CF09119B9FAA05FAE3959F4BF583E867819B35901B14
599BB867954C80F1322DA226E7148B6FE6345F6AEF04591317688C32F9E80536
F92BEDBE6E472E17619247F178B1CAFE9F25B4769011DDB69E2F753F83925E42
F67DD81A7AA5AA68C55125460938A338EDF180B92AC6240B865E25B0FA38A68E
390B218F2FD37BE00E9414A6E6539077FE6E8FB516E92F8548A1626146BF30C2
2A97B8996F191592728862464927EB61D979ACA1DABD19A1434C5B80B2ECC989
6DFC3463DAF8AE34D35F2F829CB0F41AC3F665B509F4DA6301FD3D6E6C5F3EB9
DECD1ACCFC0FE867F318970D1A34D80C1266376865AEC6F6F55E6AA672971437
2E7752972C51660FFA663695FB86944A52F73C83FC86D04400511371A758C6A7
DA7BFE2D212DD13CD0F0FE117873740BB759B2BD8C180322714B666A95E5759A
7F099073819A2F4588B277B5C2018FE448AE37F7A497FDA0B2660E19CE1D385B
516259B03A12C797EB080849A37C051BFBFF136195CF2EBAD7E2822DCCCD623D
AD05221800AD4009E8B9A79DAB7E6545BDB237CB8B4142046DAE98251FDAAA83
ACABB712192FB2D672D2DB9816C594583460DD10B7400DC66F796FE6DB38717B
9C5804C21AF93B4DCC5AA13DB4347FBADD4AC09EE3349E03DC84FE2A247BE8D4
DC19A847CD976FBAC42FA518C692D8680E84BC3D9D1B386AC93E98DFFCC5A009
F80221A686377A8D401B8BD6AA84F1AD7EF5C43F3D8A1CE6C6ABB994641B9327
8143640886537EB58193DF5076BFF3771003BC67EC425ED59C738ECA2BC14228
0F38B2EB4076D0F25BA6E6D37EDEA1AA8A62DE4861F01712F66E26DBAD1CF686
454CB2D6BE17BFA3080AFDEE641C9F45CCFFF1A27FC9300C8BE192CD1C711966
D374976B03CD9DA7B6B6A90887478D3ECE256B2DEDA5199E4706E45D6731EBD5
4868D26DE4DBA1F46EB647DBA90973B6C3AFDE2D98C23BD6519D2697CBAF94AC
93DFFDDCDC73BB171E86967BE111377B6D1443CC4A7E53D8DCE6B7D27D4C8F4D
0DA37AA97E8B3CF116778E940304F56BC7063254A448FEC1CAD21596C10CF37C
184721461E5CCAB7E47AAAD0162681E18494C14687EC60A9CC3C4DB6217AABC7
1CA663BFA725F7981779EDF6FFAFCA82A959664E210CDF0AF29B64998F4DAE4D
881830CBDBD43C5A9E9B49EAF3F74B5815F4A1013DC30E42361FB8CF985ECA8D
99F9CD2E6EF428CFC137CFDA487CBF3147020C213EF733817AEADF751F0BDDA4
7A5DF04D96891594496482BE4CB0AD1C5CA107E288C1B0FE493C140522E65439
90DB8F92DAC92BA7715B8F40DC933B373A5BE99F52DEA3BE57E2A38BE4572C8B
C351F682A20B81623E819BB5E32E4BA12EF9FC8AB4B5A3E15E0B2CE122674E4F
20CBEB38161C311E1EC80D9DEBF2E4BBC09100B75A2541D88DF93A0D3DF62F1E
D794C209EB7D2259379402C8BD2122F552ADD919463A2DC9F8A41E101A22D56F
6D8798ADC98EAD90AE62A5790FD207B45E3C757FCEF6C1DC26193F03183E2F35
8BADED712C1A5F598D2168D926804DB4D11AA03934474F51C2D63CB3D88B3513
1776C9B68E54034E905C81ED248069B0C9D9516A2502C37A434A9BA530B55614
DF1935511B30A2D238AA7EE15A00A8C6DB294C9E6E183F4FDC1891EF4C3B1E88
CF9A5C0CFC844EBF69E4CAB8B427F757438B23FD5E1908E6128926316E8B9850
0FFE82B8EAD68AC5EF7938B6A0327F45F27E7B572AF46CDF5822AA993D914914
B50C84B23BDF3EBAA4935FD815A3F41A52AD8A869ABA9384594B9737DE7896A4
5BF3120B1B2B59AED530BB27C2B8EAC4FD716B765D675CEB1A5EE171618668FA
7F26432FBC49236A4F77FECC14D3FFE3B573188C12726B973CAB8B8A93A20B1E
A1094871BE0320D9CCD4205DDB33AF1E63B84DFDFC1774AD12F1091F18F2226D
19A2736702F0FFE44C3D670691045F365D95C26FF67A33885017D5BC25A0803F
7F8F507B02F661881AA3C90CEDBD08284122E3CA45346889483823C7A32F45DB
68381E9B967CC3E44AA1EA09B9E9429F38399B9E36B53347FB9D5139399393B6
35857BCFCFE61E1820DED88EC38A54193461B2F03B697BB3D3F3F1A3C36D2E49
FCFC7925F719CC78F6515A4359FD9A2F9CC9CC7BB607510B1BCDAAB122209AA5
176C68CB5E7C2B5E5432F1549F89E11A9BF0B4AEFDECDC8675A8D23206617653
EFAA29AF8842F70F891256770F0A4F21E34F64698A88DAB932C51BEC77807E3E
D257417BCCB0DC109B02A8062602A1146FB20CBB675AE3D880E60C7F1B4FAB93
9D03BDABCB41874FD22DBAA350C7246D78151D96158C22CBE1CCE72A69210521
7290C0C0EA50D9956C92267528C05EBCCF042DC04A550BF0C421846BA7E9B8C9
F41DE35DD99F8D30E570734FF1B01DACB51BDAD45965CB8D95E2B1F585307E00
32F80711BB4E42D47CF14F4D9A56C42DF1C43A5A3A736754BC6622F1336CEC41
8A9B80BDEB45D3CEF7725903B99182AC9FF599D724C5EE670095721CFD62D4E3
93CD470EC5752C0AA77A62317F8D5C07F4A2FABB7AF3197934573ED47E8D2F31
2E86BB5895EEC9C724ADBB783079452CB4423D6B8C69E576CD6A2A9D8A81FF2F
E851679D7C9992FB330DC139EB2B0C5A760A479FD5C26CF1BD686586748568BE
60E1F428329BDE371A43307A4F5063553BEC933533FA60B92F86F44203975824
41E540BE10A47D5663D87DCFA113E8D22B69205955B16AFDF79C3C115559C830
979C39FA2CD84798FF0F3074A82D942059116B3819F1194AF6EA17EEA2843ED0
46610514CAA61BBD839346343FEA2446CB21A6EB11CD7293AE16DACD8B6BD83B
F47A5E53C7BA991374BB5A1B11B8E67183CD47115A583DDE8E1AC03424365DDB
782A9F6CB19FE024E6ABA854FD263970868577662F77F739459ED50162CC8BF5
1020116ED83B3C75FB41B6D665DD7610FAB74B53B5098FE1452F9FC2DA3F0E75
AA2CCA279CDBB4BAAFB893620A782D2B95B55C3628B5CC351E220C6ED27D2E16
340E636E2935A5B3023686FF186CADD0723633489DAC2389EA041FDA335C5470
B3A6B04DF53411517CC0CDA68822CF58BCE5ECE3C0FA737AAA1A1345D7BED725
0176BD29AF4FE62FEBE4E9FFD6E0DFB2565228B939A52F7C81ECEB024C38B8D4
5B80344D2F92CEA518D421B9C989F220C7DB59F02221E98F7F7BA5E89F26688C
C61647863AFD001DABD7D7720859F6FB7EAF66872A1451C8D4FDA7B8516FF329
57C47CB99C4D3730F1F5DB77FC707CD22E9322DECC36FD2A66067E1C56BCA732
B5A805035DFBE03B63630CAF30A7A97A4C2E742017B1381A000A34920B95615E
FA7F9657DD4A9E1D235BDE9A08CD2C8C7FFBFCD1ED7305F1BEB4ADB4E7ED0F37
7E582D2F809DF7133CDC8B8E36C2A0561D672C9DAA577D79F84946
=======
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC19A29
B0275AF422EB548505307B85E2D428B2793378041115891F0B6306B6FC72E4B1
EB87B2D527B774C765DCE58B7F76786DBCC6A57280753DCD85073376B5C15095
AD4E14D9CBAADF8EF93A933795C0CBFB7204DC62340EFD3F37C26AC08DA98886
99C2DA581BF499925C57FDA26C1736487F2BDD3FF833163611BB26DA01367B61
774D9D6D569355D10330C9E14A5C5F7BC9AEAE35088FAC2E174B35591D972DE0
DAC5D8E984E967A0E8A93E8741F4A8FA89EEEC2556CD0D4D1C30F4D0302CFDED
66881FB58481B2A5CA3BE03F9A9EBD52235D56ABAA85003742F8271D715965E8
9DD9743B1DD19C90C9AFAE343A5877AB7D005FB3A78552A4826AFD5BCB86C0C2
26DD9642C96F6D3C578E819AD7EF3EE7745D6460F94622AC516E9D777D6C653F
CD96F07CC74AD17A93D3206EF4D481A294B8874E021962213E923ACE057116BF
383D507CED4E5A83378955473442B6A85A7C69A016069015EAFA706682E48B28
E8C9CE4AF423D49CA0DF1B37BCD6C2CCCE1B40173A0E450B1E1CC5188FE9A784
849524F95B87597782D7CCE2196BACDECE8E2451C2BAC4FC371564757725845D
B7240F7804FB3371973117CAB537A70F9439B5E8BAF9E2EB03F07F09F17189C7
C0F139E2F261BB8CBCD84D39EF0F0BA674CBF899EFF8FC80D699581ABA7D9D6F
98BBDA827BF8D401514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED289B59E
0F97561179C2C0F08E832E2DDBE7C66ADCED36369AF8B34D445FF8B74EE2FF24
AACF3D958348A87DA63DE672CE8C10DC9103EC4853C910DC7205541B16C0E6BD
1F1077D518373F33FD234772443524FA8A11A02AE0B8ED0B834A3E3051EF1D81
7F5405D87BD0B47C50A30133F267F34B10F3F3362BD2CB26778A212CC7282D58
A4486B7166B269B174B9FE9BB5FE94379B638B85AFE160FC1687A50867043566
1C462AFAF04AD44B11721927EEE7C26AC6210E8D4EBBBEFDA9D435869399D92B
E364E9390003F437D9A3A0A4E96E82C73EFE4C84FE034CBE8554026B75A3A2A1
4D27E98234B588434F88042B2956DCC18AE1C1E30A0E78EF0470B3200E566399
5C3BAC056B0B53358140F209905103D3B7C48B8EFBF4006DA984D240911DF09A
7B36D1EB2D9E4311A671CF7A660039A2F36055BAAC24E2EB1C58B902BF073C33
04E4C8EEB16D7EC879F6E9B1C1E8C9AA035ACA1C42A169FFAFEF7C4751BDF434
95DCF8C4F6274740CE31EEBC6E363CF7A318738C841A95FCD30CFD43A02700DC
099F78035093EA6D9CEE7427D41340F9D2987C051EC94178D91F36440E2D23C6
CD2DF4A349A2DFC2A1D978596F39D199116D95612BB8B52086679E50C5E68B67
8F373FA078FC7272AFC26FC32B777EFC3D1F73A61D397621181543EC7117EABE
A6A31BBF76B717A8CC0B23757E96D1E404B1BBDC42459521D54144EE5699461F
6D258CE9B3BBA9321EF1F3DF8819FE785491E998A77BEB9BE59525506F9C0ECA
4A52C1C4AB4EA9235E94E505E3605EBEFD5FA1AB4D32269620778BA0C6E0A565
27E73BE19DD38D43E700961DD0EDCEE6CE7F6AD035A435017F8EDC6CAD38ED8C
AA60D19C8AA1FEC0DC50899D11BE76EC06E5A9D3143473218B6E51F82EBEF76B
E7CC8B80947EB0E96F34CFFAE2AB99ABA68FAD15D42971DAB17CB1C3B9FFE07F
C35008BB8A6F905FE0FEC299B12C9D2C71B6A7454237B652CAFC7937D1F49007
A524E4F3BEB894755D4F2D6944A68175A656514425E96DD970D81D4C3DED38A6
553ECD27B328EA84D69069A786B4CB7F76E44064045778D4D8ABB56D7673C5E1
C6AE35EA0AA27644AEB03C8FAE9BFFFC4147A4AF8F821BFBA1A0F86FAB8F94EB
D6B5258FB7581BC0E605A1D0942F3322C2305190E68E3A3DF08794284CE3F6FA
6E71C671504B7535A3444D643B1ACD9172F151F97F266C7E280E64EA16DEC2C0
50C6F7FDB78D9371CEBBF656CC3101D6E9B3D852CF1E3480229AE081FE8BA97C
63E4670B912619A20C13063E6730387C584C8C75794C620B2330FD5BB8F5BC59
A60F63CB797C09CE1CAFDAD8FBB5062803C344D0CC32979A1EEEC3F9D6E606B1
C0C840DEDEB3A8F8A35FE58B2DB2251EE7EFB4DBC694919D4F41D01894C91D8E
03F68DB5527C37432B01750AD448731F49E12F1FAE92E92DEA1A3435077670F6
311206BD6F96D03E65C08827A12F0007096282DCB872B6BE7EBD89DB74674BFF
EDD14034AE7D7985F97B956C132DB532DF6B115587FEA485DE835831AD5ABE1C
BDA99407F0211A155FCB44F0A41F9B52224AEE1BE964673600B77CBD46C08E05
9960D90175B6EB82DA42596390978884717592A22FE5AD2B7F4DB9EDB2ECD79A
062243ADB3EB7A84E9A79FE1FB0C7F84B345CC06DBE98FE9E52BDF3CF8FEC118
F0F8EE1B3F3CC28EE10BE6610B8820C212630C2D9D32EE9213E1BB04A721B6B0
C7DBE13A219D3A6E344CE9634B1A774A5D7923238B8FA0A7373E42A9B2F294E5
56A14C9C0B8D4D3415222D7F1CC6A54AC5EA84386CFD187B7C47BC40CE5118E6
AB2C12BC77E3A4F5DBD8BE9505E7F66AEAAE9552A75AA44EA785E273ED52156C
072485C5377874A00CEE4705352C30E55B902ACC35DE3AABEE71ED2E5BBA5319
ECBFFA08050AD4152B37BDFA6289EB1BC15D3597CD69A11EF02AE20A0FB0174D
CAA1F281041D6953D207B1FE12D812CB5650C62A761566755D8D9CFB59C4B1D2
6C6EAE8E034D1582CC32CB673DC45718BC591D1B78A3A5E60F14F17E59A758BD
76FF929829B40537B7081C1E401D8828E273A5F5C2E8CE5C6D41E90F1FF97EE9
5E13B6B3EEC81AD19E4CD796A7563CA0E4AB9AB75715DD5605A4596ACA71BB04
D0323445F01FCB97F11E87FEB186E9A7CE7F06836920A1614CD5E7F3244C9073
3BA17E41E26871A176C150FA8EB3ECF9BB19DE8A07FF884C9CD7441B09BD1E19
B5C738F9B1CC3F391D8B979AE175AEEFB8DF6A850C5BA0644CDDAA91F6F0D710
6D9761E795AA7D0D01C75662E3863A7100AAAC4740690A502D258B1E318ACBAF
E1EB024F24F6FB787C7C5CA926B0F6849688C4A374DFC7FFF55F316175AA0883
EFA5909770A7C97B6A236CE267095F25D9A4916DE37748CE08A600644D7D321D
E2C19FDD6989F0AE2CA1C8B76BE036D83282A485C251451DA27DD7DA80F882E2
1DFA7042B80B0E772F33BC385ABAEEC3A1073198DE74FD10FC48990F7BA58816
D3DC570F6AA0757882B1F0FD65BD38D2E5A1E54B4E5F84D18147F3459C9D53CF
AAD25EDB55D7E52262141B84F4470CBDA50834232DDF05580FB2BC843D969642
02143D72C13B747461135CBEC72D82A7C1602D638B46541EBD289AABD77322EA
46F92EBEC5FD7A66E4E974FED756E5E18974AF90AF0FFE0D3B0B72D0953A21B3
2C98BE6C768D1B08958FA6ABF40DD1F36D628DE7CAE9F2844D17BBDC178AFFB0
DEB4493D2BEEDC4666D8B8F9041C564626D94B23D6B63755279D438E60F4D5B0
DB40C47E347099B4953FC39864BC27CBA7CAA49E6643DBE02536E476BA6AFD2D
718F7CE40CCF6CFE964A70E55B4FF633748915856FE50D44DC8903E6A55630F3
070E7B4DAD286C0B44606D8FBDF62122B8BBB73BDC31349F2C26E09324D3E283
575164ACB65D4AE610836FA7B08B3C2A698E4F95DAE539B5E403A0771421FBB6
FAAB9CDECACE167B4021E8EDE73D6811CD76FBC922CF36C2D08851474673265A
F4A339156F7EEE3EE4733B67923CBB882068CCE35ACDB5C175DC71629D041E46
69A00C7937E3BFA19355DEB4F949E35BCDB4FB7E1077BEBB1D491F0104E798CF
61F4AD9EFB4D1E4106F4BE056E7DC9D2774B0E39C3E5E7D18ABBC336DE0AA767
D749EF67A6B7AA29F4FA01F0BF3CAC0780E55DE83748678B04F761C93EF68DDC
8E247AE50D1328CEE15A5FF87170C9B3CA107D643095C9796DD301196A01F330
C7430364163AEC6E46FEBF7D4AF489E2B698C90489CD04AF61E34FB6AD436444
9BEB77072491880C70E45202446E473E439934D805FB0482EDC55296F94EB710
D91D290B9C44B18F7A7DE357C124E574C5DDC4662882638A6A46D3C14827976A
B36FB2DADEEA8C4193BF431A797CA66B3841F9DA34CE4BD990506C621A31C42E
249BD99CBD59E36A608D0CAA998879FD3B43A178C86F9A3763BA8D6D12B11CB6
2DFA672BB0F78E6F9D0DB33C461BEC2C811C376FE4AB347BD055EDD461600260
F9D5329B2C5150B37B56FC7F1C1580BC3BD14F7BA954733603EC17641BDD6FB6
2824AD553FE239B1D3634DF5A71B54ED49CCEEE266348F26A20BD15A6C83BD22
587E05F600FD03CC51EA7335E4EEB0AAFA47CF73393866A2ABC629310F2C265F
61AF8552E1E83D8D6E3F7421F4C62DBCB445FBBD29CA52FBC781501499920F52
DA4EB0036855C3E4650132F24ACFDF729017B3F24AB36AC5B5F90E5FB2B9A6C0
5001198F406C6C4D8F9DDFB2465E9B9785BD37386179199D1B32DCAEE0F564BF
BB691C55467CE075F15DBCF15622E028C714CAEC8DFCA556396E13852866AA64
C1015833A96072E91AC163E3387634F47E601FA74AFFA923AF2346E469D469FC
D23AB8B610EF456E0ADDC586873768376DD6B358C364C8C2388C5B2A0F57D096
CC40E931BEB0CD8B5A6DB8E113313D207B5AEFA345E3D86C2DA6CF01EE3D61F7
E252149C11530EDF9A6784AC7F98BD16998C4D60E7CC7FF2038E39647EDC19E5
B2F1B47A420188B7BD807CB35E3174A995E92F956F87EE7C8BB1EFCB664AA59B
BA36D6677DEA395999BC0986F72BA7DFD6FBD76D933154C1A7EB4AE3F196B9CF
0D832BDF14B8CAC860C00BD90B94362ED4E2DE23DE3DB7D9AC1687DBD8CAF10B
5C4227E7FA6297C7D4C9CAFCD1A16DF8C239AD47774E5BFD109B4746C06FEDB9
798CC5D6A1E62CACE0899540C97BC1B412F15F335E92CA1521866B208EEFD5C9
0829A496FFAFF4760F51CF05A29CD4E90A65C3E7A6CB36B76E04E71617ADE990
D42F8373DF224EA1AAD2312A280F0C07F4A0253137414E1FFE4C7327E2AE2B0C
0ACD236FE5F7F5833020FE1B4554ADDE00F28776B86E1D2A6DC8B16D604CBDC9
DE14726FBC83AF6EFC63EFF512B25FA62D59E66E5F95B2F9FBB07A4D7DC2FCB4
0C76763D17B123A9D4B3326832B50B457DE97C67F52B3C13B2A0F02E3728473D
E1F1B88A8B853AA531BFD4547A8E3BD4BCBFC5110361A31AC1A75F176EA6E366
78A4282C326C7EC866B6D4F67C9A2D56B192F6BB3E3F4081D4ECFDAEB2339D33
FD3EA0ADD494222226E3E9F1B89BCE2442CB7D7F44C3141EFB6CB424EF5CF34D
9F5ACD88DD23CEEF2F0C9E0EE66AE03E74C21177D950F9954F759056B09ABADE
75627C228F7FC9BD68247D38D2E58480245C7DF5E3600E35079A6E4CE36D5BA2
4800F25280D19BA96F2381245DC37D8E95EEA0599EDE09F2044FC1ADBF56994F
887C42BF34758DB2DCF24E8A35DDFB37E3BCB1F1F119612A718F01E18418D456
033717F447E03B439FFD51D202868C12A78B9815138F282FEEA449F44DAC3F97
FC95AF3DE79A8C507A9B08B64CB186FACCFC6AF22420DE0EF6B52988D50D9544
D384F9596FFEE6F34963FA1BCA1AE8FE2FD767EF572C5CCFD2F2436436BFE94C
E8AEE07C38FF0110E0F0B7BECBB0C12F1A40125643BA8464B0037C59697E31A0
7A5AB5A3489BCB1B77D9387A34C3CE78B36E31DDD2B6A0253054B6CB1DA08DF0
BDB9EAF7A47B3353B4721AF234D7FC97BF27AF91D3543C00778FEEE42A674026
B943CD242B8B8DA1A0B5DAE151FAD47DB089C47F51C4393BBFC55A624EDFF9E8
9D18FD7E9A428822F9B2D7E0FBFDF6EDF2ADE240A936CE0090E47C51C2E79A02
805A1A368B5AA6E7E5B8208D69B479068BB4E6C6881BDF7D8C1A21D2A4C19D98
9EF23F53001D92DFF3405A2A73C76C7A3A330B50EA6A9AC5438EDD52DD788E14
9970DE02F0805DC7CAD9B3D145AC36079A26A4C2FC6CAA15D6D9094F22F1D36D
E7AF707BB118546ED9FF905ACFFE36D1A4627F62DD08C19109E26E03FA7EC6C0
CEC8C7808D86853499AFD492FA6A6A36003A3835DA03CA4EB95CA8DA63527E4B
A12B0B77C51492248F32DFFF3976F4A39750D1EB27F85C29902C83A8A7C5589F
B7FBEDB6DCAD3DBA4F6B9A81081F80EFE515CFACB68C00C0E18DD4BE21230785
2E8A2426BA178FE5E896345E789910803ED031384106923E929EC536323FF757
28D39F376E3026EAAC4E34253D749DE9F4EA5C1EAEE06A6283BEBFC6B085A55F
D1837EF582125213E74E77845359C8B63E20C81F73C6F9A08CE00EA61918F859
773A5705C44A7F6C498E2A2F22111D9AD1647662FDF3EFE16AD64DBF2C72DBA7
3F4B97F242B91BC87D7082371D3D48DC0498B4E6A6B88CF3881287E3249FF020
1DAD44AF51987452E1AF697794BBF6A7A976A3FD7CF9024F3974E3077CB7958B
3236349CED8845B49EB2B7242E846EB1C3BCDF37F7D7B6D9CE360D8CA21A13F1
132FC55E9AAFF65665B3E31F003891ED8CF172A22DDF11665155E127AA042746
1775128BB5070046E22E14FF27879D625C1572BEE6D8665D96F42B3E1DA97DA5
74980D9B853D2FE90CAF4FCBF6017E4A14C908323FE53847502BF4A104BC0785
E9002668F00E3F497EF827A9A2BEE9FD999CF28161284053F48C3663AF33B6B3
4F3CAB9B7F5EA95BD19CC48343C1A6EE0FC89F6319922AEE78B120F373E8BF0B
75B9D3852ACF83D0604E575386BC9642DD8FC8DBE450B6DF1C3829DB22E031CE
1197AC89B44776ED548AE6CCE54E39BF6CA6A1B6C521FD51B82083081B8CC784
984E021F39F5EFABE1C78064013791AB3524065FF22CD06949783A5F31FF8874
042AED479D51B06881861A404E8B8AEBC502C6D41A27C05026FAD560077EED83
C8B187B2D9025DBE1A8962F9A2D0CCF790C3DE5A956527EAC61A4D854AA3E298
5CF76DAA47E570609DBDCA1B1E7C803D00B8E05E0C129EAA782E64BA787FED64
A9A3718A18CB977D026A5E374C0DB1933CEE6F4F8FFC9DAEF3C638F00380966E
E2A5C982E855FC2B6A55EDE4BC980A6A45F20793726A3E180BAFC497630F9C4A
607450E89EDF7BF748DF666C2C367044A9958FD2F1E72BA75AC9E15467C82733
99149875BA45531461FC0A46B4A27F3F1538D06204C4B7D0D0F7114205F1B165
32742237B7B12F76CF14E2D282360213DE428F2A680F5EC84A11C2660CEE7835
044C34529B6DE00A71BF9F85CAF47C2C32BF258013E878EE867288D9150BD551
43894B1FF8B65D78400C61D385D2FFBC91C5DB72A692FC09C1A7D84D325D42D1
AC4C7D1EA1828216FA5D2957422689395C3C552D8BA76D1CED9880BE1A806523
D34914CF22CD50EAC5E7BF8F1D7FE8672B171D312F1A212ED0355B5E10795A97
1E5CB274DD889826339B070B3B3CF99C3850857636774CC62E6842051F4AD8FE
0E8C060B73E7A53629ADAB0817E3B0405B77D50929F81C953C6A9D294C8A1AAB
B723C3420A3E85B387C0224CD77E464C88B620B47F326E71D868D1E532CD8DBB
0849ED025E169A6588944131484F0C614A09DA12130DCD1CD7A7AEE95E28F522
C07D5F11A4AF87CDC74B74A427EF5C938B1C0AF745A05F17F87AA98CB6C24BC6
E9312395BC1D22A0D846FEB98A4EE27763721E0A43ADBB27869AEB2AC7A87A89
52142E302EFC1554340A21D65DD24B58BCAEB73E80A00EB3A3203E33554B387D
11F1D87CEF5C513C745E52FC249C25455FDB4653B0074A10A85F5B51F75D094F
3D0C8FA39AC42D5D7515084FE48B9C1598D20429A8107FBB451236F58E6E8FCC
90FECAF03F755B8DBCF68F9CD532E91A90933D3B2B6D2972F2949E6E05D5C6B6
0F2445DB130391D7C2F8271943EFA0BE3D91C3D27961DBF5B2810ABBEA04BBAB
AA8B4A3AD46CF051C7F5592CD993EEAEBBAA9652B6AC83A922B9F18F0947D4DD
50EEA676D1FD3BA547B705ED64C1AFC29A765D4BEE77BA2ADCF7CFAA264CD434
9FFDBA019383845E099CB027A6F2D42BF16ACB0B46B4CAD088690B07658A2F95
B719637D7D72BAE8693F0BA1B074A9B5E7EB5202F7F76403A7B9BCE292E6BE1C
5393982098679C11BF8EB7BCCADA541EA9D47C162295E9E09092D8ED18C5EBD1
C5250B60B67BFC0AA3EB680FD2841EB65BEA514EDAC2228A948869D9E9C812E6
B55B296C3683532F89E74F14C3FF67F330D014BD3007D340BFA74FD50D943EF8
DE6B5EEFD5B78943DF8327D1E9482BA36464ED996A305D8BA6CAA782AD657B2C
8D6884BBFA2D4ADAAD0071C7BDA6B8E56D104FBF868DBA1512F1B3FE2E039300
B3902BB51B56F85236AEF6F983748C84B979246259811CF70E6C0B138CE17940
2015FB576FC3C82A550AE0B1960425A3CA29DD4D8AD8B2748CDBBA7A61D0D3F4
D3CC00F9E9643FC3404464F071C6E2B945DFED5CDEC7A5E1DA85AC47DD5FE22B
1DA7B3769A169C2D6A75A8FA74EA394B79AC4EC820D689D5041B8E5B93542875
A2FEC0F165799B343C3728B26AAE5382A3AE8F27D5F3E7700CBDE0FD448E091B
FD35783D42DE4430E6CD3FDC81A7BACD88E5A7B6C8CF2C5D7F004F7C2C5972FA
7904B2B0F2AC242E0282E54301753417F12880315BC32382B1992918847186FA
899DC2C2DB34533451EC9CBA57D1F9C5B349370EFF44E4EF0C7A67445CD0CC57
386E200F340DA06E
>>>>>>> 9041300ec0e250fdd22e21e6f958f182424e0b9f
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C8594AECAFA6BCB9525C67AE8129CEEE93D0E
4438B41FC960603870583723D3E94A3269EE3FF46B759D4679EA28D1F2E99655
1F69A140A662A98CD3E578483305E282D0D961AFC767E702B6168D7BDBFFAEB5
AA36588DA1A987389ED705DA7090377C8896FFB633BCBA9E405F068F7276F60A
F7801586C8C62BEC2059E64A6C93C7A58DB5247E67D3950C6596AADD1AE7B278
46383314A3BB040549CDBC2C26CD5282FF5F157FFCA9F2D5BFD0073C9671F7F9
51F199375ED5B0443E1DA3031BEAF016845FF9AB8DB046E9967FD0A738D8F457
BCCA0107E411C9F0A82D620D5BB103DD3D3CDFE32B0A26555F349D0FB1C29E4A
668009C897C0638FA10D95546B63D51E999E3914A9DCC59761470132464169EB
153D551CCD7325032E352449D33F89196645962942DEBDD82A0C4A86F0304B0B
C3D452F04DB9174688EA12CD8F00B8CF4ACD3DB33BAB7FD13E263C2549247D8D
F74C6863D43B0266CE3E59F95D036444FD4729538BA939C3A82BFDB44DAEC777
6E54A682039510EA5F62BDA21D0F909C5A85BCC8370CBAD5873329B24AD4A743
F2CFD18B26B113BACAB15E072F4D80E6FA1492BDE59F46CA026F44D69E58F150
05486CD1B3524B6AE0717B818974CE8177FFDC2D2458C4B22DA15D31CFB8BED2
6AF24856F58C5F9BAF6C61F1C06532FBE7EA553D9C4DC36505742637FB3FFA8B
979D8C1E67B22A95B074E5F023B0FE419F928D20BBBDF39BEECE42C6A8C7ADEF
80367DD9185DBAB614FDB8FF6087C7308074735C094BCE3E908DC4D0DAC6FA6A
2BDA90B4E62882340D553C88C259C0D25D92082455155D9AEF0A3A562AA5BA86
E912A8585504B0A057B73005FBC23633C4CD428551A238FBA678FE33F5D1B00F
3C41E6274306A55AE4B549BA163BF84A17A2764CB9426395B44325AD9114253F
3AB19F54938E161BB821BBFC92898F5B96423EBB4FE780AB41C0DC9E0404451C
191F439D03ADD9D36D54C6E78D4D395C28EEA275244AB95826FB47205DE82F1F
269692DFBB8E9912C7D1AC0ABEDDC8612966483BEEEAA9EE302FB2C62E554D1A
18ABF6DC78B05EFD8A804325A6023F6BA66864DC938E0611C721ADD6039AD2EC
CB619BFDDA4FE45BA45C7D6AC20A57DED246BF8AE7CD9DAE438A5E3A74345AF1
8EB8254E5379AB49F9FD56D4D6DA3A323B4FD6AC2CF6CEA5926EA5679791D474
272D7D6BAE1D01B865DEC32143CB2F1539899A725F48690FD2B824C8385F9A3C
95A951C171AEF0783A4909DF4B7484217C2AA49C72207BC789EEC011E3B29A07
F16CFCD9CF65AEC842C987A026992772DC2A0B06D5E4AB1186D810043BA43373
3C96A4EAE21E64CB8F397A76C5D84907E5FDEA9F50CF9A75519684785B73039B
66EA4D2CAFA3CDA900493E17638B00884A469DAF686026177C0B8B2847604E52
F35C754AF9C26A96B7926B7E219CFF6E922F751B981FCBAD2FDCEB3669E8934D
1DFDF43498A55EDF16A009E3EDEDC3C4AC7AA8B27CFF05C5E768115C104826CC
10BC7ECB0124DE9784FF7538DC0F88112C0E8D91E53300ADF0BAD1DDA4836E4C
A03976B5D7D2B2ADA203EF3B08FBEDB4CA29BC51FB2BC0C62CE1B3FEE159A7BD
184FE4C3F57527B6B20F3D92C93AF3612FAEB523A382F7C88EE8494113531413
5CD8FFA407D97F4E938B90E387BAAED947CD5F7DD882644EF2DE599944404B7A
5105C9183E5F70C838F679EE6982C30F3E1C939E0011426AF818185B8F3636CC
E0A293F905974A0B3703A95C13BB58F03A57E07433C1EE788B3D96A15004435C
A573546B97FE15F640911E342A125982936B54E32E947319B4AD13F8F95AB9B4
C80C0DE6B1516017ECCB8C0D5DBE02318AA4E3B975A2A298628A7BBEE59D6B2A
5BF0772962368D04E722E222BD321844409FC953796CC8D807EBDEFBB74E9894
BF0EC793699F0E68263F631B042321505CB0CEE9FB7E025E2D00DFBA1D8FDD6D
0DF8577982F9CF0D4F9458A0DB887C4487A14D1E9BD463A318B1B5488C59906F
FBBB859C62D81D1039A4DF92F7435E11524E08B230B8DC24A811946C206877EF
DBBDF2B1EDDE083B08C8A60104E92A636487656C1A822C24636E6FD8026C79AC
276D5AFE5E3C8409D32BEA2B29BD1A08E9B95F964FF6314E7F7E6DA3D81E94B7
9A2965D63753EA5B10491A203C9AFE37CB3303A57193A074A75CD8BB734D2D09
0457DA99CAD97A270CD3BC6F03C3625D0DF044FDCB15FC34232359F2535FA1D1
A508FB5023D07D392FDDDE2AC0E4AAD917FA419662D95A579ABE56667A9B1875
C81F733E06A2B40E883572A5A4E3B12D6C769FF65FC383E850379386AA2433B6
8A3510F264B4303C8701718FB03D175CCEDFA01A8BDE36273EE4BDD28067D1E6
4E8F88E51B2E3335C407FAC26C11FFE5B34C4A7136EF4E084C43A69332C7C1A5
64413062D6D4223581890777C261A160E6B246FC9584ED77B3191FF2B7FC8BF3
AE8B6F5E9C82246C7F9CB7C700A5D6C5B7D1CEBCF30EE34E39143E5676CA9A67
6B3F98F1001371EEB6651E317B089EA48BB768BE2408146477605B26DA15F7C9
B0BD6692A8644BA2D481CD39C7B4AEBDA5D1CFFFAF6EBBE3E5F0B879929F50AB
0402644E83479EA265192B41D8F3E81B476799D257CFF8AC01064DC59B43DF12
DCA626F8A21479B0721B1990C4F19A0999B940BBAD9D82D26C9DAFDCC2F2F86E
94F834EB78FBA80799B622FD059C4858F97C79D08492ACE3AA3E3C9EF2E1E43E
33140F8E91CE236EBFA996C516791002120265F8FD08BE34848FEA0015CC28BA
9335A5931164619C248DD84A9A652307B7EF8B7DCBEDF2FF5011A06D55CD54E0
A64B23A3F56EBCD82E7D853BE746CB8DA479BF808806DB2F5D3E8D3640E5CE87
E9BC568943DE1A68599E2F3EF62EA528B388FB2100C44AD20286FD9F694015EA
9361C2B4BAAC0600461E3381665948141CA2FF95EC304694FEAA8215C8A2BC6C
DD136F67951EC6044FC5AC0FE18757EB205AE0CE2D56E237004932B232540B46
F2B1C7D79DC6013E28A6D9197FBA488EAB0EBFB50FEF925BA6DF2F7EC3B58D89
2BE6541F493C035A9B6DFCCCD8950E28833E36629431EFADD6877A8A82877FE6
51FD457B373760BC57A72F219C2CABA9F046DCE18D3E8FCA96462CC10A992816
EFE67EFB8C82885D9D7F74EC35DCFDB9D794CDEF116C97373B2BD37B09BD7BE2
6B975CFB5F1762444C5EEFCA7E622D460701760E7495135D6EE1215286E756EA
3204CD30889F575471AA6CF5F9D27AAEAD9CEFB1CFDB3FD4226D19189FF54777
66DB7146FF9BD7A60241580E2B517BE73383BF9817F355C5B4BC81B32EAA078D
C8AAB00146FC52535EC82DB763997654CDF78D462059A4FF90176200E9415692
5F078960A3C604FF8413346A6A77F7125B44EF18D1EA83035A1D877E5377D7DE
7C5CE41BDF12890C9318F13193F1AACC1F3483344E4BBE07BC35301814318C04
63515FC309A93AC8A4AB5563A11A1C5B6FF3981AFAB01A5BB9F7DBF5D16C5C6E
23004FD59AF59951AEBB10868A01D1119A7C6C2CE48910D180ACFF45DE1358A6
09CE24C1476BB0BB2ABB0C5476134A0408827722964A20EE90B9E0160970EEBA
D0B0E05EC1E6858AD6DD25D12CA00F3D7A2F6DD6BB9F40A3B9B1E1C0907CE7EE
BA9F5C7C72EBF5E17AE61D1F8A7A9923CD640A7A8F2CF6EA77EC84B29DEA631E
3F505A10D381747B74CDDFC5868BA83682ADE23ADC9D4A5FA2767E91A2191F7B
2D2A95344A9BC70F83AEF6167F557E37485219E345E6DB3780BC7C71914C6D60
A62DD2911B9E8DDFFA80FCC6B0FBAF3ADD0703D149F5A1E2CA4567D7282BF3F7
A1330DEB6C623774D89CC896AE10913ECB2E7008E6A6BEDF52A9798106B63A80
21F73D78209C537CB7A84A0266F96BC35697462DA55F3FB19F27FDD996F325B0
DAD692F8F16F92DD5F5FBBB9FDD83F4EB5BC4F527A73650CDD02723BC968AF37
3702F3B8DD22EF28ADA452F82097ED5D799A09FF116F00C6331C94A2C755DA8F
4A726C30E856D2FEDFCDBF2EF1D573F45DDBEE9E9323881401CFB358314F5DDE
0FBC9B11349AA74A56FC4B9383226D635D09B1FE58A052576CADE4C2A8365D31
AE83F620158773648F4C00DB3150F560D70BCB834CED800336F9181FAEA97D40
48F19EFD947F80F01A9F229B76D7AAA44F39C6598FD4CDD59208FDAEB13AA1B3
D99A819D144C0F365C6EECA944B845087E8DB604D8E9657FED2331C004D3C4DD
A727C10DD530E18A42C47DD0FA1E42F41503B01F2FFAAC0B5402A99E74DA5A1B
1AD298CFD5A74A34D1100942C61F4D87E900CF14F4319D2E60DF62336D990E8B
A647A1D4E7524C419194BD6B2E0C810759593A1E1A383E7AC040C2991A336823
F1EC192D4CE634899726137B2C72B16E16091D5915D8127B1F8730034156588A
8C915509F937F220B2A20C4DADA9A528FD3E781D74472C4AA75FEE4C820F9694
8830E563B1650C3BC76D556BD7C91EFC3AD10D5F97CA97A8482624F57DE7F58F
224B5EF3584092E6CB8825D00E64A63904540655D685B3A0A8CB96737F63D525
1B515FD8006AD3EEA972B5F6F6720C9C90AEBD18ECDF0CCE4EEDF92012B628B8
4595A4BE3560C3444DD4DFD6CEED423DF88B79B073C458C001D5E8787E112EED
1870CEA2B7237B58984F20E3F69D66DA8190AB8DF33E45AB117A47C4FE3AEC3F
C26D21EFC7DC1F70AFEED7CE0EAF2EC676BFCA1A901E5B33473E77BD45F0A1D8
A118D86A1B45C1752A34E43BA01DC71555BF59BA06BBFF99C5442F9169CC517D
1DB92337E61A804FD40B10D9A3EEE61B13ADECA2A22579FBDC853660E2E82BE4
200F2FB6F0735F1ACC6FBDD2709AF18DF59E697A7D6F1B8F7238164BB32C4D96
2ECAFC225C4C9B893B3BBF0FDEF71A012E21B844A48AA552F69BD43931DD248D
D609C2306A4A8DFC479CCDD9EC6F2EC878DA7947AF492883632BC49305E685EA
41D3E00F69B8AA26D268C3C4A08881E15C8F4A21D346AB4C43A43407D21A5D91
B28DBFE2E3E57C9508E63D2FD6A02525DD35CB2F8DE851CE1F85CB9F59F353CB
1D80A4676D23FC0E9058932D0C424109EF491C20C9A8A0E7F0AFA8C3B80F7ED0
4054316C340A6FAE88C3A3FF5394645EE70C6D0535977446EF7455B19FDAE2E6
70DB490E8289549704453DC9C4CDC51A69587311C647B58EB44E90A2D4AC5F98
D686DD6066743AABC0533B53B08BE24F11F2B3E1B0F59AB988D2F1DA7B33850C
D29480A6A5043AAA88A86C97165A764E31AAA954FAC43B06955E0BC560657D16
1178F1D9BD3B98EAB6FE87ABE6C352190746E586B04C7A43F68FE39105B9EE35
0996B18E6A7573F299F4234CBA38EF07D4A34C696E89369C009E2682714E90BD
C1DC0B7845702EA86661247AA7697D8CBEB27447E32D82A7C16F74F2324C3012
1F90820BAF824895575ED5958BFE623264CD3D1AA2B7F643F865613F645E6D76
A2A60F189DCB5B392CEEE245B271B44DF5F965A468EE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (odnzad.dvi)
@start /Fa 200[44 1[44 44 44 44 44 49[{ encpltt ReEncodeFont }6
83.022 /PLTypewriter10-Regular rf /Fb 150[23 105[{
 encplmi ReEncodeFont }1 58.1154 /PLMathItalic7-Italic
rf /Fc 78[53 6[45 47[60 71 6[55 6[71 41 37 3[61 75 60
1[65 9[139 6[92 80[{ encplrm ReEncodeFont }14 119.552
/PLRoman12-Bold rf /Fd 83[65 171[65{ encplms ReEncodeFont }2
83.022 /PLMathSymbols10-Italic rf /Fe 145[50 73 10[36
44 97[{ encplmi ReEncodeFont }4 83.022 /PLMathItalic10-Italic
rf /Ff 12[42 55[37 9[33 6[28 3[37 3[37 42 5[51 32[37
44 1[60 44 46 32 33 33 1[46 42 46 69 23 44 25 23 46 42
1[37 46 37 46 42 6[51 2[85 6[57 65 4[43 5[63 1[59 7[23
8[42 42 42 23 28 23 2[32 32 40[{ encplrm ReEncodeFont }47
<<<<<<< HEAD
83.022 /PLRoman10-Regular rf /Fg 198[42 2[42 3[42 42
42 1[25 46[{ encplit ReEncodeFont }6 83.022 /PLRoman10-Italic
rf /Fh 12[48 71[53 4[44 3[42 39[42 50 3[53 37 38 39 1[53
48 53 80 27 50 29 27 1[48 29 44 53 42 53 46 8[72 10[91
3[36 4[73 1[68 7[27 3[48 1[48 5[27 1[27 44[{ encplrm ReEncodeFont }35
=======
83.022 /PLRoman10-Regular rf /Fg 192[42 11[42 42 42 42
1[25 46[{ encplit ReEncodeFont }6 83.022 /PLRoman10-Italic
rf /Fh 12[48 76[44 3[42 39[42 50 1[69 1[53 37 38 39 1[53
48 53 80 27 50 29 27 1[48 4[53 46 10[72 8[91 3[36 4[73
1[68 7[27 3[48 1[48 5[27 1[27 44[{ encplrm ReEncodeFont }31
>>>>>>> 9041300ec0e250fdd22e21e6f958f182424e0b9f
83.022 /PLRoman10-Bold rf /Fi 12[79 123[107 4[53 2[79
80 4[37 1[79 1[73 80 2[75 6[96 10[114 114 9[114 9[44
58[{ encplrm ReEncodeFont }15 143.462 /PLSans10-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fi(Zadanie:)54 b(ODN)-94
117 y(Odno)l(w)l(a)e(dr\363g)3287 153 y @beginspecial
98 @llx 530 @lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
<<<<<<< HEAD
 @endspecial -94 206 3969 4 v -94 314 a Fh(XI)s(I)s(I)31
b(ob)s(\363z)h(informat)m(yczn)m(y)-8 b(,)34 b(grupa)e(olimpijsk)-5
b(a,)29 b(dzie\253)j(4.)f(Dost\246pna)h(pami\246\242:)f(64)15
b(MB.)317 b Fg(29.09.2016)-94 513 y Ff(W)28 b(Ba)5 b(jto)r(cji)27
b(jest)h Fe(n)f Ff(miast)h(i)g Fe(m)f Ff(dr\363g.)g(Z)g(k)-5
b(a\273dego)26 b(miasta)h(da)h(si\246)f(do)5 b(jec)n(ha\242)26
b(do)i(k)-5 b(a\273dego)26 b(innego.)30 613 y(Ba)5 b(jtazar)37
b(p)r(ostano)n(wi\252)g(o)r(dno)n(wi\242)h Fe(n)25 b
Fd(\000)g Ff(1)38 b(dr\363g)f(tak,)i(\273eb)n(y)f(z)g(k)-5
=======
 @endspecial -94 206 3969 4 v -94 314 a Fh(VI)32 b(ob)s(\363z)f(nauk)m
(o)m(wy)-8 b(,)33 b(grupa)g(olimpijsk)-5 b(a.)29 b(Dost\246pna)j
(pami\246\242:)f(64)15 b(MB.)979 b Fg(??.01.2013)-94
513 y Ff(W)28 b(Ba)5 b(jto)r(cji)27 b(jest)h Fe(n)f Ff(miast)h(i)g
Fe(m)f Ff(dr\363g.)g(Z)g(k)-5 b(a\273dego)26 b(miasta)h(da)h(si\246)f
(do)5 b(jec)n(ha\242)26 b(do)i(k)-5 b(a\273dego)26 b(innego.)30
613 y(Ba)5 b(jtazar)37 b(p)r(ostano)n(wi\252)g(o)r(dno)n(wi\242)h
Fe(n)25 b Fd(\000)g Ff(1)38 b(dr\363g)f(tak,)i(\273eb)n(y)f(z)g(k)-5
>>>>>>> 9041300ec0e250fdd22e21e6f958f182424e0b9f
b(a\273dego)37 b(miasta)h(da\252o)f(si\246)i(do)5 b(jec)n(ha\242)37
b(do)h(k)-5 b(a\273dego)37 b(in-)-94 712 y(nego)c(k)n(orzysta)5
b(j\241c)32 b(t)n(ylk)n(o)h(z)h(o)r(dno)n(wion)n(yc)n(h)f(dr\363g.)g
(Odleg\252o\261ci\241)f(mi\246dzy)i(dw)n(oma)g(miastami)g(b)r
(\246dziem)n(y)g(nazyw)n(a\242)f(liczb)r(\246)-94 812
y(o)r(dno)n(wion)n(yc)n(h)27 b(dr\363g,)i(kt\363re)g(trzeba)f(p)r(ok)n
(ona\242,)h(ab)n(y)g(przejec)n(ha\242)f(mi\246dzy)i(t)n(ymi)g
(miastami.)f(Ba)5 b(jtazar)28 b(c)n(hce)h(wybra\242)f(drogi)-94
912 y(do)38 b(o)r(dno)n(wy)g(w)h(taki)g(sp)r(os\363b,)f(ab)n(y)g(dw)n
(a)h(na)5 b(jbardziej)38 b(o)r(ddalone)g(miasta)g(mia\252y)h(jak)g(na)5
b(jmniejsz\241)38 b(o)r(dleg\252o\261\242.)g(P)n(om\363\273)-94
1011 y(Ba)5 b(jtazaro)n(wi)24 b(wybra\242)j(o)r(dp)r(o)n(wiednie)g
(drogi.)-94 1286 y Fc(W)-11 b(ej\261cie)-94 1468 y Ff(W)19
b(pierwszym)g(wierszu)g(standardo)n(w)n(ego)d(w)n(ej\261cia)j(zna)5
b(jduj\241)19 b(si\246)g(dwie)h(liczb)n(y)f(ca\252k)n(o)n(wite)f(\(1)23
b Fd(\254)f Fe(n)h Fd(\254)g Ff(100,)18 b(1)k Fd(\254)h
Fe(m)g Fd(\254)g Ff(100000\))-94 1567 y(oznacza)5 b(j\241ce)17
b(liczb)r(\246)k(miast)f(oraz)e(liczb)r(\246)j(dr\363g.)e(W)h(k)-5
b(a\273dym)20 b(z)g(k)n(olejn)n(yc)n(h)f Fe(m)h Ff(wierszac)n(h)f(zna)5
b(jduj\241)20 b(si\246)g(dwie)g(liczb)n(y)g(ca\252k)n(o)n(wite)-94
1667 y Fe(a)-50 1679 y Fb(i)5 1667 y Ff(oraz)26 b Fe(b)221
1679 y Fb(i)276 1667 y Ff(oznacza)5 b(j\241ce,)25 b(\273e)j(p)r
(omi\246dzy)f(miastami)g Fe(a)1632 1679 y Fb(i)1688 1667
y Ff(oraz)f Fe(b)1904 1679 y Fb(i)1959 1667 y Ff(jest)i(droga.)e
(\233adna)g(droga)g(si\246)h(nie)h(p)r(o)n(wtarza.)-94
1941 y Fc(Wyj\261cie)-94 2123 y Ff(W)d(pierwszym)g(wierszu)g(standardo)
n(w)n(ego)d(wyj\261cia)j(p)r(o)n(winna)f(zna)5 b(jdo)n(w)n(a\242)24
b(si\246)h(jedna)g(liczba)g(ca\252k)n(o)n(wita)f(oznacza)5
b(j\241ca)22 b(o)r(dle-)-94 2223 y(g\252o\261\242)j(p)r(omi\246dzy)i
(dw)n(oma)f(na)5 b(jbardziej)27 b(o)r(ddalon)n(ymi)f(miastami)g(w)h
(opt)n(ymaln)n(ym)g(rozwi\241zaniu.)e(W)i(k)-5 b(a\273dym)27
b(z)g(k)n(olejn)n(yc)n(h)-94 2322 y Fe(n)10 b Fd(\000)g
Ff(1)22 b(wierszac)n(h)f(nale\273y)i(wypisa\242)f(dwie)i(liczb)n(y)f
(ca\252k)n(o)n(wite)e(oznacza)5 b(j\241ce)21 b(drogi)i(wybrane)f(do)h
(o)r(dno)n(wy)-7 b(.)22 b(Je\261li)h(istnieje)h(wiele)-94
2422 y(p)r(opra)n(wn)n(yc)n(h)h(o)r(dp)r(o)n(wiedzi,)j(nale\273y)f
(wypisa\242)f(do)n(w)n(oln\241)g(z)i(nic)n(h.)-94 2697
y Fc(Przyk\252ad)-94 2936 y Ff(Dla)f(dan)n(yc)n(h)g(w)n(ej\261cio)n
(wyc)n(h:)-94 3060 y Fa(5)43 b(7)-94 3160 y(2)g(1)-94
3259 y(2)g(3)-94 3359 y(3)g(4)-94 3459 y(5)g(3)-94 3558
y(4)g(5)-94 3658 y(1)g(4)-94 3758 y(2)g(4)1890 2936 y
Ff(p)r(opra)n(wn)n(ym)26 b(wynikiem)i(jest:)1890 3060
y Fa(2)1890 3160 y(4)43 b(3)1890 3259 y(5)g(4)1890 3359
y(1)g(4)1890 3459 y(2)g(4)-94 6155 y Ff(v.)13 b(1.00)1692
b(1/1)1436 b(Odno)n(w)n(a)26 b(dr\363g)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
