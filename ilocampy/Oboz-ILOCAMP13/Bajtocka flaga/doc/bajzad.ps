%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: bajzad.dvi
%%CreationDate: Wed Sep 28 02:14:01 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLMathItalic10-Italic PLRoman12-Bold
%%+ PLMathSymbols10-Italic PLRoman7-Regular PLMathItalic7-Italic
%%+ PLTypewriter10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips bajzad.dvi -o bajzad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.09.28:0214
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F626D6A526F2D5D
813ECC4063D04D60259CCD56F58B5B0B4F975E003BB8B403082749858011F2D0
4B3559655878CBDD7D365FFD357CDAC1DBAB9288E85CC571C1F70FA8326B814A
33EE760A8C80ABA4CB4A88511D7F78EE59EF00278C493B7BA2015057767BD78B
47B45FFF2804A3D613BE2D54EDE3A9BF589E24299FD34BD13605ED1672C9A180
F32B4934A768F89217A3DC055A807F57BCD3B4DC9A68B2966D7BB767D71155AD
4338BE2FD18654261706FE5DA56E84A1947299D5B636ACE7B2E2EEE068E55B71
86855063934C5716EDC3F5056BDA9E5F10C183245F1B733C17D3B854D53BA686
CF4088B4F92DC495B23EAB87B339CD87B09F18BB72913812F491D8B4171074B0
B21AE10B747D1D20193233D1113B565641F1ADABC995BE4F09A56C905EC139C0
025CE10D98DC0E1377BB326981631659E38AECC29731BC30AAAA88FBA1A1713B
C6DA67172869794715D9D1A8AD2FFAB1BCBA202289BA1B6D5F1CCF350E39CF4F
EDDB0BC3A0F9D58488289412B06E3202FF6CD33C7F38EE70B5A61DC31F2E3C48
C0ADE3C6DC3BA50AF03919885E2E2098E2C4FB0DB910378B5288A6F3AB826E42
9E68C56BF9FD064CA86702A8ED18172592EF53B7C76F925071813FCC912F7312
B7FC4F811D03EAC4AB9F7D674EC42820FED5C835275F4C01E0E19E9FED7E439F
2445FC68D6ED505106269AC7991B4BF05C71E32E736603ADDDBEEBD8DC01EA15
020E50199CA1FBB5FBCAE50B4497D0A29B2136627FFF2749897EAB5014B460CA
E845E4A8007898456F1F2A0BAAF8250F11330DBC02D21773879ED0F144820559
262287CD219C616105B1357122060C591B5FAFBDBA0DAC0C040096DEA6AF7AD2
8E912DE0DF920BEBDE5D25702A26F719989461123AFBAF23192DB2A58DFC0E56
AD99424EC8D214B11C9D3819D018FD20573666CE5403BEA53B5655AF21C8C875
D2CB34F75784A6D2559B2BEC60B2FB333D5E8933FD3D51477AA128AA15AD4A63
B111BDC7110B592D4B692A074ED05FBDB588E4316A3F757D44E231D5A258823B
9BD22F943519F8578B4260F9D3EEC33771D5677F77C4ECB76471443673B5FEA0
12F6C5C3F365F4215860CCA97759222A9F55EA77B118A7E6C64857E9EF1ED2A1
A47D49FD4A2652C1F7F80588B662A610D3DCA1FA4A7F9B889FEBDDA414B82EA3
933F7B8FE722B469B21AB1FE52B6E8A3A6537E0A8F7E0772CFD7E00D73483BB2
9CB81E55839DD67A7C86B42DA513D162C37B4AB1E846C64B5BCB186AE6082014
A6825F8EE133B2719CCE349C4B527736D3A3625A9706F7039BB8F0D3BDE9B4FB
0A54CDAF92ACB94C1A8BEFBB5D3841A0020352507CFC021AC9F082DA6516267E
8E9F1DF5953BE90CCC9B27A437DDE29A7F9D531BB475A18022FEE42507A1842A
342C987BD8A23BA50B93BF7022D05383804B341CA7D696BEC294FAEA2A9688A5
885E08E2E5D0E594BEE8764066A2AC7BDD6A117CA0E2FCE0B5CFA2149838F69F
F933803092C3F4E6593FC09BE1027F76F8EE66C522FFD66B2A3122CB219E3270
4BD0718EFAA8249690987EA2A09D9881569CB9DA4232EF05F81E86E214677E0D
3DD46D49A53229E66A0520B5D3A88356326B0977263CAC2C8AF52FD1DDB4708E
9C0EDCF61C83F7CAFAF5F6A13230D9FB59B76B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic7-Italic
%!PS-AdobeFont-1.0: PLMathItalic7-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 33180
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLMathItalic7-Italic known{/PLMathItalic7-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic7-Italic)readonly def
/FamilyName(PLMathItalic7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLMathItalic7-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-1 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F166942E28C8AB8F1060C53B5724765FE28571728FBD4816AA3B9061D818
2C6E01AEA946C53F8D5253B037F98A39A0A54BDCEEE91A3AB6AE40600D30DCD1
48597DDE11727CE760DC74B749BCDAC11EA913E118A6B353A7C7B5BF72A0C8E0
A246A563BDD4F3BFCA697082A08CF326EA8912CFE36570286A6DE009100C2387
E1D37DFA3256E714423101E3F7806025405B6EC5A45BDDAD39589C1A6BBFA393
170E7908D55CC1B570BA2BBDCF3EECE31194BA92EB03A7A77FBD6DF87FD4718B
1684B464F4C4FFBD4F97A1903F2B52EE686402C0E72080E2685AFD9E78BC7EED
245B9D1F2CF292EEA22ACA0D39AE27642002187134D55E9F851AC3351956FFBE
3E55321156CF52EF3840E5BA7802C3AEA4369EC8C2738BFFABB86707F61CF32B
A17242A416716B5C82BBBC8D37EFD7DDCB8F86FDB93BBC91FFBE6C83D561EA68
7A5620314119629F3C9156A8E3570E640856403246955BF6F56CFB6FDA12DD94
D5837F8101D3D65F56FC73A5A5A5F88F111054172447AC57A8B69B4DAAC8F2D1
7B997EFF71C0B00B951A7570A341DBF602CEDCFB5A046D818FBA90295153CC3F
F0A4FCB3B2F24FC93A3C6D20B40CDED1AADCA60A7E22E14EC3674CE4718AFF4F
3A1A611D47EE7B715BF06D0F86AD787B605BF15540DD278DF04F7CA22DA96404
69563E178248223C1CC6A866AF0BC332EB55D3FED9CEFC47B9D8C537E382B549
903534CC577FBE9D2FBC52DDC427B2E52302597BFF0F12D7DF5CE21971671507
3177002F908641625F5C1C0C6A364E3100A357D10632538DAA07F1893EE9DAAA
E01D549A252D77E79AD37BF5912E33F96CD42386C234A9447B82BD519B639D87
A7C50A649229C60220CFB93E13675D87CA50063135F166633DDAE163E0CF610A
1CA47EB1505EFB8F59A75C5A3F9642A8FB4D2B712DC2F51DD16A4D54CBE7EEA1
2C9B38969962D4B5905E2359990E0D7D8AE9FCFEC6C4DA1A7A256B315D5927AB
8BDA61AB8C64608230B8819D948C73D6D359769C4CFA5BB68BC03ADB9537A497
C2B9474FC4A738C02D239DE884C96BB923B1EC8208BD7DCEAB0FC2293629222E
06548D553D4A6EDB24F8208EBE13214E89E02093FF8BC53C16D34888A41F8C31
08AFD4ED24D99E1B9F91E225D0AED56107BD6F4565A426421AB1F43F68311828
EFCB01B35A95D0E929461A4A0166B3AE0673B0ABBB29858F65E937CDE31D67C8
47719779DE0B35FA23975251ADE05F6461CD7A3BDEB3FBBCB3C40D7AF9672154
62DFA4B954884D387C1A6D45A43FD6866077E289FEE4CA595331D0914E4C58F2
0B471A91A242A08BC434A30CC2E5A3BB80141343236B499AEFCAF7E22B090A14
F56ED1959BD60C7F7F5BFAF8497205D4BD5B2FBE87991F755B2DBA4BD765F7A4
F966BDDBC0507E537E9CCA690FA83F7A9EB23119348D2C82A64066B391ABC1C0
05CE38BD1FA7357A6B5182917E61CDB10C351FE33884AE09FF5C7902A20B32BB
149310D7CCB0465E8BCDB1AD43BFBDC89608A3AFD4DA2CA72E964D2C493F8EEF
610467347A8E0D9DA3F9A5DBB5C837634AE662E06B49F97F02A3ACA687FBB3F4
2A7704BBD690823BB0018009A8E1CC861B8131DCEBC3DD83D4918D2C6FF35AD4
350A565A6313C91B57365C9E293CD84D7FCD00583930CFB25E01E9F870CA8523
DCDF93D57CE57C1759F570AD6DCEB0ED314523E81CC6D0102B969D7751807A61
CF78220F28E45A84B0FF35C585C18B19C61B51CC96A65989A7AA9AC8B6930AE5
74DDD32FF4BD7C970F75302E7A8703A70517C9FE24A6930AC314870AC4DA73DA
3F8F41970BAB2954367738E47B53145228592E2A5A281B2437BBC4295CCDAA8D
E64137227F139DC0BEFBAE0809EA81F96681C81E903522047C2CD466C90BF8D0
82F1FDFE2CC8A3BCCEA2EFFB91BA406566729D1D5D76D4B7AAF17DB2B6B44179
A93C357E2136C472FD8851998C80FAD9A265F84AC8D76431B25774F7345DE39A
3F1936FF1DEF5402DBD99C6BEDD2A467C58639DC0E0728CAFFE3C5B6A3B4A584
B53AD78A8A6FB59D58C1E794FCBBD27B060EDDFD4A21C9BC9BA5D0107429B595
3FB1BE0128C6BD42F01DB16490CB6A70FFB9477393E78CC5659B3C74C676B0CF
D548B9D38371EF4EF65A50468534353B20EE87FBCFB6380EEC014CEBC4FBB263
9E4DE3A0CA3D3960FCCCD095594D9CF8F08C6EAF995413456AF64058A403CC63
CA5572DE3BDD86015BEC61FFCDA62B59D893A5959E924476E93CF7DCA4E9552F
CBFC07B7FEA769AD6DB847C5FFBF83A9135CC1969899DA1FD2D967EB9B7F6B38
9EE22D1C0802FACD28F8DACD7D1C12433ED9CE0AF54C73172253EFC739D75281
03B8A070830EA0C3BC5E8DF9F395FD83FAE697F455D38161D33361D5D6CB2705
1D0A45D2BEE293F0C3B5C01CC56F1D1EC252F26F852E1B9114ABB6758C430BCB
BC0BF0A4DD2CB038B8843685BFEAE15514C343CA3BFF447255A99CCE4EC0E8B4
18284452650AC9F59D7817CCB865978492F2A9FA7A855C906D2220332D9B69AB
9FB5659AF715D308A82D99CCFDE7136C97A1F58E74F724DB01EC7E67FC33903B
7DDA3697D159B5DC61C7964BEA151336168FA3FEC3A59203A9B6B8CC0A044DFE
23F23A74A5B94006341F2F2D28E8F1EC67F1F663EB9AF9482B19FCB440D3EC1C
EBE50FBA2027DACC2C14EB92E2F97FC88E8FDDA774EBDBE7A957E5ADB870074F
85072866D8A8F08DA5522265A58C52865ACB51DB8E763943AC6B7E389D3E5E15
22071F6264E3F4A0F35E7D504900FAE4BD474243AC49E2EFE8875294E6B03162
66379C8C19A2FEA41E20DD8ADF38149AE700528B5F2D12166421764BB8F9E4C1
848619EFECFF39D78BE6FFC046E53F2B283D5C980D19E2CCB2C3DA9ABEB1B913
570A51B248C68C2E71D04C768C328B6F7986A757FA1EA02A88929BA557BCAB48
B34B2A133920763BC728A3E41A7315436648E1FD2ACC01C4BE9B1376B55B0A02
AAFD2B6018DD0631B30CD0303960FA035F5D8EC638CEE8A5CD94D7F5FF9D6F3E
D1F3632CA86A8D77418D0E3FA57AC6B043644F39C3381576F7DDBA34A7720675
91895D6F527462B03B7523ADCD485B93FA7091BB21EDFDC55FF4147D13D8AE20
FC99E8AB6638A8A8365918C363B088F0F960E5BFFA63434F2CC1915F07A6BFF9
F33D83AD870D79554E2B6D1D5AAAD9BDAF599CD1CE7A6678
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD3076759733CC544C44
0A98D7C64DC5ED73860FE5AB0582F4BD8A6D8AED1ED22C3F3AE5E82CA55AD298
299A9FA987376ED991BF020D89506CD1278CDE3EC446CA203E7C1CD1AFAC29E8
07E5018CEEA86FBE5BABE8947404ACD14B3594882B491F7926694EC48CB03CF1
EACFD31FEE3C7AFFFF0C58477A93B93BA8E0E0B086C29AA069A41EEED25AABF0
B84DAA951B4DC882EA2055C9C28A70D205D41EAD646229028ABC08FB2713C4FA
27A936F7574C3DFD9C3107DA232FE1FB923D3ABE78293BF063FBEA2CD43B910C
9CC062DE49266623AF9AB4BB367E9C4970968D38AA667EB01597AD234A19054D
3AC99E19495C077DAAE47E6B8FB0144A861E53B3DFC6938DB709540F0AB272E7
12360039168C43B3F6A962AB4404A910BA042A87C52DDDF210D5A63E33196FC3
0EDFA4A784E575D1F93FDECBBD1CAB7474AE11FC9FC035725BBCB3E2D5A61F5B
257AE0F3D2F58B74087C3829654A2813232D6AB3054BA46613BAA270253322E5
B2F7EA5AA422D9D85D5E5B6AF11BA52B7776EE0B200CC83750D8D2DFE8871B9B
9487CBBFA7F44636227C1932B5610937F024D32E5BC808E5EEB8370755D7BB7F
2FA16846254DEA778D86D8788089C2DEBB1880E062B3C9C6865E17E17FABF9A2
37CD268A0406CA423CB281B7A7C3D5157648F0A004296EF04C03B7A6695B6434
45ED09243A17A1F06544F7B9245A8DD2601BDD13F6FFECB590657B00306122AE
43032FD0A660A119F48F63E44E972AB3D72FC0567FC01C3982CC614090783A2F
799473F790953B1126460DF3B6DFCBD3D1FBA8F2D66AE8811620E0E250F1A429
73E6050E2F2CA8BF8181D4C7682D318E0C0170A94C650E18414AF5CAE0DBFFE9
0AA13EC65A9EB65989EF42872E6AA8C55F10DF0CF6B9626EF1B978A9EAF39A54
7276B513CB4DBBA19B96F130F601EBD310866F239CB317EC43588BA4CADAF1D6
9A04323011FD1A5711EDE8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75F7B8F53BF7592F0
CD9C8E87EEFAB287EB8E1B539A2B8414C096EA685574267948222A7886782776
0F7091469FF255A729266042B1D09030AA65073B4E07DA110B5F7919D4DE6D16
F95A17A9025C1F684CED59977D21563F33124B63BE2DA62F951C898CF665ABF0
45E74379D67EC0B65FAEE2BEC619DD75BF2679D456299A52802A64B2E52365D1
8733275A1938886D2DC102825CB3EF2A7B55379066FC8C4F948986B1F80EFD95
0B74E614A6F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904E1BBC688FC7FB980
05BF250E91BF91F719E5568DAC7CB6961FC49DBA6673C707C4F13E833E87535C
CDD84389A559822986C68DB89F3C4DA86F1EF4A2A92FE4F54472863A43FD9895
C72B839A36171E129FD3D862EBAA36D35161B3EB6C4035E27B1E2CD553871077
DA94D205818CD5AC4E30E92D029483909939354ABA64D7FD59BA1F9102D5A134
92C763050D8E3ED64E592BC6CF9935D1EAFD4894A600072ACC70C91B876A4EC8
599D53A3367BA3C28DB6183AE68F6564178DC0354B62EB1227A0123488E56195
B04061E73D829B4B03D84D88904AD23D3FFBF1AFBF1164062F545BE743C40D7D
4B37D84B5D736ACF96F6F943420A83F519396B2291F4C2E19D7B4C688D432B1C
1C2F6B327227BA2A0F6AED502C2F97871DE3AF0C9C46D7B941BE395732E73083
0CA81BBC2AF34B8516ACEE9AF62EC3249236C0B31030E565CAB34881B3D7DE98
FEBAFF0B41C83E756520A3851274FC638C003286810D94689182FE102D02B63F
9E285348D39D3B5578962247714847E6D5E5A69393290CA539B14401C2FAE06A
05A703A3A4C06130F8B2A4308C7D7316EECEC5122BC1D02CECDD52C7DE191A45
34AD9403CD892B54E5FEFE8258C7638978C6520D2667DF005C194F225F73A3BE
3E7B17B1FD9EA5D79E5772AA6922C7D4B56C2234B34A1FCAE111E66E64D76AC9
9685B50E26079B5652624F1862C8152DBBB00809A5A5F8BB27D8A3E942C40C77
346DF4781FD6628A564853CAAF633F4029BFE5BC27A10F7DCC5DBDF880E30217
33E027
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC44184E183
3BDC0CF3D97EC8E6DF2561B49331578ECF6BF0E8003939628B934C1CEA33D161
1D05E59ED9BE05071BE95A8E1A84BA0C4B54ECD961F0EEB3548BC968950BF5E8
4160FBC4C2709D6B1A9863A27EF5934C5CA2043B9B0E5081E58CE7F78DDB9409
17756A2D719AE12C53BB38A15021AF9FB97DE82874FE58772E82FEE206948CA2
8F5870230E9DA69ABC80788F2F72CEE5F5594B2AD33DA5F0E0E54A39325730A4
38A6EBB464931916CCE9A37170F0C02A9C7143D722CFC08677622DA09CBFCFB4
CF3D13A7D2321812C81B5AB9FFB7279EC7FEEE5B8D8919E0D1E69B1FE209C5F7
4C4588B11876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8808C26AFF768679756
9D918E108BA06F43D33DB3BE958098AEC41E84B1C1EFA0C90B254C1F2903E365
FB8120D2C09D9BB3D1C77BF9ECE6A91142D95593EF9FD51E984BA42B38BBE71D
4A8624F7E5A2AC0BA9E61AEB6C09615FF8C055DF28F5447BA7DBA7F38EDDEDE2
9FAAF15434C9A5EB4E5C26A60178B8E8F880AD28314E74A54418C3A31925B909
B40A2BE6C00C57C5030739349FFEE2030F843583AF0F1FA64BA689C8C47FB9AB
934901C435B11451A621766DC89F844C96C6DF5E93A3F7701E83E7FC012FBA93
B7A72ABDC055F15AA3E6FD76D830467CB5037020FE619214752C9031BEC04D36
B11111B5A1A753062A05C1F133AC1E08E1C53C079B8BEAA3E0F907086AA23BCD
6FA98DE85AD4F83CE3CC63FD1CF9CD6F22DE8BF5DD5AE9D84C683AEFCD28A37F
CE581113DE83AED2FF1CE11546783EAB8734E1DEC2D468FE9B6A86C3C2BDAA18
C8562E2CD8F68A8EB7D9148A6D49241DC602F4B71F8BED7CC716202447C343BA
B5CFE6CB66ECB7374AA648C33144BCE45A84612537D051281CDE278C98B6F72E
B8BD3F0CA4ABD1991133A93A1A60484C2C9CCEE12B151625E57C965A5C40254B
FB054319F63413B8EFB556B3D8DA07F98E8AC0D2196294FE173EA579ACDCD5CE
B4EC0A94C48A9BFDB2F7C0EFA1E5377DEF19C99195A6646B1336F665CDF2CEFC
13E42F1CA2764FC4EBA1EE24B2691973BDAD4599C62078A6A0650913BAAB932E
8505934C92D144EFBFFCCAF634AE7A1D21B652818AABE247C5D4B06C0CF51784
DA23C2D29311C4F82514DCF27C6B97319AD5A80DC8A9A5AB7918FAB070E18406
BEC009B0B4ECFFBBC58151AF05AE335200711ED945E18B4BBF0782B3BB7F5B0B
954E7078DE3E31D8AE65F9EA55FECB544694E95E6AF67C7B558F90B31DF454BD
9901259461EC12974B4B88A0AD2FFB4491A03346BB7DA15769BE5811DD097EB0
065B1E01ABF5E2D8428D248B10693AE77CA32C8DA3FBA7A26D8917B92E236864
F84CD7CACD122E040A0F8D3ECD1B056A35C37842C492DC0EB9EBD541AA9FBFDD
EF1F775BE0C411788B054AAF21D9A5930533FFBFA7D3873F8ACB0692B310ACA0
D9C6A9E303A6B9AE1AE673AEFBAB29855FB3D8891C19BF97502F351D81614CD7
3E27F230046F89E913D0206DFC93BBB1BB4A3200B92F0FFEF45ECE0C0BDF3137
1385FB5F85BC040258DB2E044A6DBC0975EA6AD0CD1E8737E0EC21F7CD596D42
A88458B89786C2F6D96D674E6128ACFCBE80D55A54E9B0A6134FD07C076DCD93
A5306D2EBD3AA0CE027E4703A2EF8A43EEAC6048A78A4127CA7332E5039A2A7E
32F2389255B0491050D93E3B8C71D54471DC77362E329CB71D690E0261FC24B0
DB314D93546A29395A5B6DAF9A14BBAA2C995E4323A806A594325F25D89F9774
F024544EB6B6AB433AB94FDAA26B6AD2AE5F9560C3190AC388C4D02E161B1383
535A434DE166A88EF1032E139530F126E04969167E33E7B2B8A1A6ABC96302B0
4163FCE3091F2FF0E1AF77CCD02BA9BEAEDF855CCA6D737976FBB5E17A4D9F18
FE026D67841E1A749084C0602F13B2F4140A0A7DE08278DD953444B29D7CB004
560D0685F73E8772FDDAB8757C7135C3E5BA36DC4496F0D428FA761C2B3073C5
24E3E2472A91211D99AA82119E8EEFA1AB9B49ACFC71131694C405F36C8F710B
467AB3742BBA4E26746601530E5DFF5859A51DBF625D59CF3FFF57ABBE60E7A2
F5DC169BF13C56D9D08860763C7F883087AB11CD2BA1966F4EA30DF566B55D4B
DA83DA7612E29FE3BBCB8F8C473E706670E11E5B221716F314292EE155D8A4D4
B9C26C903940F755381ACF661CD65D716E15A3F345F395F32CED2CB15B87902E
04E1921C7DFAC3C36287440EF394B79E4D83F7B26EF4C31DAB187966078867B4
A024FC24C76193E1473BB05FE5C44A01BB4DD2EC61FE9F5F63649E3147C7A5C2
A033C76412943296B481440A3B2A011233C57EBA78A4B3487208D281F5762ADE
506C2DA47286A8A2312B11DE483B4953D58E151DBE7DB96604B762DD50B5C1D9
8D200F82B939ED0E669484685B5267B075EFCEE9FE9EB70305C8E0A0AFD3F7DC
5CBAE45747765E96923872326A05D80FA0732B435BF740555A9ABDF6D2B26D19
F3BF8D470D7C712C1367086F8E13D7205C2D14AFF07DF5DB81D07D2288137F5F
527D08296ED667AB5BC28FCA23E3915ACE60D94E3F5860AECC1AAB266201F052
AF2C6BD1D336199A6CA7D8F4528021345892A5296CA56E58BDFC6A85A95DB6D8
6E691B2CA752DEB1DDA17BF931DBAAA00CACD1BFE1B618123096870BE70B6626
39D741B142F54C977FE55CF84C14319586D6037BFCD364F81BB2A17C17BBFBB7
923B76593B06C2F7DEFE532656CDB93129E54CCB7D48FDDD55900B3EB66A8923
16367BE88A8CF2D09B98B2CB7A21D8A93802E196235B1291EC5D95B0FA434EA8
4A2F23360A7678EE45EC4184EE08C2BF6C61A910A029751186CAD9795FE40D1D
242DEB571D806B4D69EFCDA04E4AC67CE424FC90AAA523B4F2E16B61774486C5
496CA1E780F71BC014353A3FC533E73387F375E3063EBFF963ECA32B7E348E60
971F802264498BF13D1BCBB341FBFED2A2CDEFC0C32A50018922B182724EFC40
2954519C5AB5A816838A718194B847E447349D3D9C938C286CC089084922DC87
04EF6B05558695BDA8F401BC2AB3F53F6BC6668205DE2CDB78409BDD5FE371F9
22F588E85A9D442F85E092279E087A8666ECFFC1D35A220462169883346C9228
63401D764EC85B61B68A43A22CD8E57C33EB67F9BC86226476D8910B06D4E162
BB680129221497B71266CCE760D91970236FD0FD17D0EBE1649EB274E2442F38
6C990031C8B8308BBE457AAA49304DBB946762D0A451E73B4AF512AFA085B101
C0BD23F0F832ABCAB2EA569D3FDBFD4D838E34CA12EEBF5D309C67F242D6B878
E8715677639EB8B12AC0A52D1A6DBF2D6AA8CDF0E3AAF4FBD881C5186D642E99
35339989BC9257463017E5192FE1E7C6EF0940F5262121893F91FEF05C2BAE0E
E45F6D447B4715F391FB060585E47128F9623D9E551EEBC41EE37AC1ECF5A942
04338BDCF98DF83EEAF1DA866F943AE2F41816D6A6708EE3710CC088E25E5D2C
186A57C38223D17A0C2789671E74C223249B4B286B6E41309B50D47A527123D7
F238FD4F9A5E9BE12F5BAA0F32AF0789DAA4288B4199A5552623AD5F8E3EE08E
2160F661FAA4E1BA4AF2824FCC862320938987F558584C21A7977FF2443F65F7
129003944FB83F44C2DFC95AE149994BF1885833D0E44423A8DD3C2472EF57D8
07C8070FBDCE91305EB0524906534219202CB54AD8C46C7521C46B2850AE438D
BACDE9AA454DFB1B796A750484EB4DE42DC9110CCF2A1A0C11134A6BB4CBE7D9
6BFF5A38095B9470D67BD29E5C3BF89367478F099D656CC53A651CB33A41FED0
978BE76434037C5E16A2F5087876FF3A9743772D4D02026EB45219984AE3F00D
0FE4F6FA06F5F68779BC0BCDDA3898A120B564CE97F37EBCCB48B06EF55D911C
DFAB3DE6B7019168B39D7D6793ABB5746CCE8589FF8D382198F4607A1AB4B7F3
F6FEDA3D46B92D39F2BBC4C7923B47D937B350D89F9470143F3DA2D755E1810E
46C8CA5D6C414CDB46507887886668
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C6897CBA116BAFB72AB0EB87071835353368D815F0313CB0260E2A
C39A160EC8C919BEFA168A2CE5EF1A04E4A8525CFA24179D2AAB9AC342943B41
FE0EB6837C0A1A8293F1A346C6FD147F026281D00EC140B07F721DEF84565AAA
F9420F16589233D70E927D0157AA5E5F9CFCBF9CCAE1A5329D38A7235C1AA512
8E77A77E04A8BCA6D60842626EBAF35292B3CCC5B9C740A403728630EB434B2C
9EE0C158E873D6FE77F7AB2E72F98B832CE0B58BD06CD658AB4AF2870C0EB8CE
FD13DD49C17B4A3FCA2150BE7BD13DB16BEC6067A50DCA9A83DB1786252E1492
9D595DF9E0EB9E874F8D3A5E8706E18BB89C894B6BCFF534FFF13787A93EA5CD
1C0688A6CF3790FD208CDA35568BE298A24F3D715683C927DB7FFD6A4F6199C1
A75A69B9D757319019920BEB8F1C7B780880EAE9914B5686028C201F44254A87
28DB78DCB8444854681BDB26ADA1BEC788C3BA7A00DBAF127345EE061A7DCD72
5370C371C213B6AFA0E73B5F1BBEC8ABD6903CAA69ABBDE2D6727EB1772DAEC4
3B54BAB8785BA26BF5EC132E696E24FFCA1910345967B687337D97B83A99D5F2
BD217331E32DB71794F084D1D3CC1C7FB2B732C2E3FD8DD2347D9C23A37DBF4C
9FABA6DEC36DACC0E9D3D734BBCEF09D44D0E5E0A12293B53A6F8A96E80C81A8
43DBDBA7FBABFEAAFA5137AE85E0F873FF43475A0FD680DDA557B78FA2E8AA6A
9433272C23534CF0E8DE3B2E3D42FE5724EA4468506521BD15E02CB2F4E5B602
F55213121DCDD8E9C0A421C180606587813B4F7C133E259D520F9C3E789A1B31
DEC7E8D9D5B6753F80C6596A9562DCAE63AFFC9A47AC2D12E4477A6AC9445AF4
86D226E6F7B4DB390A398FD125F6CC7CEE3497A441AB60F30765BCCCAC13120C
0149CB713FA20C072E48BB152A725F7EC750A859C1267F0A35FE839F17E77887
254EE844E6AC347928096F331E4BC14C95C48560806CE627529201F1A70ED484
FE92F0C684F4A046999E1F7CB61B4A077FADD3386640D79F8B3A8C762CF9263F
637D40C2791E46216D05CD96C635339F1FB370B47319F8178333E2588C40038B
2F9C7D7E2DD33F59B7BB573B16C047157C5419C6C814DA46EEA4AC13C5AFCF78
EF1F80C2CEEDA53D58C697C487E3C9F825B5BD086A6A2F7B07A33996DAEF61BA
B8898DFBE60A8BE4EF8E72B40803CAF5444B372F71C537B8241BF32AB7BED9A0
D237FBE9318037D51C1CBAD16BA25D4C12E8D7B5BE899351F1D53B9A1150951C
D4191262254A89E652B9E6A1FCBF54B5F541431E0E308517D3D30EC5772F8502
DD958987C874DF68C69C8B9706F4AFC9DE6AAA7588E2E79428379976E1E6500B
FC9C2A3589E39687C881488730AEEA3FBBE5628A47ED3CCE8F2E930B328189A1
F068E2A7FF37F0F8BBF57677E63BA8C11BFCD146DFF1E58E9703A53677964AD1
AE18797E6AFDE5CE9750886C8669924B4A80EF896E9AC2685547F7302B41EF22
F8B6AE688CF8AF4F13F9BBF2261C445F9F340B8AEDD9F56298F14D8155CD3AF6
5F14910B890DC155B19D84B87724E3A875090791C6898D07B6FCF7930729E5F1
0461A8DDBC9323C1BAEB5DAC77C9B5A9DBCD719EBA60A65E859D9D4A5526E468
75F9E57AA58FB8A262AEC06E95684F05777358D456A697EFD7B142EF74478FBE
0BE9124F5BB0C8C3EC5F77F48B6D769DF1EBA2E70783DF27D1AB6F025FD66AC5
E36822EB176A1BE79073935A3A38179627ABB3FEB4723391FF781AEAB8115322
2F01741B956EF2D479CA1479E848BD87DE1C50CA34E1EE93163D4E97C3C8F79D
B94AFD25A168E9E0EC7964EFC04561BC068A816AD7F2F87214BF9D14F2EA15A7
212709BC4E441CFF6EFA3F3A2AB19979B09CED97278C44D4500773D2B7245C3C
63523427F6FEADE6308DAE83C6180A9400ABC3A06B1CE11CAF072C3B40EADF64
1D0D802D5D39A65408501825D2D05D24677F2A9C91F818DF22D839B4A9481839
0823029FC8725962DE117CF9EF816B771D49E52D893FE34029318A47C1B18A24
26E9E098C93575D7E767074B3615FDB27B19ED450627C39C2D01215CEDDAE511
58AF491169D511487B130E254DF39B4DE5BAFA5B9682D05205EEC0D6904B56FA
2FA236F9EB49484FA63205BFE46D39A67E97A1B321B8A5011E196A365A8504FF
B21750EA56B26FE994634E61E135F90DB2CDFF1E09009FFFC42F545EA9394332
C430DF1D071306AEC35BE49D9F5784F2303938A2854D3FD2682E9B0F3AFDD2F2
5B4348EA847F5BDB4A5E7CDAE09975B2916AF00D6EC1182BA4E37CE824EDF653
B0E49A446B9E92F1C80178834205B843D8973D5D419D4B2E7CF8C2116A4D3629
5BE3F1996E426A0AB8B3F2D148CEE3190E80C659E171B0B9FEC21CC470A32CFC
F7AC318CDE98739B360390E9A8A22AC552A2130F5E79D444A503871F7E128E6F
1B405F53B1524D113BDE26715C0C06C73E5CD0242295B419893B61A60EF35C56
35BC195C0118C05F70E28EF6F5F7405401F429DD5A2EFDC3ECF20C497704AD58
92D7F2E681EB1EA12AE2DC994A238EFB69ADC55AC786BB5451BF4F4E830A055C
770AF940AEB362E1B69BE2B52CA51A4901B13439CEE80EF8F7EE4344F1FEF641
6394402BF28F2E8A74B365795F7326D0C8CE52BE2CDD01A6B2620BEFD1E7A8CE
9BDD3FA4014DF7C58ECF78FB93F77FA7F85D1B73F88A2B6303D890784F0A7EAA
88D063EBC28C5523E2DC1D80A83324338B3B2D23D3237BF2A68174F4D2E991E7
A981F856409739885A994617FC344DB440ADF3D3EE2B04DC4CBEE2AD62A3BAED
D108A81D00A6B3F8A60AF12717B16260A19F9BA76F07EE3B0F0ED62C1FF2CE06
915AEA5D922ED0D5410F7804DE2809825F7155036A85382E3E4FF1157314C412
6FC09ED06B4101F395B47DD5C51229D4A1B6C396B6C8FBA9A8C1BED601F97B90
CBCAEB4AB5767307DC68AF2217C2CAECE23C58DAFCEC64F8855E80F6D17A3C7D
589AC2CFE2E3090977B0DF4F894C7AA4D06B0192B0F6F902803AC681E672AB7C
62E534D15F54843671C33DEFADDAAED1A55A4848D4172862900A421A350F6046
50C307EAAAD00C885D0FDECEE7309C0D14869268F5C9BD76CABBBF03C6D46D00
39E5CA3A80CFC92B6F15F8FB5911024792F821A5FA4A71AF8E17F451714186F1
4A6519488066E0E20578FA29D7DD7738DED4233A873C4213DB20C9E784DCA216
4B91CBA8363E44DEEEC5F072DFF4CFAE42F1CECF23751C995DEEC559AFDE80EB
89E948453C1F725870E1EDE21789ECBC54F126834654AD20853F11A6AB840852
C69F41CED3448BF453FCD9A4F194FA648F9FC0971734BFA33946E8CF70D7BCE3
B519FF3E4AD9BDD4A1D83AD4745CEAEB0E0B3225972DD4E374BA629B2EBAB487
6289EB1BC15D3597CE1E815707D016DF2EFB584ADF8F82E270D23A90373D463F
6BCE8C5B4270F6A9C95573E2B64373F20D95B56C63C7DCA98800C31CEA9AF889
1E61DEADF278F86A26F926CF914312D7584C3D5722F25210BEED9B500C9682DD
1B24CD583F6405828CA86288EDE5B98E63D079DF124BBE50307DFFC2541FCC0B
58C02D35B51730CB8CC9D328F44087D37FD12C3584FC41CA97CE3CA44F36808E
93F58088BEB2FB322A4E1997C313D83D481291F68776C957BCB0A6CD89AD758A
2715DC9CCB2EA3A2811753587B23E48A6206E90E794877BF4605EBED55EB441A
F6B5E5D5E8459680BA9F7068243210E607B04566B936C1231FD15F89E061077E
CAF32172C44C465104564552CC2EA8F3AC2AC681F975D5299EF695080C2C3A54
7531C24584A494EE81AD3CFAFE7A83E2B619B2862381F015C8184493FC6CD10F
00F0AAB5CA28A07C8C94E346DA6626679FD09B995A2B0EBB9D18CE1687A6CB48
DF2914ACD46076E8F5D2D56D6A19931393831F1DAFC456F344800C3DA5B18549
41164D5474C02023FE6F0E1B50FC5006E25BA750372C86A036185BFC21BF8408
1446482822F23B4F3088E7E6DB4E54ACFB114E1C64E1DEFB8868D40B3A6BB1A3
5F0E7FFACBE5D25F8D2B1B99B73FFECCAF7C7531842B95B7A2C4656EF72C8DB9
03C21CE30CC7FD16DD4BFDC262AAC77DF4CDC435ECAE7B83423198A06BEF117A
FA0B6309924DB6ABD954BFF51D758526655FA1A05A37C9C9219587E2295BD474
8871D5A349370AA3F656B45B585108AD8BE899BDC29B75D8D092117EB5E198FB
60ED79B5E976DBDB2D13A7F91D619BC67D712BF7CEC27CE0B7ED8D31A29D7F2D
8EA30C2DEB48B4D41FEBAF2A1EBA00A248F4A0EED14F77987565B60AEBB0164F
6F138907FAEE4F24AB5E19292866F8B534249B0DCDBC721D50AA3EA5788239D1
FDB1623A68047E6652E3917AA9B640B072A8E2493D867BE349816D378DB18B9B
53B520558CCA4A67FF0FC9BF306D6C677D0C7A5EB1A94FB2A32754186D5A3C8B
16A8D8667743ED2A67854FD42C1CE1A08C426A39C954F7861D48CDE9FF9F84EE
AD17B366262D6EA520B8F8BADE8D32C48426982C0CDB79D50A341BF4B081D3EF
D3D8CF6479A85127D39C0775837C33FADAE090F48C5B163894DFA8ECE2B73748
27AE168634FA007F8981ADA98CEE3A4373691772A120BEE77098BB898BAD2174
9ADC30941C7DD01B0793031FC949E0AABE64CC8ED081205683F6358810D9F89D
792DA8AA542516E7E090BC1C1E95DEC7CD47562A0DB77066B47A09544412D465
2ED4B3611E4941B8E573B65BE1B31653C3A5C0A18FC6CAD109A42C217F281B8A
DAC4D3B269CDB4E4383FABEF3382387445579230634B0BE9131C975361A606EB
7C2DF1C96933477C7159A69957FEB8D991AB837BE399B82F87FC6E2A3BE9E797
949772218B8C182EB377E57CF585FBD40C84AC11231ED1DF97B60E0D5E6D6B60
C563442BA879B544D4EB0846F9020764BF4FF3D264631845478AFDB12EA7DAE3
63C0E24D252265343F21E34F4C4F02264300B4947B4203F0275726F6F0FB4150
F63A07ECA2A795AE448F5039B451BCD264EC51F4D9CBB4A7A11CE64D71130E0C
A4EAB47F226C956877B056F9391AC00A0B49581044738895356D74E4CFB8459E
6037D0F82A34FAFE92EFC6E04DB7C77BF02500A1C6D8D7885F03937BC0E5FD09
C4F3F1C293BBF681F4F1D487658B6BC7BD8A4C3D2938DD344B629F22CD725504
F663F0CBF8A59DE67E7E5056DA34A457897B00DA935ACFE75F74B4AF2F24A913
E7D23E5A87C2E804B1545A3CA6308CAE16DB485A57B069003A0F41EE4650818F
F78E129F8EB891BD772FA9D07C6C9AAFD5917D43121D6D0A4833AF3FA4A21612
D6AC9B7BBBD561F2B32FB2C4D0E8A9E2604117E1F4A2C5765416023AB4A1F7C8
1B45BEDABB8FB6B81FEDED2E3F2ED6FD1F6423A23486066D369F9EFE0E3BA629
CE7D891FC8D23F7A120BBFDD1D29761A5CE0BDA04B75EC6F87EC0449E94906E8
6E0A80D564B1CD13DCA3D38525300EE72E6998A8BB77138FB75B63DEFD934888
AFB088C961D5A5310F444059E564378A3F656D797F98CBD838ABBD910E135876
3FDE3948E63F760F456BBEB6D69EDC0B218BB4B8F6080B9D76F50DA5C742B8B8
91A59CB534581ABDDF501D8C83A722A3C39623092BAA93345258B119828E10E3
2DF611F93EC1BACD2AA5622FA0217050EB0FC1B715A66BA8F33FE70C5A964801
B144222D08E54A53BB402DEFC1770ABC1E596B6231EEAD7E14563BADF2CCA50E
BBD08FFA3755C454F86D9A54E5CCC9BE4BC66BE32218DB7681D0BFDD12507213
7EFE40F30998563FA9B63423E2F6F836A91A58AE48AAC1C473BACE4F75FEA7FF
66E4E8F32807FCA731815708DE8AA5F8C77F2A4A5D06041443199A3153959E41
6DE84179B94E44EC1370EBA1140E796614E01126018BAC1DDDBC3604FBD8F377
486305A2E98D1E2BADEB1FC7E9D2DAF6F0AF549CF49A0C3D3038D48437A4D888
FA4FA477C73E4C21C80CE439F4981EC35EDC9F100E4130A8FB319266CE2FF036
3BD0418C92310F36343AE9505A1CA2C3C326FC7750CB747209558783A72E9E78
674791321E40A9B12B6408777002DCA7F2DAF04AD30B7844DCD79EFE0B9E3F46
4EE55FE0FC7F464A0B9B7ADD66B2D06019D3DE32C83D631DE0A289D13411FEED
C1D9AF44BF21C481285765D16F960B8044BF138A2F6345DC9726FB915DE2619A
00E0B497D66EA0E2E9B062AC5042A6398A405DCAF9FEB90F145344D6E9F1D522
1173EF0F48FA85FCE64D195F1B922D752413B1D4AC42542E44291074FFA76FD6
06920FCF1FD02800366EB57ECE6CA04DE118BD40F3FF3DB8301155A05B7A2907
4F67C516AE62E1DE778FA276C12544AC7248A2D4C25595EE09D9F1884268C76F
1D9F30B2FB4387BBD579CCFB9CD45E09DEC07B27D75E1754ED6ECF4337AFBE2C
7E7E2E678AB6A55D18C941214FAEE8162AB698A04BF7C4368310EF8ED84FC377
60210E11F22769095153059EE4B0F0885E2FBA703F54DDC8900A9FDD06FF7336
5E30A9015C54303D2ECEFB7A15351D9E80FEB61A33343B0D606594F96C22918E
E5A27EFAC9B583CCD6DD5590F604C1646BE452862FF9C657E90CB1B094957A6F
0E142D090D209DD510C9A53804ACA8682B1C8CAD6C49AA65BD0C5ABCF791379B
2DD09297F874C609BE120907F820D94DD56B8F8C6F94AB5B21AC4EE580A496B1
A2B9A7329944C401F004B694EA950F422758F19C91777660CC81CCA9E8A65FD1
C8F3C074A63F00C9355141DF6B4E361EF257F33F510807409EC4C1EF15058B49
FDA99A56004C0301E2649301A809531B85086E6816E35784D4C60FF488EAB328
B4D046B988C76D15417FD421E78E293C5F77954F3E73FFD3F644323BFEA3FAC9
D2E1C9101E3E1EEE071641F9F1AD52FD63B7DC5210726C132316034AECA45A6B
BD27070D62D23637F3A1528187D305C97ADF24B96BDA3C9F13ACED3A5C1A7166
5F61B46B2B3D50671462CF864DA1196807B414A5445385776A321114B0D5CA11
76B98C34B5B01F88F0F9D5812E53AD87B081F20BBA8FF70664FD6770ACB95E7B
E0F455DEF47261AD6F63F6A95461AFA28097CB7A3319641D10CBAE43F140F9C2
825661206F24621B0BCE14BF6228846763C3DDEEE8407E7A324C4E6DCC397C63
EDD2E00AFE9A69488715E0E6CF11937DED4479AC5CDC8C12D2A3EE840F7EA936
7D10753C16FB9EF6ED920E5E913C074EEAEBE390B33137D6C31697B71E5EBB89
DD527C98757EEE8E1CD6E34D2302DC9FB9DFEDFF49188BEE9984B3CCFBE7D682
3583902C7FFE7276DDA403E8294E53E6D383674E64875B55889EA29DB6A50D8F
E442661E19AD40866BF4097C1E3FE9CF3D7054ADB9192D05EC07B75986EC7FFF
2F3934474E8546C513B5F848CF3EB29D999D5971106BA1A03F374D0A5B7B45BC
6C666BED4DDD31D59322590E61EE02CA220472CBAE93A56BDE5CE516F6C32C5F
DDCF3A9EFFE938F608AF10E37BCD61CCF30A3A1CFC03DB7DFDFF958723A75C48
1CDE6E502A56D04F36E4BADFA4BD086FA21500911836158BB13C7B321117CF1E
2FE9ADF339603550B1479CF0495E09012F1A26822A2A15CF0DA24E8A346BF90B
4CFA70F55249DA81E2AD52E1F29D6D53ED1F68DABD47D9B10ACF8D9F75380314
EFB244CA4ACE18F7AB046D279189D9264DAA6E4A77C8EEFC26BEFDEF19D1BFB8
39BE28B16CB68BF111B2D42B2F6C617F2E1D76E82CA37C9F4B733366DC293936
149A3834002F49827E8BC09372D297A905A249FF6278EFE5684E13644E4E833E
2EB336EE635EDD788E2F03071C81738ACCDA27D44FC4974AFC388C750E5258F6
52A2191FC7F6763C53016B6A499EB8ACE0B56C57F8468CD4FF68ECAAF8280EF6
CA84CE40E8A0755B1EFFBD3A9CC5ED74CC8AA2BA51684E38429BEC036A66BD9E
7AB82B09C0EFABAEB0AA3F2FDE63B9EC71E749E10512698941AD72D8F57B6ADA
73C4EFEA7AE8CE18FFF62B10174DE73965D3905D9DF06ACC4DFE441FA86EE028
7358E6A81F88BC086D822055D140A2147D66EA12E1A6BC646EB9DA2A5BB92862
D48A2F82D4C7023A4E7DCD5B3FC7CB6B8BA6C872CA3DCAC381C32E6A276EF4AB
D0B59A7EFC907DE1EE3FFC94475D9BE232DA0B9B42C5793EC1EC183D2A25AEBE
14A3DCB4C902358805B92C365439B59EF5D8599FCBF4BD70782D46315B891498
3D0BFA89D6E5ACF257B2E1E51F9C5E5559C4FF0F08482FCCCA05E7298ADF7789
433153F09A77C2D2A5EBBBFEBC76E879F7EA74E15310C3C06AD6B858784AB408
114BADFBBDD4DA6D306CDD3A977E49366B2FDFEB9866F468F764C68010FC36C0
0D46513F0358C496E7D8D583EF268ED15A12CA214F25CAC357FC9749589E70B9
902C428334F2EF7008B08E3AB076AE9846A5AC5AC45C8B3998077CF09F839B7E
66A32A94E4AF4E679937F0166EC57F485FED651F6BDF0397CDD012EAD3E8F7B1
F4CC36960077BE7D7634F0EFCA92664E3FAFCBCE31CDDF522B986B6E09EC98DE
2BB281630AB956557F856C098610F29F219908849779BD444F261FC39C381BE3
21283534F91CFE4AA7912B9EDD4C28F41D680894C3AC9A1F27BFE3C893DB4460
7E15691A32285D982EC3BB7EC410B3DF486DAA5FF461BD8E22376824226C342A
8A64A7BBB7DCEAF61D66BA02B21D43504B1A6FFC9F151FD14A962CE6788E4D57
99E38503B664F46F29DFBBBF1E16B513C634117E8882A9D09A49747DBD867170
7DB6A0AEF555BB7AFB69A699664A7A9999D4ED57F37136F020BF804232FCA8B5
068EB9B5EB2C1AD72A46F36E975BF207CA72828ACDF52F3E12DACE5DD748D332
C0B3B4D0F219B4047148ED1C5A89CED3BDC3C4BF5AC6B30A15DD6412EF0B858F
D67638A69D963E34A9EEBA2942B432D3A4F66449B78E39D89BF69E8D2B5C7B9F
5C255F20AAA3D43736407BD3677BA08CF1969D75CBC9387506A8D328199ECE8F
265B3A8AB5BE7B32824CC5AB787B94D4CD4FCF84D3585104CD7BD822BB15CDEA
22226D875AD7DF27B59CF774450848617368519B209D02FCC76B3707486EB93E
DB1D35ACEEC06F31D8863608027A829AE5EE08A4E0AD6EC451F57CA742F4AB83
5F8BE828B461FF9D92A43F82AB0C0B9742A22F6D63BEC1D8EAD1AC0590C842B8
4D5FE061DA48D7ACF95B185087A9699ACB379ED038DAD37C8A80F5C2D7B80E1C
760DAAD5803A19CCFCF50F12F2077661F3F25FAF185C175AAEC8CF83A87B9520
992596D902CFF695458A8BF8CC0FEBFA7D543EDC381C2B7426BF94028406660B
21196242B9129305B384FA88F0EFDB13DC75A5E0FD8EE77B84A0B5B82D6E3F24
E6D95DDDA2679F00E6E7C44B6D69CFF950270D61BE715B67041F4EF96AE7F6EC
96B381E5AB180077B2FBF5A9898DBB6DE0A3D621E029D87528B8A816F5737FFA
1C374DC07BC103FAAB335A66E4070AA9D4E8D20E1E572AC1C1874F5A2297F5A4
54645FAF21A6CB3D149CD94C6FFD9D9F69555BC5BE176CCEA265D40F348B0CAC
A8B855EB94D33361F081FB19EF170A41580F74BFD57040E12C3AECEEF6EAA9FE
1AB198A63A8378E814CC388D282183C6344AAFF4C6190FBC351D77088946E266
7BBB01B2744221778D9D3AAC9798AA8208A723DEDB4125C3448C3D93AAB8ECAF
DFDB788274D4A17A0DB2E634B02260A6EC736C3E9704FF4BEBDBFF73AC32567A
9389006E77B0278CA72FC295730E8C42D0343E335392AA811EEECEE1CAF4D840
3E05AE9B7A5F45D61E027752678AF1E5B1931AA49AFDA02B0AE5ED03A3A4E16F
C0EBBB64B846E72B709F0F5A9D6C367F89D5E118B83A29004DE356E7A3EF0820
1369622DDF37C1B7F7E9220A54A68E72CB887D6BD5E7F13736357D76A1589129
714376C2F6B623FD8787371C000FB11BB0F47B2614024A77686B020E3CCCED06
C1A864B6B16A00381A8977C118A494A02267A4EAAC1174849B4257CF9166453F
3B64F6B766030F396BFF9D8D24107F3484620E026BC4C0B6BE54D369771AF2AE
C84C4D7EE11BFC30FC89B82A02759ADC5BAADFED3DC393BC3AD45357E0887694
E6E5BF88FE53357301BDE7A2897E69408B6989FE34B3E60C443E473649BA7F2C
988658287338255BEAFD4F012CC3F905BCB334503F9F4AD872EBD458CA3469F1
DDDFBF6A085B924EE2E02339EA9036640AA9B3D2AFFD8889C1B41BA8D81809A2
B2DFAE53B57027370E2F28769A085555A65860F3453F37C2F35E4C53C528A61D
2E47D7046B8E6F32C3F83614B0785042CA750BC82D7A04D492218EA4E892594E
7A5389FF6303A9B8AE67DC7AFC2E2B7D476D423DD2C022E51417D5FAC06F99A6
AE62CD35F0A8B4A191F2C199C8B0C971B9DBCC0C31021FEA36CE36619ABFC25B
9BC00057B7E59079FF967595E0E4EEECA740DC8E649BDB1A1FF15D15730A8E9B
A5AED1EB646C408278B9B1843AE8891D55C3ED0A69EB60FBD03F52ACC18FD973
06C7252493C62265F40A0AE0F36EA006E1E60B8D2211C52FF823406DD2E82147
5A5EFD60CEFE7C85DB0B7BDDC7049B7839F0EDC5D465DD3430FC1D9B1FFB3BFF
3F4EBFB48DE5F13AB9198E68F2109023CAAB1CEDD1216E4C2267F2D1295F481A
69444139F11712EA864EBE1BF16DBDDE628F432C5D69BE14CEB2B63536E7257B
104068DA82EDB19E581B5DBFF408A7C91A37F9E385F0258253C8B35C659029CC
E4D1F389CD7998AE1170DBDA9AC3B31799455028EEF9376673F034E13A485CBE
CEDB30FA8264CA4DDC1CAAD17BB1C10735A319CACF1B3DB90B7D6B3C86C97B3A
BB2CEBA8CD759AAF0C61DE7FEB128D538E908536E855B1227F92E35F43A3648E
5A3EFE6DEBB45B9D758463F2F0789851BB3BB0272FFDD1AF74F816A14FC39DF8
A664335F672F69CC52F8BB7094B3E8219F91A4E23A0E41ED3843D74A6D2B9268
395EA97E54F50E7C38B2D1CF2804CC9B1485789385A343C077BDC7924E492F68
80B946458BBEE5E85A4AE38844A0DC6FFFCE2F60EEB9547B8D2FF3EE6428B3E8
3FB074ACF99BDE3713A980F0A860B9207004DACB4AF0ADFA208A0647AFD8C3DF
7694285DF3C54BE26ED1F2649D3F063226EFDAA09315C5B6060B3ABF53D813A8
F133F3689EC8B5FCF95F19CA105527F5F9295E8A3485DE2DFB284721B8C335A3
78B34B0E95580AA7627672DD6FDDC6EE7C9774C56185D5B449C7AB245DEF5DFF
9A0F32C2000CA893A9563F931AE44E3A04569BC0F55AA169F29BF7FB935DFBDB
6588BE0AD80CABA483B240D89077B121C4470BFD0E2D8EF289228EB0C29050F6
385830B39A25B5738944936FBA2F65306228B15AA8360057B966183F8D361527
5370DB86F367FCC8A378FBBA0C3090501E144D7B699584632678D493E9816317
B1D91C1CF901626885A2CBD7D1596E1ADCEA134573DFF7D3E916CCA146EE4DE0
9993900384C2CDBEA4D1110E52B91F581E6C2BACD820AE4FA46214F93C68C7B7
02CAB9758AB15B907AAD01DE5A78F37A36E04F149DE41C0729E84A26CC040A5A
5BDB80154CA20228967E4FD41CDD60D65ACABA5D80DC3756FA702D030E20154C
EA0AE069063B6B3027D6A3BDFCFDF4C8718492E56428F8324E9FA88A7F95590F
FD9A01A61B7BAB72772B2DEC62752C45C85F3A603532B023E8FC86D9FAECBCFD
08F215ABBA7FBEF668C2CF2E79A9B7B948D8161D8019F411F4CC196288046605
7A27B1171EADCC0F19530977048E522F48A7EE174FCAC8AAA1A24E4263223931
5AAE400249B6252E195AF06B8DFD98E489354CF9989F9C09C9DCE0774E843367
C1455C318A98ECE3EA6BB6A2B2C823CE5C37BA5D6711AC1343EB36440275B158
EA3EE8BEF8B173369E9C92F5FE0A0B50182B4C1AA56E1EB86DD226EFC28B8995
FFB235106B57843546574C19C581E225B099C46DB506AC46FF5673D4B01A57C7
2D0408F82D4C91DB9E797E13687D6FD69E826DAA3FB43B2AA7222541D43F28C9
F7A235462103896CB3BD12DCD025C313B443D72281E103692208F4524D1DBDAA
E6F7FD58E9E67ABB18F8B8FA628B1A2BE7583A668539287BE1258F420C0BB192
2278D93B5167D5D04EB1D64C750BD5D40EA463CEF58B2246C67EDE4E7F846FF8
18BA364A0E37C6FE47AE355AAEDC0E69741C9CC969C0EA98812C5D75D004D4DA
61A40A89367095B1D9C19B07F39F1A12A9E6EE68B338C08D0A70CB0DE416BE42
7EAC4D71741043ABE6E636AEC9A676C800CFAC84B63A35CD43F50A874FAE4D85
98F9B97FC22DCD08C323F8920A6B6F341692FB9EDA718A7E5FD890E424490C65
C3D73DCB6571F5E0D6781DF73DA33B5DCF4A317B296EE3B2BD0BC5D118327390
ED62E85043C237A7A09609B9D07B496B774BB5B304679973789E1BD6E129CB7B
A07F20D0E5773B2D7382C1027D5CCFE5E974061010CA0D7D315E248E141126E9
DE17847008A8BA241462
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD403FBA8E14183AF6DC196EBDF6776DB96C98E31F27
F39250DE057DB61B6D5F1CCF350E39B0096C105D1AD31CF2F92FA5EC3CB1A3B1
D84E86E26AA8396D696E411A8C0FCE0C7B49B8C979CB120FDD2065B22CE6C66D
D249B7C21CB36D5E77D744042B565746C2ED9683D7978BA760C777DE4B62B8A1
55416BC2D2DAD72B547DB673ABFA560C48A82F91C2619DF2F9518076BC6BC428
FBF4EDF823EF0ED8849EB5193727273CAB21380891E72667589D958B2D0012B6
89FEF2D516BA63CDF2AF199CECD1F2A8C36873894B09AE0733E47736E657E196
35325ADD0C1EDAAC8219927C37BAE32D5453450113EDB80E4254A88EFD2D990D
551FE2D67C790807A33F11FB95BA19DA18BC092D0877CAFB843EA4D1C40B4E12
3E8617188826D8AF0E3D6FBC16B3C00EB2EA94DFD19CB687728FB1BA0E80BE9E
896C108C8D1C807A8DACB1C34B52A6AA0140AD762D3F3151091C9AE4B762EFF1
1A1657C66565992DF48CEB6055C34E8E11619A37B17F8FAA536F7E243E95BC3F
8CEBF3BEC744DD1F7CA3A0D292C9DB741608433B373C75857EA6DE72C7CA001B
E9D46BB3068746009073EF7660F66EB22967D4411EEE26CB555F3CA7D458A6CF
268C53035D1EBD959C48956B878069AC5D6A7FDA1FC5E0CB3EE349FEF72A9530
FC74C15CAFF4776C6FCE5868C3EFA8E3C764A77ED697D423D12891A3CD782D1F
A605308DEF5FFA186C9009F2204686C61AC13F64FDC8F6D231E67B6299363B69
BEBC3520FBB765ADA1E81CE23CA4B275E330C65CA1F4734481307EE07CC0590C
0F7AB1D86429FE36C013B99CF671533AAED758019EF9F08741642E889F63A0EC
337D608954E64D448A356F9E8B797542015259271BFF21F058732459F20906D9
8F2B1F43AC3B2E71E94CDDC892B8E96DF0F40FD4F3561B1CA13FDB336B28B3C3
32034599E67841126597D8BC8C27571AC5DCD74F5EF80478C21075D5CF1C8C36
B1680CA3895445FB0A49BB8F7938B3048728CF641F180BEAD035934B1A1B9390
14201074A74E183103E5EBFBA904859981D7D23D99FE98D645E585B240FF3D5D
D4C7B3D86DBDD3F4F15E43F84D969FD4B5651BF60B28F79CF5B7838A7A302F27
E851F5AEB42BC2175E12EEFD8A7A3695E1100AEB7C2A90F467D9D7B7D1EBDEC8
A401F5667428A1E50F614C95CC1178EF0B06040CC4DCD0C9028D5B251EF3CDB1
BE7952FCD5D28B7D381E133697649F0F42B3CDC3B197E526D7E3252CF9A52645
6DD96B654B220C810E99B9256D76D362F22D6C394A56571B1670ACB34452B289
B6EFA41FB8D117F4530A3433EBDC3FA084B1F6C45E8DF03D9B17085949FDA029
354A81C7EE5DEC7DB291CA675307E1D3E7F517FA3751EE6891B4E808990F3BEB
13A496DDE4AC8EE4223256A0519B3D89D21A23A96B03F49737011CDB62834CDA
6BD39685C524BB7D49AF2EDCE8E94FC6D903DD96C0BE18D9A9003DF1EA8211B5
C466FBC3E09D7A7E2CD2B214027E77D46148C1715A3D82C82C4C5E99B7A9324E
A5DC28211A5A2AC9E25CC6A337F16684FF7A2B15E41630B5BBBC1417CE7EE02B
DD3CC63E8F659131B10C3E37ABF5AE01DCE7BF9028864E1CAC8399ADCE0E2691
62B73B7705B047682EDEB3C8F92433918297FE25ECBD2507BD0F61B9FC12CBEF
E57B9439AA8EBCC06BABF2AC3C8CBAF569228264E0804A48A4C86894247B76B1
6D9674897D614848DE15EC29A1A36EE103EA569DA7B6BB26EDF4E822A66B680D
CD9D688500D4532D22D21AEFA3B98F32BAA431C52A698BAD787BC467FA6FC843
9E8D1FA1B0EDA01BCC72A2055AE84250024C7EA40226154BD0CAC41A4819
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC19A29
B0275AF422EB548505307B85E2D428B2793378041115891F0B6306B6FC72E4B1
EB87B2D527B774C765DCE58B7F76786DBCC6A57280753DCD85073376B5C15095
AD4E14D9CBAADF8EF93A933795C0CBFB7204DC62340EFD3F37C26AC08DA98886
99C2DA581BF499925C57FDA26C1736487F2BDD3FF833163611BB26DA01367B61
774D9D6D569355D10330C9E14A5C5F7BC9AEAE35088FAC2E174B35591D972DE0
DAC5D8E984E967A0E8A93E8741F4A8FA89EEEC2556CD0D4D1C30F4D0302CFDED
66881FB58481B2A5CA3BE03F9A9EBD52235D56ABAA85003742F8271D715965E8
9DD9743B1DD19C90C9AFAE343A5877AB7D005FB3A78552A4826AFD5BCB86C0C2
26DD9642C96F6D3C578E819AD7EF3EE7745D6460F94622AC516E9D777D6C653F
CD96F07CC74AD17A93D3206EF4D481A294B8874E021962213E923ACE057116BF
383D507CED4E5A83378955473442B6A85A7C69A016069015EAFA706682E48B28
E8C9CE4AF423D49CA0DF1B37BCD6C2CCCE1B40173A0E450B1E1CC5188FE9A784
849524F95B87597782D7CCE2196BACDECE8E2451C2BAC4FC371564757725845D
B7240F7804FB3371973117CAB537A70F9439B5E8BAF9E2EB03F07F09F17189C7
C0F139E2F261BB8CBCD84D39EF0F0BA674CBF899EFF8FC80D699581ABA7D9D6F
98BBDA827BF8D401514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED289B59E
0F97561179C2C0F08E832E2DDBE7C66ADCED36369AF8B34D445FF8B74EE2FF24
AACF3D958348A87DA63DE672CE8C10DC9103EC4853C910DC7205541B16C0E6BD
1F1077D518373F33FD234772443524FA8A11A02AE0B8ED0B834A3E3051EF1D81
7F5405D87BD0B47C50A30133F267F34B10F3F3362BD2CB26778A212CC7282D58
A4486B7166B269B174B9FE9BB5FE94379B638B85AFE160FC1687A50867043566
1C462AFAF04AD44B11721927EEE7C26AC6210E8D4EBBBEFDA9D435869399D92B
E364E9390003F437D9A3A0A4E96E82C73EFE4C84FE034CBE8554026B75A3A2A1
4D27E98234B588434F88042B2956DCC18AE1C1E30A0E78EF0470B3200E566399
5C3BAC056B0B53358140F209905103D3B7C48B8EFBF4006DA984D240911DF09A
7B36D1EB2D9E4311A671CF7A660039A2F36055BAAC24E2EB1C58B902BF073C33
04E4C8EEB16D7EC879F6E9B1C1E8C9AA035ACA1C42A169FFAFEF7C4751BDF434
95DCF8C4F6274740CE31EEBC6E363CF7A318738C841A95FCD30CFD43A02700DC
099F78035093EA6D9CEE7427D41340F9D2987C051EC94178D91F36440E2D23C6
CD2DF4A349A2DFC2A1D978596F39D199116D95612BB8B52086679E50C5E68B67
8F373FA078FC7272AFC26FC32B777EFC3D1F73A61D397621181543EC7117EABE
A6A31BBF76B717A8CC0B23757E96D1E404B1BBDC42459521D54144EE5699461F
6D258CE9B3BBA9321EF1F3DF8819FE785491E998A77BEB9BE59525506F9C0ECA
4A52C1C4AB4EA9235E94E505E3605EBEFD5FA1AB4D32269620778BA0C6E0A565
27E73BE19DD38D43E700961DD0EDCEE6CE7F6AD035A435017F8EDC6CAD38ED8C
AA60D19C8AA1FEC0DC50899D11BE76EC06E5A9D3143473218B6E51F82EBEF76B
E7CC8B80947EB0E96F34CFFAE2AB99ABA68FAD15D42971DAB17CB1C3B9FFE07F
C35008BB8A6F905FE0FEC299B12C9D2C71B6A7454237B652CAFC7937D1F49007
A524E4F3BEB894755D4F2D6944A68175A656514425E96DD970D81D4C3DED38A6
553ECD27B328EA84D69069A786B4CB7F76E44064045778D4D8ABB56D7673C5E1
C6AE35EA0AA27644AEB03C8FAE9BFFFC4147A4AF8F821BFBA1A0F86FAB8F94EB
D6B5258FB7581BC0E605A1D0942F3322C2305190E68E3A3DF08794284CE3F6FA
6E71C671504B7535A3444D643B1ACD9172F151F97F266C7E280E64EA16DEC2C0
50C6F7FDB78D9371CEBBF656CC3101D6E9B3D852CF1E3480229AE081FE8BA97C
63E4670B912619A20C13063E6730387C584C8C75794C620B2330FD5BB8F5BC59
A60F63CB797C09CE1CAFDAD8FBB5062803C344D0CC32979A1EEEC3F9D6E606B1
C0C840DEDEB3A8F8A35FE58B2DB2251EE7EFB4DBC694919D4F41D01894C91D8E
03F68DB5527C37459A298C63AC26EEF70C0EBB8C4AC3A3112C05435C4F69B4C8
64B69F1B4BF61C360D64F58C77CEC3005810B42BD9CCF91A006C7680AC05E895
0AE2BB10E6638765C46EB7EB9719C9EFC62A27FAAB38B5692CC6B9A9A7BB1ECF
E77BAD007826FCA0B1990DDD42C176BF1DAAEDE320A0520882E5262CAD95C877
93D5F77F4E1FF4FDAB901AC5BD74E03B4AB25DC2EECC3CE7A906C63EFC4CE96C
719E25867CE904EA52452EB0669F812A4596651960277542A6DE1DA2B63339E3
51C07D0DCCCF62D091D524C26F6F97012F4FD7BE86ABD340C9D85B35D595220A
080681726C4D377CA89ABD1BEE3C9BD84A05DD11CE642F6E37605D7BE1D821C6
7C6D1B7D6DE18064541DD049CD4323899C637CC86D156192D23A2EECD788595A
9CE7108DC2D8E42AB21EE9BDAC8F1EA02187BD52D98AA5E11F657F898F5EFFB1
DFF317853626684DBC914B43B953D2EC5687612B8211EA706917052C6C9B73C9
5538B7FDFF75CD359D582CD43AB1B2097DED7EBE2FE1B281B707CE3FFD221FE1
0ED9114698BBFA84B004887011625E803C349CCCF4C3EA0A05AAD4972066D6B0
719C21ADD52EB6C43E238C2395336FC074602E69003973C17D767F4BCB1150AB
2442F39C29EA6F8251D455AF9333A27F8700C76BB5CD1B3FE7E66A1C311C068D
9B7992CA406CBE56E5012AE88A7A4CEAA6CAF2FCEC02B6D8122137BD1B6EE530
BD9EE980DDDC7B888F1157C49B8D106265461EFAF3EE9F9B15C7E16E55329AB5
1DD0F60F9980CB3BC380FCFB122B3DEA3AD6BCE499E574341C8D29FE4D19D0CE
41E205EC11C253A5F6024442C76AFAD29B3E1ACDAFB8349EDC6A255BE6483A3A
A13B3ECEE040DA280902D3F42B2D27DA286236367D3FD620EDC066B844E0D04D
9BCBD175ED43D467903672BE6482579AABC919A77E8FCA217C65F52CE2AA6459
FE89EAC1633B4A5E122621CBDBD2B6015CB0F4472122948167369B0FE8768304
F9815DB6DB1EB3EBED0AEA733E4BDD01F8756257075996CFD8D3DFE03A794C0A
B1BBDC2D9DEF70936E6A2C452093DBC45067366AB510BAE8826D23B1C69735F0
4FA45D1EC6874991E5C6D966478C522E19994E2AC92B7969B6F1BDBB7079F19E
9CB0571542EFE66D8D9DCC47EB4CA47624CB31F7630D9DCC726E2D6F672352A1
58223A8BB70CED1416BE7F3E834DCF20B87FFD6B7185263948DEFBC960DB7396
A58111EE9D82CA8DD9A6315BC4454F1FD1BD46DD1ACB500ED7F8880BB8CA52C6
67FF8F76A79ED97352069A414D615BA09E156C449C172832EA2CE2EBDFF45B23
0623DD994111A1E8B4BFF9EAB5E6E85036F2D1F9DB9473701FB1941A761454F9
81D212A0F744B4F38D76A281E581B4391D0FCA41838CEB488F11399D1B5FA832
70898C37092D4C0A77C664A10D5F27AD6CA1E10837B4D590E004C2C2B8AC7C9F
A1BD66246D621D68E3703B6892B61D3C8B28C5875C15DCAA991212FC3C15AD83
00DC13DC8998AC0E556F162C34E443F99103D0182FE22BB8ECA12177CDFAB1AB
61BE3CAECAB7F3FB4B6D0B1E9BBA0835EE8EAA77CA1730244930052FCEE656DD
22AB4589BE79A66E6C29225EB94AC049221DCF2EE8E84E44649AF6BBFBFA17A4
89642A74B1A09188847B215FBAAE84B40FC563E8E96C2FB2C61BB90DD0E53FBE
5B478692084E710EE9167D76956FB4730DC119B834DFB210822C68937C23B9FF
D03692B957A6CE731FA5ABF7BA88676DDA7A42599CD959116AFF6D5AAE97A038
ADB36BFB0B0C59CAE39EF53C7588955BF73F3846A502223A86315E6DFC9A94B2
26353E11455F0AB81E32B70506D983959AFFCA8F97068C3161CBE90C807B4501
71A664BC5B519496F2E3635326B23CB82423EE8312B0305BD9BC2C57BCEA7F1A
D8589C453597D0219236D1BC823EC04BBA905A86E2C6C10C1643CA330F4C0314
1098D924DEFA138030482F2C3289AF7D3960EFD408D51C39FF1ED9DDCFC3FBBC
ED445124F8BFF3EA40FBDBD196111781FCDC782AA90418FCA3E9B2E6327267D0
DD9D0B71B59BE83406E1D704EE8E28D21F6DE55913D53D235A93B7DBA84B845F
1F8F17FC28F76DFB510BAAF095F2688110F3878D14FF24C22C90E9B1829AECC2
FA1A51C3EE46B13C8E08D41091703951E16F5CA469CD5FBF19D531965D3A7B10
6DC089FC446601F481A992FC76948E708A4A7726284A17DF1D2850336EDD4A8A
632851DBBEB07386453E0925911BD069F48B4347BC4CC4FD1CD077DB492CC885
44EF2FE7A3B682E760A17C68D45ECC77B2A6E4FA57A7644E7167F2D29D84497F
1284BA8AB4867F583CC9639A104C2BDD7A4A3426F7FA0EDEC8E002221A3A9C61
9646C7E0A053E9A2D5B0D16E664B59189E0F3F6297EE2AD3BCB936A63F5AB9C5
21ACFECAC1191EEE5356C2F8DA5B7C160B992F627179143B000AF845E6D12A78
AEE9A56BD68DC3342F7E98CC89E41621BD52D8DEEFAFAD2D1FC56B7552179F12
060125A634C6211E736AFC094796AD43BECA02B63C3C2FD62D061324FDBCFE73
0F798AD693F804340968244E7E53D1DF5DDF7C61CE639710829D5BFB4E904470
0A414BE22C12E227D8B073CB98CCAC7EC9A86579DFB6FB1DDD12BB00A33C195A
6DFC39CC2CA514935B15A68C270143CDE317F60A8D0167DF416BDE4AEADB3B23
2879BF43047F002267EE46FA7680ACC4399129B02A709C41F7F185F8DAD8525E
63FBE4C188A00E7EC5DBC7400042B89762864B5DB188271697EFA0BE982335C4
B5C40BB94DBBF0F96F20EB2F7AD7D45F41A08CEBEF7A8E46E8DCAAE0D7A15572
F2FB66DF77B37B0791E1E6E683D2545B0E378770331969ECA08F54AC2EA74A61
3F25AB80AEE3A294265E8E8B897EF96EA5D0873CB6BC1341477412A8DAF12CDF
1577C8781E5F7685E6022ED0A8F271F2EC18D042B730E7725F33B7D9F4F79F86
AC2273C5D1F94B603EC82A0E1CB7C8B686DD573FC129BF9DA1AC923838623367
8EF52D958066FD37D581FFB9520AC91CA3A2DA7D1C6E83658F325F5AC7BE30AB
AA64F5112FC9A532FF78BCE463F0EA231CFDC1FD56A6566726BC17894B60152D
C266F05CCA9C45F47ACBA52F1574DB94E87ADF4F6ED50F4FC1F7D44F7A3A0B59
E592729365687D78ACC209A03673FCAE0D00CD2B6B0A0CF6BF7ED687548AACE9
2D084FCB998682926A9A0E4045D82BC37F351003C17AE4E4AE0546D7DC7EE6D9
C587D6F790A8C8A234D252B0A08D4EA3C8AC4E7795AD1BD80B39D4AC2EF0B794
E99260AC75E08502F8850747AAC81815DEA4109EF4BEE1B2081856EBC911A6CE
78F04AE47D56B3BD9EB2D9A3CC0F5AAF075A839C318F911758DA5F33C912F368
2E62C3697A7AD661375ACD879F121ADF00EB108C70EE82D47E47D11A19A30223
5DE9266ADA73DC8C6EF3213AEC3BD1D5159F3530737D00242289C827B5306A42
5AD608ED9C4E13D55AED7B7E06DAECC6E7AF3357243A61B0D41ABA68EB730673
0CE9965E99E4D53A45D1F36BC09BC4C929FC0285E96649F4A53B3BA35A1B361A
2DCDCE2E1037382BFD686B3CCAD7E58B9901839B1C6226042D7BA9EA8A3BEFFD
23D1C015973B6010B47439A6A8F383F196EDC0C1500C5DF78D205D5D8FA293C4
2A22E0DB0E66DD1047F30312E8CF60AFA64D8CA0CBA6DC9624217B61D03B5708
97C7A52C53FE08F25C0CD8F29F2D52FE788E907A1F4A87165F31991D299ECCBC
2C4773EFB19B2DE36055C4F00773260E1B17CF61E601B0D13B917E4DFBE6C5D7
8A887368C93B54A6E8E9A626F3597B9AE124B478CC29B3141C532ED2E1E0A500
447EEF05747E0A5B1AD7EF798799B95FEADF7216A38199B789778F1750174D6D
3A07B1168C869512845ADB4178ACD96C5A6555C04D0A86613982679A7221053C
82433780891F08344E52D8EC3217F6DEB81AC3DC240487291F44335437CA9BC6
DD5B7B95C59E6EA281AB3AA210E67456FF87D610AB9EDA044C905BE1B80C3DA5
EA5931C0F474E9781C37A478CD06716AFB9B6D52D0E1DE2036DFCC6EF736E614
738B420A36190F38094956DD1E80376EC4C93438CD63DC0067E1EF893FA8183E
C089661D81979DBA5C7654A1CA15A66791873946E43512A0F4EC8C1065440317
A0E53D8B6268154DD3BA8064DD14BBFAA7332BB40CACD26B9C2A6E9AC2EDFC09
4FC303F43DA05619CA1FA55B5CFE5D573FB3C21F84883F41EAA489331831CE02
0DABBA1D3A7855B3960F031804009C21EECF7BF67A63F836DEAB16855CB5ECAA
8C9830F6F2EFE9AE1F1D2C343D75F55ED104E4DD2EEC14E82D64B3FC0F357E92
72D6AA791AB83881C29497D32FC610560280F0FC2E7CBDF26780B123310742E2
B007A5930C00817F06534C70EF205D317F9EEA96B84F9D0D186B589F99FB5FD2
537B43A7A287E33F5345AFA571960048DD1DB56924BDF7D322537A7FB4E8AAAA
EA6916A8EA56C498ECA6DAE8F69FE879FA281F64F7D1FE8352D12F42E287483E
4CF87EAD77107079501ADA4B79F0AF2B24909F31E0BFF72701DBC82282D14402
09EF82E640E3FB7C028FA060ACD6CBDA8D006B942BB06AC16B172F7FEFA5CBD7
29D76BFE1CC91958D11741870C6B29BB162FB896057DF8F54B760DB45195E7B5
9A12FA58BF0C0E35F3477651126A0F075BFA9AAEC3C8BA0902CD4652036CBF49
FC3D2501D4930BF834D5B88714836F3D90D089F121BF23E63235AC4050A01799
5D6C2D564F9A04CFE6BCE8D26BA825065280062D5FF40E972897CB7972024667
3B5305A0A508F6B90540FAD9BF6B991A1094047FD3F145677DEB504EB68F3588
5CDC4FF17A2A8A34B410C9366FA70E22F11B4FBB6599CBE849C5434654301BF2
58973D78C642C094B7DA96024AB1354CAC0EC2AEC3CADC624294BA4C7E0155A9
341F6E5FA258A4DC8C01FC1B02DE61C2CF9080409D9594951C3B8877B930D236
A0CE2F0200F800DFF957C5C43C9E6C58AA78518C4D3BA0622D8C458837807409
792235480A76AEEED01884A5F5A8D39ABFE2E35ABDFCABA5FC1104936E7AA880
00F105B9724A5C3C2FD129270795C7EA93BF3DDE5E753073678CA62E6E288075
DF73B29DBC4D15973A0EF06172E2E6AAD373780272A8CCD8B8251D95D33F2B93
A4D691125C38C1E7714DAEF130323EFCEB720B6096586C7D632710F6BBEF7A86
C3BD8543CD2B3B977A0904359A5DB2D594FB984BC91D793086FB2B3E4B375E06
3A56E62A5661DA493C045799EFDD3888E586827ADACDE0F445190A2FFA8CEB37
08719E3E0EEE7429E4CE888EF4DF9EB3327D6976ECE9AF0D814BBCE5614727EA
D661F5CC8D29C8B0078E9561567AF82B6B4752ACD548D21624794A013608AABE
9177F6308978F8DCC194949650AE723693DB36E94CB24D445D09DDF51206D130
ED9BEA21323B1DED45B79C2B72722B645DD92961F1F4DB77BB24C62D57E8859C
3CF70CCF9A0D671F4637AE61246DAD3F29F8097B2AA6A1DBB475398BC1748AB0
AAD17ACD14E0950A0208D2B5E964F44D8745D71E9F46002E5A2C8F36B08B363B
A17CD9BFA3365293DCCEA8C0A39B41BAD46EDF88EFBA0D3424D8C3CFC5614DE3
2A5DDAE9E67F034F8E5CC156F6B543C9D2A8F154658EC2213A51B0C8FA6107B9
CAA60D7C9399F3C570E743FBB12C0174AEA85AA7799664BD219D5C8C64652165
C54E100D67120A3E27408F7B3565B2C71F9BE190A0CFAE03DB667EBB3FF02D16
D96486B4DEB7905094C242AAA2E7E706D7666BEAE44CA0B1A1AD85801FF0F623
55CA3DFF7B71149E59A402E894360236890FACE88D9E11321CF617AD38BFE753
30D7F25CB847EB03AF821C4FF54A861AC2860AAA5B3C84D89539201357A58F75
A8E3DD592E943D2CD88E0179B2BED2D1AB31D593627BEFD3DBA6DB707EF14F4E
2BCE892F4A3CFB61037DB8023E2A029C634D09853DD732AC230C20AC150F9BA2
1A74B945A47B1711493A920848EBEDE7106C95F08BC852B0CC9F343D504EC7E0
C43766933CC95AC40428BBDF3C4F8B65FF3703E93F997539B8A592A24DAE646A
1CF1DBBDE40A94D1D710D21E866E4A519654DF5FAEF6185542DA308ED200052B
28BA364673B25A593A2C9B431D416274BEA717BFC9E5C591BC15A61E0B59F297
97EFFE32853E72387F9C9B8E097A1115A42DA09A2AEFDFE1B6D6DC680903B9F4
CE6D3C09EFD68E54D30278C235996152A9A23BD87E4528462F6337196C27CF8D
1557972E3C26476B84156F09E9820E4391DE2C99374C278502B500766941CC28
68714AF2B47D07FB1256B06D0B4F99274D0C9E5AB9E293B35D61F905FA635E2D
4BCF8DCEB43C00460BE65D1F17988963678608A2449E7C3FB27D09378873C3BB
EF683152D9C7DC916803A0B7BD2E39B08CB5B4B6C1EEB322D9ECE026A1330DC3
BA601474E527E8D3245F6946C1D86989F75C1927852B4E918B04AC5F57EA05BD
1E10F4D5C048D5E80EF3DD27656789C5899441B2D4FD1729F6AC863145789E9B
2197220C318E2015F40C474CAA0D515BB24914A8BC513C657C68ACAF8C16F049
221E8D4D68DBB33F1B85C31A47D9E95E3CF03695EAB9243B3F77C7EC47082B20
222BB6C9E3B6380926658E18ED6D7099A921234C6548815B5C9660EE05DFF3E8
A2D0C028919D62B57E7BEF28065FFD3C8C527A97836B92B6632C16BA9EC013F4
E717353780DA535FF8503B2FE7614864731EE331B77802B3611BB7ADAE04A255
85305340D4F8D0C9391D9BC1207C5D977790C5848635499BCD8A87AFE8929DA3
35CB5F1CC3555BD8C59F5B827144A39378F4520DDAF19746EBE78AA83C219D62
742A2C15A5FD5E77C2B898E970BD13ADC6D96B1A0CB6AA57CF3F55D496AF8ED7
4F67F0BF600191C778421751F790C6B934A55CB069B604BEDAFCDF0CDF26BA1B
D4B4345D9F208B2A3C38D11BF9A3E8B0E5A22BE72C1C9BE72E10D2DEC4C7BB76
C34BCB260B10ABFCCB21BC123C1733386186C7A2A11C79BA89089C3AEE2FA444
45CD17B008197C843B88D5E6BF8D82762418949C17BC952071EF8FE386C86FD1
35BB5A0504D8C40900B2297EE99718421D83C99E052EA63FA075B1DDF0C176F9
A46FCF55C1640D977204799340B579CEE07F33A7C0EE5D0B1B026A8008FAB032
9BDB6A505386E828BE06FC04BA4099E41F065EE14BDC465CC358F65A3F4B449C
3DCA462B5EBA710B28B677164666D69A48A66CB2B8DCB3848F3A87B453231FD9
0385641B81A66ED3B7BA3FD02151523C5E08D0E692C19E22801C806A8D528C8F
E4F2C6A2C86AC2E378BAA955C278875A05FD0E43A207F545D3DCBBA93DC5CFA7
E890C012B4DC36720BD492FB3494E82EC6BFE6F69EC959FDAEDC1B0FAE83AC63
676614F3F4E5B5DE2BAB22C5ADD53E1979D118E5DCB63391AC35722A7745348A
8EAB4EF974D6AD48E3FECF64BF1B4DAA30B04059A935E57F3DBCB60B6D4E6C77
FE7ED63C9F33355EE5907CBAB9980125FA87DFB1C60D91EDF0841135A49C83FB
2A66B98DAA80B59A3358AA572111520CB6A40732194375A2809CC5ED831537BB
2F38DCCFDBB979F762917A6621ACEDDE77580390948FBE6E162192FD5FD36E03
A1318308A4F20720BD70EA0E64DF72D642E3B2E36EBD89AD9E87A986416747F5
5B88F16D6DC45F9D66AF006B75763481702BD151A5173A27C0BD81039909DA8F
DCDB81463A2995626EE7C3ECA1B3E15637D4D9ECC8A80E49BD726F213F205C82
97E5827A5B89299EC02CAD8C83601E1C4592BAA460D6CAF30AD02D65F173F224
7A1E3D3806CE52020A23BF930A06A8075476F52321D44A3817509A59F3447A24
65CDE6512B7B5D5FED415CD9718C8ABD3A96927F01DE186051C9AF1EEB3F64AD
464DF62167DF136F5975C0F3FBED887950A90BCCB9C2C175160D8A6809756B06
671CCF4B4170B0C8709C2923B665BC5C9A24D771D35FEEE6FA8F8ABC052648E1
FA2B3044927A961302FA4BA993B59AAA63DCCF7F82D1743DB70C28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C8594AECAFA6BCB9525C67AE8129CEEE93D0E
4438B41FCD4921E3E98734A0CA4A81B1B3EBAB0234605BD5EDDECB00CFE97FB9
497707BF772772688963F47CBB8BCB8146B517A2AD4778F5BED3702090B03305
D883DE113D20D1D59C7B4311125C835B614482593A57EDA3CFD0B475FE358568
5F36AB15514C7B2B9B2C56BFA07214F62F54AFC0BAF60689938D5A6999B7BC18
A86723F8B65D59A42F162B955567D47DB469926E101DC5406BD5BD792E83E815
944CC9ADB72D6DD2C08382C6273BDF5F73C9EA85426A2113E950F5766A32CAF7
E7F3FE16F3097A9ADC9C40D946036F91F4909E15821958158E63E699CC746844
85189BD11A255172F2F09F50626EABAAE93F5658D1E89200E4DDC04356ECBF33
25A2494B23F4737AC3FD94BA99DD39628557A83A95A50DCFFD4DCAD23E28F36E
0F4F358E7E6CEC1C941741E9F4A642C8BA572960B12C405C486B6B8D8594B8D2
9AF4E39E80D656B9D626A3561196C567BF92469C5BBF700DB22C7C2A99E84AB5
24D272FF4CA63DA8C1C743DCF1F12959171108168494FDF869E42FC542FAAF98
3B5EEE0616289C27C1517212BFF2CF9A0430CB4BE1AFDC30E799BEDE4F80E5CF
50E44B9D8319141D0F653FF5021F057C46264EEEB0AB0F4CC4A763E7F4976B8A
9BD5269DAAB682F5DAE48F5C2B7C5AA6131461BFB237CD1D29F56FF635D7E700
5FB6D574E2D58643191AD75D1B0A6402919E8C936E6D657EDEF4A1C0EA9D307F
48FA3EA9D820D96C4E6CFC0DCEE4A2D57F03F01CE9DB01559A4B6963CA01A623
F1F8DC3CAE9DB161DA0999CFC78FFE552274D05E250335E05CDD95E3BEFC41E3
8347AED4C526333DA13567389FF89C666BAF1696FEE4BDC1B32583DC8E01E455
9A9C3DD8F6F3795F08AB34397B5321CC6A1B2326F31CAF13F883FBB67FA28E24
D022400AA113F22AE32E572F6642EA9543DD8F6F4034C6B6541F8768040A2182
FA8F453BB476A5FFD06ED92EB175172021BD83A7FCFAE3AC5244A0061D020E5F
F8804A58A2B7AE7311C0200985C2EA4A83D10B86FD8E28B1E9697FC3AC4AD5E0
BC320E5263AF793B30DE3BA4E8046607B04A9C3AF17F67AE52BC83162D39CE79
8DAE03CB25E6664AB5905A8AC974979B66746F60E8EA8BE3216B2FBCF519ED7B
9A9F7C0CEFFAEC45A79AB2F85BECC752C765BC930578F2179FE9329D97AFDB35
29AEF4DEF28B5FC78F9B26E111583C71D31F7D8FF733E08A4FC07C2F9B79EF66
30F8EE7CF878B2F9D64CE49306EB3C51FBAF9326E119F39A807A5DA6C2242DDB
B275FC157DDD3A719552001D1C8031E261053190A8690C90C512B0FD8C8C4335
470BC33A673DDC4428A0E9E6EFCF814CFF20697E1B10D1C75003AD0481D12912
FA519D2217BAF171918B95223130BB38D5617AF837F8BEF6AFE4CAD80FFC7341
ADF75DF879A7BA81C8064B4A1CCA352282BB0DFB808523F653CCA5959665E40F
E323256A366A45877CF940CB28AFB5E239B9282A896F0E97B5AAA8A46AB2CC7F
08B6A71CE927E536BD4963C69405B1759857D8C6317AF22C5E2F970F01E6AFFA
E01DE54B95CB65FE0636AAFEEB0DD8B306E7A291E6E9F1316BFAADBA9135D64A
7DDEC789195D7563E0F826503FB1AF684AEE51128392A79202B542526F349F8D
42C2A174C3E0F92D268D63B559A404DCE76201197A04E9325FD23F5E98F88DD6
2992B83C188D0C8AE6BE2CE592E4A2D3D3B7F6D760B8DDEAA3AEFF8803C0342B
E9A2B0190082EF7A3A825B7D209A246DA1A2601635E7396186F3450B0BDBA178
9FBF48822B33BFC5FAD73A5F0279D7D24477AA83EB093F5E477B022F220DC7C2
68E27947C954A906EAD36D53FDEC9C70BF01856A65B9674AFEA222D580DFDF47
7821A9913516CB0B28F80FBB4B9E75B4F086E1A60D9FC3B616BDCCC2891EF3A2
A64B3227291F2D47B02EC7F91571FCF8978A464394EA809B0C466DA9C531E1F1
D1F093F794EA44C40A9D57227BBDC0981C25E3C081E278A3AB9359A878A64E91
399B9BEDFEE780E040423DDC5E3B4876FC8A9E07B698C695C8183E89A7FA85A0
C12A52763634899F898B85EAEB13AD7AADDE64DCC931800742872F993CA9738E
0DACA5671C5DDFF24E3E700F6B771F6FB4C87D72F27B03AF94B21328EBB4BA25
D13F5D195B515AA7A91F16F4FFACC12CBE99A89A735927457D22EA49090654E7
22FDB251311206B52EBF532A263BFD9C2FA14A17B3118E50A9DDD8E1FC334C06
B1A6225910406C1C5F7B1AFB1D3DCE1EE9F808E55D8FE3EA48F935B2C2924CD9
E921B84AE36688DEA3B2A11DF0545AAD134494AFBEFD9D51E322CFA2ABD37646
94E07F4B4D0BE56F4209647BF383E70DE6CCFD10A58D2A74E9C9F9A5A8827148
3AEC2E9479938162B353F4DB1D02D0123600E86C61E1E00F7CC5C90BDDEB9030
D9AD677703A1ECE6E9372088C24E26EFA58FC45548544953CED82E187C157F97
9DC0DF7EE8E51C4BF6C70BC794C6BBE8A2AF270D95231827D743E89BB609034E
AF37E97C820EBD81872F4BA86C8DFF65A35D632A676599386A9FDE56765DD80F
E8A7B6C80DFEDBA2A03212B688B37BAF7CAA542D07896534AD7BCA233A7D21FD
CC48F92986F511F7DE9470FFA0D0FB9916ADD4348282DEFEDAB18C6FE4DC4173
190302B590568214FB9B0185AA02D65A86B6B22C0F1A17C0CA52B7166BBE8755
F281ACE8DFD6D48A545300D111C681DF8126C4B55EBB156DC90893FC6E41DBC5
2EA2A8B82BC56661B8260ABA2099994854EABAF8C2D2253E274B3DF5638F9917
A410813827CABCC40A6DE5CB2784D01239A5AC8B9E0ABDDEC4210CABA5FCD4A9
E36DE60819A02B3BB4F76F3EA659AB97D4933AC37AFCF8CBD4F22FB2FBF6B0D5
8150BACD724013CFE2A67702F4AB2DA5543DEFF951480385036DA3E1FD91C764
AF577717E15213B179D88092E01559F0E3B01F03EBADC6FB78732E8A12E8BA5F
4AE1D53FF4FAEE5D5BAE73131662CFFF5E427A5F5DBB56FE1FCC69BD342E796F
F285F008E8815DC181F7BCB30C2771C52119450CF9056011CF0D1B9910EB4B40
F86B92F638DB8E02835E748597CD52F41C780BAD637C4D758A3B89E6301D04E9
1DD624D25C17C01C6EB24F8BD768CF2BEF0A1FB8C770A16ED76C337AAAF0CAC5
0861FCBD91147CE9E15E1B72BD078B9B595DC4936FCC046D05D5B8A9AF509BFE
737B0E778E3A14DA695DDAD810517EDCF95A50468534353B20E2373D857D0B60
44853C5346456FD749529EC1FB00B075851066845A6C0B61B62E7701EC179D69
D43746B82ED0CF463BCA4DE70B280622D99C8FD8E295AEC1514249B4FCE8F49C
B09412A104C60B3DFD16499C1DD091B1D0192C7D2330D65F128C47B2481B73BD
918AB35C7AD884A464DA4611C6F4D6F7526D769E12657A1CEB6590069F48790B
9A77DDAED295617FE3858FB3C48EB38A4F5DC63F9284F658F5D3A0BCC5428179
190D683917F19C19FD9F6F3799AF025B507F76DA3426665A73D5FEC959C6FB2C
D736AD7AE654A75EB53E92C2EC461D50156A5AF6D7A31FA35DBDD6CCD7DA001B
FCD3E74709C738989E937F36088E68560B7B1F028B7A4768753AA079E9B24F04
ACE61A8AF0431F373DF8E1A969C52A99052A4D3A226C1D83FF3BFC4D497466C7
F09105A287FB8C8D308B461B09C7F610A11E46A75CE5E59F8B7DE8BA21F6CA1C
6E7B80CD18FB1F0B7F498FA3DA42DF779499E945C7FF01A6AD7B9DE61B05EF70
99E8AD3950DFEC19B334DB6FCE59DDEE77A4BD9960810C7E2D6D1329F1783354
4F1951E62BA253E8E00B690DE2E03E966D32FEE68066D9EC3CD023EAEFA1A8DF
36E13053BDA85B86A77889F32C7D3B240856C707C9627D37859090C2BBCB62E4
82643DCE6A8E1659E40B6D009A85AA920298EF2F94154C2E4D2A326036BB9899
AD575067C86BB526666F2EBCDEBE0CB0CB37D00B190E158D25C1784FFDD486D1
1B9B6E29D61F325DCC233AB220521919C9249E4DF21EC99BAFBA2C8440AD11D9
754E264496D7A94C49F6F2E513A3A69737CC227B26BB6DF8E18965891CD27612
09DBC21F6B31D881668872B698FDFAFE8798F61AC6EF5447BA91F837AE8D53E4
AF5C976354A1D620B262C301513BB5E61B6519E2A7B4CCC4008841CF0B77ED78
7293EB9935CC16EBC390E09AF0F9F98BFCF5519940BBBCD5E2A0CF170DDDC91C
490C1229124F963B34A28CD55534E97E4D852DDE93D4D29101634F152954AC13
AD087E513AAF96EC7FBA3775FB35338F844F1739D8B7EAAC365A08CBA25B0C82
EFC57F42E2BE974FD4D4F3D45D7AD06628D5EF14E3DFCF4054446FB432EFC770
5ACF7D10A28F82A56001F532865CE292F5E0EED7D32019F49662DA4762C35F00
0942AA7CF55519BFB18C4CE9720215B071F1A66B60160FABC41F07BC259A340D
B030F6E95DC4F60CEFB005183F93B5D336CAD6DBFECEDFEF54DFB63A077019E1
E368EDABEF0A3DD892FA7BA1F0935BACA5F8A3E362F094DC4F0C86303C3C0714
9892DAC803151FD3272F1A472182ED2A82B0DC283DDFF824FFF8C33594E6DDE4
4D8A3403C6656998944709540BDAD17A2DD2562009EA0D28B7F1C365BE132AFB
EFA55342222DD44C03F8645D788E07DDA078D9D483A4B29448969348F8985689
465C4E49A238D11016B05C0C4D09F62CDABBE5191C19E29AF44BE4DED1D6FA03
90FD8CB5833D437663AF66A5E0CDC77AD22ADADCAF16AE8ED7953666E8DF3773
12217F28761BEC75A58D5AD92CAE65BFF9F589EC57E37AD24E5F12A5D9E4B140
5EDF15363BE64545662226D824292E0EBAFA455E7EB7703303EC4584CEE3484B
33E3FEBAAD9A465091297903D6CFFA1D89F66F81B8F396EEE47F02FC663B0423
31825FC2C75935BF670D2B5D487A6BB60BD301BB36B3343E26BDE511DA279D5A
1D77C8D414DB43AB089F0AB2985B186EEEB97C9509C9294CCEFCAD5C4654A1C7
654CA090FB5406A47385D584CEB673D783CCF870E479D50302DD5FD219A7C7B8
C0336956E6538675A97FB5EC1D135BDCFC36E28804D87B91B4892171B333055E
6CD5532D6314469C1B9D3E9A2DB333B9F007E265289A321139FF803E3AB7DD45
F44E7599716F78C1891B6EC2925B47C6216AB6C22C0D75D46066DA7926659E41
763D8C91BDCBB6A8B7EC5D06130B38912F5E079ECF1704E635F00C8419040DE8
541944D6AA00728A48E45540CF28C8EB61BB299ADAEC1EA0CEA9E2EBE108D41A
57121CC2B7171F0073F517D5F7EE44F99DD4AEF380F9E06A79FFCC503665F3C5
348CEF9CF34E05234FF556315BC2B56A94D1DB4C8FF451A9E7D10F186872B59E
AB48150A4F6ECB429BEAB319652B88B38C098665858146EF0CAFB2DFD2174555
8431E24CF879FF4E83028FB2D0EB2DC04B9DB164C1B6F9DA250BE4C95B9533CE
6A85F0FE084FE376E057E0851527070FC559FB8028CE320430B5785FAD882FA8
6695BBE9AA4A91A028473C3F44B6FE2596A4E523DEE0A4455732968BAFC38CDC
55EA0322513C889573098694D63F8D3CE51A81E84BE2B769B2FFDD02282DD3AB
70BD4BC7D10A8C179C9B328B0ECC86E9340E67A48DD9B219173D67C3582B2C09
A73691D0085960D0D28CA2BB53FCBF002B05F6D5298556ADE61D053A832524B5
44DC610691067B6C4DB719E4FEDBA7F859E0A4F5D099CA754F79BAE4AAB2B85D
EF6033D00B761FD6704EC5D2A941AB41792788D210B721329F9ADB6B0109029A
867BBE12493F696419A8AFB30A05E29750A0EFF4A2D6AE034EAC20E15E45A699
42D884ADB8550DE7188D98BA726AA4D07F5E36AAE03C0C518D21F13B613EEF09
B69CD09D14DCD58C911A4ED76F6DD054785158281C42E741E52D0F95642D7645
8A1C293ADB1098B107303066BCA1653C233619E585E41D47E6AA894BD085CE6F
D68B16088C9037E4D713CA1DB8033817B3D77E10CCE2BC8CC05547A6A3890E1D
3DD390BCA288E038E0FABCF82DC591E606F8989410E903E7C01DC06D49AB55C7
377FFDD2C208DFF947B1D786C0257B331EF4F0F88D44A569A078B82D8DE3B459
3E60DFA0581A0878838D3ED0BD371349C7819F94E835B47A052BB06660E8C5DD
0B880331B492B234DEB604E3653E9BC922B74C36E023F2131405F96D2DDD7B1A
DCCE8C52D3D108
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (bajzad.dvi)
@start /Fa 201[44 1[44 44 44 44 49[{ encpltt ReEncodeFont }5
83.022 /PLTypewriter10-Regular rf /Fb 145[41 4[23 105[{
 encplmi ReEncodeFont }2 58.1154 /PLMathItalic7-Italic
rf /Fc 205[33 33 49[{ encplrm ReEncodeFont }2 58.1154
/PLRoman7-Regular rf /Fd 83[65 172[{ encplms ReEncodeFont }1
83.022 /PLMathSymbols10-Italic rf /Fe 78[53 6[45 47[60
71 6[55 6[71 41 37 3[61 75 60 1[65 9[139 6[92 80[{
 encplrm ReEncodeFont }14 119.552 /PLRoman12-Bold rf
/Ff 145[50 2[43 1[29 38[63 62 5[23 23 58[{ encplmi ReEncodeFont }7
83.022 /PLMathItalic10-Italic rf /Fg 12[42 55[37 9[33
6[28 3[37 3[37 42 38[37 44 1[60 1[46 32 33 33 1[46 42
46 69 23 44 25 23 46 42 1[37 46 37 46 42 9[85 4[61 1[57
65 62 2[65 1[30 4[63 1[59 7[23 4[42 2[42 42 42 42 23
28 23 2[32 32 26[46 13[{ encplrm ReEncodeFont }50 83.022
/PLRoman10-Regular rf /Fh 198[42 42 1[42 3[42 42 42 1[25
46[{ encplit ReEncodeFont }7 83.022 /PLRoman10-Italic
rf /Fi 12[48 65[38 5[53 32 3[44 3[42 39[42 50 1[69 1[53
37 38 39 1[53 48 53 80 1[50 29 27 1[48 29 44 53 42 53
46 8[72 99 9[91 3[36 4[73 1[68 7[27 3[48 1[48 48 4[27
1[27 44[{ encplrm ReEncodeFont }39 83.022 /PLRoman10-Bold
rf /Fj 139[58 4[79 80 2[76 41 37 1[79 1[73 80 70 1[75
6[96 15[75 7[105 105 6[44 44[84 13[{ encplrm ReEncodeFont }17
143.462 /PLSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fj(Zadanie:)54 b(BAJ)-94
117 y(Bajto)t(ck)l(a)f(\015aga)3287 153 y @beginspecial
98 @llx 530 @lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 206 3969 4 v -94 314 a Fi(XI)s(I)s(I)31
b(ob)s(\363z)h(informat)m(yczn)m(y)-8 b(,)34 b(grupa)e(zaa)m(w)m(anso)m
(w)m(ana,)j(dzie\253)c(3.)g(Dost\246pna)h(pami\246\242:)f(64)16
b(MB.)141 b Fh(28.09.2016)-94 513 y Fg(Ob)r(ecnie)23
b(ba)5 b(jto)r(c)n(k)-5 b(a)22 b(\015aga)g(sk\252ada)g(si\246)h(z)g
Ff(n)g Fg(r\363\273nok)n(oloro)n(wyc)n(h,)c(p)r(oziom)n(yc)n(h)j
(pas\363)n(w.)g(Wiem)n(y)-7 b(,)24 b(\273e)f(\273adne)g(dw)n(a)f
(s\241siednie)h(pasy)-94 613 y(nie)k(s\241)g(tego)g(samego)f(k)n
(oloru.)30 712 y(Ba)5 b(jto)r(cja)26 b(zdecydo)n(w)n(a\252a)f(si\246)h
(do)h(zmian)n(y)f(\015agi.)g(Kr\363l)g(c)n(hcia\252b)n(y)-7
b(,)26 b(ab)n(y)g(\015aga)g(sk\252ada\252a)f(si\246)h(z)h
Ff(n)g Fg(naprzemienn)n(yc)n(h)e(pas\363)n(w)-94 812
y(o)h(dok\252adnie)g(2)h(k)n(olorac)n(h.)d(Raz)j(k)n(olor)e
Ff(A)p Fg(,)j(nast\246pnie)e Ff(B)t(;)14 b(A;)g(B)t Fg(,)28
b(itd.)g(Wyb)r(\363r)e(k)n(olor\363)n(w)f(nie)i(jest)g(istotn)n(y)g
(dla)g(kr\363la.)e(Istotne)-94 912 y(natomiast)h(jest)i(to,)g(ab)n(y)f
(przemalo)n(w)n(anie)e(\015agi)i(b)n(y\252o)g(mo\273liwie)g(proste.)30
1011 y(Przemalo)n(w)n(anie)e(jest)j(t)n(ym)f(prostrze,)g(im)h(mniej)g
(pas\363)n(w)e(nale\273y)h(przemalo)n(w)n(a\242.)-94
1286 y Fe(W)-11 b(ej\261cie)-94 1468 y Fg(Pierwszy)30
b(wiersz)h(w)n(ej\261cia)g(za)n(wiera)f(jedn\241)i(liczb)r(\246)g
(ca\252k)n(o)n(wit\241)d Ff(n)j Fg(\(2)e Fd(\254)g Ff(n)f
Fd(\254)h Fg(500)14 b(000\),)29 b(oznacza)5 b(j\241c\241)29
b(liczb)r(\246)j(pas\363)n(w)f(\015agi.)-94 1567 y(Kolejn)n(y)f(wiersz)
h(w)n(ej\261cia)f(za)n(wiera)g Ff(n)h Fg(liczb)h(ca\252k)n(o)n(wit)n
(yc)n(h)d Ff(k)1835 1579 y Fc(1)1872 1567 y Ff(;)14 b(k)1952
1579 y Fc(2)1990 1567 y Ff(;)g(:)g(:)g(:)f(;)h(k)2217
1579 y Fb(n)2294 1567 y Fg(\(1)29 b Fd(\254)h Ff(k)2535
1579 y Fb(i)2592 1567 y Fd(\254)f Ff(n)p Fg(\),)j(gdzie)f
Ff(k)3082 1579 y Fb(i)3141 1567 y Fg(oznacza)f(k)n(olor)g
Ff(i)p Fg(-tego)-94 1667 y(pasa)c(\015agi.)-94 1941 y
Fe(Wyj\261cie)-94 2123 y Fg(Pierwszy)j(i)j(jedyn)n(y)f(wiersz)g
(wyj\261cia)f(p)r(o)n(winien)i(za)n(wiera\242)d(jedn\241)i(liczb)r
(\246)h(ca\252k)n(o)n(wit\241,)d(r\363)n(wn\241)h(minimalnej)i(liczbie)
f(pas\363)n(w,)-94 2223 y(kt\363re)e(nale\273y)i(przemalo)n(w)n(a\242,)
d(ab)n(y)i(\015aga)f(sk\252ada\252a)g(si\246)i(t)n(ylk)n(o)e(z)i(dw)n
(\363)r(c)n(h)f(k)n(olor\363)n(w)e(i)j(\273adne)g(dw)n(a)f
(s\241siednie)g(pasy)g(nie)h(b)n(y\252y)-94 2322 y(tego)26
b(samego)g(k)n(oloru.)-94 2597 y Fe(Przyk\252ad)-94 2836
y Fg(Dla)h(dan)n(yc)n(h)g(w)n(ej\261cio)n(wyc)n(h:)-94
2961 y Fa(6)-94 3060 y(1)43 b(2)g(3)g(1)g(4)g(2)1890
2836 y Fg(p)r(opra)n(wn)n(ym)26 b(wynikiem)i(jest:)1890
2961 y Fa(3)-94 3259 y Fi(Wyja\261nienie)i(do)i(przyk\252adu:)d
Fg(No)n(w)n(a)e(\015aga)f(b)r(\246dzie)i(sk\252ada\252a)e(si\246)h(z)h
(k)n(olor\363)n(w:)d(1)p Ff(;)14 b Fg(2)p Ff(;)g Fg(1)p
Ff(;)g Fg(2)p Ff(;)g Fg(1)p Ff(;)g Fg(2.)1827 6155 y(1/1)1401
b(Ba)5 b(jto)r(c)n(k)-5 b(a)26 b(\015aga)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
