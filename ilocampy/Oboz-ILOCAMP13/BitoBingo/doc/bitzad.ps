%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: bitzad.dvi
%%CreationDate: Tue Sep 27 11:54:11 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLMathItalic10-Italic PLMathSymbols10-Italic
%%+ PLRoman12-Bold PLRoman7-Regular PLTypewriter10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips bitzad.dvi -o bitzad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.09.27:1154
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F626423E4B25A4B
5A310171E06B8DD9965DC109B9BE9452091EFA9DF9865041C2A59E6742006679
7292AC7023CCCADAC96FFA843B1EF3AACABF98AFF61EEA92F8ADB581103341AA
F0EAA9ED39DD8FCF250C6E4FB86D9F48502EFAB5813E8D1DBCD2AE271493A54F
1EFAACCC687DB7121310F3FAD9DE513E0D6D14A3980014FA109C9235A7D5505C
52A951BB4ECDA998E774FAAF6542A07BA30900ACA74A06B39E50628A40C4DCDD
90B738B16CFB488807F6E0781FF8233AA10DF72E6E09BCB6C2DF9652B0F2EE31
5A2ED05A5189E0C5A31E35448577F68ED849FEC7A065461871F62A56555CAE6B
D34D7EABA7B8744351564FD4E82BFB94A1F6C35E1C0A7E857BE9818EB11C4114
060FAD4E5E0924CAC6BF7C344DD11EDD6B2F308297C9E4EF1E184E7FDCD7D0A7
40F1C838D41D58EEEA338DD7902FC0E967F6DECA7277FCA73E841737D9AE8446
657FE87EFB947F6EF31DCC61CDDFC39A27718085FBCB7641550C829B842802A4
139BCD07D076306E7DCF94872D90CF64E3BF41013C78F4A702BF5FDE5FA4B44E
C231CE55AEF07E942B962DBFC96A6B7DB7C88AB8DB37E0ECC4580517E13B3C66
502DD2FC75CE2D48D41E551CB2D3F55CBFC8CBCFD7F9AFB62B4BC36D58D44836
99548992C6522649274648B6D218EE5A92BE39F0EB4B41A1A63D7A4813C0B746
D62CE7EC7BFA4ED02E83697425E75CD6015C07D1AC0A3728D93B3634B61B3AED
B1755A0341E20E4D894D2DD8099F6BAD9C29EBE121EC0A2D8191742514B5769D
6E007E09C14476E97358DECFA6BE9B8612606BD71EE76ACABD4139014E46DD1F
1C5C860525CFAA157F44AACC55D51D1F3AF69A27FC38AFF90EAF946CADE0F509
EAFD6CD46F92488BD47674FBF991C1D61861381F8C564B0686630A12746D6794
B5EAEB7988162D46A117FBEC8A5C803B86412505B6FCA5AB5BC8937AD9FF4898
D970689DCF2556E28A2DEFB6371422CDD07263005CD57098DC1F2BA3A42EC1FD
F11EC8385B3F737BA6157B5E19C075797678988274CE2AE002639D314CFFE080
800B4A4A7CC48A29293222794C5EBD54650D834DA175A5A5B2CC1C786660F544
C311D6510FA8D9CE71BFFCE3FA0B8A5C89479548766B85438C10412E9C1BB27D
8140EE919B881181642CB1F6C34FF817FA8E8118AA580596045A86A6B2AFCF21
664A704661344F2B8EDE6E6FFFCDF4EE3796E249E401617B569C73B926848491
96DA19968541E940E2965DEAD4F76711CE6B9D74B59101C9A84A76F6A2812AF0
DEB6AAA7984479B2CDD75BA33BEC1D91D932FEA8A790C218DD6FCF27146064ED
59C755DDF36379673B7F8CCEA983FC111C4881881022CC273C435E3D5D188804
6B04E77002CEFCCA0167A66D60F7565B29F58249DAE03DDA74A59A2E8C0DF0EF
E0A67D566EE4E202722ED52BF7181F5170D734020BE851291CB10E58A558D644
0E61F72C3299698DBA356A2ECEE5118D86CD0DC85A9A53BE7E1C068355059D74
13E0EBA099CEFFDA4D1AC4528AF6B5E307A77A660E8B4909C37CEBACEE7270EA
076115E876426DE86F64A790E8A8404E0245B8A16885E34E0B8426638EC2282B
C39C571BD45057FD09085730695ADEFF8E282CC9D509C3D4E8A89EACAC7CCF92
F9E1322A24CB78F005675BDB9FD693BFF7C5405F2522B9208A27D9CF2787C930
52299AEF4A850A8F552B9EC2E7721EF7BFEC6C841BF5243C17502D00617C7A43
4CE18673A6BAEEB86605F30BCF8E570B4341C3751A10FE6C3304E8F44083B4B0
71D47E59ECFE2F8ED23A1034B09F44B315BB8DDBF3A89D699C1FA84E704B02BC
85D61ADA5A111C08E252E05E49679E6C7AC81F42E9372DE5AF63C57933D28585
B6D59163EDAE458E91E7EA641EA38836EA5F22474EEF2FF1C792213126DD78A4
5D3BD72E5854AA8023B11FDD5D37C1B60D5582E03F083CF714686CE394898642
FFE0B0330D747E4E19758FF05160E6DDD5D3DC32A37C5BD00DD016072EEEA098
A86BA0EE5B4DF76423A7DB7ABF711BB0C7C703843BB4FDB8528E2DDE505A1121
B2C09C526E82D4B5F140652286B86975F652669E4643A2F15003996D966AE151
C0149B514B077E49CE66A190B6B90B72719B354BD26D41B5C11F19E996ABF6B8
67B967DCD3A8295B97AF98E8D4AAE228D4307DEAF10CAA78CE0B13629B90F889
52C9E6425D4FA67A18F9FA13125D8B037CD15D260635439764C95C9A28841FCF
CF279EDC74DFC885074AD7651D44FE76DBF369706318E0C38215CE324C5E8054
506521227674339C79F366B6CA9EA7CD06BB7B144263AF02EFEC13B4B98D2633
64063B0E4937FCA300D2D405A7A5606EC5452A69E1CF38CFE5F50CF79BE0CCBC
968754048C01EC7E5C529AF8688CBB5439E4B34A0BA7578B14A1DDD2B86E4865
F1E32B00231A4781E28A7E1B43265201F1B4C49A4EE76448D1CD1A4DAC35152F
1EE78072533F8900CC3A1869BE483057F7EE8D2B2380848306F12A275DE016D0
8DF4EEA400A80AD0AA23C2866945E469815B0182F9C8A34A47DE2689AEE3E930
BEFF4A1022CE1F2ED9B9EF8080263EB92C9DF6DAEBA5C2EFECEC09E50151C166
892AA2415303D2ABD61EAD6A4F21C06BC9C14D8D087E4AB1D8F9369BCE0BB50E
9E1B0FD0A6C9A6AE560AFCC5A0145DA0F0ED81455C2C8F9B3BD1DE897A30EC24
A9E500ACBDD8C0758E41BBBA5055C020950B9D22E7E351D50BA66FC33616A6A3
3920FAD9A7F7267FB5C7CD3F4E995178006DDABEF1D010E9602695EFAFBC424F
C533D446D120D550D1D51CB6DC9FC7209980E3E345CE2ED00A1ABCD8FFE6D958
BC13013E94942CDC07E3A25F760D71EF1785D9EA030252F3612B1A6FD21B4186
DEA113F80C0D13207D28EB51160BBE82AC4CCD8D87B7C697F062419E4DBE7D86
91E95CE75AC8A4E1E3BC1902846666240B74AC903C9C871265ADBC71CB6ACFDD
E14A92EF396AC0DE0F4D84B7A0E55D6586654038EC562F0C7F352C7B40495AA8
2811AEBDEA2BAB3433414BCBB8CA6363E7FBF25BE4851BD14C3789142EFCB816
6C0B475C9889AC86E24CC877EF68587974A989FFF16E57FDC54CEB48D1BDCE1A
7AFB3392B1FF44E9F1D6B5D719C7C9FBA6822258D19F6B611F5A07974795715B
5D9B694744B3362F28DE528E2632DBCCA57CDF56B09BBB2C57B5D2950254F11D
175E3EB68C1936059511BE3F57F78131542985302C4D80F13D362C0BD5C6E433
19C4D4A9C67D2480931BEE8C9CCFDB9941BB38EE985C469A83AD5DEA187E5C2D
4C3AC593983FFEF137FFE63E22E57D95677790FE602BF6CE7B445C5110B54517
F02BD781CED3739197D5654EBCA08337F392EFCAB214135FFADD68452F22D915
4B467B90D8BF0259F59ED9990EDF0D4AB45B60AD4F748DA2EF972DDA069064F0
8A032D5E547C6013AE1E635DA15E8027E962ADAA15D85D5AF706F0A30AB05B41
A378D4026ECAEA3453C28F374CADEF53DBB253EDF0E773B23AE2D4AA9D79F453
1DEEBAB4371583F223EC116BEEE5CE7DBBFED0C1A6579046CDB9371ABF295F89
AE2828D7F86D24CAE400AB92F05EE2D87DCE6EDDA372AE2AA1A8FBA57071B458
46F3E731EA8A640D37C5082A2234685344D59403BB40643F39BC6CFE8B9324B0
1E8E7FA444CF16EB5405B242AD48664C4C7780B37A1BDA47D59BF7AD2C587F1D
1DC4EEA9181BBC79BDC007F75CFF58C54DEBC0E8C956AB8D8FDAF9A21EDD687F
094B8567FC45380A67F81B5F44010616D95D56A1C0E8C8A16ED488BD39A9D6FD
6D4AE46B68284B094775D2CDB9A441AC4E58DE956B7A25331F1FC60AF8C17612
F008DB30E6461228E40DCD8A9BC1CB20E9BA84E78DAA7D8B510E4A64CE4202CD
9EE2EAF922995A31F2FC7EB42A2D4F358A9CC2458217BA5121CC668481C579F5
64C0B948B8CFAC1E529675A62FBFFB4B973F47987645F9EC2D0E578B3F918739
93EC9064D13816784636B207D67B07F69F71050B74DE5E7B19C3E6C312241DE9
2D7CEA0740C9EA324989A886AF72065D4675CC3E5BC98B0CB0792C35C6976B63
1635266FC2CA5E2E97FF0C8AF54CD4F15CCD5E52073A750B6A40F0DF37AAE3E0
C8A72AAE28B77A8F57DA1D8DCD3CD03C00CEE0BAFAE5CBE551136BA12C3E0124
7FBEC279F81D60910C29E1BE9C1412DBCFF6F22CF83F6050A6443F6459FDDA53
EE5951C905B4FD0F3062BABF12A1B0387566D16F7F862EFA98FC87A9E86C7CFA
5C313851F31B9C7458526C15868FB8B718843080424DDDE0CE4A69387994A77E
60D39B9CA1146E518316DD57DD265559B318787D219F2DA0CADA8CD2017D4403
B6E7D6E2F4D9732B670692C183024688BC7B6B33C96BE054BF68024217BD5F78
329EAF6FF15DEEBBFAD756A9D26B137BD980A71938F77ED20ACC11C4C7AF735D
F118C097C7C40B862943D48440D2201AAE58F8119CDCEAD2F093F83F6F0E13F4
F540D128BA24B039052E7811CE917FC5A7C0441D02E2C726FEF4B7B5223C6D86
F7DCB524C92CB573DFDAB81D42EF7C28E89D218050BC910A5E8EAAF484E45040
CAA55AA76840163FD171D861F579B2346E244E8C01932091D561834B82082CD0
2C84977AA2A2747825E750241E899784
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD30767592D9A23AA6C1
E56A863D331505846FCB0E22541651CD027DDEB4CB303F733AA01D92EB93F4AA
8854274B18EB71EC2B2539F6DACD88AD19F7B80BEDB94D712AFC36194FFB831E
0CCE1C66F5489890F3C969C9EF12FC145981BEF74E5720D709C036188AF869E8
D791FE3DCFE97C403F8C18AF31035CA74ED20FBBDDC934E46C672803E64CAA11
F586986040F86B92A371868D0E112216453D88864D7CDBFA1C4E6087B3CCE265
51A9D27BD46712B0C1B3579AC72A9FF6C21431F87401373886FF9B34CFC0AC07
D130A4933692E13EAF564FD0631B7B5A8F08C5CEEE39DA0CCAA02170FDE5BFD3
6EFF0AC4841BAC51D83ACD268099D0B3F11C001F3A6CFF966383D2B3517BB200
32BFDF869D9509B87D6F802A7991E063D0242A1B414B27C66190B64A062321B7
179B899464D42CB273BD3F50A9AD9A809DBE3FE6C0372F520F67C13CE5252326
E167C3709A3C7F0F8B141799A58D07A964AB8CD6C0F730A9953656D9A29AA912
1D9B35BF16970F9FF0D27F2E2D7B233163B9B3C3DAA490A64335E0B30FCDE41C
E14904B280AA259CAFBC5E71E23D1DE0AC43E1F3562744ADF7C5C75B31CA3CB0
797D514BAB9E2D87E6FF18D147C38C2978BF2BC79195C167BC2695F6E81BEA1E
F516F0D14E388288296C4C4FE540951D0DB8CCD8A462BEFF9FB0DC202BA7A7B9
ADC48BBC60E3EBC6C910F7CF78FCBA7CAA4C82D7608242B62A6D62FA3EC589C3
945C84C6FA3DE589D492062A1CA9FAC4DE365A24F0039DA600ADFDAFD1958AA9
841077E3BA973AF7E2B5E1A559AD6491FFB61EB1EF9FE55A9CB9985C5DDA970A
279296C2831897EE5ED37EE93F147614C91101B069C8D743673903F4F4E095FE
5855DFAD2BFC5BEB82B0F94FE455768F0C19D7646D97E5812287A8159A988532
3B1BF6BEF0CB298ABF87A2A95F5DA0437A37078EE7A71649E151C0BF66A41216
A6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75E4EEB611B9C8A2F
CCA90E75B2443C6EC3969BE68DAEB153CB0DE1660044390C524950888817BA35
48735C48CF3454524B0071B5582DB3C83564333DA0F758DB6319970BF48C3014
5D2A12BAB7F5AE51EB0A8BB98D9FB5EB919A1D92B47F4CBCB931F9ADB92E0D61
990B09C6A749C3666D004CC2E0A360373E7BCA063423BF653F266B62582B938E
D8DA31BAEEBE739FFA32545089856E54B1A653498A071D4F1397B4ABFD8DF02D
F71286A13A917DED24E2115D16B2E47E3DC85288B93BB635F21AA1489D0174E7
13B976F3A0B36C575DF597A3D032EB0138177F7BAA9F7B6D47FD3DC952FE1491
8EBBC312189D77F70AF8035C331FF71F130C31ED8EECB3F6F2B78F3EE8713C62
E48F5C8F62344E371AF8C49D25E46C51D541D23F9D2633D0ADDAF128E4E336E4
1B4B94F0D92A7A8A44160BF79651F0E264F81770C19554999E7AEBDAC87D5E25
B998284A6F868D9A6F9D7001091DE33D6A472DCD3084B026E49BB0BC85A603D1
1133AEEA0BD95D56C03E7072927F790E4981671E3D01F904E211AB3D3362FEA9
B831E269C4FC8B2C7574D369753B77981AD11AC315AEB0294B62BAF5C7D61883
DDA219E891E8C5AD303F66B59D25CF8A8AD6F3D2D436723EBBA72247AA25A389
8659360D81BBAF902A911942D8B6DF4157FEE703D444FCD5C18F8B4CE41D1AFC
925E5CE95537B825B2FFDE8E799DDC0CB40D65BF919B7FA8ECFC1B16AB69F3BF
0575F598ABC5B57218EB1A6AC960A8E8C28005291E4D768BAC7378E124713CA1
8F3592E6A583E4ACED15502C9F238548A869DFE590A22DEB411FE48CF96BCCFA
F7A173C1BFD4B934D3C3358C406452EADF75C77F1B4078C0B0B09675FE9EC168
A34C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44CB6DD0505F551F95DDE361
5B9F1E6134534A315CF6317F111D5BC2A9EC89E2F19716811BA35FEA5AF6530E
3329357D3C3A6403B9A7675DC69ED861AA0478A60D44D5C4C52C626E5DDEC00A
1C9E7A650438AF260A45327984B781D64B6075D35EC1E3507FD4FE2E7097A246
CED40B5D21CF191A2A9F427CC798A40D1BAEFF181E6647EE6143A68CD3CC909A
C69AB5D8F2823781E781744D1F3A5880CC0C6B59C82EE156EB3AE0CC42669196
8A93D340EA8B61FD1456BB68FE6DCA4E7C8055E0EBA45921C7AB7C38164BB32C
4D962EEBE6895609BD8A8300FC5069342EE7AF6426446E5CCB325BF943169194
98FB061BC7E64A1A01A78049401FEB0748983C6A641A43BFCF5B53C51CF120C8
8F72F6E78D73440336F91345BEBA6ACB55BD99828BE59C9B4CC32B0C05AD38AE
8F317EAF457837C9766A2C73F0844351EA94F157625E5CAC87EDD0290D71E86E
D6428B0865257DFE95B9CEDC848EAAB31DEC78FDB04DE79113496DFC435528AC
4F59F4F2ECF2DD8DC20B5F8430C3A987A768C4037A41E4300A3A8D13C0A16816
EA67B4D127017A2193DE052D15292F0AEF81DAE4C0116F1BE3C4CCB7116DBEC8
C90A3B34A794051001CAF4E467A9832115207B7BA9E89BB29B8D7D003D1ECCF3
144DFABFCE7135E5D310A01956A511231DB64D9FF09B4E26CEF236065EEA5BE7
BFBC6DB4C1C934C75F3D3F0B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC44184E183
3BDC0CF3D97EC8E6DF2561B49331578ECF6BF0E8003939628B934C1CEA33D161
1D05E59ED9BE05071BE95A8E1A84BA0C4B54ECD961F0EEB3548BC968950BF5E8
4160FBC4C2709D6B1A9863A27EF5934C5CA2043B9B0E5081E58CE7F78DDB9409
17756A2D719AE12C53BB38A15021AF9FB97DE82874FE58772E82FEE206948CA2
8F5870230E9DA69ABC80788F2F72CEE5F5594B2AD33DA5F0E0E54A39325730A4
38A6EBB464931916CCE9A37170F0C02A9C7143D722CFC08677622DA09CBFCFB4
CF3D13A7D2321812C81B5AB9FFB7279EC7FEEE5B8D8919E0D1E69B1FE209C5F7
4C4588B11876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8808C26A27C674BCA1D
A029B6AD3386DB54549957A9A7DCC731D0F06699DA05CFABBCE8EED734C62EDE
D4A8F360F63EFE2FC361E1EA453299493D312C76192227BE5824E9A8CACDC4E3
CFC6D20C02AEB57014209F2FA3C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A
280C40D63870B38E4100D67ACF9EB4C072D3196F99FC3BDDAB879CD224BD2B3B
D4873BECC873A9C71796A4714883621CA300ECCB25BF1330E865801A5A5CEB09
7A3BD2680A776E288BEED70181DA51D0B73139372795868271605175D3B08598
7172DC1CD4920DEBC3C4B0D6DBF2A3B3A9E8762D1956F9E3F9FEA1B89B964A7A
04D3F5A0A6E35A3550BE250F002073A67F651E70BA8FCA40C0D866A56334B972
95BFA4099D149EE93FBCC6272AF549BC12D2E892576552117FE414336D3F93A3
06F06252978B781B7F571EBBDC53A4272568BDBE227C15BF212BCBD52F01753F
DC5EBCB8388014947DFA87EDCC6CCB31B7ACA789EAE744D803921A773BE8A081
FB687F9FE275A78A90EA9F52ABFD70788A26EBE7BA4D5421A275A806BE5556CA
1B25F2298D1B77928B2565A93B24110D8D0F224B875C05157CD351DC708D082D
9A9FCC54EDE8DF91058E7AB0598BF3F458A9D0B5764CAB17DD6D4CC101215DE7
34D791697B6DAF0B7E6EBF4B3DEE0EECB3CCD1BFADD6009A9533EB573309896E
76692BD712FAD6C9AFB5C010E25FD2CCBB294DA4B303547F01D20F3953C0807B
3E840E1D1D755B40C834FA1B71BB4D72CA4BF8CDF622E99CE46FF5A5A0C57816
2E7812726F959C04D04EC6CCC6D5C4515070E4EB6AD127A7F946F4B419E3C27D
F1771C62E0D8095A1A876A023B72CA6FE435A2B184752DACE1A3E8298420C5F3
05FA5FE356A32BB5F337C05CF64D81FE3741D9345285081A25B0C96706BB7AE9
20C15804482D69A32FE0020B150FA44AC6C6DDD2C12840E74F65461B5F14AF76
071B1EFE2961140479458987FFE44E8010F5D4D89B893B86412505B6FCA5AB5B
C8937AD9FF4898D9706F61E7D6C9C2FE76B83BDDB2CEF6E05700E98E582046DA
8F3A7F53DB8790493D8EC144A3C3B1586B501DCC186F2CB0C4BAA5675FC93DE5
607B266BFD6DB5194F0E7318D7323F9B6752AD3F194F0C8ACCC73F7D8B3CD627
50F78FA3820035607BDBC19C7399F90508F5CBC17BBE0EA117C5B0FEF0DC2226
00B4AADD0F5E3BEFE57112980DDA8F55E68313BEF4CBE85820A8AD3483FE551E
BBE8B2E16CCC5EFD174057C781DFD270EE43076B80A374C5060D0F0776BD7EBD
A80080E3B3FC12C9926B4E53BF077361DE9BF2D7E5C0A53D49E72D754CEDB064
93E9849967F12E6319295F104EFA71C1286895FDFDC0172F32136BC107D8C39D
5F294B66D411739D5540C516AAC99B08ECEB7247122CAA752F7B3EC507CF14B2
1FF5BBADD8023AB9D1FCF2AC39103594EC513AC270F6596AF00C0F5C7D6336E0
E19CA338CCD852E0556CB04C7CABC1D37D26ECC85EC180EB8EED1A6E828D22EB
E619598C6FB61C68169211790027B87A0F039085C2BD7D5FC13534168DDBA440
83519C586F6BCB15AE8B3EFD96CF662C4E1596797E4AAE50E83A2958759F1519
6F9653441D5D99563AD6A015995764F5EB8B7FE9933D1A469A390397432293D3
349640BD48EC0155C85FBB37E90D825A61B6714D5788BE542A21A80B3A2838B2
856305810D0B9F73DE3B805A31F7B99E98377D80FCCAF634AE7A1D21B652818A
ABE247C5D0789B509F7B8ED0F3447145128EBAF2B73398289AC2F4A25A71F21D
C09778880C3C6E569BFDBA5CD453C377E8CAD05729634DF247018C44BF442CF2
CD3944E586A1630C50BF67A0BD246C73A1B7AB0D47701866E746D92A443744D7
A31E45B6840CCF66B4118C573E457D9645821305F52F4280487099AB8D50E6E9
73B13812032AB1B15BF4E432D2B8D624249414AAE2ACB7F4CE55C7881F536ECD
ADB8EB59599FA1A9E0E68D4CB6D1D2E899215DD46C1BE959CB5422EA5317CAB2
CF77B15E8EB530781738FD9B2B564EF827120876438400C2DC6389EE182EDB6A
138681B9F2F2134FFB9597B0A149C69800CAB537A70F9439B5E819CD74FD6E44
C7B926620725AD7F459EE1308D622A7DE0629D67916330D355E34F4C55D26D79
83018167926F0F6C9BBD9AF00926B8432723F60B5FFBE0E5171071DE3BC458B0
09309CC0F88823BCF00439E37537753D8170C833CEBEC8C6A32C9382AA303CFD
CAAF388EEAF7B3370C8D19E7085CA0411570A2097C931FA17D07319256EC101D
EC075337EE957575D2E30DAC431BBC257C8BF7E855146E31DA62A2E94933947A
E2E0B502A445BE04AF2C41F99050E87D5D9564C9487D1BFA0C595F4609FF5A65
A9E160304C2D343A45A4FBEAA16BA7C9B17AB68C6B28800BFC1CEE6807BB0323
783283DB680FC21A5018ED68B0D95CFFB2233D053E3968DCFA9B5CB3FCCAD2A3
077DD53E56E73E22D22F5558E5C0386DE16C68D1034C6FB3F1E89FECD10330A2
322F5040AF1434930FA32922CC14ADDFB49992BA5638ED589691F3C514294539
0D6162964F31A8A8F44A6BB4A34F1C96A66CE0828B6377E22EF3D536CC04148C
63EE9FEB2052FA347AE10FF9CD10FCC811FD45501778BD26FDA6B4A0E708ABDC
47CFFE3800AB99A8E4371B3501B0AA743E9B99AC90BB7BFFF569A3D18BF83575
F88CEE714FEC2E64F56D23E792F79528CEC0104634959B2E2088A63C0431EF8D
D99DFBDC81184F5B44DF738125A9BEB2AC10F0BDC77665B9C3323B525773A084
FA912BF939E99F984482F4A28F8942D6F61F7CF16BC7BDAFFA22934BA43A2C3C
72FDF630AC3F395FF88324B9F3DCB028EA565F81F035B035CC145BEECDB5F18C
2FB824A7F4166B2575A15362612FC212D7741D517DCEE39BB4F3D7026B5279E6
32149F5A16B1911CB819EDD7758D832ADB9596B804039E6F64FD7F844EF02C2B
BA2B765166717C1CA0C98CCB47DD04EE9F854749BDF620984BD6297069782734
A12CBD134C664271FE284E7D9633DBB9F5A53B890907F4C0E3F5EF7246581258
8EF964D5ABFF1112B711801FE3A2D664B71DCFFF3F2A8A1BB49D15C3433EFC6D
370067428214560952B01A303796FB5FF7C91057A71F3E78A19A81EB3FB2FBEB
3948FA3D1DB29562D28E8E66C1D690263371FB5D8E539D317E7ECB0005FCC40C
11B5EE6DF66A3A74F1A0BD0D99099ED5DA98D561541368B610BBCFAC134922B6
37EA368D12E2A40ED37BF43197885A2F02C7DBCC35232355883D58D80D5C3BA8
B9D37D08AE497740324DE5AA49F0E0C41A53DBAA991490998021D0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C6897CBA116BAFB72AB0EB87071835353368D815F03138693FD510
3767DDF6FE6FFF496B106857BA914FACCFFFF55192E10DCF5EA55CEE833EAB43
CD441A6B455C18C66C38B55221F5828F6470FAAD5ECDAE5B43D8A97B0A082986
A8842DAF3B0BB5DE1948B588FCB3E2B37A5C2F39F9CCF68BE7F0D3BF5A607404
D2387257B77A69CB5C398682578AD40F2243E60DA5A30435FCE91192754A9EC3
4D1F38D98B427893BB37E8AF3DBA58EF7C2A978A5621CD216F97A098C113BF6C
6FF493D20E76D1845A891F5058D8DABFA6B5D17440FFD03CB81A33D0041C9857
78CACC4DB60700C22ECDF227008AAE8B3549585E94245D9EACE7D6BEA94C108F
E62827C0BA9DB2A54094FEB4A64C7721C7B4ACD80BEFF23D302C6688EC3ABB2D
5F61431804DA1067221469158415996B0671C6C421DF8296C48B56F43C62D3BA
63CF109A3499ADC7AB1CD60E39376D31E045038AABE6DE8C790078B668D79D26
DA019A6B7BDD9C0B2ECD9EC55F129F0406ABC54E3B4FF23649826A2091A48EC0
E46292E803045FC7D7ED27129CEA43EF25E03AA1D0FAB54AA5821C4CB010AE17
9F63473ED3DA2A47FC87C5E3CF18CE4227ED29B9A8CF29DA98F0060A4FCF52F3
2E017E9EB5492088CBFEB4A03B6BBC1019F646FA3F67BB7A2C1F64D94F9EF1F8
710220648240DA37D2B0CC0857D5DA9B3EE1E389F33ACAADD2C782090D827236
F88F30ED88FDC3DC32A552978AC81AFA5B8C28AEEBBEF358B99F3820C596AF3C
8F81FD838DAB49F723CF34D0D7356F6E3655663F9EACCC45B962A67731C76AC9
8678B54E6E3A103EBC0F27B3B9AB0A69C94BB35DF189FB7EA3D31F863B91CF55
8F48C823AC0D1E6CED5E2423CA71E465117EFAA5A252DFFC66F8DE79827733A3
A34FBE1B613C11D6A81FFABA0F871FC82EC65DCC440E0242BE2324E36C7131B4
8774F2AAE40B06DA1BFCBC00ECC3E237DEA8C980250F90CDE41F5075D535AB33
E72B01E15E194EB40B5C0FAE9C9F9FDA4E492DB7AB86C506A1289CB1D4ACD82D
3AE5AD216EA16E30C70A48AA875E1CC859C29D1A0E8117BA94AA2E7FE3CA2387
789C7798E62FD3006E2907670005B590C0959232198D1F492E7AEF61861B2DAB
96905585CB958C3586CD232EF1D91F95B2C0849BF303CE4B7DB6666523521EDB
96C6C2513EAE2966C51CC92E5E362BE9D589CC4B217375B2B503B1860F5E3AAD
8AF8D555A6B6ECAD5C46EA27877D4EB2C629CD2B0512E178821DED23AF9D42E7
E92E35F3CDB35836193EAAD4C88E77F789EB35A12862F0FD4DA2F0B4662D450C
F707B3BA2504E1FA1B3C3155C4C2C92A9AEC3D73D2E961674E805CCD7718E920
953F23C0F43A9F344DD00D72094148AA6B90AD563556ED7104DC0B69E7136FCA
F0C0F7FDA632F70D7E8D1E2ED230EE527CCD61F68743D5089ABB33FC1B505F07
BE638CDDE3E8F187A7E76CC07EEE12DE03FD43498D6FF77B12E5CE58B7447455
BE9A926C7A8F08F6A4B57C52CCD5D3BCA369CC553108332A6C1986B836A1BC4F
A1C2D8AEF0DA71992D688A3CA2FD97E0BE92566F547FE190226B387185D36F1B
1C5598E38669892AA2CBB12CDC9D98E9237D1E6B3FE8B44025CA03A9FAEE3F8D
FCEAE061855719D83461CF0E201F176560F60EC75E745EE1577A6E0BB53857F8
802D17889A326B96D7AA91C2DA5FC721BE04215071A680C573144405D8E073B8
712133EE4AB9D4A93AE103A38E8FC4BDAD0090FD52D4C49F42EC5AB837583723
72FE17A32471307EEC9D6E9C1B565AD7F9E14B1DABCDA48C539701A25DB30E22
B0EE39F3AD056A6C4A5B98E62CCE5E54157595FF7F57618344F4D36FEEB8584D
6AC888FD0248E2188182818567B5933C1B0C394C7CC2CE76BF600822006A7C73
169AC6C008EAB81219FD40D93287E0FA79BEB2D70276F5F3106A9747916D339D
48292FBDEC55AE303FB7ADF8AFA0646A4031ED860B57DB8FDF8A6088AFEF5FD1
D7F8363E5D0A84FCD4C6DA409998114BF92E9A4D8796FB9DBBA8CDF19850C175
485B80A6C5183D4525B3629229E9C332C7482DFCAA6C683E32EEB5B01778B5E8
296455C119588E9F83FB5DFD17CEB117AAD5703B75625C5EC506C84C81707FF1
69A512D05CF9D7D56756E582C59264192CC13EA5A623CAAD1FA80328613AA654
37C93E4E5BF0A315100404B27B575A218D96408ABD9796ACA32FA51860637864
4A5C9558FD6F4F60834057CE554DAF49CF016C80B43390EF29EA6A156CB71CE0
45F05615A35253D968BE40A180968AFCA10CD7627D28EC116A42C35110E33272
0EC9B145C159846873D5E2D1B55B7BC4C0DD4C0348A235F519F775E3DA4951EF
AD6E6AD0598415CC62AE4B5982B409F49232A61A6549D974FBFA88369D0EBEFE
D9DBE2E0970EF2443DBC653EAA60868049AFD7C02995AEED6F47059CEEBBB908
565D79E44B517CC054AF2F6A8B8D4EDD1D1A6C2C2A928DBD51EE58BB9BF28B88
4D4B5A2BCEB8AB14CF2406C917030391A98B0AB95050D0A9A469DE86BD059591
1FF9F693D459C15D45B4A02609393B950AAAF079BF1F82EE328FEB0692AA735D
50C0F906CE70FE67960D02FC30FC2663D4E7B5BA931B4FAFC8294E84BB98939A
3E9DD23712AFF80F4580314D3DF01627CDA8F3EC7A612BD381868A7125A81A17
EE6698A0204EA9588E6CBD152830127FF3DFE9727DDA9DC6806E9B9557CB4844
083E1E18979A18EFC661D5DD99FD599854B6C7AB2A3ED07F109EE97F4208C139
2ACDE5FBEAF603094E50E8E40AF02639F8D3D032A234F38C0C82E28A8D951207
D7C494A7B2784E050A11FE8B1B1318E5FC8203F851BF811AAE848B8F7F77D507
5DE800E1DAA39B9D4E948DAFC6D5EB3BF8A42EBA20D43E4C36BC964DE577995B
A15CEA922D17036CB770182C62BDC6919001D41E4DFA139FEE5F45132524C31B
E606B3DC96111549ED5C04A0CC9AD7EF03CF8A2EFF2E76143DE1CF97C98DE5A0
A96BE17617512781FFBB5E60323CAD4F956BCABA7F2577351828ACDAD204076F
8CCF23AA5161C0F5D6083B069F8D82330BBE89A573A381382149A2775DFFD671
1A650276135FB128B7FB0CC33F270E64D2FA11F0BC5F901A5FE684A2E27A0C21
101326DDE25E1115EB490BFB9C965CB9EF2543798CABEC88FE2276A43FF1D88D
43A061E3E3016562167462FCE2A9300A27E1FBB1207A97080AFC9349996FBC63
32E5FB95B80B5A58C25411F5BC964AB1157985D54991332A9E806FAFE5AF2C03
143BB9D953EC5DAAAA0A3CF68F97CCF1A85E0FD14B7DFB4AE3EBAAFAF519AA5E
737414E52CCBC0FB0E4EE1B5EBDA818B96F9181ECE959BA54F36297891E72739
75069C905DC006DFB8755207E2E4977FD05A59042DA97F87B82FF4B9EB28129D
8B112499A4A05C9B3F4AAD5AC4DE670263A14F9BD953A955A732B7F94B95F488
DB79DAE4D63884D9BEB6DABB351AD915BB4C409BBBDF2C41181809A14002E454
BE43246A11B4C17B55516CF4256C1E3B00800271FBCCD9DFAAB5E93F903A8FEC
0119ED1A1DDD96331DF31CD64AD21688424E699B21C1EC9038E07FDE80914C2F
8C18609D8770C726D53BF414A6130DD97211D95408F88F138D4968B83A8BE371
8B9A9FAAF727F2D8286177EE27BAD040C6632F5AFDBEB9631776656663828AF4
AFADF09D8FCC01AD230AA8D1991266410CFDD2E8D7149219C8D6CB6FC859C594
9E2A4C99D3E19049041FBD4F0CC98AEBAA798CAE696501DF0B8E9B4EABFFBA28
0CD8260928EBEC0D042CA59213DB93D06C79E9FB34D44F31035E0B59DB7E560E
A8EE24115C9D918072C47C3B4A2404CDD1F89E89107E29FC21F4BD22339E88CA
C826D31139CB25CB103919C95EFBEF98D3CD6A3F7D6753B5D3BD7A526CF6AA92
62B5056F10B1422C44EFC191003205F0510D702EEFB7487D9B36163ACF2F2776
D087A89F33DF0F6FDFCA03FC6DB07F58115750C5BBEC0993B62F6B6B4DFBF3D6
83A3FD01EF633967352C75105A99F19DE44A05776A49345A3BE2BAAB56D5937D
AACF6E62E94F13236CBCC78A8F933C81B6E5F1021028B08784DBD483677E091D
CE5215710D8C48292FBDEC55AE303F477D1B7D6C5AB2514B668054E2CB731A57
9D72C4A2B325B2B7230CD6EF0D4D697978E00D0084D66B80FA4E5BA8B57CE522
7585DBEB484521715605F22499156FE556FBFE1DA1466B28F6924B9A64C70410
3BDB20EF602CAC30E4FE9E4803E5974F1FF27FCF565E821959BA41D36EDF5E33
77EDB390F4212D442B501A6BE18C334DE79FC19AE4634DAF1DF9B9024F6EFDFC
D93981295C00839A0C108C298AFFB6FA09A2EBC90269904334807FC3CE4550FF
D1DA9AFB00FEBDAE7A78F65D0CD4DE306FC7714EE9BBAB13BD3CAB97639655B4
FE3CEDB0A67D63EF94898642FFE0B0338D40CDE7F0E2157FD93A5E2CD792A9FE
17EC25736F60F07C6E49ABE45986E139721D870D6D7F677FD8E3114D8F16D45D
832EFBC8F31A9E0F7C3D706C3627340DB918CD23592DEA3A833BE6448FC1CFD7
CBB9A56373D495E9BABB34315E49DAB3E7FF4300C4BEA3AFF05A0383DA4DD9A5
BC1A14EEFDA1FA98737CF406F2A6C87683E73C6D20BB64A8409A40D1098C7170
826769BCC6FEB2017333B6972B433E96CCFE9F06C1613633C90BE61726B11986
DA6ED4290EAFD46C54327BDE43665F7A0CA0126A4B89FE36E53F1D09EF9B5AB8
7D0F3D4552CC9E6CCC4847CF2019B1C407DA8BBCF8DF9EF93DDB852EBA18ABE3
9849ECE8D2C8C58AFC259DA77163E9A3E7F61E4E1DBA9448815BB3FA78C43D27
657129CC996A96DAB04CA780DD7749C141649EB8CD349DB342BCE8860D469C51
85CE1DD07512324D65566A22310E79C135131E8E3C2C438E9DDA3C5F0A7759A5
7B819335E9883C37857E0052A5634FEDFE4775707A71F3367697CC5A82AD4C94
9FCCFD1530FF95CB6DBAFC86AF4C9115ABC1B7F13A03EAF9D51FF309359F45C0
099D4215CB84E325E1A04825E6DC87F760F3636D645A21C516F05F94B78365D4
DBD12A61CDE01434FA9AF120B2B31CDFB588BF0CF5156629DAF553816B0DBDDB
7F3EC845B323F418E89B46139222F745E1D1897D334F3FCAC00B1698CECFE1CC
30D765723C4E1C200543FDEE57DAA69287D935508FAED745DBDECC4AED3E8878
5413CE92EB49897B53D62089CC528A6DEE02B844A3066385271E6D24092C9843
A5123532CC49C376515A4C2A9952949EFE6A496E7C77173A0C4718AE3B8B33C8
7A1F092FCD25343AAEFB92CB7634DAC80E9DD0F092E82C53237559EA7B59D13D
1A9DCBF9D538B644942B6B970D81346F67A376D5A8DA7BE2F9DA979777F8A15C
E1F8C62EDE6D294D9E9471254FF553D041B5F2C74A612B1ECF05EFC2966C898C
CCCE9D3F9C942F56542DAFC472CE4D56E959D91E518C84C3666882D34FDE051A
D694D40B88BC8C52FA31F878A3A0C64FE1F38EA7AC13E1B25B7F07A5AE593637
A83D1419C7C3249F63129FF18F9BECE7B6DA11FBCE92A6D66BEFEACDBB85AD64
8A0ABA78670F26675B29502E0D96F2831A148501DD57966A68D172B83EB49294
213359A984DB9F4B3ADB8AABEED66E0C6B0E41A3555A1B94934335D03C91302D
D653F5FE6321A36266D107BED9543594D01AE1B2D9A27774C1FB365C845A9718
D5ADB4136DCDD8054B99E1BA6A973AA19017E7236F48EAE7FD84A64D4B4D8B6C
B4CFE39C478E208F2B8F4DFD4FCDAA1BB078A57BE935B6EEC0F3E9FA2A908113
7B72D599689492A4ADA71EE5C56F35A1C923F06B323B2D6DD37F8D0AAA979352
549CDDF0083183B05A3637E05FE8C8F03821C85D416BAEBA176AB3F0BF5271C5
F93227147992E0CC064EDF9F7B469C6652666AADBC2FF30D0FEF88C18D307F9A
8D551A2DE02000C9D91E03F9F0962A44267D5D262D7C7CA477C1EC34BEB2CAB7
E5012EA827680A5F5BC4B4475D57DEEB2C1C25655CC18D6372B826FE65C4B153
1C2A65FD1722D9C877E7D2332289F3AA547EDDC77F286833A50E6AA9D307E6F8
756406669E34C6A0305A0C2E8937096D3110332720411387817E060256B7FAFE
EF94106F6E842F85F343B39203CA91C493C53FDBA01B6AF5C76B91AF7EC62C73
A9282E5B1522CC078D3AD55113C8E2F0EE46A3B57BE407D4994A4AA2A782D0DF
E336AEBB9EED0E168BFDFB5CC265C8E3F00300CD8698CC92CFF9997C2D18C861
0A4D80BE3C07F9B49B0833D617EB786DA5A41AD1F4E6226B66B13598710B44B0
86B453457131D7F95898E3198934EF70892A49527B0512E772D9D43151C32824
B0F5D308790B329AC3FDAD7713E7C08A00E0445EE6D0301741C5AF9BB470D331
B0267B8F2176D413BBF1E867D286952855A1B325685703E1BD5DE77F9F668A32
10CFBED577BEC9CAF1623B8778ECAE5C9F4ABDFC352E8EA171590DFCC29DBB98
9E500A1EB0D0D106907867B2DF0A173DB54F6B0BC33D0B4FDA69F20B39CCFCD0
AEA77BD0C54A6E4764547389EBB1D11D23EF61048318B0458E0AFD4E1AD2BFA2
2F11FE230212B6C9DA4D75DD71B19F396B6054A29C26119247A98A9600C2C937
81622740D7C33B788999420F08D37DB0FA6883858124FEC93978E571E3D62C79
46B21705776D4274D90AD2136AD94BAD3844DBD1BD896C1A725E77DC147D09E8
A854847FEBF2A75D79EE33758C5B9BA20AD7D6BA9EB30B1AB36048E13F2721F1
142202BFD7E7D0CBF9547F7565948AE4A3A17FFAEABADDE27FFCF674AC311018
9971DD815D7F39FEFF5716F81764C310341410F498996655215A41586F68C21D
7C460F400614F9A6DE7F603A443882B17AB02AFCE3D5B068857B54CA04DD581F
C1592ABE94E89A51A3DF31E408AFB8ADAEB1F127EFF28B78E6D090449F21EDB3
697C87A01E8862C67ECA5A396DEB0C8FDB6CECC88BA6C7C6188D4969B8735B6A
9FA48B6C6A9B4D7C305BDA1891447ADD56FB1752FF4C6B0EF16EEACC43CEB6BB
4167D298678CC78FD7826973AE06465A0CE452A3CC9EFDCCB3F9D804DA6D952E
967683E7F1848EF21E5CC677188615D1D68BCF341C409141F7F74E51F4090FC4
27E15FF58322273FEB77AB0CD7F40F4B436AF9824EE6C9F4E12E6A5FC123C5F3
5C8EDA9AED243573870348BE0317D919838D6E62D878B39CF3E548309C621217
310B1467D92B15DF31D8402007DB0D06721799CED6CE8990F434EA02BD86D567
684D4864F9812498474C4797411F68D6967D1FD3BB0B69967A92AB832CF293E3
E1B12A78CB51972A318526F08DA19EAE288AC125AA4F9F3D9CF740F0C7E96EE9
9EB4FCB93ACB7CF53ABE4FD0EE1C375127C68E1B457351DDD8FA523955EE153C
7E15457BDB423FCFCF4BB3B057C9BB2B6FF2BABD14EF44264BA262101CDFC8C5
734C96204A513E636630FF9CE10803661D41B2B7447EA6F83A09FDA07E464AA1
19C4BED5CDBDD06BE9F9F5C918948BB308D2F26DF9FDA6844F9C051C449B58E1
A6883ECC1A9A01AFA66376BDECD4C6601FD89CB0307DAA7B22E08484BA6C469F
56A5E77438E25AC6F4234556AA437BAD036E8FE8F9C51C3C99B9482203CB082E
033A6FE7E9A78FCBB60DAD0D42F3117790880001C7E8F44A587813F87B0D90A4
CB46283C0587289EC9B51122597CB495A429C0E61F4136A69A7D7FCBC3C93F84
5BFFFA1391F0BFD27C8E8B322D074F897D926B28ED9DAE4FB6E4D49C652727EF
84FE4389E05EAB1D0388D6EB02C0674A14C990BDE0DA0D0CAF5B1046E4CF4993
E63E74431DFC551925A7BDD8A2E4EF790C254FA6E7332753D38C3EAF2207BA03
D00E3AF7B67922813977E1F4D6232EE9370C081EB888E6413DA33B31A3E56D5F
4D9D27BBC226C4916CA80C2C771483B4E9069C81558A73DA88508A61FD0DA31C
21C7C13A0B8DF878D4361DB2E3A333ACF3BC08CBCD1446811A66E9859BC54EA4
7447799143EF5BAD97628F0488FD9D42B1F7E8529581DEF6C117C0FC3E9160A0
03F3BDFB2397BB2D0EDC13B751933EE6A42E895FB444425FD03F00AAE5E77E56
C78045A8B89E3114BBA7280973D236B8CB83CF6AFA9CE11B99CB2B7C89ECF3F7
C183336030FF12878CA9F658EF1FBF15A5628BDBD413F9328D83B06B4794C406
CC10C24E4B165AA75964F0D109320A42A3D1D3609EDB62A17F310617EEC0B79C
8364E8C414383C24C5EC9767D5D011CB09821F38002A35D18066367DB3D75DB8
E4D5D602528DEE44E2A8BC709C817E803455C2D6C9D359D09566C324E25A801E
1650AB1B85FFB547DE9073C4B81F7A41717310AED5A610F8D59A05711E015CA1
115B606B22838AA7B7A0D407056C6555800036A7F9E8BC8D98AE6D2BCFAD6610
40A69BAB3D06E6F6F9F0E9E43DCF5C2E244DC855F0C2411CD422041C4E020399
A53491C20F343C3B8340AD4100ED2C6CA6DA954AEB7FA6FD4298D4E14F166476
3C2A057137E6F07A90564A182F36DF2657254A91CAE978995D7A06CB7B63E458
ED7E8791CAFB46568D7EB6AB9B18D3BAD97D63FC23969F1CFDD482F950A9B019
A5E17097812B0EBE6DD7ADD95780E97235A1FB4C6F997BB8A746B3081E3BFD2A
EEE555182885AFF8B9158810F3FF7A97AAAE4FFE52F990DB4D1D2F055F4482D7
143AA5F77DE646155FC1DF972549016CB72D4763862E2E7CE6ABA3643EE53A57
2B018DDB805B2C05CFB14127D5CC469201E78F54402D1D6B7ECAAE87ADA167FD
284FF1A8CCEAC0CF52EC20191A1FD5F72456A052E713467BF6C6F37F3CD87245
636DF5393D31909B8E032AB27E334271DB8E61C7EE09BE456FD04689B36ACFE4
74478B777F096269C70F6402E3876D428388A782F3EAF353786D739702B639E4
0E07DB7BBD1BC4716C7E144A3F2BF0022ACE76F3F5FB201B4B8AFEAF194B2153
A19542B501312C5611591186440210E846171980C4C95E88E3654CECBB96DE05
C27828F0DF3C2EF0D53724BCED7118AF2F1AE2B47BBD40347B8A810A0B1A9A55
BA1D65FAD13BAFED6468CBE222F5C4D4BCA1CBDB6DE530EA910684ACD32FC1C1
3EEDFFB5630B46B99667C2AFB62B548EEB7A0DA1AC32F0AE726159C8290D6B6A
5BA049434D3BC58A28CD0FCA766E6E7D1281E07F9CEEBBA27C8735A2F568D433
A549EF621E2EFB42BE15B1F294854133DF63F4F6A32ECD70185364D4F626E357
99F817890D37918B053BAF04751C09433A2B0AF0C0D60B2506930DFF22B41DCB
65B3935B474B8E9907E91BE35FD7A35C38671DCEB07B301CA10C9538D9775AB8
ADA5C952B45991E1E629782E313754E672FDD4F422FF56FA44502C3AEA972595
81392BF3A317A072E6069638C685228CBCC4971BB45EBA8341F413C9E2527B4A
A4191056B43E04EF1076D4428215DB8B1C2FDEB8D5D2C00671BE8BA86ECF7B1D
E110BA42D8C7FA56A0C340497F18CA10FF63FF38851E4918B4A08EB187583AA8
471687A78F1CC685DD64D49114CDD0C409836585F09DA05C3BB95D3288DB00FE
BBFEF05180CCF5A65939B21106835CC370CDAC456464B241D0A81F77020222C3
356ACEBB33B7DA0B06270F3BFDAE1C496B5D0E7CBDEA5C910B7B14878BAE5B65
63D4B690EAC3F2B8E9C2037ED32BDC3B99D392662FE38340980A8E544EE8A8C1
6B57FD55E7CF6C0BB0355D544ED7D22BD39C43DB76E24378E7DEF7F9E36A0F46
483DDAEF9CF038075B5CBC90AE51DA63368586A28BAED84952774C94D4542388
99653E8D082C007E8805A2B34C58DA6645E0955DEE8B80351DA2D112AA3F39BD
94F2BD6C3B44FE39BAC7CC6C048836854C3764D3B83953A78BBA118B7C35E936
254B8C48F20453A685A329867D2D5B7F23A6F08DFC0CD044F68FCA5EC138AC02
7DCD029F2591B32F225BB9AE43F782C9C7F3EAABC49E5CEF595E1E8C90488F58
68C2D6AF11DE78644830D2720E8EF4478FD7772B95017548A3779ED80AEA029A
250A660E67271747F5D564CFE7E8D5F5B16641F42794D55C68FA9E0ED0F17E9C
09F3164B4F4838FD7273DA0399A814C11548C460F999AF5C778BB58C8BBC4C54
F22E435BF310C71FDC638D8B706B334B6BB3BFE3BD1224CF44C036128839B551
DC9A790DF1BB977029B4AFE1246665C231720F5BDD8634E3F45B3E2976B39621
61A4C2F39361BF50A8DDF314769C17F5ED9341E74B7920EF4BFC1B056E197EF3
BB2356723813C5D20CE09875AAB5CD435D4AA353A22FDA41A465E94292082879
F14329F56113F3909571CD4F5B0636220BF53C0B82997C4EF0DF3968956BC54D
07265259BCF66FE74820EA3FAF0970FE5A7123F171B38D2554D7D062BC930DC9
2803DAB49AE497C9C6E11041A508E27412654CCF2BC2E7794DC5C0FA65F956B2
B3862022007795C92F16D0F1C427E5057320B11181001C442B390BB21B119D7B
74A890DFA43CB06A17F8DE0FC8FDC13564BA2A2E42441297A75AA0059F828E60
8FDD6A87A8ECF7BC89E206DB42E78047F2FADC5E351C51422624F7158C068224
0B7BD697D7DE327896E1021CCD3D5E495C0035935827F3D3760633086822739C
D413F27C8BC79DB754CE7A7275B061A57B9B1E86D5162B13BDC530B0F150CCC2
C8AF41461D1976BEBCD58D95BD4906FBBB5DAB03839E3EC8DC8A87EC94DB4BBB
213E73D7274A8C3E1064AE17A898C3F8019A1B41045EE69F00865A82B16328DE
C98E06BCB76AEC02B3B643B4ECED4A41BECC397CA35DF476B70195F0084FAAC9
396510DF84C28805B0D6F8429D926BC772731D5F9B533B21010C05C2D7023473
1559D799707093DDA7166B9D6C29AAE76F22BA56F116DE3AC992A952F5043C11
03A1AF00CC55221279F1EF5A3F7521A6D16DA08C3ECCA9BACF3D9D3F71FF4B88
9772109021FEF86A3D79A3E9BE3D6D5A8EC6F34AE4FAA541E9B5F0F86E77D90D
D1F3871EAC494D6036983B5A74C39697E5AE39F9480444A1F7836730411935D8
9052049601CC98F23269C408313305FB1D403875B441959373F0BBCE07513482
2DC6582A8EA3795F7B93900A97940C3E9FB1598C65F7FBF5323D64066B965559
ED21107F4873F836915904B51DB13B14E1E5E195F1EDF9DC8A8E1911A0415A3B
FD84052E238C889D012BB072ADA3CB7FE81E3CD1DA37C03BA305073C31C9903F
6032FF2D905514B8161298672F68FD70E972EE164FFE3130C5B610F23744787F
BB7DA0955A117781C5247957D6D769472767FC979F27DE0F8D090064E909EFD4
C7196C2B4A1DCF8ED6D3764A87D22BE517ABE6FC573928ECF854B1A35027133C
A2F4B75157D9776E2F020C0348803F887F8E4876311EA61A202FB0D8C492096E
52276D2EE1C01D4F9FB29219F7C6FB1E53BEC484974C454AB9C263102B4E648F
73A60E4CAB9375E9F0EAC48681BCD8E8BA76749437C2BD4C901B4EF53CA20F84
50207AE56BD4434772BD1D981D5571CFDD18899350B319AC790D274F13F9D893
6FC64FE10805C88271EABA3B66528852F1BD640468AB8D4EF9A37CBCC7A0DE20
F629A86893833D1041982F309FE235B8D9A91E17D7752908FDA2AA729D1EB86E
76916FFDFBC1FB2A4B943A84048F5A6D42D8CE7CEBCF1EFEEE46464B5A560F56
2A054736120285D1D501C3EF6B5BC9A03DA8FAF3A8CFE1CAA143EC1312E4282F
98E52AF94EDF33E6CC701A4B0DEE9C7E800F62321A538E62BDFD54CF25046C16
C740EB7E4A12F59F0E0EC3E7AD420BFAF5DC003162D98E54389BBBA240D55247
7918493A3471A97B87D14CF28BA9A8DA1FA8CA064BA84E923846F0495B3F7506
95ACE98EFD3C971A2BA135FEBC3B673C002A27B6597EDFC54F08AFAAB3D06823
E18DFBE91588DC8C649002D46201F605687D47CB4BF23780D8885843AF35037C
1599DE97CEE537926F68390ADEDDE05BAA4CAE0221E2C18D2A1D573AF8A3DBB1
42307DE7A6AC2CD663BFC18A1CA97FBBD1AA7783606C94FE19DFDEB746523F5A
1E918605CF7EC0BD7773CBAE3F47090C438D06DE7B615913C9C0678220AA97F4
F68B27FF473DA1797FF14B142395E1F74ECE89B109911E36EC6D6D5F6D08FE48
D9DA309EC266D080100C9BCD05154A93B6B2EC5D09E5FA4D06F0B0FEFEC6FA48
983F431D75B2824430500B6D8CDA6C089C65DE4E761648274A3DF2C388F11880
6FAE5722D9811EE097D0F69D8EA1310F0051B4D70D45325C1F9A9C98C69B3205
0CC76F2373647CBD8385E3306E8C4BDED3CE560BF9D5BBD502ACDD8433869A00
CF9BC86BC95CF841DE673D1671F1E8DE95C353B959F84C72EC6378C3E38DF7A6
97A7B81ECB968CAE418142AAFDE6E36113F7C975FF818253E68D58DDB14BECF8
63C60E66D8EC93F6306EDBEDEE876F803AA216CD2AC755D4F9EBBF3FE515489F
9F3C7834E74336C1A7B4A4FAEC81905FF21CDE48AEDBC34A1351342D1BE660A1
3E2DFAA24E63C9FB665ACF9D6BEE7E777722C5E89FE4F217D6141B426534A415
0F420E502F6E793E46358A87F6607B79198B2B6DBB18
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD403FBA8E14183AF6DC196EBDF6776DB96C98E31F27
F39250DE057DB61B6D5F1CCF350E39B0096C105D1AD31CF2F92FA5EC3CB1A3B1
D84E86E26AA8396D696E411A8C0FCE0C7B49B8C979CB120FDD2065B22CE6C66D
D249B7C21CB36D5E77D744042B565746C2ED9683D7978BA760C777DE4B62B8A1
55416BC2D2DAD72B547DB673ABFA560C48A82F91C2619DF2F9518076BC6BC428
FBF4EDF823EF0ED8849EB5193727273CAB21380891E72667589D958B2D0012B6
89FEF2D516BA63CDF2AF199CECD1F2A8C36873894B09AE0733E47736E657E196
35325ADD0C1EDAAC8219927C37BAE32D5453450113EDB80E4254A88EFD2D990D
551FE2D67C790807A33F11FB95BA19DA18BC092D0877CAFB843EA4D1C40B4E12
3E8617188826D8AF0E3D6FBC16B3C00EB2EA94DFD19CB687728FB1BA0E80BE9E
896C108C8D1C807A8DACB1C34B52A6AA0140AD762D3F3151091C9AE4B762EFF1
1A1657C66565992DF48CEB6055C34E8E11619A37B17F8FAA536F7E243E95BC3F
8CEBF3BEC744DD1F7CA3A0D292C9DB741608433B373C75857EA6DE72C7CA001B
E9D46BB3068746009073EF7660F66EB22967D4411EEE26CB555F3CA7D458A6CF
268C53035D1EBD959C48956B878069AC5D6A7FDA1FC5E0CB3EE349FEF72A9530
FC74C15CAFF4776C6FCE5868C3EFA8E3C764A77ED697D423D12891A3CD782D1F
A605308DEF5FFA186C9009F2204686C61AC13F64FDC8F6D231E67B6299363B69
BEBC3520FBB765ADA1E81CE23CA4B275E330C65CA1F4734481307EE07CC0590C
0F7AB1D86429FE36C013B99CF671533AAED758019EF9F08741642E889F63A0EC
337D608954E64D448A356F9E8B797542015259271BFF21F058732459F20906D9
8F2B1F43AC3B2E71E94CDDC892B8E96DF0F40FD4F3561B1CA13FDB336B28B3C3
32034599E67841126597D8BC8C27571AC5DCD74F5EF80478C21075D5CF1C8C36
B1680CA3895445FB0A49BB8F7938B3048728CF641F180BEAD035934B1A1B9390
14201074A74E183103E5EBFBA904859981D7D23D99FE98D645E585B240FF3D5D
D4C7B3D86DBDD3F4F15E43F84D969FD4B5651BF60B28F79CF5B7838A7A302F27
E851F5AEB42BC2175E12EEFD8A7A3695E1100AEB7C2A90F467D9D7B7D1EBDEC8
A401F5667428A1E50F614C95CC07642929EEBB4F7F4D66BE43785529DA664830
EA1060391C726627A40F2C7035240CF833FD10E61CE2360E30F3639DE7BE4E41
7DD5AEAA5B8D0E750043C0A647C71A7FF04FBAFC3BA8B801419C01AC0C639FA2
CD6CBBFAEBB26D10B111ACB996825C2996B8D6CBB9F1F8D8E84AD61E492E760B
7B0D3F9F4834DACF0353782B4737303BA149930B62D6C9E0A2AD9730CC46F0AA
F9B74D8DC554454A5C267F0120FD1431F5AC6B495DDB9582A607E70821FE26D2
64602691E899F70E195666175A873C7C9A3C344F8ED00D6252AF2670E47DD45A
8A3923A8A49FBAB462AFF46DEEB00530C8A76E85F59E485E6255C945845D0829
B3B559028DFB154BA5FD015953A7B1DFBDE4AE6DF968BABA2A467F74C2DFA1B1
0AA9F044EE3C8976C49CB3A52E37A8AB489F3223F800B41A3D696E66558BC694
5C224F15130892F82A7998C7B484A0114B51D195B723B080BF0D1164EB64672D
DA013A93A70FBCE7C9045BC44DE7C573C23D3AB0696E66F44104667BE024F19A
546A5D676EC15EA4CF7E9740FC0BB8AB2ED944724779D68D2D527C6C63FD6CC0
9977185B0116CB4DD7F578C71042791FCCC0BEAFAB01C26ABBC4CD0BAEBD7DB3
A314F3FB90690C814C54CA9A1DFC2D25857DC6F2E8F84B045D5464D7DF7D45B9
DD83A1B51B87AA8B996FB38D11DB7E7AF6B41654750413
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC196EF
729BB5BF404B88E88E169AA5732CD54207DA55A47B3855826396F4104A49A022
808893BADF86EA656640B9FD8DD7D1F131D312C2CF747D35FB85DE4C4B520EDF
15AFFCA053668051E605E96825738C4996CB3769A3BF11CA27B0493E70E97109
73F1F62A3782C23491F21AAA616D7A24F1824B59C686B7EEE397F0F3F04FE336
51BCC72899997EDC90E99C505A5585D4DE3A360204906947872A643372038F2E
13082839CB2A701F4C8906F3E3D6EF8045731E29DA6C9CD60F54AB0777483BF8
8A04EEFDC54E8F01BB78C57A738B775B98AAF7E932C58201EBF9A373623063D1
119403A832976D73D17591462C31F929F554BF05C909C417BFA6E1A72D89633B
0FDA064321595E05393598A870C13DBCE520C20E6591B1F9A12B73D713A4F471
9E66EE3C64292C209A832AF504B1BCEFB146B2C8C75483D7F515232086F5B242
F4576A2BDC7EAD2E0CF1B9195E0402C187AA699EA5DDA7F8D68782E329005CAE
B465B2B4A7CF342DB612D28E045A6240DF518DEB9AC56B94438148A1A9EC704E
7CD10F5703A946B61C526ADBF636B4F60DC8FF426BCCDE39947EE38E632A04A1
4A7EA94BEA9964127BC951DB04055489DBA72C24342D68B5C88E50F6254E6A4D
3B38558C6287C81A6FCAD90C56843028E2C8B6D05AA6861E3ABED84D6761ACED
E777F2D3BBEDA43DD2ECA72702A4357D241AA942314ED22A79084B9EEC298FF2
3590730BEC61ED49BDEF56662CCCB4D4BDE57D58BDBDF02AA83F6F0E433DE8B1
B9AB60D5D6CB69C04D69C37DF1DA442A342077AA9EBCEDA2BC978A7C055068C5
03A263CCB9596205BD11CDF65BD04EFA6756E7933F46521981284F0B49C41C0B
23DE5EE2C86E167E0B9E5BAAC206CE2D1A98DA9D17A20F6DC3C0D9585475BAFB
B0C2CC97274C6E5C643E53E9B1AF63287F73E3D78ADBFAD028161A0159472A88
111136A2C2ED57E1171A8DF334D2055D2D23C4D8576DE52C139D35475111D080
86D2DB01C9277A18FA3EF47B6B635DA12B2355A2BEFE2F1B71DEAB80DD43345E
BE79E2C76A183FD4F45E8EF6FCC11B2FF946C98D4809C085AC2D60FA355737E8
45C7FF01A6AD7B9D4FFC87B6446696282EDD1E6883F642BD304D2D1798BA41D4
F91213B6531F449C11B8F8644A15F3E85D8906BE2DEC1EAFE2DC8E4D91AE9D40
9500069AD6C141AB6E6A242DF32F60ABA700263C57C321BB014B0E9B5C6D595B
0CBD001A5A448EB4AEBA392C38699BCA1C0F6F3F7530F39920D53F04F396CE83
F0549A6AA9908ACE016F1773387D9DB1FF355411F603E236D6B1F082381154C7
4FC2CEDF0770869C51E252D15FAE0B235FB51680F8DF376B4E8E191E5EDBA636
8ED368696A7A76E746B3D70F4701AFA1519ACC89F74EECFA247153807E3CC27B
5FE08342FB4FA5F8C05966C69A3EBB52D9D6245D35B8FE7467AE82A4FC48B89B
2CB0F518F452B5CE1CBE762A1B066004D6974A3536B2CB4906ABC9C1EF70953E
83FA7C8C103E8EE58DBAE6D670F5CF0662976F7DD974C9989DCCB306FCB523E3
07D6F3E9A0560C188EAADF0DF449FB9D09F917E5CA703C7E92E30CB2CD741475
AE26EEDF1FA520CB01BFB6C1B68B57110505BF29411E0A908DB4E1BCAEF75C34
B1C0A67F447CDF00FF97794144F034CFF128597D8D9F48DCEFD046BEB6B55891
26EA294A6A813E8B116475D4DC435EE31256647FB9E2AB66765834208142C0B9
108FB9A6030063C3D390A2674066DBAD1A9C3C1FFEF085A2242A42A78E635E57
68203B733EBBC6F6711C250A7C347E177482198213D954CA0924AFE26330C570
0ED001146D3B89C5E9E908ED28166E5FC3BCE52C110332C24BC2D66EDD81132E
44128EE1BE623EDD5DA9A6E5217C0F69D4D0C42D85063F79EE76B68F6328A6F7
BBAE5FE0DE2D8839376A78573E72A1C1DD7E5A0E30F5090C322E4F16D93DAAAE
4EBE49554A55C93CB29051999282459697734840F8BD0B8A1CBA7B64E68CD0F5
8CE1D60E5891AB5BA93B1B72117B368C84661E8D470C8FCECF87E141E181D826
EA07BEEB69D1D202871BC2B15EEE8E1AD13E7308928E731360D641DACEFB5C76
812DDDFFA60953E618FF546613BF4FE23DFDA51D40DD9BF5DDD3CB175F3E1E61
2CDE864CE66817CD828E6DB40B76386F235F85AEDCED02A75A46D54BBAC78AA1
EA94495B233F69310CC5DFEAEDFD98057DDC350D852582BDB1EB6971F2EBCC0C
538B9F4747E6F5C14CCF40C63D291916668430D74CDB6FF13AF0AE69A9E8843B
13DBC71D3E1B3B32F18DA1183B102B4387AB3C1AB46C04018D0F42D2C0527535
14F33506BB88462506A44A11895816B13B0BF773B960B1F5B760445C842E11FC
15FDF323A7899AD1F07E3100BF36728CA789B56FE42ABB5BB81F59B22FF50D75
E0C853808E0E457BE5CB6C36EB4A1D46683E515B27953875C469C277AA6354DE
2C383BB4B4EFDC6DD658FEAFE642F6F311EF12F1744F0C101D3764B8BED3E225
780F2D9BFB5B93A251AF5F9A3D74162C8529714E362844E7D163C8C3E4F62C14
BCE85D139DD55E17330398860F7ED414FFAC7B10B67EBC2E67858895DBF00652
DC3FFFF419BF24ABB01E9C6733556303FA2EBAA4303C4F4992D05A21F628B790
1829DD8054219F5E55187DF09674F324FAB81E61751AE6213B6A64522509A279
E8E3D4698F2FB11A8DD0AFC14BD53F6711DFA63A1C222760B2ECAA91884E4E82
FE3E98F5F8DC26614151DF7D5DB5AD77D08C007180455D27C42593370F641C2D
9462B373C59D8FA94C0B8950FB9B3B0285C7FA96A09C53FDFAA408C1DA53F9F7
60E1467405E4C5F76D3C2C0D7C2FEF32861F530AFA3CE3BE935702F8FDB3351F
F177C7CB1763316352E519A11B6E20B1E3F1ED0406E62C3AB90C5A96D46E7C20
BBB90B79A821F03BA3A8B8B42C1B0A34361A1DFC39B8A0FEC3F3A432075184C4
45CD724724101EFB554A6C17261F201B5741C528462BC86360DF3B3C743459AB
088BEA49C5D06D6D800CE3D0512AB6E16FAB0A63BBED87A10AE687EA2FC1992B
9D09DADFCCE236B13A312E4F078CC5B5EAA1AF0AC0353C714458512B61F8FB98
112405F303B8147027F341C7B84F7B057EDD4280D406B2329AEC497893FDDEE3
C61F3E13E93A0032384C6669D57580052164242BB6906ACC9C9C1EE7DC5CB4BB
034965D045E949E25F10F2726DC4C9B3A3B4BE8023B88D0BA52D84CC421CD671
FEDBBC80450827DDE99E77670D71D06EC861CEF424A54E6210EBE573DD1AAE5F
D81F89BB3326F553C868AACA098B2448CFBA5D98E504B266FC2FF3C7025E3F31
24F1709F6CBF8C3ECC955C1375814AEFE870837D5AD50EBD24E901EFDA6A25BD
2F141D8D172B430088B5786E7FCED5FE5DF0E2B12476968B3C810EF05B694C73
82FE2E06C917030391A98B0AB95050D0A9A469DE86BD0776C749CD28214D84AA
201E7A8E6D59B712B2AA3D7BB403498A3906733A92966C2F11E260A5524656A9
A0A0D341002D08C85443D34FD1DCC618F3F16299CA9010FFD2192CA8295936A1
8B42F96BE5854A7003C281F7CD75E5038E74DD522232F5546377C9A9BE0E1BD2
2BA8459C662760414C01404043E413839CF8C96D5B0600F507564423F1F8A3AB
5A1BFF95E21C6E4D44E35AE73B98F8203B2AEEEB0F15B15156DDF8176D929C06
893DCB4BB2269EB8D58A1B11D30DF7380AF3BB17EF33AACA13C7BC985CDE0F17
4C325F3B548177891B33303B8EC5C9866A2A07325971CFC6894CBD97E59325DF
730711822F77EA1344B0780576F3372D00B338080B76BAA2635F363BF1B0B33B
12D566927F29AB24303C766C1B28573035CC0CFFACA112DD1B17A8E6A46E6DC3
12B4FCA7DAF88EE055E5E7E338AEAF856077D09DF5147CA479EFC113452E6009
892A03707848E83FD4278FDC022623DE9504CEF0F27B55B5F018D2D280F27496
8DE3C0E36AE3B91E6C0913754860547FD2B574D92A7E750D968A0BF42431523D
C39460CD1BF544D09EAE9EB58EA0D7E42CC17EC429FD599FC7C7C7C6B50A875E
87A11D841CEA1F7EC957174A99C231171CF3B0999230B77C8559EFD449D0B42B
7769E6CCBB831F3ACABDED1867C4F676B21EF07EC27945B283276A679C13E435
D428D7DB24687342706385584D9055C2AC1E8C24E9818B55A3F4AADB29176B1D
5B0401D102BB5B1A1080A5CF302500D3F395D27B60B9E08B8B506D86E04ED7EB
1DD66276AE546187748662F46B9765C199F70AD3625D1A2392EA4950D3918706
0CCB3D93798ACBF6E3DEE50D17FA8E58238A9BF57F49DA08F2D78E70A7A34A93
5719B7479F14446527E10F11FB38F2454E8CF6CB36C59A6EE659CE126358240B
DFF2ABC977EE7137679C9860513EAF33CC55250968DC16E6FE21937D6585086C
644753283C80A2C03A811000692353293E8836FAD2BEC07F786747459AAACBE0
FC5470884E273B21B56334184D67DE3EDEC4E736CCA22A08C5841C2772FE59D3
031C3F576F742432AD7F1EA451E73B0466322CE0F8250A1CF90403203581B8E6
A2EDDE6E98EE5169E3C5B118879CBAFE62EE146846411654654736E9CB4465B0
E00D9B552E196DD3DAE9752F7D31C88CDA6E3E6BA4967A29DD8BC01231FC15D1
E57723163165D489D1A287905581DF074778C07D8C312534D2DB315E0F6C9164
45B302EAD1E19F3D44EAE5645C0DF59FA7C6367332147B3FAD81F135CFD040BA
B9E1FC85EE37A225ABD293ACC73E38FB0F72D125317E14B8371406B6CE9CA485
BEE9CFDE41686FFD1C320FC804E541635A16FFB86EBF5B1CA653882E29B65E5B
ED618C2064F432C1E8DD273FDBD767FB1941D30C5108B2872C09BD9F2FB396D4
2B2FBB1B962249431FEC1139370FDAF11E1A39547C60C6BD04B2DF1D55492427
A45D0079AEF0C185FF4F72D5DC82DA809179F4E1BDC59E7FF72C202AEECD657B
53506EC3AB56DD8E6F453E8B55BDEACC4A6D2433E9CA0A7234D37365B141D523
7BBC25141C4961785C8545747834D001A98B9618620C91DD3FB7C07A7984015B
83CC3E679010C542144C2D36663F806F9A3CB26404E5E8AE527B4422B7BB139F
63E3F9CEED0757E45C06280C3CFF59A867C8DE56EAAC70D8E15F331D9BC82AEB
8BD4A419865016AAEFDED3E0743D3AFB1193A58E5FEEC4888440AD23F39F2654
D22D0577D9BC7ECA7FEA2B7A19907746A3BF3DCF01CB5AB639C7A0AA4BE54ADE
1F8EDD1FD7052485FC9CBF99A96759D26D760C39ECC557FE879698F4C8AA507E
3660B4DB1A47E689EE39DEEE296012A116CEA9D67AFFFD195B66C6A643A29F68
C7F51F73F162F64ED65962C594C1A10CD3E6A8709A4B761BB1C43A8492C7A7FC
E3D9CF279D51BA2992C1C62C50CC9D6A3390367270C1C3FD9BDF62517D974618
256639F8955E6DC2BF46281B0D202668174C7F3C16EF36F8D6FE55B618204EB3
FEA6FDC2B124CBED9549670121AD6F00843CDA91ED0093FBC8EC53A402E6F8FB
8B2C527C6CC82DF3CC2833E4E6AB90E00CE77D3454B3EA9CA135E30E581FD279
98CDD38C87CA7A2C4207C9F6CE022CD28A624F3A1F519C2EB03A80DA24C59BEB
F6B7496663F1DF68BCC50EAB2BC4B332962B214635640875E2C6E78F3498B804
83B8A1F82C98039B909652865F5887FFC5246BA288ABA6BEF78BE00F3536792F
7F6CA67C606FFF892C0FEA6E77439F7EDB594361F6838273D36A3330A3FA9ECE
D6CDE9990221FC380A45AE6F84F1282E6CBD70D0508211E17A7B161FA67191C1
D394A983BC082B2B43B97521555B062FF02C972690CFFBF94FF767C137F248C8
5251A1337629F0732DBD9A08D75EC3767BF1961C430AAE5D0D57445EDA3EF31F
AB6DF78BC8CEB43ACCC36814F22F001CB1A58BC5E9FD36E3A14160AFB328AD72
ABE022FB1E1C842FB7AD2FD97D0BBE981BDF544EABE770547749241A106596D3
BBA3BA386B4BCFDDF996C82D6382E118F1E3D186966F611BDD9405214E68BCE4
7D5AC9972E235C34697B4BFCBEA36EFBEED4D65ADDE42062E7022490A7546881
0EF7994E81589124D62B5550C027B980040FC4D55D54F9168DBC020B1B021C64
06C5B3372F9C33B5664265DA9B0108974B21B97E4A6B632063242034C8024E19
E3C3084A35ABA81D7192A6F0BB4D188C7E09F276A112AD5D9D584C85D15F68FD
6B487985FFF4ECF7055010E289F409CA36092DEE187E0D3C291A3211D919B909
95FFAAE0328E4751E614068F90F62719EAA9CD648D85A1C88562DF293DD749E0
E23C393ACA10B7399C0E120D36CFCB6E85B23A3962D4AFDCCCE38922BE1821DA
EEE7423E3E65755425D75FBD5FFB18C80838CD6924BA21EE72D17F29B9A6E78A
EC383D18C72B01CD94B26779D20EB0E2C769D0E996E4A5451C3040569814873E
A80B3E14189D77F70AF8035C89C2654EDE2482D12D3031F7C35FAA6AC568B2AE
B919A1C09BE3A16184CC27065F8BDD5812DBB05C725E3CFB3810CF828EDC8EC8
6B721FB5A827A48B474DFB1AB10A14E66670B393020CBD66A9DA3BD4C5A58D49
0FED208685E9C4EC44BA641A16BA7908E97A5624195A6046703043A145B91961
A8078E561CFC2C197F122538F32A686BFA36C952B709332163F2A61C38C893DE
BD9FBFE801BA1E56B316107D79DB6641064155ED5D1EC7AF3E1362168217463C
ADEDC01E83B18DE3C0BAF236F259EC93FC7914F5C09323A5F91BDF71EE82472F
FDAD19C3EF2AA74B4C14B33A623A772C6E6A9263F117D95C4C1B52B2878A0ADB
1643AA5B0DA63717FF25B023F840FD9CB596EA1ACA3BFC437DF4C6BE665351BE
3819C6D6C22D33A86224B84E64489D999A5B43374A6B76C62323ECEA04B5BBD7
D0BCC625CA52D5D943A64BE080F92156D2A65DBA72A5A4A704E032AB24827302
7F6D41508F7D57C6A8895535B776F6A58C8D369C7D7CCCCC545D19221397BA5D
3659380A4101C4FCF055A3276713210FD8CE1F76A193C3F90EF361B85475245F
BA17A990C24793B70D26E6AF552B09AEAF9EBCF7088A254E351CC15E2AD3AC77
817915906389770EF6F3B6E714600C96350A482533887FC26FA084CAF990E05E
78F0D0BA96B86A1A31E546ADB3C674E31B7E974C09D8B31D84A364ACD400EE7C
83C2EE5A6A89DFD8DCB52C2DE26B68B00AF77C4F0B6024FC92364A75A3EE2E91
A95432644DB596FE24C6DC8C857FBF1C16D7BD52D9E9D05D2BA321C6CA07E4D5
9A1692298909CD42C4494041F1AF5F334AAD3CC8858D1C14310339CBC11010AE
26E8CCA2F9FE59E2703D48EB70473182813BAC751156970DDC81F0CB31212363
F7D8806BA0CCBAF0BE50FE865F66A0950B2D5A834601C9499340021DD2A39D0D
7AEC8ADAD2BE737B8BF427011F7AA1B35D9A3FDEF856C465C7D1A081D29F3921
C8B68BC889C38F29B100E5557AAAD1CAB131479AAE013DF8BF40FA2CB3A107C8
187816DE6D4A9A498F0C3FB3717374552D2E3EBD46952C8E6327DA8FCA26FE4F
EA452B13406AC8426D38FE9A2454A71358516F016AEE191967757DD838652702
72E3EDD21B7F2985C05F017C18E5F36EA006E1E60B8D3610C101EB00163B5359
DDCE43C3D1A4C82EDF29F50CE8CAA7D80FC6EFCC787155D97A8267E1147F7EC2
7256ECFE1863B43AC44BCEBC543BAE356535A79BD92A1A5017ED4D8C0B177AB5
CAD3686A35C710760C3DEF8B883768DA4604790E97B39E94F3DC3B59C3A101E0
BA9CFEB108F73158A3B9604CF4966D5C4A492D6EC654345942A9A0F0B1CFD04E
1F92DCBAF4AA9C123BE5DB9DC3F3332B92FC1F2F3BE980D10F32DB7CD93D492B
FD000B724888DB844464680699E3849415344F5E663B71B22B427AABF1382AD1
8AF16A442EF61BF1338B31261402C1919DD1D603D422A784764ADBACE3FC8392
B66F5740A066E89120827A17886ABC3106E31BDF091A1F005A4A37C6F51B8518
5669AE6095C68DA6222F43508759451FBB4B23F01924E90AF47F1910B5E01997
62AD027FDCD1C8931A281C5BAD0668CA467A0173B31F88489E4CDD30327867A0
D3BE8596AFE11367F3B97C58070F28210B3E9FD2F731DF313A8DB2F522B73A38
65F98DD5D19E5D95EA19F8D54DB6B6F11D171DC0B3F5D78A5878BBD89386F9F1
6371B4A246489A596DCBC69F166D4CA6A26750D40519C9C1B75B05DA3CDBE514
7318149F209C4F50F083421685CE1D1AC27C941520585072E0816BD9EF1A1984
1756534FD77C50E378727799AD395C6B73F064D5A0C5FB4820157814C1084C07
93136F449D9F8896719C41A04BE3E49BC3BF9277C3CB14800DADB0836601B835
28392B393A0022608A394F975EAC5A5C9BA5AEE1E1466974FFB673DA459129FE
1AB7460DDC8C5734D547497BBFA444ED41BB737380DDCC462F448B1D7BAE7F81
979ECA823142944899B91D963B7E57ADDC82D6490977062D39967427828A8581
BC184CCB1418288CFDDA18243CAA8872FEEB3DC28BD7829B54510D9958A7B0CE
2DB4175ECAAAE04DD7DB82EA97CB86DDB3C4BC26600B67230C658D341BF5C9E6
09757B35F092FA58B28777D55630C8DF4BC57DB8FD0287134CE63902AD647B24
E9F9AEBF149BD602D4F0F81186AF2F4B768A2365716335E897FE6C2AE60B1055
38C436740993227C385208691DD8DEEC9536ED27C33B840EACF50CB522871B2E
535F585A9D92EFC5CEEED1B9CD3DF5107AE12DE76B17B4EF717287ED7F499841
9480DDC0C67F68312D4DF12EBA7A8AE9193163D11E685F38BD1613D45D97F96A
D11E6C906A97EDE349A438360A4834BFBED4E68A317F8DE6384AE34C639ABE81
4766ADC38C543295D5BA0B94D81E5193CD79151D4CD7E1F4AB548C1B39569746
DB3762A7D9D768091091F19EF2F255E783296C8D46402B29C8AA2091FE649B8D
4A464EF2926F08FEB0B3C1A17F2212E2ECCA6851FB1959860A5AA5451E5E1F34
2E518F124A0294070B9265DCC248EF8B50830F71F0987E593A71EBE1D330CCB7
BA7925697A93D86D2C2A2B6F8BA8FF62E70281E34C867CA6D2F2EE77CFC60EFF
81DB298E2F0E016E0B528CC121CED17109349B48CF1DE46B90D3054AACF3A58F
C2B341679CCF315FF23176366757F82B1E9F65B859ECB0969EF74B5AE22430FF
B3470AF1DF4F4EBE91B538E704E9E89A604F4BC72F54A8F4EFEB390D76905265
0B7E9D1FEE9F125D8C1F3E41324DA443B8B620E768B9B1CD72694B60C2827DBA
5648E44E7549EE0B31BFD73595BE460D97E432BF91E17BC810641F5E092C1705
4DE19394BB4C33AB60E4255C61785C42D2C746A981234143DB6821241E27D74F
F154C540E408FC068C11081F84349AAC288D880B91E20945BDDB9D8DE3A8C99A
6461B8932CAE3F65F4D57053DD659EDBF49285EA5F5648ACB9FD663A606257A7
AD2CF549FFE58BFD4C9C32FC387105171B7BDF8A2EA02E6FEC85DA7EBF1803CA
3290DA3F5D8F2066DC7892E5279972E15B6A699D0E14583ABBD812D8E1177725
E44A786C28DE2B0AD5BA35C78D3DB1508FA20597070500924365EF4FA605CE2B
D8F0BE7DC15EE257DBCB82AF58A8EC035B208DD163A3CA1D6A2C79E3CF2E3F11
FE2ED94D61FB562FE7E528E2AFEF68C6A5BFF9C71B5B62773435D0353B646AFC
A87159AD673B1036543868636A482A0A98CB7DCC79E6BD92F89F9FB83A4DEBCF
6C8D31307F25E3A2A6B55B48C83E397594BA82E71FEA95F11F1D8A0B9BDD254B
ED8C2D9A8C3011B8A20D279DF78E1537AAA678
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C8594AECAFA6BCB9525C67AE8129CEEE93D0E
4438B41FC960603870583723D3E94A3269EE3FF46B759D4679EA28D1F2E99655
1F69A140A662A98CD3E578483305EF12256B13481B59AF282185C7CBFF043619
930DA4FDDD613E1E98225608D19BFFB8773574AF9236048D9A9FD4B56B91A01E
225A846E2D1A20B6A0550EF7FD495CA88B5462A68C6F76FC8F251EE366EA47EA
8B0F2184AE6DF86E6043E51CA78514BDA71E72B7547A234DD8DFF3C06FE9CBBB
901570A442AD485459751ED108D7C1C32F94973EE4F7F6CB903E4C306556730E
3E8985968F63B3D05F76F471A46B0BA039B679F5830E4BDCCF9D19173BC1AC61
864D273D47182327965F9752C64E9D400BB556C2DD51FE2ED3AF5E31C8A54A7A
1AC26C140B3B0753E044C7840735B2177D713F6C9D6E9D1A5E8FBCF32D200E0F
AF7E2502772B16F6E7154C570048AD99925459B26B5028C4A0C6CF7962A86B26
F3AB70A8D25526BAD00D4DAE75A08ED8AD3CD8850A475496BFAE5E7D1459BC80
B6898012312E788658C0CC05B5F7D4C10C1B5E6EF2BBD8645586BD9B2B3EF142
D1007F2A5E14FB9BF8117D9094166BD2B08593184CE690CD7948DF6067BE8BB7
3E7895F70EA4A64922FC82EBD362776697978A49EBBBA4A1DAA31BD66F76F6E5
E4D192A587D34CFF786ABB0F9A79907AB70DB9CEE9CE0100AE7DD89DDA97823C
8FDE4C2913EB72AE3E93CF8F3AC49C75C1B31BAD541B0FA7537EFAF6B8BB790A
B52A559569A0122B88BEB88A9459F59BD20669FCDE45812CED19CFAC2B053D26
91E0CBAD108C6E39AC07D1620116A6AF8A7F211F1B33917A223FC198A24746A8
28923AE4D270E43715BA54062A227D7B1C61D541C187085345878CD59AF1ADD9
309B1CB10D678D7D1B3BE2BD081CFB9BE122F5EB9256410A727E47F14F7B9E53
0ED94405E88172994AB0353B91D6BC325ACA18621F9F14916D8DDB3E25A0055E
BD6EFC0CDF2843A07895295A53B9711EF6B9F734AC514A3B200ED11514180517
44E40FB9CFC02EE55AE3ACF0B696E4444DE0BB3491FE84A6315D028E3BC12992
56E1D1E4EDD740CB6D461FE1CCBC3D661EE0735D3640FF126847D225B597E0D4
75F3E0D082A0BAF3C53E102669355C2FA944AE4320197C57237FAD47BBECD9D3
492A0E1988B51813AC1E4805F78F19CA93390FCB59BED2076D3C0BFC32DD3D64
6945B77CD65C9473CD15267C4F27F5B212999D21D23C50687F8B8D343063014D
86BED09D8BB6EBB0684B510D5D7A29132450A2CDB6F904408ED008BA3F5F85EF
1060674B4BCF75F48FBDEF27B9FC1AD32096D7E9C281194A84A9ECEFEA502331
7F88FB64830BDE2A8037A10D16EFD305677B9A4739C67ACF82AAC4F0C9E0ADD9
40B62166FB7C4C085B8D0F10DFE65071028DC623E531EA276574CAB6FA3D14EC
60A2413273C94C9F6DE86A14D1EE7BD85FBECADFBAF2B8F2B5098A00A905E88E
03863FA67D3BD8E03F418C44A895C349418C9D3B15FB9ED1330AB93E9A8D466E
DF09418F418FD741DBE14E0C10896BEDBF25262B1C95F281E1C1D9EC38276EF0
01BA57BA20A70626B00D4EDD024084CB374F8D0E9DA501524CD226FBA2CCE602
37216B182488698F009BDA2EBE5D7396BCC1AA0AB8B4A5F2B587BE61165C47BD
C0B774C95AAEFA817D98858503F7B21FAFBC99CE983EA462DBC29DFBA80E3897
86A0EFB4C31A902897E97404C39FAC60887421339F6D451A56EC92963935669C
2640A60C376C19F94DAA076BC18D7D8B481921FA8623D6B63755279D438F16E2
C4C412D244CF986BF72375464628ECBC71B24790EA92F466944C0E66C7B33042
843545920F7F6624B18A4C0974C5EF103E8B871C72619E1925054A3840BB68ED
E5E0FC00A2509E14D9A5BE53CBFDE07B162D1976EED47FBF3CBE34BA43402E29
BF660674457A70FD16BAC452BD8BB544B57ACF2F9FE83E3E68109B18249FABC7
EE49F007589A2A08E976226EA7F091A006D3E00A7A659D9A45853C24DAE4C438
4D6A6C0B4E1A3954F6254E6A4D3B38558C6287C81A6FCAD90C5684346EBD66F5
1E58627D5E2622D22B75FE01501A8E798577E59B9CBDA3DCDF109071C2469B43
DF46DBBA60589775B0AF215F25778D228E42EB64A84C46E969229444544D2E95
6A3F95EA470066F36E43D5771D28C870512F628D990EFBE1049C73D469763EDA
1326C935295236DD983FFF4ECC07C2E9B7DDB9983A97A95C1D97479ECC18F736
83CED56A5CC6F453ABAD7378A8CA6091F5EA7C1EA649164E981D83AACF1E32D3
73B2FA392785FD6A98A81A2E9DBAD956762820F995BCD7B2DED7829CA57157A0
C21F37B9E716D79199A4028F1AF8776256C0E934F6A011CA263187BFD652DC36
561D27A9335BBCA18349AEF0D7EFE95E4AC20E54A8A54995D460B2B9A6BE5057
1177FC9FEB41C852C0C84CAAFD32AA716301301AF689A2E3B82F4A439AF0F1B4
D45E4DB17DA98F338822A06C6DC488FD13E33323F969C14BB2980F7880873FEE
038F1FFA5FBFF226D3739A9150AB31AA85EC4C4EA253D353A47EE953FE22B755
CA1B83024E916430F664745A1A266F0C2147B13D704C7A6B03E6931EFE82DCA8
BFFA5DFFF324BAB830E6BE104B0BC01C7FEB8A6BF182467ACFE3B05FE61A64BF
549C67FDAE1B24D89C50C3C54B4136149F76989E8C5514ACB22F3B53500DA952
45AB7BE1A90282BB20ACA17D7F8B9FCCCCDB9F327097EFE73DBA9E508070C5E1
160FDBF1A7BD9EF3FABB04B564394631F4A0D4C5391D3C484BCE497D5BF45F01
304315837D04886178EC3ED9784B07073F213C3C4DE2394B650042D8C45888D4
A0CF8A46CA338068842574C3869A5A40F63C285E2D52D69BE14F22118E802B28
E97E3B1E09F79898314984BD90E8F69E4A07B9643CFDC045380F7B74C1F3F69F
041C7D00EE44CBE17DD19F81B212571CF270F3391C164BFD15E2D4DC7906C548
4FB0E9DF6A41876B63BCC65722CA958CABAD3A3E384B6993E43E5686F4F22FA5
546410F5575B56D3A484AF5D02A5ABCB9EC3B808540C553DFF7576E6D63777FA
BDFA24C8CCE0B7E2FB13A4ACF0210CE8292ED73C143F97921AE83116CA0E4E2F
24B368580A398FBD7C12FED32FA809F5ADC702AC34F3A4D860D8913EC169F62D
3F454A67DCD2AA7A2527B1C5D97A19D75D3E5CC0EEE772ECC4E2439AE9617025
D47C655859D879FE70B55770CC4E75B3E0863CEC42BC3F5C49016465438072DA
3FECB66A1A0B7FE592860A47A6F7D5BDD02C87A587D402F812918E943EA517DD
3341F00EBBD775538ADBDEA0489F03F9BA2DF35D0D691AFC64F28D00379EBC92
E45971A5FE59BECC6991D312BF66926266BB36B3377D1CCCF2673662E14B8111
AFC84403A91D6D54FEC3DDD03CEB8408BA2E85F8AC4E8266C3813DB1E435F53A
431DCC05EA2C791B2249E4048CB1D8D8E62E3D33DD62AB0E70AF8D0349506E85
7226886ED5EF474E035B78C3DFB23ECBA603CE654FE7A0974963C3369899A8EE
E0612430E7659EACB7C2E8BAACC32745BEA880B07E9E87B93B2832F566E7D0E4
EA7556A99FEDC67C71436EE0071ED06DC600929577966B214B1884030836F4A1
584552ABFC3929F4410C7CDD1865D18A1077EE5F0EDD0FA53C7FDCE6926415CA
AB234D8926EF2F6BB003AB5D9ACAF35BA65A74099B6BB44B9356A1042FA515FD
65C308ABEE6C3B8892C5BDBA26A9FED7DBC0611506223D667F99FB6B1B9D5917
5BBC5B51531BFEDED264F4ADA6E6E08B8F8210C98A016FB97361DD0D3550BA05
DA0A834AE56C041C130F0A7D02199598B9D55507166D5165D217337FBB4494AA
0E0A8FC6F65C948E3B69F76544E1BA7831B488B661F8C45E1C517D8E84F2E581
EB60834F531879FBF338171BC80549FEAA389C2102D663C5019F4F5EE1AE5516
B5897D25F4660029D5FACE40BDF75DA644498947CEA02E84A92A9A0AF5A12F25
437B8E09BC59176458C1FA1D9C6E58C85BB454F325477B207C8B156CA556EB76
348F2E5FE57F491A668B798914218D0C53A2C23E12B748DF9FA9EB85A1C3267F
F7611A39EF88ECB943B4820AC9DAA4717B0656DB91BD20AAD39BBAEEEB571A9E
D814C24ADAECFF06650E02B3CA8EF298786806E9159B949860ABC95DFB909142
6517AABC8D5E178CB63A0C018B15AD1B0A483B4F9E8FDDC2ED936E5494F18E28
AD6CC20ACC02B0CC8DB3765F841D5921AA596282B203C55279B6772223DB34E8
74AFA90146428D20D8C4E41498062C9E2E8256D8CD950F54A2A8005396008627
F172C3FC5288F9294D0B223D6A7E82F0C1FA0A8B35E4C40883D1988F335D5AB1
8A0043C5BAA48A7C98383E22D3141F460B761BF1452E931180A949C08A8E9977
A41E57D602B155DB8EE050E533F8C9609AE014A298F383189E740EBB05972EF4
862D72C6259BA5D7ACB335A2F070598D0DED9BBCC7F3FD7610D869D71F32501C
988A02244F5AD179F125D256C672C1AB8885B150030B9C4F9354868D687620D8
CE068CABD99B0E5C3C64ED2695BAA850D3E912C4BB7230C3817104ADE50E4BBE
9B178410111B370FA4EC353C2B591C4F42FDF7AE18923D4E4EF9E8BB7E499C78
620C118293C5208F7C076E7019EB36678DA00E452CDECC666055CF928469D58C
6272F0B66EA8D8F1C1AC1060A5384AF39A7F1829DE702E1681043FBB894701B2
86257E97A14969834F222FE90CEBD115529BA24FA17262C35DD21D68ECACB71F
8E6B8DEA57B9EABBB7B471BEAD49DF44DBBDDC677CB022C4D9EAEAA9408CC7A2
222EE4AD0C504F9D7B0109F4AE88113F560369E1B697C808821FE5BB4A4BEC5B
91699F58F863E79B945B68F4872433DD4265E03010CBE436B1F01EBC70414B9C
EEB92FB669C957AA606F6BFBFBC613E22F04D1575562218681E397276A100769
949EE883E9835F4C88DDD898494CD51CFC391D05E557D0B41DC9F03712E6FC8D
E089E40C7925AF61D52498287BBC2534C654448FE7D539D76BFB242EC3DEF5D6
9CEDA4E820F2D8E0DF3C51DD3F2AF831EBF294E0191AE59467D7D26AE8BFCD8C
967D93E7D72E829968883FFA8C4BFFCA537F71E8EEC29E188C1171077A2A50E3
CA4362180DC31319D07D25E664720380D806
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (bitzad.dvi)
@start /Fa 167[44 10[44 2[44 19[44 44 1[44 44 44 2[44
46[{ encpltt ReEncodeFont }9 83.022 /PLTypewriter10-Regular
rf /Fb 202[33 1[33 51[{ encplrm ReEncodeFont }2 58.1154
/PLRoman7-Regular rf /Fc 78[53 6[45 47[60 71 6[55 6[71
41 37 3[61 75 60 1[65 9[139 6[92 80[{ encplrm ReEncodeFont }14
119.552 /PLRoman12-Bold rf /Fd 83[65 170[23 65{ encplms ReEncodeFont }3
83.022 /PLMathSymbols10-Italic rf /Fe 134[41 47 9[50
73 49[23 59[{ encplmi ReEncodeFont }5 83.022 /PLMathItalic10-Italic
rf /Ff 12[42 55[37 9[33 5[46 28 3[37 3[37 42 38[37 44
1[60 44 46 32 33 33 1[46 42 46 69 23 44 25 23 46 42 1[37
46 37 46 42 6[51 2[85 6[57 2[76 1[65 43 5[63 1[59 7[23
4[42 42 2[42 42 42 23 28 23 2[32 32 2[69 37[{ encplrm ReEncodeFont }51
83.022 /PLRoman10-Regular rf /Fg 198[42 1[42 42 3[42
42 42 1[25 46[{ encplit ReEncodeFont }7 83.022 /PLRoman10-Italic
rf /Fh 12[48 65[38 5[53 32 3[44 3[42 46 38[42 50 3[53
37 38 39 1[53 48 53 80 1[50 29 27 1[48 29 44 53 42 53
46 8[72 99 9[91 3[36 4[73 1[68 7[27 6[48 48 3[27 1[27
44[{ encplrm ReEncodeFont }38 83.022 /PLRoman10-Bold
rf /Fi 139[58 4[79 80 4[37 1[79 1[73 80 2[75 6[96 5[105
10[47 6[105 7[44 58[{ encplrm ReEncodeFont }13 143.462
/PLSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fi(Zadanie:)54 b(BIT)-94
117 y(BitoBingo)3287 153 y @beginspecial 98 @llx 530
@lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 206 3969 4 v -94 314 a Fh(XI)s(I)s(I)31
b(ob)s(\363z)h(informat)m(yczn)m(y)-8 b(,)34 b(grupa)e(p)s(o)s
(cz\241tkuj\241ca,)i(dzie\253)d(2.)g(Dost\246pna)h(pami\246\242:)f(32)
16 b(MB.)192 b Fg(27.09.2016)-94 513 y Ff(Ja\261)31 b(gra)h(z)h
(Ma\252gosi\241)e(w)i(BitoBingo.)e(Ma)5 b(j\241)32 b(oni)h(do)g(dysp)r
(ozycji)f(plansz\246)h(o)f(wymiarac)n(h)f Fe(n)22 b Fd(\001)g
Fe(n)p Ff(.)33 b(Dzieci)g(rysuj\241)f(na)h(prze-)-94
613 y(mian)h(krzy\273yk)f(w)h(p)r(ewn)n(ym)h(p)r(olu)f(planszy)g(\(t)n
(ylk)n(o)f(w)i(pust)n(yc)n(h)f(p)r(olac)n(h\).)g(Wygryw)n(a)e(ta)i
(osoba,)f(kt\363ra)g(p)r(o)i(p)r(osta)n(wieniu)-94 712
y(sw)n(o)5 b(jego)34 b(krzy\273yk)-5 b(a)35 b(ut)n(w)n(orzy)g
(plansz\246,)h(w)h(kt\363rej)e(p)r(ewien)i(wiersz)f(lub)h(p)r(ewna)f(k)
n(olumna)g(b)r(\246dzie)h(p)r(osiada\252a)e(wszystkie)-94
812 y(zakrzy\273yk)n(o)n(w)n(ane)23 b(p)r(ola.)30 912
y(Mimo)g(zwyci\246st)n(w)n(a)e(p)r(ewnej)i(osob)n(y)-7
b(,)21 b(dzieci)i(mog\241)e(dalej)i(sta)n(wia\242)e(krzy\273yki.)g
(Zak\252adam)n(y)-7 b(,)21 b(\273e)h(pierwszy)g(ruc)n(h)g(wyk)n(on)n
(uje)-94 1011 y(Ma\252gosia.)-94 1286 y Fc(W)-11 b(ej\261cie)-94
1468 y Ff(Pierwszy)30 b(wiersz)h(w)n(ej\261cia)g(za)n(wiera)f(dwie)i
(liczb)n(y)g(ca\252k)n(o)n(wite)e Fe(n;)14 b(m)32 b Ff(\(1)e
Fd(\254)g Fe(n;)14 b(m)30 b Fd(\254)g Ff(10)2671 1437
y Fb(5)2707 1468 y Ff(\),)j(oznacza)5 b(j\241c\241)29
b(wymiary)i(planszy)-94 1567 y(oraz)26 b(liczb)r(\246)i(ruc)n(h\363)n
(w,)e(kt\363re)h(wyk)n(ona)5 b(j\241)25 b(dzieci.)30
1667 y(Kolejne)k(wiersz)g(opisuj\241)g(ruc)n(h)n(y)g(dzieci.)g
(Ka\273dy)g(wiersz)g(za)n(wiera)e(dwie)j(liczb)n(y)f(ca\252k)n(o)n
(wite)f Fe(x;)14 b(y)33 b Ff(\(1)26 b Fd(\254)g Fe(x;)14
b(y)30 b Fd(\254)c Fe(n)p Ff(\))j(ozna-)-94 1766 y(cza)5
b(j\241ce)26 b(n)n(umer)h(wiersza)f(i)i(k)n(olumn)n(y)f(p)r(ola,)g
(kt\363re)g(zakrzy\273ykuje)f(k)n(olejna)g(osoba.)30
1866 y(W)i(testac)n(h)f(w)n(art)n(yc)n(h)f(ok)n(o\252o)g(40\045)h
(punkt\363)n(w)g(zac)n(ho)r(dzi)g(do)r(datk)n(o)n(wy)f(w)n(arunek)g
Fe(n)d Fd(\254)f Ff(10)2819 1836 y Fb(3)2856 1866 y Ff(.)-94
2141 y Fc(Wyj\261cie)-94 2322 y Ff(Pierwszy)29 b(i)j(jedyn)n(y)f
(wiersz)g(wyj\261cia)g(p)r(o)n(winien)g(za)n(wiera\242)e(jedn\241)j
(liczb)r(\246)f(ca\252o)n(wit\241,)f(r\363)n(wn\241)g(n)n(umerze)h(ruc)
n(h)n(u,)f(p)r(o)i(kt\363rym)-94 2422 y(nast\241)r(pi)27
b(zwyci\246st)n(w)n(o,)f(oraz)g(liter\246)i Fa(M)f Ff(je\261li)h
(wygra\252a)d(Ma\252gosia,)h(lub)i Fa(J)p Ff(,)f(je\261li)h(wygra\252)e
(Ja\261.)30 2522 y(Je\261li)h(nikt)h(nie)g(wygra,)e(p)r(o)i(zak)n
(o\253czeniu)e(wszystkic)n(h)h(ruc)n(h\363)n(w,)f(nale\273y)h
(wypisa\242)g(w)n(arto\261\242)e Fd(\000)p Ff(1.)-94
2796 y Fc(Przyk\252ad)-94 3035 y Ff(Dla)i(dan)n(yc)n(h)g(w)n(ej\261cio)
n(wyc)n(h:)-94 3160 y Fa(3)43 b(6)-94 3259 y(1)g(1)-94
3359 y(2)g(2)-94 3459 y(3)g(3)-94 3558 y(1)g(3)-94 3658
y(1)g(2)-94 3758 y(2)g(1)1890 3035 y Ff(p)r(opra)n(wn)n(ym)26
b(wynikiem)i(jest:)1890 3160 y Fa(5)43 b(M)-94 3956 y
Fh(Wyja\261nienie)30 b(do)i(przyk\252adu:)d Ff(P)n(o)e(5)g(ruc)n(hac)n
(h)f(plansza)h(b)r(\246dzie)h(wygl\241da\252a)d(nast\246puj\241co:)-94
4106 y Fa(XXX)-94 4205 y(.X.)-94 4305 y(..X)-94 6155
y Ff(v.)13 b(1.00)1692 b(1/1)1554 b(BitoBingo)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
