%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: siezad.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLTypewriter10-Regular PLMathItalic10-Italic
%%+ PLMathSymbols10-Italic PLMathItalic7-Italic PLRoman12-Bold
%%+ PLRoman7-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips siezad.dvi -o siezad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.09.27:0823
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD307675906416387A68
459DB8C176ABD525628E8A8EC00C8BD6EB20ABE37707B78D8E6E0982D649F318
B496AC77604311FA5847F14127DCB74951B4A7383A80ADBF5D625AFA29921D9E
395E9E71CAAF5A17D5D959C25847874CFF62A84963541AE8AFBE8A1587A7BC96
C8C35FEB815ED98DF3323F7328F6F57B13A373A9E0DDCE6E0CB200846737237A
100E865CED746D25302D405F0492BD7ADA00768489D1F02B5F76FE3295DADA1A
1B81C7FBDDC7AF4D96731E07987529DF236C6E85FE860261A461D2B16460A55F
02528ABF0F629B34522F0F346F762FE27B888606031FDD3014D53E3271938193
6CB0776A228F714D0380EC24A664A90082606C7F1BB4B3409C59D9D15A6A6B4A
8E7F10FEDB2D5BAA6043403EF01422572B3805F093A069196BAE8DB7E6581F81
C57C6E5CCED8B61D6EAC65E305DBCA5630F82880744EDA3374C9FDE6C62B7C89
ECF3F7C1839FEC5F71C3D5C65C821D4EE4C62B2ECAE693F327D25D98C9AD193F
94381CC27A22685D87B84ECF255178D2D2C4B7F7857E7F55762832D99EC6250B
2EE635842201231CA58B99CBD64B73C5C7637451A1D5694EBFFFBDC56E6E1EF7
FBE3D40F1A57771D1E94A269173938DC242F0812442BE565093573D61FA865EB
B3E287937147C9BE9926DAAAE4C1569E58941EC067EC4C03A2F8D4D19690C2AF
C60DDC0453682BB3519205D57BAC8E8D1035C7038554168C4A801ADB04F4C74B
E0C7CA9C36E787862910C4D3DCC379F90BDE98CB15B4BA24624E146098A7CC2A
61AF03B1AA7198D3CD544181F04FEB26263F9CB022BE31925DE2302E8F26BAFA
9C8B162D982EF5902192B34252F257E3733A7CAB1F0C21D28BF894334254229E
72ACDE838EF96D043E0EEC1B9D820CF93F5FC0BA145623D5D0BFE8BCEB3E07D6
EEFAFA9B374E36996C3F6E6DC5FCD4062D6C332D20AFF03DC811A8503601BB2C
3D31DE5E0367B7006F757508FCB5D653DAD14A83E552DDC6BEA07E93C31D6564
0378033A2EFAC8C465905377F2CDB9E9B2009EB67D09231780EE80B36DF140D4
E9C574E71C7668BCD2E7CE3FCF7D9686A1CB8944B8B7D33B55839F745424D22B
A34F1BA11FC742A3D0A7C73EECCEC90B036F773A35572FE436EFCFCB535BC1D9
8DD8DB0DF3D49E3EE75769C21A42C19DA52F069C11F12C5F8A59DAB86CE74776
58A608CB758F249C6E13A9C528A198B8EC8654AD69CCB5C209964A2EB189CA32
67B2BE5B8178E6B7889A33771F86276E6A0316C380B52EA55549ADDE54055B8F
3752C3BD6108162040DD3C1FA731E3F8AE2E624ADD58869960793901F271263E
F9EF386EEB42800A9099638BA429F04544129D2B44DD121BBDDC1877EEE37B52
63811E5D0414A3C1122D1D8A14A05A7CBCF9E5DBAF7FAEC6E4563BE9C864BF35
AFFF004977E13B9EC65F0D6EC848B623AE5443B5B8E77B8D164B2F15290E5272
B2C64B17AB01670D4B6CF9B669F9A7821BA9CDB18DBF7655DCF15060A568184D
F72CCD4FD69BE2E638D1B9CA04634440945275CB4A4692393F561AC3395F6D9B
8AE4F9CE923D312888E865AC3E7626167E369AC65724E0E62BB8383DFB5DA7A5
A97407F3DEF442B8DCCDEC2DDA21F75057C2798537EC841AAD80176CDACA3BC4
9CAB0FCE1F67BC159176BB6F1EB52D699348651F043D4E5D2307DC67AF67232A
23714071519EA6CAEF429F2C6AA991BED6CD2F0AEBB87F65D5E67BA200E39A0D
CE96CE7C9B35D08E6D3C3DF11ED0A79F0D71E2D065D16EB849F76658A6870289
072A95B752F47C88CED0B0C0C425EB6158A7A32EC17DCECE34947BFAA3AFBDEF
2044BC8487EAEB01B65023A6FD20406E7E21859EB9F8CDA4F4CCA46CBC2C0E86
E4DB8F5C31418FFC78FB29145DBB7A0CFCECE8AA6845B803651CDE2B42701951
F59DB81033F4F4AEA1BF99F8070976D75485DC4FADBFC04A27B4F8DACF8A135E
22CAE0D144507CFCBBB6E7C62A41BD6A201AB2E6F518890CFC9820CCC2F9DA01
F290968A3807DF83B40761D4CFD11CB1A45973FD0A97610D4B6CF9B669F9A7EE
923F983DC0FF7C15FA7909DF41B37061835F97EC286F1A5F4DA91CD1C3372F6A
08FA7C7C89CA100E41E1A152EF81EFD57154C57B482125B11C09A4A007FF04E0
F9F83B60C851AAEA9568B37F88D864C6950194C8190D1FFFFA5E4B2D0662FA1E
DD634C4F15E365A9E89417C9D9554B3D54B0B058FA4069BCD302A116C2D4AC78
1525362EB369FF1FD739A45BA90755C62147A0F31FDC13636915F59993B9455B
9937E5EFCF10B41AF671E4E09C46CBA739B5C47437215DAA6608394CF13D1B6A
3F8492F6F17CAA6057601778F653345018146201C1A481E945FD89CB1B22FF5B
879E765343EC461543C5AF424BCBBF40A9440B86937BEDCD069B2308577F651C
D25D942A748149265E11A51BE9AEED0F5A4C65EC9228E5EE9CCBAF6B1029EE12
6DA16F232575231DAECD44DD804DE08599BDCDC58E77E40456697AB3401A6A9D
3EC50A14C9DAAB7A56AAE26081E0B6DCA737C2A29507539F9155FFAD09EC2AA8
8C8DA9BFECE40943BF947161AFDC9BD46A01AC7E8B6D366C782F048B11F162ED
D735AA7905D2FE27237AC7FAEF37EFA89BEB40787919F9A83BD0FAD22F65A0AE
E1E9B67785E585DCCB92802521B4D5DD09A82D8E42DB4F4137B87A543364A658
8A9004830078D4900AC3F00E213D537EE3D3E1450C663251E5CE8A5D143AF459
F31BA6DBBBECF45BFC34E34B1102B63205324D40B0373200CC9F96
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic7-Italic
%!PS-AdobeFont-1.0: PLMathItalic7-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 33180
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLMathItalic7-Italic known{/PLMathItalic7-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic7-Italic)readonly def
/FamilyName(PLMathItalic7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLMathItalic7-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-1 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F166942E28C8AB8F1060C53B5724765FE28571728FBD4816AA3B9061D818
2C6E01AEA946C53F8D5253B037F98A39A0A54BDCEEE91A3AB6AE40600D30DCD1
48597DDE11727CE760DC74B749BCDAC11EA913E118A6B353A7C7B5BF72A0C8E0
A246A563BDD4F3BFCA697082A08CF326EA8912CFE36570286A6DE009100C2387
E1D37DFA3256E714423101E3F7806025405B6EC5A45BDDAD39589C1A6BBFA393
170E7908D55CC1B570BA2BBDCF3EECE31194BA92EB03A7A77FBD6DF87FD4718B
1684B464F4C4FFBD4F97A1903F2B52EE686402C0E72080E2685AFD9E78BC7EED
245B9D1F2CF292EEA22ACA0D39AE27642002187134D55E9F851AC15E345FA1EC
CEBCCAF659F0A1D0E143F06020F0CBA556F380CF3920627CF6B95F6EF028EB4C
4567A7BE6F097F93D5404B73183A99D3D1000341981149C965D9025A5318E3AD
B4367445B690245E812E49CA06B0B4D968C5109FF036FA7FD0FC8962530A9837
6BD26C39075D9EC1A987BF34C4BD614EA7496D58CE8BF62247CB10F893048F27
81BB126FFE6BE23910E7F181D048F238829D43DD5B7AC8BECC962105575D6168
3862D5E4C2CF8802FA0753A44EC9E581AE3691C027FB01BEDE9F7A75573080E6
7AB9F074981BA85FE7B19453C201308F2172FC810D86604C883BCDADDB6EF524
27E0B2AD5FF382082B46F42D4E1672B2076DD7714172F78DDC205DACF00BCE93
0F6409136C1793AAD1ECAA2A3B2D7F6904B70062C170FAAF08633A13C303EAE1
1BC1A54F1C48527544E28F808AAC801670C3D6BAB0DA02D56ED69EB52BC90411
BD034E11E6B81735AB30E65CFBE0C938782A18FA9A9882C955044A55AB970C2E
64A892A9E7801D8869EFE48A460C875076F3C37065CE978F9D0F20E64887CA43
D33ED0DBC13A21473C63BC96001A84962A5DF94C6BD05FF3A16AEFFE33F44BDA
EB7D26FDEC637DF2A80E2F435E9FE2D40AE7DC37454CEAD9BA3114AD95DCE180
D0EFE12CA5C2163C53935109069BBB9FB6246A6207915876A249241C3E717DDD
CCFD133C91C1AC68C2C1B83E2DEE7642AA85B1615F9CBA1C3C3197223C9BC61D
76B0AAC17CCAD6353F06651B9D5B09C17883D028F2BB04A721B6B0C7DBE1AA6B
43B597550002B2737F76EF634FA96FB94E96DC2D0E437E119950277E7F17E327
B928E4410E361E59D541ECE44496E5D0B74A437F17BB5F05E7989CBBC604FFCA
18F18485B0DDB4EE9BAD9DE1D97865F8C2D9B55C114BD8277BDD2E80D42C0B49
26CCB9B73A8847B4EC479380641C1F340A1E0D52E1A8D0C140D9870C55B79971
0662B4FE3DB3750C61CA24EFE8AF8F9056AC944D776AD1AB10289B6FB12B699A
2FCA90DFB3DD730D96D100DC5B1BBB1504114B1E6AB325FBC179472965BB6B99
C21D0CB69884C55AF0293FE27E698D4BFE18850717B51AAC0CB0FE158C88A253
D74774970B11342D30A798FFA9B26CE29D4469DC7E5A9141AD2C56C395D1B154
2BDDF61B58EF57A74EAA4CEEAEA98AF92D5E758C290A579C29BF0B67F9079A1B
18B0768FA4C03A720CDB13A9FFE34911DF91C6F3D21FBBAAD00FDDDABFD9997F
399B54A6A344AB66411C98531B2CCBE9FE78BC1AE4D42540243A8C82E274A0A0
FC2BC1A334AEDA418BB909362F45F65951ACCC3EFE9914296F95C51784F74D7C
1677C64C6C246D4A5A7C3B4CF4FCECA1FE4ACF98A0F30EF11588D1F0664C1EAC
0EBF606B6630A8845A3ED806FFAA092CE32C60102BE0378196A107DAD0FB7702
DD5A6B234942404C46943A761BADA6C3B4B9C8B9A0EA2DDDC2402AD389465862
718B6186BB2CF4B290AF5A8CA494F850BD820D668E9F913F1AAF8216CBC34C75
0E400517411ED880613336943D822F2E133A03DB0CF59BD5A8404282D7AF6827
9457739633DB5CBBA6E4E1CE3CB99F13E8EA78DA56973F4DA6241B500D66ADB9
36178FA377DB2DFEC1778F60167E34B64959F20B487B0C06AD32923521AF5AD8
6AD0D4C138FAB5815D9B4F7D204B10D5A4360BCE999891361A68264E8CE1670A
BBE0646F119772FBA679A4D4EA227B4624D6CEDCBECA38F7FA6860B7BB0D4137
1B71223297306A38CBE9D36EB79E5D8879E768ACB7340B4A18CCCE4F57C533DC
72215A54215364CCE05F52876D8082F55F8160BA0D32B0AD7919E39697A2F75F
26A21153C9DA43401554B865BC003C9EE697B82E1A0131385AEEFACA4E2E6A34
DC9ADBC856D2957386E6CD4F070ECABEF44FA9428BB0B3505E2F3B201A557793
0B42F528B67854B4D486666116B0C4DAF66E0E2BC4A7E2E841A9BC124444
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75E4EEB611B9C8A2F
CCA90E75B2443C6EC3969BE68DAEB153CB0DE1660044390C524950888817BA35
48735C48CF3454524B0071B5582DB3C83564333DA0F758DB6319970BF48C3014
5D2A12BAB7F5AE51EB0A8BB98D9FB5EB919A1D92B47F4CBCB931F9ADB92E0D61
990B09C6A749C3666D004CC2E0A360373E7BCA063423BF653F266B62582B938E
D8DA31BAEEBE739FFA32545089856E54B1A653498A071D4F1397B4ABFD8DF02D
F71286A13A917DED24E2115D16B2E47E3DC85288B93BB635F21AA1489D0174E7
13B976F3A0B36C575DF597A3D032EB0138177F7BAA9F7B6D47FD3DC952FE1491
8EBBC312189D77F70AF8035C331FF71F130C31ED8EECB3F6F2B78F3EE8713C62
E48F5C8F62344E371AF8C49D25E46C51D541D23F9D2633D0ADDAF128E4E336E4
1B4B94F0D92A7A8A44160BF79651F0E264F81770C19554999E7AEBDAC87D5E25
B998284A6F868D9A6F9D7001091DE33D6A472DCD3084B026E49BB0BC85A603D1
1133AEEA0BD95D56C03E7072927F790E4981671E3D01F904E211AB3D3362FEA9
B831E269C4FC8B2C7574D369753B77981AD11AC315AEB0294B62BAF5C7D61883
DDA219E891E8C5AD303F66B59D25CF8A8AD6F3D2D436723EBBA72247AA25A389
8659360D81BBAF902A911942D8B6DF4157FEE703D444FCD5C18F8B4CE41D1AFC
925E5CE95537B825B2FFDE8E799DDC0CB40D65BF919B7FA8ECFC1B16AB69F3BF
0575F598ABC5B57218EB1A6AC960A8E8C28005291E4D768BAC7378E124713CA1
8F3592E6A583E4ACED15502C9F238548A869DFE590A22DEB411FE48CF96BCCFA
F7A173C1BFD4B934D3C3358C406452EADF75C77F1B4078C0B0B09675FE9EC168
A34C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44CB6DD0505F551F95DDE361
5B9F1E6134534A315CF6317F111D5BC2A9EC89E2F19716811BA35FEA5AF6530E
3329357D3C3A6403B9A7675DC69ED861AA0478A60D44D5C4C52C626E5DDEC00A
1C9E7A650438AF260A45327984B781D64B6075D35EC1E3507FD4FE2E7097A246
CED40B5D21CF191A2A9F427CC798A40D1BAEFF181E6647EE6143A68CD3CC909A
C69AB5D8F2823781E781744D1F3A5880CC0C6B59C82EE156EB3AE0CC42669196
8D3FAF44FDAC9C60B738185A70BDEC3EA98F14355A95D5D9B65FEF03135E00AE
3438822D3A7894683CCCFEA67A54F947BCC97723738CB11EB8690231291C21B4
4D8FB3D4B72E486A596900828777A6603D9864D9435B7FAF4A47258C8476DB99
335C22615EA72B207266BD5FE1F4F03B7F8F4D46FCB9FCA46B1E5A04AEDD990A
877E51C5DC014823812F36AD4064A0E188D441AFBCC6BE8EC73E48F85E76544D
DA751A3E0E056472DF11AF8C8AC0CD960A2DAFA61A62E2368D8B1114FE023D09
5E938FD45B008A79F8AEEAF6C5F324D997297590E7C9FDC7008BD271005CC3A1
5AC10DB7643FD730F00C9B2749B3E9D82654E3FD164B8F0CF01CEE2AEADAAC38
5AE78D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC7ECF62B8E
D5D35F10B5FF1AE6E6AC2E0B8771B7BA9939D0BF25E127010DAF5CC2D8E63ADA
F77BFC22A20731FBFED4F37A3B26398A1DDA941A4469C89DBD03C02B591D978A
25B3B4B551C48CF2F7B99C6B56DFB4ACAB454C6CB74F094BCE2FCAD37FC498AD
7D881491C1D06444915B131753819D477857A53E17D0FFAB7C8A91B883DF2FA0
930855DC9A70014620301BB34F666244ADAC2BDF4854AA899ECE4676D80F8AAA
5305D162D03F24CFD7EE20738DE07BF2CB6AB91D17C5793A8F9ED655A488DE24
35E8E5567D483E1C52CB78A2F6903249515AB10DFBF0BC3B537C3B1E57934EC3
51A8FAF3A58C50ABAFAA52EC5F286AE67CB50907176F2DF6EEE06F6DA73FCC4F
5A8727EBE4857EA246DF8C786F5189ED61A746E0DB51CED4388D550AC45A5A77
62FE22786C1E5A1600EA8BF680C97212992BB2F5000FF23382B2D17EB716ECD7
5C6A6CAF0F0FB5F6A73A47FFFB9D67BB681F9C9EE050B1905A176292A9479726
917A19D487A7D5796FA723A9E71F504DA54823199960536C3A2A927F7C8135BA
72BA9A2C725DC884B848192177F2321617F08F37735DD06F6CCB59F3D41D0F35
0FC787E0847398EE513C44D6891AE79C97202EDC54CBB1F517C8BFBBF066E097
E7EE7FB5ACF7EA50BF22F1C24C1C7C1875A23769E60789DF9B36E9965748C710
08AB9122FA4985EF3243D6377BDCBB35B0DC109B02A80626A9ACD7856ECE4D65
69FCB64CEE39C288F234ABF6FD9A507BD8813B20E099A6F28C8FC75CB81245D1
ABC2978D7A296849A99B9DF22B8F26D98BAEA7C4CE427F659EF2315CC7712CF5
44E16D7D10D7DD33A56C6E9283484F20B4C2B8C2923E3F4E4AA6CF1212030B9C
E72273DE62F76CA0E0A01B6D315271D10F2B3CC429AB3DBEABAA2246EAE4A9A7
AE975D99A4FDAE443629BB70A41F2EB01A30F2DCC796C37CB2AD3E82CD6B708A
293AF64313D0EC3CDA923AEDF268E843012BE1E8E932BEA1F355DA40369DA03E
E78972F02B1EAC96F9BBD87DB168012ADBD77034A57FA2F70837C870E37EBFAA
85F3F57B143F91FB61F519825659E854A83D4E6F02B610E5B65F18E5BD19641F
47A05F49CA2A65E0A3E935AA652C0B7305ED586302931052608603E1CAF78864
8D74B078EE38A8468D6F1BB73771F3500076D1F61FE913C6E302D8A05A71C69D
EAAE9A2A40CAC4B4AC3351BA983ED1CB7C2075612F3FCD6C2CD7634AFCC0B4AD
A37D45129A5F665DC0516E875046D7A2E46445C76DFE13BA287373EDBB248E2B
E4B72843B9B33FCFED37DA3CD95CD2497612D381CC02E8E3AAD1DD61DADD7A1F
D82F0C2E744CC3B65B55984E69BF65497EDD146516938637D1DDF0F7255E168B
24AC8D5E909A21D52234D69B17A2799EF97B8F9F69C9CC6AA7EE629D85ABD5B7
B3158D44150D2495AFF19C47EF4B9D3D2344662A65BA823265CB4533223E0054
B7EC46C10CC7F79152DED9570B7F3A7079814D110C3BD4F48D0BBFCF33E5B44F
23F5D501BDF6ECF817C6082E64636F77F4A0CE8C53B07958FEF8B8695442CD0D
74E098C4B57FFDB281B9D589F0C2BE73ABFD458A8059E7EA7617C555E83C466B
698F5C9AFD0DAA5FA394260A3496C4C35E5FAEEDE6A3DF250B0D25C567A69429
EA3D1E7FCCF0E3330146F527C098B10D9F47DB9287A12F77AE150E4FDDAE8346
CD6CC05F0A717A6719ACE7D439CC922AF71B40F46282B49B9217856AB66ED7F3
AF8265E3A7CF49ED8A6EAA06B07CDE35D8FE75371240A07B40085691FFA140FC
C6C598BCACF8A9710281986542E6491779055E2894626E6C1FE4DF68E66F83EA
256C40A459715A1599CD916AE45DDBF0D9DF4C568BE602318C8002CC34A3C848
2F769CE57BC350D6624C50A0321256A8E4CA391C6460939C130D20CBAD9EA901
794AB36126A199A07C9517E83B411064A150661B07ED13B44301FB4F90C41A2D
45B2C2005DDD22E105A1F4AE4D2529C9B9A1CEFD8C8D76A53677E7150CB9A33D
3DFF3946558639A3B375F892F868823CC55D4859C09148529FBA57A397133C70
CC0055BA8777786C48E71D0A4EC6220EE0DCD902B1AB6DA75C521567F3CE48E7
402A5979B7321DF433A69E4D26EC72F19AFC769272387869490FF59B26B0A2C1
1C80CF098B6FF0BDF6453D33995F4E54BE04C72E40164319055DF4B812376692
79701C412014900AB2C92556C3DAB7A37106D82ACF5DD9316A8E0CE4F32521B6
5F83F15287234F09C3FBD9CE265B6A223D0ED3DA70C143CA4F4B21EBDB9E1DCA
CC031B2CAF4126501FB9071E10C2DA4065A3082F0725C2E0322AD914573DD125
40F02C2D847365CB105542F9B02CEB5178A3F3C2F9D266CD2DF15E9CC37C6431
0B4681C58D18345EE64DC11A1319A075FF8711FFFC1662493942C21F78C831AD
AF4E40611505FAEE80170CEA28F54B643A9BBE064D3B9237193F2BA024F5AB99
E8207FFDABC084BCDFC2A202F15B5E590EE4CE5A20EF5352981FD5D4C9A1B167
98D66F1C16257FF01BA143B4232B706BD45733A233D91D90392865E6A166AB3C
26FB93A62D5DFE20C1D352FFCF12CB35439C232CBB0D7F3EC78BA7E05D7D1C44
C06BCC58D737F75875B91F1F1E65FAEE958923BA210B1AF2823E0EC00C079D7F
F5928CF436D82BAFEBEB622B2E1CA5CFE61E08FDACDBF21F2AA451DF352EAA05
F4295A1DBBDE90381B93ED2B518C916C847370B00DB29DA799B15C1A1E673ADC
A26859D2834068A1A7E7DE400B3FC4E4FB938DA2598C9422463D8B9D569682C1
613A01EA657CA37712B9A00219CBD1BA0B0C2EF186E6DFCE99D00AB888846C74
7B6E66FAA499E6D4BFD8DE74D23055873A596C5689B7E6214C383C2CC8E89323
56AE581C86AB43F086F1ADBCD07713C7408C793B092915EDB7D832808232CA98
48CA26C3CD8112A5DBBA9C4EF89286A6A150FC71077ECD6D1576A4D28B6906E4
8C434508F8362A8B3996285BAE3E32F9DC621D2D46C80867F756A1B8EB9B1813
ECC77502ED0584EFD594A3026C13166DEC3C8F9AEB9E7BDA1DA653D7937EC068
16981BC00FD8509654DFD6B6A7D17D0B4115C0368DB73BDB58A31FD87429ADED
F3487E0257E9CC4D0CA96ED004A1A2A80CFE254503DCF561DE2C7DA69644DB19
5034A14DFE0F95A233AF0A1DA05DF6A04E4A257B8356FFB39D1DDE07A3B0433B
691AB9CFB57FF2E558DF4C6A406C0697219E53B1A52FCCC53744DE6DE65DA1F5
6000612DD2CEEEE01E949DA75A4CBB5CE3C9D0A7C62D6C1EFFF812AEFD1B4FA2
8A6D22B5D47C898813E31F81DFE6E351F16E63C11A61DA64C9B33B4798EAE6D8
17DB83A3EAA7899DA4440A81A759BD3E5FDDB47F0FA6AE05929B7D4E184700FC
DCBBC6A15E9E5DBE8300564D62107F53C870B069E942E6042F129D71E5DAF97B
36507905A6D504FAE92CB7FD00937C17C4971CA4E68951B4A2728E275A088228
680D3AAEF8ABFC2571EEC504942AE7A8AE04361BBA8198D97FF948A159CAA919
6C4C967FBCD741E59034A1F6AC48EDE87AC2E0AEBDD4EDA542D1039E23F9A985
A112730CF327801B4F099C16F93873912DF66BFC081B6CC81CD398A43D47BC25
601622EED242F7A435010E926732DE01D4F70FEAADA28F25C8B9753FA00C9D69
6C0B3408B0E9780D9FA02AC7D3EA91D19CF752CF7066413058F5A5B2990F34B0
58F08F66F92DD670EDA41275D2739402B475EAA1B6F97CCF3ECF133CA6AD3265
13B6DF75CEEF6D08CA3E4C432DB2613B22E437598B5864C63134DE5EAE68F0C8
28423CD9013A933428F7D459090AD484DF42A83BA3ABC7ABD74321B5CFB2B439
01B80AC320A6AA03974EEC60C2517B2CEF7AAE0DE070C58887469672C405F821
2B3CBAFF066BB239B0A9E02E6F6B65E745526B0517A82F64A29C7CE76B5539D7
E606B7C2B8A468BC5EA4A25476055B7F4A19FA302DE32F514F27DC9C5C273DFE
0A003CEE4C055394B77C59DD5472A311992C70F9E68C7E0AF9E88E8C3DA6B20E
EE630D235F724E7F8D5DF3CF417DC4C65C082E77472E9EAED8EFBC4AA0ECC600
3173B777C43D61F6838C8BE76A3BE36C1EF8F0C025B04F3B61F2A9ED760AE4D6
ED98B58FFA2E856A82C65A34D0BE84A0DD905620A11EC30336991BFEE0EBB096
4DA9DB16BC25529B6C0F8AD50518D9DD4B181454004F18A34854E0D6D321E33D
3A1CB8A6A6FB71A1032A3CF77ADFBC430C8978028E1163A764849FD70F26B820
6AA8BEBD0A067AF4405DC9D7F26374300CDBA771562639F7C9A50A1854152FD4
40E7EB1E0ED323B7E288FE450858CB454ED76BAD6940D3F176228D56B6447D5A
7BFB5D364D49A5C10D109C1BFBE6BCEC1BB705EC46A083983935573B73F8AEBB
1086C0BE8D0254A43E8B6DB3FE19044B704E413E7DAEE2AF316282188CE78D9F
E494C75B7543530930FBEA235A725A26B7D6DB328010F56A484988ED2E98D54A
92AC817E28200223F0E7F054FBF8160AA07EE3775A95A761AD8D26
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F6265D695324F79
1BD844FCD673511EF353CB0B4E8D09C7061B70DA800342C5F04772E859AF9F16
873B5839C38230F1F3BEB84FF65D8ADDDC895066DCA909781F4BC06848F7FBE0
C6C268C6BB20D3A28860B537B954DF7DEF9096D27D3D6FAFA20FE86DF13E7C83
431A4CEE4425C40ED537AC41457847C5EC09C01622C089AB3CB216A5C27D6291
2171C1B58B5FE8506C4330DA185CE61BE5B932D6A16B7EABC23C5943095BF1E8
2A90ED92588858E5567ABD3D9951F55183CA0B9098477F133CEE7A913FB67F66
1E0251CD156190FC3B3561C0C632F7330AC3426AD987867C257217C859D48C16
03730AFD208403DC91461325F612CF1421F3099CCD799C2484DC344A2D22182D
25E20A544567954F49566EDF37EE3889D9DCF5A419F65532D5DA715E9749A991
55DC4E3E2050CF50990C44A96214F93C68C7B70266EDA218C6D2606A4B755B30
1AE48959C0ABC289CDE655EC5D586D483DA699A34B584EF886716F299981EC9B
EA227BEE986A9A085E392102C671FE3892C7AFAA4221539F3C13CB0187243FBA
27CD4F9D6D60195EAC4220B7FDF85DE8F0EFD766202167DF4DB18E58917EC684
2451E3F7441B4E9ABAFFABFA38EAF53F517136457774C464F3D84206094178A0
3A3D1129C1204E95D0F19C0E9A42DF896D9AC7ACBCF38CC4A173A9AD53A10D1F
E691EEBC3E6B2D5597A2E3D1C3964D8E87EB47950899C82E7D266DE3840C2929
37475078B1996A96BF9D339BBC67BE406EC69E712FF95DD37919859204644A8C
2994D098157A02F58C6E67AC3D0F395E7044ACC7AB23FC673FDBC6EB75F8755F
FA662C60768E595EBB73D776F634B9DDC912B7D697FA38F679658C34F0315FDA
FE5F7B9340B90EDAB1CD83D9DC1A32DA0DBC807396FEA5F7B88E15ADC5910351
62E6B803E47EFC7B66A0821DA9E961F7B8455BEC41C0B3264FD99ECBA46BADE3
463D8F875DBF286C535339CC48EACEC95AA390EB357A9F66BD946E239F047D50
92200CD53261D2E409105F905521357F5F2BD03B648BD2C01E6A34B9F2632CE8
CE8F119464C9D747709E08E283462DDB1C8E12F52CD52BE66F7C48F312E43FBF
677426C6D0EAB6D713E5184646740BD790BF10405E80AF3C1B82D501CE431EDD
F1AC53BB638F5133ECFE0FEE50CCBA18158CCB574118D6A9D779F7127F9978E4
92B3DD8DCAAC59064C14A4F2059DE6B9D6F54256172458FF77A3877147F1EA2D
B637CD891D18B15D16F383DE581D2F638414A08BF34013A0E850CFFF583C5CEB
ACDEA52769871787CD9642D63AE725242BECD5082219004E8DA71604E693340D
983CAC63F64DBB5F3770C602E6DDD5BEE6EA025A121F1B77DCD2B7DC83E662C1
9DDE6A5207ACEA1E0D27664E49271794C994A3F9826E94A86CEC62124ED5FDCC
2967BB7D6591AA54847F9F4095B526D9FFF29D5966AC5B59DC0105607CE8E6FF
7209D6A4F4EE88E661D0B7D13C8F1577E599E5C7CBD0FA7384BB45DC7B170B76
E433A346845E31374AFC94A06D60290CD89960312C9156B30A6056497FD3351D
7C0F6F281460A76687804871314D5D009BEC8C5951422C3492BE918867AA950C
D2B5757B57A7F549876CC5274A88B8368CD1ED0A3533028129F4A085AD9DD05C
3A4D0001737F90EB4991C8545446D1AB97E5A1AA8DDDEC792C2392B3E3D88356
BC205F18C6088CEDBBFE45ACE727C3BED4312D250FB7ABE7D0D8CE90B7E1BF4C
2BD3DC8A8774EA5DCE318DB34A28F256E4B8A9EFD317EDA31D0CD66ABBA07583
495F7F6E7D53E9AEEB514169349F5BC1821215A28E5661626C1E182D115BB3AD
C01428F7B739297CC4B6A3074388E27861E466EF78AB158F3D371257512495CD
7EC790EDA0BFA5111A578AFF7355F0D7FF1F6BFE6331CB992295363B9409C8A7
916330905E72BBAC052520CDEA3E5E80315BCBC1B4C073E9178CB8699371B9D3
61BEE4808F0C4980BF680157993BF9D3E0878EAA276C8B9338C33095551EE832
F9CE01C9196A7B32A7B5B351AF17E0C816AEA2F5D3BC9B70FBC55DE4418B6171
854B27E61664C83BEEA0958198AE0AE0E053DDD597E22194A490DCFBAF39159F
B3A63B24AA15B2D0DA0BF634E2E96A083378107344FDEC2A1324ED78128679AF
F246CB315EB1D5A0DFC029CAFE08AD0BD8A6856024EFA92D58BFDC557BFAAA74
9A15190A4A16167A30A97DAC94F6259F1D5545ED77AF0D6C18318591C7B55DBA
F6CB0CD6D034A76D325C8EDCBF79E9A8EECE0FA23952E1D28C9360747D7CA29B
F669B44C0046DA1153D21A5C6AF7938C40C48F985EC1325B394EC3691BD40DC9
460D14489F24BD551B8FA02E734151BB35ED6E7DB302E9AC30AE90D2AE24504F
2E921D2553A9285821F806E068BA068BBE958C834EAACA821ACDC2C518C7C1ED
728808427CE989311A4C609B935728B84548F5646797D801494D5F4D94DFCE0A
718100DBBFEB56F3B9C5A52B60A36EDE79BF9451CBB47F54D3CC7C8C48CDD889
C389D35E4D4BF0BCF9866C3D72CA6FE435A2B184752DACE1A3E8298420C5F300
F48599EF9F21125AB79005BF428B245443934A6F4221C39829DC8A2ABDFC584B
BBC8AB8932CBFDFB9FBBFE8DE172104A59134C57CD5CD0305BBF875D7087C629
3EE0559899DA5D51321A1A568BFF3D2DCA11FC3FEDAE25AE395AA385543073A6
940AECB01AD11A58D87B8FFA4821791D5EAB7F25592E2E45B8C1682C4A1D851E
A1EAF0F87013AFCC1D546D57918A68E16477B36412D5440BC68EE43F280DFE6C
D57238AC2D5EADE4A84FCD519A7715BEF9D6495186719185F9F0B10281C530F4
A61CB06C62C27885D03D1885D01F9FCD131A08B40A3AB641E7BE0B6582B203C5
5279B6778D5405D301B6453F400CFA58F9C71DCA9348746900FE665375E9C805
A494EAA007706B36EB97D9202C5763599B3C05E1464BA14089FE9B32720E93FE
E80FCA58A4A752A9B3B6C33B877DA1E11EA96209ECD0CEFE72D5006B5CB38C7A
634BCBB832FDABFC818580D0817FE37B1D01A11B703087ABD6F672B517A89E49
8488371938C573B40D709C8124502B204BC5F0BDD4CCB8B68252783552EED48D
1B9BE1B48619F12AA28631554F4EA2D4B57ED13A8A07C06F3A5AA580306DEED7
7F4D887AFA0963BA6A1CBB1FAB162679076CA8D5D5F7A76DA1ADF692B8DA6E68
C40FD16885A589FD49CBC3A71F2ABFF02BFD572B01F17BBBBA0E10BB43810F41
B05B63CE0F9832AE6CF22A86CAFB7DD0E3043BDE82D0858691207C805D468655
AD998EBABC0D7C6C8111EA22AA11A489B87A3C6A208E9CB0B30F7ACDFF91EBDE
F4CC7BAD936B66E0D6A2FBA893731B17E87F010CE0990F2A98633876C9EEC666
E45CED43099EA9E16965289FE28186AFEEC45CF8F5AB034EDF79D2DF337DCFA2
7576320CCD85B077DA331A705CE078F2C213DCD7A4A26181DFED9C34F6913CB6
4A132922821273174671E5CF76862F5AA75D70FB3FE4E719FAFA4F70F084A58D
044F85573F5C28FB47B779EF37B121122A48B7F9782FD2AA7E7DED10336E42D5
E08B4B226578458A512A3A2E850FE83828BB18AB3ED796B8189A3FF33927D82D
FC2D17BB6D0D29F7C5FC938AD038C91205A98E76F2C8F71F30C7A6345BCDDCB5
5275C76CF501A09089BEA6A744B5E98542D471E68EEE45C6DBF90FA216404338
4282FB32CA8F68B09B56853EDC4BBBF3702B70883755AF418BE504C55F7E1408
A4319C1F733530E21D3FDD374A103C76819B8D2B090E7DA63EA92B05E0D40503
5978CF27CCECF52E93C814AD83776D90EC16656622A8D567D37DBF9CE978F443
D2F179914AEFCABEC0C6FC10217DF438A9388D221D07274605D045777040C3F0
5A6E765AB9C7919F5C9A0E23613E6C408B4048223399AA5D0BA03C8BE54BFC27
018D21E48263B37786C8AFCC1C84152B43965712ED258D37C08E70214C948834
BE5A0BEE90E72BA40E88A73B8AAC6860F7565B29F582496EE7BA945C5E180287
B18B17551C57F60767A6F86800D97BB7F710B9663A27740D129459A51BA97E30
03EDB09F82D63D3DED2774FC50B755B1A7637225893D63F61B95DF3BA250C1A4
FA21B9DD8ED07D5C147B04DD583CBFE59DBEDFA898B9DA38C0877C411165C128
441756917B8485D108EF0273DC298C86599E09AD4C086D704F7617D7EDDB9F81
31651A58A242CD10719D1C9BDA4B85AE5BF14E312D6A36EB33A8CAC5197F02FB
03BB18E6256E1CFE472E5032C728EF91DE677C576A3300D94266C08790D4F8D3
DD18EB97ED48FBD824785B60DA13742CE3172BF660D1FFDB88234AA58E9CE8D8
D461A70456829EAFB1CDECCD5E4C8256AD487D792C710979FB6741FEB8BFD1E0
35222A24E21C8BEDFBC5F422AE2E1A4E71543E1C1EB1292F233609FC9068A0A0
C766F5A6883BE066203B8EE3B8C675104A3FF4B31BC57E8DFE3EEFA96E8A18C4
5CD82AB2A43C6BE313FF10390E13CE35775CA9CDF3C5D54ED23641852D1C1E42
5282850731231A70CCD01D267818045FFF27485F1BA29D89EF8635842AC47DF8
89FCC897AE0EC1EBAC6A0EC9D4155BF7B5DA0D98D5F9FDFDA3210D195FADF6DE
33560ABCB4678099F46B0B6B1F4E4424FB835C5CEF44CEC14B1A5312A264BC6D
028A381071D8ED57631ED2744586989744D410242F2B2D80C9FD12539B4E668D
342E8782F35CF5E37FECA16E4147CC9894852F9355A0F7C567CC72B84A34D381
EA0E857F66671DEEF9DE9D2C5815573164F1F5027FEC620EF01F1E0B8AE7E60D
D1543AB42CD30293848E42CADE4EBE09152D51D07CC800B210D6BB6AAA228B9C
47E3E78CB709932427E8E67561508896C44C96EFFCE41C7C24DAD8FE1164EE06
D91A0C62C223F6EC2328AF3923D63C0A1F574E07A2F35C723E2F3F91700ED0AA
F4654A906A7BFACDFE946547D7E7B6D9E693BE66AD4DC2BD58E6F08F50623D71
2A520E17BFFDA7CB6708545E0C551C30D2CAC717D80523B7F77369B785E5AF3E
207007F65315E1731E822FD48B048189385F2ECADE863C97532D5FA1BD0A40FF
55C66EA273EBA5BF4AEDCADB0465FD94914AA1FF6E35B6612403FA8FF9D34A41
EA24E71A1242B14D69CC3F17A47BA4325B13D9526D00D98FA3002814BBABA742
ECE89F2CE22D9F6D7DB16C05316C7FD355D4BEB09E0E5E20888FAEDFF635AC4F
18DEC83E51046C3B1CA9F136B0882088D1C993F662A5487974DAA699D5BF5CD9
83F02167499AC6899AE75F438F875841F9297265637D6D43AD85856AF558ED88
EAE8608354A2D3DE757F65DEFA81FC73FE41927261003BEE281CDC68DA9F54E7
4FA3F5DE0AFE14EFED455213CF1984851B1B7ACCC5C7ACC084E5FFF23BEFE96B
1952B4FAACF022525C65457EBFA1F68AED4067BB4EAD5922ADEC27FBDCC4EFDA
F706A1760EE1E19FCC80FE0D8B5C61ADAA20BADF25334AB03390A7C91AF12142
12953EDDCD7C21A215ED118BB8D5C92D409BDA00BCA599A6E6BA4C6FBEAFCEA1
5B4063829855E4064627B70B61C638958B849AC2B5AFFC256082B695E72DC8D0
BA980712C3A15BF98BCF6D11719EE842A1D7875447695E1F5F87EF6A13484D6E
E36B23850E0C57389A3BCD0C158269D6656D5E0D0EC4B5918C519D7B6DCA9E45
CAC664520B4439D5B65F125CC4349F7FA63685678DB99B655D19FB0EA3190921
920B5A5F4695BDF981180B924AAC5438AB5B7415CA0EF34E0D29E428AF157342
258124A2A0D50E5F93D0FF34D67D4E574CB1ADA20C6584883DAF25DF4191FD9D
B7B77A8EDA2AE591AC262CB566DE9C7C808F4F85BB4EFDB38B9668C41DFB8B6D
A74EE3B5F21F22A1F58BFD0630782C1E1AA566C0AE0CF386F3642E6E7A209CA9
AE4D503C739FD956F314146022FC39270F7A3F6DDC6372CF3C1FAED970E47463
278F59F7987A4152737D343DFCB6D8A8C0D878A3DE71288DB674D8181E9EC94B
54646F5E23366B3E97719EC2864B6E98F239ABF4DBCFB36DAD8BB2DFD8F797E7
1A0D6DFFB4AF25ABDA2EF746754B4CB699A3908988A96A7C98548A8EC0CC1428
5808C50E0F97EB42DB09BA364004DF70DF9E212E3C110E34BA499DC1D60DC3F2
79751724E80F83DF946D54661BBB04A7571E513C7008FCFC805D691C791A1310
58AA921D01FA90EE2802DF370E0B90A07FCDC5A73DFC3FC454E7161ED5B031C0
31C50208E005E214756200BA2AEA364CDC5E803695DFB0B98B867478D6147954
D8DBA575D8AD6ECB3C9061D0CF48CDBF02DD3759924D31F603922FC8E0B630D9
95FFB314E8752EBB3866D8C7405215F6ABC1141D27BD2C0757BDF88DB0A4F83E
A3919CDE8FD25A00DFC48871B829356FAEEE8BC89E31C52D5CE9A09128B21D4B
2E1E47C8C163FB0483AD043DDE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C68DAE93DEB86AB350C47262033C9FAAF70818A5D7F8B72134B62A
AAD92F23C66BD8C217B0CB4310039F0917DE40B5AB834A276E31B6EF8785AFFD
0AE83089985D38C578EFE0B2F85E94E9F28134691588EBD908411036E974E512
71CC0063DA24EED171179933973AE6D78E6DCD1BD872B08567D66421C3F8D00B
0082A9CC279C47C863FB0F906C8A37B82E3DE8401D69391E55590D512BCC84C6
59E06B2F8407B51B983FB76F571DC28E809F4BF0BDD676AD4FE71C0D49B5278E
1BE5859B9D7D602DBC212AF23A97E281E39E68B80534BF71185D838E564A9DA1
858C6D43BCA16F7DB74AF6D8B7583DA8B560CFEFFD5FE0A665E590FD8DB06C90
9001288FB61B61C6631B40A686A52C93BCF81D3522518E6F4D1336298BEB1309
D5313DDDAE77C7EDC2C01CC6D24E50F93B44605F41C9F92E6046241B48399D31
48AB83A323675CCF6E56386C460CBAC48646408B9D35CCB3ED7E2D4540031BB0
990F9918EDD4A9F45E13CAD5624115DD269CA344EADB4FF27C763A6E1A4628B2
C011EB11C8B451D87CB0F5BDAD1CB1F65A6B2EA9EC0111D574BA4192FAE078D5
DB276CEEA8E344D59FA04D1743B0445E2BF9764A594B1F458F9F148CE480314E
BE6ED76A3C8C41B013E56246C51B1558ACA5E0047A2EB6FED9A8F6AC625547B3
06482584CDE835E0E10462A1F245381836712F4114B87C19A431F3AC4F69A84E
19A0CD8F3AA627419FB1001B13E5263DA6B41BF42430C43E2ACD89BA1F5C253F
B87444F07DE38907B58D17A9BF7713E3898334BD99CFBE66C4FDBDD9B9180627
92773DCB2823847EA18AECF20E578428AF5EDDE767DFB9F2FB5A92DA2D93B044
17CC9240E9C69240725AD48AB67E603D910231250152026ACC581C6097D96890
E871AAEF1686958BF96782B62706AC98E317B1F7F2A9AE48FB775117DAB8D0A9
E3CAE4AD82BE10B4591D1645E1411EDF1557062D17AB36C1AB786013DA17E6DF
4D24EB01807D1617B9963517A6278E6ED9B7C0A0BB72D1F4D8D636EBAACBCFDA
AAE5494EA995902761F7557FEF701AA67B20A9B019C760B2BBAE623DF718FCF9
190B3B86C38960B5D418A3D4AE53CD46247DB315DBE2328B3A70167B928CD4B1
89F8BBECF47F0EA70928670437C40A4185B04539F7A02C7F32F18E780318EF96
95C8AF53FFA3D68133CF0DE6806FB520A3FC32690BEEB0189E8DE5B75A41F603
54B4AB074668B4021F428F35C22E134300EBD148F0A0C1D08C83D57E4A8D9928
7EBE0D2FBCD619535DD66AD12BE81304B8915CB480BDD130B7C321605C83C396
22D68EDF15C1287D561F7136A4F6F1AECA8E5228119439D7E02BC6BF628E28A0
B106C2CEF28E2CB87D1530FBDA193A4F0C4B13FB3012EC9B9EA8520070FF1C17
DA3D4B6BCA8A600288F339D4F536CABFA083371A6BC662D58213941451A5B1A8
BFD2996A8F99AF311BEC0CDC89CEDB2A9E1EC23462FB3DC7E664B455199EBD32
E6700BF66759BE557931A96607E7FBB915308DB71C8166687D114B3FD528ACB4
B7E35103C9C6A0CE07D2FB56BF61F8D8ECCBD1FA9E023AF7227342283FB0D175
8888B7FDE2D56D47A0EC71D4169ECCA98D1391A9A5BB476FDBEB09AAF2DB4360
FBF4817DD9047E49845069E34BD32E2B668B25EC624F385CF66AB9096203D5F5
47E492559C8D7E6916538B1F708618C7A537E4765DA8D6B5AE71F69EE3A7DC21
00ED97A4713F369B6D55AF942CC184F103B001D5F9DA84FA530AD89935FDCE0E
01F764EC4EDB0DD0CDFD48D56B839D7BC648C735A2FA2EB38ED1B99FBBD658E8
DCDDB2A93381253A74B70509190B56851660574D40DFB91108AE96078603856E
D7FB126AE5DCD0C21F5AD4A05A5429B2D400EADC2B1F7AE2BFCFC67AC64B7507
89E408523360ED841CCC7D1D0E4A13B262BEA658AA67B8FC1B1350787E9D7E25
1E0D3AF01E55645C5643B5B58936C035D4A4C391ABCE4063B023520624082F56
E10157FF1056D60E4A54FDC478315529ACEFF449F87F430C0FF1E90EBCF6F32E
8CEF952040E692FA21705A2CC29F543AFA146C978D942161A04F6888891E4400
4325B77BE1EF8D1DDCD3E7E46F6D6F05B803BA4F68B6A052D87821F8E1268D64
253466DCD99035D46ECAD9B3058B14FFE2B13A67B51AE8B12E5BFEFDE5D92BE7
BC5EC386BE288AFB3D1247F6B05A5E7ABB7F9AA34DB08E3ACB7ECF0BC745865C
14E9428469B5C0F57D7BE3B0C0DC04570A6CD553777686D18FAEE60C4FAFE2FA
349C3BDA77BBA38E5742A9936EE53613FAA8BA742F319759492901734EB14453
D45A77265A29F5363A245260FE9238D44E90A83DFF0390A1881B451A715FB36D
17CBD129E83419FAA7F12EDE7F7A1E159985DB55AC43BC6ACE913609DC6BC7FE
4E33A34E64423B9D418C4402F07664A2B8410228067D8E5DFEBAE3F022EAAB02
B36D2EAA003F1762AFC73420ECC82C8DC779EC0D706C489046C1157957F1C0B0
04BC286147BE8DD65A1ACCED0AF681CA9F1460984A3B78A28BC434AF4C9636E3
6ECC6B1A9EB6DD1A51C46DA2F509E027F29477B981384CA1199CEFC8EDA32D42
5FF07B0F1F8C056F1EB897DAA36A11568296557AE46607602E2D278B500F4C75
DFC9FAFFEFB06393C4F789008648C1EB25570B3E420320B4EE22E31180FF52C4
7CD076250C6B41BD37C8A710264B7C8C751D0B61A78FD0AA9593B717EB53DF14
155487DC65936F5770DF6D30A53051EBFAC48E4813474063B157450F11A92BD0
23248E3749772DBB059F7D033BD7CED36CC468A8BDEF981AECE8D13DC6532CF5
0EADDE4198076222F33194258F460B294D72C16B3F601996BE87BC4382283B38
BCA04DFA247D1453A04C701A1D4AACFBA6226DE28C14629A4FF3EBFE0443719D
46A99A3ADB89ECF504E354D50387BA2285BA4578057DE176B95A86A0C5488483
90819BAA40552762E5CF763A495D475907F1D274F89C2635D595FD98491E34E5
096AE4D664B57F8BA938A19734389E8677FAAD90566F76305CD31DDAB1E54FFF
4D1777ABF5636C6CFC9480B1108DFC32842C772E890697847D6A8B592EB9DF61
19F210A833470B39CCA2211EDB84952A603A3092BF10E4EFC417FDB1182190B9
18F3ECA9ABB8AE7CAD0E7D4F2681134FDF077B1E40987A445AD31BD84B91179C
CBD40DD4CAE2EEBEF70DA4C8FF82B7CE2B2A34A04CBC6CBEC2EFCE67879B9252
AE93FE3494C6D919776E039E073F472A7B9FC0C095DC06BC0ACBF3400DB19DE7
9D90011D2C349814B43FFD78021731320733C3F69F9582AC04CB1B88EE736C1D
E0B08E3CD1735BAD70526CF070783BC4AB150DD6BA5247D7A2550DDCA5FE6205
E89A7B698F020768D70AD664899E0BA8EED8652919B6B00E1DAB78923A165E71
FF0337A907C0843B26BC248EFA281DEB6EAD9EF3542E06709563C206E7044D53
45877A82449559F4602627CA0932C2B938A071A719E094A65F4C43BE485CE287
70009824439E72D3BBC82D68B5FD68463409419395407973F2129160D60EE140
C2E2CA5DD42B6376B48FDE7770F5D6DE5B3203C9BCCA8EAAD9B6DCAD1D994E59
812F6CD9F83F21CFE1217CF272748BB9CD72EC45A70CA8817294EFF9C89A14BC
FE81314674158449DAF1F22593B2A6932C6A9B756C135C1123CB216D707BDC0F
C294DD353E88B786F9C15D9AB39E0F0F7C0DDAE4C7E39987D264590DFA1D51DE
2B2F9F054D68CB91DE618C0DA8F8EE3A06766DB1C75828168390485A2B93942C
6F0E24835213D51740E6217E0852031A7D7F34DE25BFE5A9828BFF34CE9E8D06
D568CCD80D8E408D559479F950D00E22369573FD7C398105DFBFA22BBD1985F3
9DC5E1DF623E1CD9615B919E76CEFFEF39857DA663C93697943A6459E0751018
C4C456132619B7C96A8A022ACF111E1D1826E4ADE6D0F02B4934A768F892178F
838E650EC4F0E3C1C46D4EA3FA0E0E8F40DD9E0403B17E895A9862CA1C8B8BC3
04CF6CE436CB8730DD1DD3A41986367A5DF8373354C450E4D0DE00C5BEDC25F5
94EBAEFA30F70E7EDD4E43DD1C0FB911F7C941789142040E889BBCE899347659
CDD152A758D6237E52C3FAD28868AF6B9D3EA5F9A36513B2CECFF5D6B8B1B9E6
3420453AB78C52E6F33A1A3205D54409B0F8568FAB51CCDD7D298FBBB3EA0878
BECA4DDAE71507DBA69D83CCBCDC6ED5F36B594969B8F26EE28509DC0326246C
EF4CF5245911C2DC02A05A12865BBD9A16C264BBCEBDBC0C99138A50E5C0F579
77D929DC9CC7770FC60882E920EB1C184DA0C0396BB3AE8446D1F99EA701C4D2
AD083467DFCEBE67E8A558650D61D9E8CE1D7082661851B3D94D71719C73B320
DC91F4F64FD249810FDB2BA4B97A09D1EE6B2C84036E1CFD3D613E5EEAE7AA3C
B16E7F9EB00B96C85568E76D34AD5D4D314FCC538984EDC70AAD0F8D0E550C06
4FEA8E67ADFA6C1FE3316D2B9D7220CA8F6908BFBCD4CB3919066DCED0266395
74689238D5F9BB57A128D43EC71195D5AC87E74F7E42248F17AAFF6F1927389F
1E876DEAB9255D8B3C2A3E8826B5A2A7C92E321C3EC8FC373AEE9F10C05B2585
A53C7CB0D3F3817076794C620B2330FD5B4833CA49E4851DF4832BB432DFB548
189D085A7DE89F74252D8157822D42F334B88946C1CB3813751D50E6FD3D0590
A90F1C4EC2CD63D72411B3C6F6AE2F5DB222F3DDD19B98E7CB91F056BB1875E5
9CD940B463F48173CC07360D944875E8BCDCBF9D1C4FBE5784B5120447696236
67C89B0B5C3A4D00711ACD7355594B80C1ABAE0B4C31F48230AA7AF64D2AE78B
868B19724B3189103E35B63BFA95636839E00C8688618087862664F32A7B4B09
46AED4E6D20D87BCC164C4BF5B295A99A72019D29CB8EFE626C50ADE1B0C79B3
39AA8C8754BF0595453871F094E7952F6B3B55B80404FACE6AF693F5C4EC72AF
7DFAA1FDDEEB26990AF6598A7EEEE1BA191A29EF074DC545941685F38F25231C
7AEB10C38C8C46EA13240121E68E36FDE2E6445965852044797DF580DA0E0A4F
BE1B5C7D490FA677207BBCD7094801A60FF2149854F7D061A6CE67488D2F9DF4
0E7EEDC9A81937C582BE41D280C20ADA02319614300358917352A2434782D3FB
AB637ABEE95377E3BE1EFAE8ED0AC9F2C3BA6E6CD5AA138BF32D88838DD85FD4
75527F18FDA4F7F38258A785C45F6746C4B06CE18364F5B6D49C402FAB09882D
E451F8FC8BA579D6EC9916E293C14D14828873588B82675035BF32DECF338730
FD62E0B23E30F9D591BE255830130C7FFC8D16F61AF40E3D778BC5990CAFC710
A27F3D79B18C5B564A076F7DB32AB6A71DB8C55B27849E47EB1707C89BE13A2E
E6035CDEFF594C78E21BFBC653FDCC3A8FE8E1B0DD9FFF20C46CBD94A190A709
05FE3280194D133E026ED8F4142C4DBCFC0BF100434DC63576D99276A959DBF9
7768E2CB655F2988037E76582AD2F04A1B3E61B53A9D1039BA781BA390771DFE
D6A01DBA80A0BCE1BB1FA2C5C1842EB8D048180FAB0DEDAAB40061A6764E5596
CD5FAB49E83A230316B5C7A234371F4098F91CE49E3C36476EA9012D4363DB85
C43967C5D7E071F7A6A91D7B67E41C976263B5611CE6B08EA90B62817108B55D
86D9DC10200BE4C27F2A46BC5BBFF716070EDBDE344AFEA599021269F715A374
FA5F99C6A05AEE001AE241BB32404E8870791B2482074119DCF1646A9BA2DB76
94A64A9593E0717466EEEF2AFAB3823FA6ABB6DB63BEB1E0D4322C10FA433AE6
BF80FB8B680A242BE6AE3FE0AA48C54F5F2487E3CDDB7F063903CBED807628BE
FA06CC338EC60616023A789386751D7B0C038C8EE11ADEC081314EC85BAC1E13
EA3A7182DB209D5E93C22497B5B460FE00C426C2F8B60879A7C92BDE3580ED6C
A64EBA7AC5DA3801C616CB903ED1DAFAF7B601661B2E2B2B205357FD3BA90561
44AB5C866ED4A869AC8D505F72EBED8B5D62D4BB40CA16F78162A28F77C7077B
F57ED0F705B27907EFB49E5231E1B9C23FF962BD330443075ED94BB3F2A97D25
30003A40D368EE630D3D8EAA3F884241F926F88FD03246D48C6E1B40992A72A9
69D507AF860FD0E8E55DEEEB52212A2D3C4BF7ADF14B124EA955503FE8B7224C
86746B9DB9D217061AEAF90E518BB54272F4B3203DFD65D580C88F7FCAE4697B
6894E90F8C182AAFFEA2C691C35D6BEA1D751C869C257C7D61C615251309976A
E75A4402DB9EC80D4DC3337B5F451BD9921B988F212E669ACA3746550F0787A2
A1B9765DA0F268156ECA9B733C10BFD22A98F69F21553088C29CE561373FFA66
85093B79CC0B49AD7B704BD9AB77A5825724C71B38C8BA1BAEB148118E1B3AEC
9EE2CFAD5144DF0D9C54D34F6699266382060DF5DD56C5A8E0F412A024C81FD3
5A3B80518E7AF9D8060566689CF1525D35EDF21AD315568E16BF0E59CE1DC8AF
BBAB6030D729C4DCF2E94460C986C1FD29F1A35E7FFD52DE58232109D4EF5A18
E4A3954BB47C337D406607F79043E9FB535A1368D8D98F7FF46ECA7DDFEAF9C9
182EF7524CFC6FC5ACE44F149D42BFCBF136FF7A4B0F912B9C3EB5D25B1289AC
3F53AA3D8D1993158CBF74A46B509CC47B5C300DD49B4F45C552628A19B88D1A
D166373C8D088C10554F8B1A531718FDAADCE219D41E2FAFEBD53E27E549D59D
20862426012E6E9EBCDC713406C9879BADC9058938F65F22193C1A297FAF6E30
2B2186B6DEF041422AAD21676550D3B45755EECDEA1BB1AA2C235B8F760A6EF8
5982FF2B9728A99B3F7D455B5A4F52DF923318BEAC3DAEF5989AC49210038B42
D21E9333DDC7F9A925E134E8E4D76E810E5EE06A44020716B3759AB52515499B
C7DAAB3DE6A2432DA3C36E3271565A599C8FE382E0D4AF3A27D59D74CBFFF56D
D5F05EFF8E2C6067CF5298BA3114417D0B94B32D8583F53755F91F76E25A1A3A
3BEA5975EDC8317B8DE70B525F32B34452E126E357FE0CDA7CB40F5A7725392C
AC23BD9001BA52F32548B85404E5366F675032138266D67527F41452F2BE5E40
5B607CBE7D1FCF49B2CBC82E4F0185B1A825C101B06CD9D404831D268447DBF4
6D106A9E702BCA54CD0A498233C742F728DA5609588036F85ED8E020631A8F49
5965946792E4625AD94CFAE1D9818E259F1F1306F5F59F05D3AC235C25510AE9
ACD9FD103987B9A23E93BA3E292445873B541B482F90B03B327139D5A1BCF7CA
A1AD7734553C6E48292AAE14ACD06E4CC4E21546612E95277C700A865FB55201
02807DF2C55C6F5B67D820E540EC0639BEB7F11FB863778DC7570BF83DE4696B
DF0721F8EEFF6CFF2D7E9C73504834491155B0E22CD779E25DEEE70D2250B422
AA7F44BF98360CCD99F0157235FFC40C059CD309D2D01C71F08F2D36A33774E8
470E971C7AD702581F828B2B38D2373F7E7B4B351FA3F8EC6CEE9BBDF3187F1C
2ADDFAE72307FD174592E0C4A7C48E5BD80213CADB436A72EB39521D20CDF6F6
BB2C96DF49CA95049AC377C5F803055636B96CBAD78F3117DFCBAA2BE1792811
BAEF137208E3B37B9CE3F118598F392DC3E8BD109A819225E8AA0F3868B486DF
5631F03EE6D28B4D356A128988CB09CD040B3CE7526705B167E91A4429E63C4A
4E2C9D924B2096FB8571DBF4F9770A8E3C4D90BA55D76200FB04619D7E7A3B7F
59A7AA19B9974E4F994EBE254E8E9E420221DA84312756523E9DC08E80BEDA00
9EA2049DE89DEC1368B1FB2DA7372E894331DA2EF1EA9E38A81F122AD9025961
BE007DD1062DCBD4454D4D274AC949A8C9569C5F3D64EADBB0141C3A242EA4B8
119A31594C2E6635F97AD6971A3D00236E5D5CB88E5FF135F0468428190808F5
3941CBE2E009C019180AE6B343AC54083CD059AA03F169EA21C49D42165800EF
E170A1775A0B9394F9B4ADDA513885F8F3F383299CE88F79543C46947CDD944A
A49BC9B91E46471483749775EFFECECCABBA33A0081B7748F21B7197B6A74978
6D3DA0D04A300CEE74C0EF1B52EA92C471E4F04D2C6987E840B81FF5B36FD9D2
B913165B638BDFE06626BA15636F5B2F3F95343A3E75A988A32E348FF45D3108
13206DBBE2C6CF4E9CE6B33405F385AE08E368090C566A7F71785ECC28934556
03DCE08BDF4D4FD6746E8929359352888A2AA519A6A34588F2A128CEDB31ACA7
5606844F963CB7398CC4D4A61419109834E76F6EBB6CE64B86DBEA9046A79FBF
EBCC84BC0A66E29A62A45B6CA323CBC4F6A99426DC261DA0D8ABC5826E59CBF0
C75F7D6E39E7BE4445F6840C1921642D17A932FE804B7EF44F15FCAE953F57C4
94902532ABDD7AF9A66BB4C922A77B4EE5442C0A00DD9384763EA6064B797E24
568FC436B510086F18EA078B156304A967F97D5E458F42BEA660EF94E517BF79
C4868B3CBA1B3A256F0B9B5949A7AB5FA141162955A674C60D5774402084A642
388AEB692EC567FACBC7BCACF0C8169BC04A66BBF4A9CBC1D73C0477BC4CD3F3
952D8A1EBBB9FA8EA35EAF0FC6AF4B40C9CE5D0FC203BE9BBA9CDDF9466F3F78
43AC8ED3439AB87272BC4EAF46BC1BCC8A6E2D1B0AC6224CFC297AA5F680B885
9E5FBB859BBB643220E356E48E03CFAC4A5C8B612FABE5E892918E81DDC41DD0
9364AABD2072569B509E5A0B1CC51E34423C79DFF81AAF4079CE59EF2A4225EA
67B08F54CAC68FF80CD85BCE96E51CBD889C7A6FEA034B6024BAA3C424E68673
7E376B3A6C55F2DC82A6B942071B199E0CBD2B61FFE591EF2A69AE19195C789C
31C32167816D0491C035CDA2E3F168D31A54729D7F3B565597245BBB17CFB8C8
F1E5D1BED8A04A271F9DE1400D7FB8098932D8D1676FE7317C2880974D7DD0FC
E2E13D9CF36CF2917F66066EF85730EB1A8E6D7BD6FBCD570C7FA2D12A03FE89
F14D3FFB2A8566A94073B2367359C710C945411F607CCFDB4A5F39CB73062C29
36E4219836F882D33E5A43EF20BE79921451468E4F97BD5C9AD9AB64D45BF979
2E01D6D9C6B1D984B915833413C5086F390DEB450A25D5F4C2E72E0CEB3C4954
A135C92B6D866F844F9AC79D77ECE01FF9730CE615D2D405A7A5606EC5458D8B
EEEDD209890DED2510DBD880143B62A5FA2B00BE01F1A403832443345FF776ED
C01B9CAA86A5C36C017A8051C75C89C4C52507FEE4EE20E5CF00318A8A038443
9B38BEB4C546ADD346D0551A7AAF4E94242C8CB34BE941032529D6106DA1E387
A3D19D07C94255F8E33BE84D90331F8F649E1070B4BC8D81C4CB4E5858675017
1413532BFEEF8841686FA8CD96C5A29A45F4D70DE3E217E7817E767CD5298A5F
614475CBCFFFF0AECDFF0CD8786198AA49BB0EC90D2AF99A697595579F7B5323
7A6BF090CDB496F102917DD781B14BB8746CF2A0DDA821374F0CF8F446FC4109
1AC88903D7ED03878C68E6EDF7D117235385BDC9C4CE85BEFF8F81C376F5A9D1
DD6BEF940B6B1E2505E3EA1CCD5F728FE40ACD43C1C574757C30295F551EF9EB
33A472CD1C3F471497A7A9668EDA3AF739CE5A94B0CF6334CA6AC8228C8F9D1E
0F2139C3ACA6FC2C32A794D0CE8EF6B9A4D1E0E66AC801D8D6449C9A03820CD1
E3FACB6C0B50C8DA9C0FD2F1B263F9AE3D68F1E502778213D47B627CF1C749FE
8FBD84AA7F1E79B7C1358D42B377520173B39CDBCCFF7ADC4C24EB1B38D0003E
9BE42CEFA4F53DBE3356BE4329E6AFAFF62F4386329FDE34DF06CD85D1A8CE40
B539C96424CD087182054A9A0BD2A9725B047F8DECA95F0A3B345E650A704184
74281E86F31C399DD3020CB8715CCF0048F8F9723EE195FC5B5BA9440624238B
C0BC7A8EB249917075637DAE56D9760AB02CDFD2552F63BD7EFAA3C484ECAB37
3D8CBFE0FDA8D69F3BF4C70C1B9EF984B4E0B0B9BFB8145E8176E7FBE9C3546F
FA77AD67A3674CA7E2D3B1A275843EEC7B5DA65F69D407E4571B580136EF120C
998C39F18EFB50D94D9738F6DB469138CBF3A6635AAFDC330EA616D540D58A33
BF353A54027BAD875C653553FA3F1032FF74F502A7C3CBB6D1187F3117C44A61
F6D2D2C2488D3A9E43A39AC13E012161F1D512326B823A2BE1EC22D9C7E83B71
2DEA22E9540DFFA37B6CC0AD35FC5A19C77FF5CF5739A7E28F3910D981266F0F
7EE2BB343433282D6C60B38BF893BEF7C450E5E4D9771C3B3FC8676BADD71A73
50B283497484A1977F079BB2AFE5C557055F8327F1E3C4A45FEBB21FFBE24518
3F1DD07DB0CE9BB5C31AD5E1EDE48E745D754728B509E21CA5BF135AF52FF459
1E00A00B30D48910BC257A964CEED3620614750E72C6BC48F099E5F1E567F1ED
9DC06CC8F3C3863808EF2EE57CFCFFD64C9B74EEF6319C7E1441CD2D3B97C64F
17B1525A5F0CA37F7F1B83C6C9C843AEC9EFBF5211A3A1077076415538F50D32
42BFC7FE302E8B079EC7F94E4066C6BE96C95646D117E0E7BFFA5531F7BD47BE
940BB51C4F4F3FF57FC1D9658F4BC21945659ADDD64B3186D03DCB55AA789637
46A8E0FC747BD77CF46459B0F6B565FC0B2FB24945D974D5DD7D0AAAEC23D30B
96E61B7D9F5E39BD677B486FA3AD797626222C03DC770F8DAF78D48065E8C4D9
748E6CDA01621467E989D58E791B0BD8F85A159420689EB3C1EB0E37052D7E7F
A5057469928ED62DE27685D12656EE441A0CB60A75A709F2435A24247A709D79
5CBC590003F8A59515D75DA5C4DB59B77CB7A8592BEA53C87DC500AED499A350
A73EA6E702F9343BDF8048CC9C2347771F14BFFEDF4740E321AB8CAC5B844AE6
B20FD183241EA7B8742D48399D20DDB8906A57BDC120406B8288B4389D98BDC9
859378D15A88BCB5DF408D0B9FAEBEC1F029ABAA58F564E45048B6131F524F3B
3E3D8BEFF25E789270CAD1E9F4D09CFECE2BDA5B39B421F301ECAF0A0D63D686
4F1BEF886FF682695FA02C7349F6C6FB88510B614D9F21D177E9B6BF386835F0
24F5DF309FE11622C11D2DC10D1A72938E484A7492AA4CB572CB1CD8712860B3
4FF5C06A0C21DC9156CF89C96FE435A2B184752D394C6E32168BB492AE787776
683D3E574EB4F4F67CA4BE37F5A56513268FAF60BA53CEB3938301CC19C64887
D56F6770242A532C2712DD231483984DCD0AEC0B7386D9E16972EFA046DEA3C4
E67C55BB1E745CC8BBAE5289F8FAB63990BC869B8B313C879A4E46D106FE355D
75B71C5715B4B76C73EB0FE0F691DE668F4A06CBF38123FE8D0589C17B080060
8B20B1BEE965C1122043796F3CD541906943123B6AA6D539FABD78AE3990E93F
3BC40F977F6F41AAE5F22C5EAE00C1CA5EA68D350CCCC6057557FE6505AD6D1D
2A9A49B26D5ED6182F05E2C26AF7A9699C84B24E05340100143D72C13B747461
AD8E01E6C703CF1DE35F00B45AE0B57AC85C4AE9E2EECF97DB168246DD905E48
8F0469114F47FE66577C36A7F4A1FD9121C4FF02F7FF29DBD32CE87F8DEAC190
6EF448CB415C5189D1039C9ACA32B368A0596FFDD872F20F0D4852FB4557FE42
4B87986C3004ACDCB30DEF88428AE3C0754CB64B27A523612416E6BFDF8B2911
682B48B9974D67840EF983E7E3511A6AE98EF52DE1031321CDC8832AABB01C1C
16898952F1317E3BC85B8DF3F686A40CAC2F4CA68F425D5A9E43A9A49C5CDA57
F70639D5A89061843907AD48CB7110A307B19F294544ED1374684BD3101E2929
31FA872E2525D8CA3C8DE178FCAAF1A272507A1AADF1E88B53DD020DAE217DB3
3E9C4B645CFE66CC92C6CEB728BA1801D0E78EC979866EFCEE3DD8C7D6CD96DD
B4E820BB9FE90B106EEADEA2829B058B5A2BB8BA6494F36B77AEB94139C36F99
EB7B1AB36817CF0932B2BCC7249864903B1823FB78A8CB17391F7E4339B89759
3A8CF73ECD082E99B6D42272138A91B66EDE2A007057C950752FC40A76DA71B0
8EF4B978E76820270C679E49A4B95FCBEC35D86848662C77A7324B96611EF374
D0C8A99F6FF2858D7292FD79FD55B19D0F7B91B3F759FF0AB7229F32D00F99B5
047AF73D80B3B89C520793D32CD5B8D98C8916DC1AB480FD25325BB45470ADFB
DA496D233DA06C22D690BE7FCD8378A069E338ADA50A28342A2B70930F565DB7
549ADB2CA53D2FB140A5C9A45D02901436EA86B50C422C62DB07858458DF63F2
956BF35C77DDA785DDBF65759DC1F91EF913AAECD03474CB174C5E7802F2280F
1B50929B9645369E866AD70D3A0BBBF4312AB22A01B959872DD09DFB161E7DA9
2D7A52D1FE5D5C4A91CCC4E24C5034188135C66140B787FA7AA6773FBAB52E94
1AFF2118708C4DC755A934099790A6BE09DE3C05D3D1AD6EF63C8364CF40FB84
AF7844FE11C05273B9164B87B1E5004D7055DD155828BCECD796D6BA4AFFE274
04EC3DD739A695B8FD5C49194E7633410486830BA60FF9B456E01EBA100F2AA1
E1A4E8247139E25F7613
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD4030A2E0FDCCBD30949E58857ECD00A27739DD3991
F3B929FFCFE761DFBF4CC6E06F7F4EA2BA9C2AD6237E1396BC71BAE2404B0737
1FD2B9383AB4333598622058719CF3AB098AFB30AEDCFE4981FB49F42BE5D89A
4DC7B40E205941151073718B854A1AD40E46E70266A52594B9EC99A79ADCAA91
A185F605F69564AC61ADA8940DB8BDFC235A06DC5AB286968D25CB445DFE6FE9
8B6C06EAAA8699C5C08CBBD2F49235D3B569B9D184D379B8DCADBDD3AA864CA6
9C3419C4ABEBEFC92A6A7F9C90922BEE5C4554CE3F46845EC0701580586B4F7A
8548CB8A6E354298CDE742FA35CC15DAF53D7CE95B3416B7FC8D74A03CCDF062
A15EDA17E3554B1CF06506BD519B5CFD67F9E8DF3704911AF8CA33D33AD54486
E582D03A623F960D9C02B69C7DDFF32643A426FA4BD13C0DC26DBBCCD775300C
537E987C3B9970C3501958333399C486F0A502CF039B2E2C3B132F539FC789B1
A6222191018B1576F1EE05613B60ABFDA4A719D2F7631D1EDC0ABB0F717EE910
16A86640956A756DF27103358DE01240A7A90B0CEB4C3B413518A32DD464B1CD
13DCA3D3856CDBBECBAFD36746FB849EDF608FEB9DB06C0B3A7AD3ED8DB60FEE
053F28D9EC7018D01FC2588CE969BC26EC7472730BD28F69E4200C0A8280A846
BF4BD33B8AB62B04FD1642EBD4BF577523EED6BBC32C35BA48C117F1B375EDCA
2422CB5DA1604407037491CAAA05512A48B1F1107E7E89219FC5B0A2AFEE0F7A
321DEDF57EE52D47ED5639C50CE97679BB3B57754F4A7E6616201E67D4328839
6F95A8BDAFD293E393B6142EFB42720A6635FBFE14FA20A842097AC3DE3C295F
7D01C6C9117757D6706666B9DBE556633552ED68791EE46E9417A5AB168F04BA
5533169AC95CA775AC0AE711D7319956343A031A13964D440E8423E5DFCD5F0B
D169477D98C2DECED4B5651A5144EB031C6EF8E5AD4369F5C60ADA30A91B1F87
979B48780BB8A07EE040E7DC086341CCCCBCBB0A053AFB68E92BE8EF3250DE8F
719D0735BC5F7F69E4211C9B8FBAED2707A797C589CB11152FCA50149059E0CF
1E8AE4B6CBD19385EE3E1CA3083DD38FAC34AAF77801B18D546F867BD948E18B
F1F6E15EE51E428B4460C24206743FA6CCC6D04AFC690C96EC587CBDA7CBA463
41CFCAFD4953AA6E8B370A78DD622E2FE8F23814F0D46B07155C07FD16BDC585
3CDB9936FDEEAE41DD40CDE182849E37CA0058E6483474FDE2A54EF3542DE382
4E9591DD036477342B46AEC19F81FA4499BEE4AE3E75D183B9153FFFB7C2AB4F
D11709653A3DA4F92F6AA280F557CDD13DE74DE1292DC94A459EAF8471ACD490
068829844584D28C7085CAFD83D4F6F9DA46A0C1B111E6246D918D89267192BF
C0995A87EF3BE0ED96F0850B5919B0D1BE1ABCCB56254D6884BC7552ACDE1C4E
1B9AD03CA92DD469BD006E30DA1957A7E3D4BA4C92A2740BF92F0EA9BC7BF4E3
61DF5D22AD59C7BF8AB46BFBF684FEEBDC4FED5FB9B3A743DA1C74E03EEC2910
15AB0FACB2D06DB657D19059702E5008B9B74D28F6A6A0F18EA44D24CA784085
FCB297C5E6F7A3A1842DC86413DB55D952EBF670F350909E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC19A29
B0275AF422EB548505307B85E2D428B2793378041115891F0B6306B6FC72E4B1
EB87B2D527B774C765DCE58B7F76786DBCC6A57280753DCD85073376B5C15095
AD4E14D9CBAADF8EF93A933795C0CBFB7204DC62340EFD3F37C26AC08DA98886
99C2DA581BF499925C57FDA26C1736487F2BDD3FF833163611BB26DA01367B61
774D9D6D569355D10330C9E14A5C5F7BC9AEAE35088FAC2E174B35591D972DE0
DAC5D8E984E967A0E8A93E8741F4A8FA89EEEC2556CD0D4D1C30F4D0302CFDED
66881FB58481B2A5CA3BE03F9A9EBD52235D56ABAA85003742F8271D715965E8
9DD9743B1DD19C90C9AFAE343A5877AB7D005FB3A78552A4826AFD5BCB86C0C2
26DD9642C96F6D3C578E819AD7EF3EE7745D6460F94622AC516E9D777D6C653F
CD96F07CC74AD17A93D3206EF4D481A294B8874E021962213E923ACE057116BF
383D507CED4E5A83378955473442B6A85A7C69A016069015EAFA706682E48B28
E8C9CE4AF423D49CA0DF1B37BCD6C2CCCE1B40173A0E450B1E1CC5188FE9A784
849524F95B87597782D7CCE2196BACDECE8E2451C2BAC4FC371564757725845D
B7240F7804FB3371973117CAB537A70F9439B5E8BAF9E2EB03F07F09F17189C7
C0F139E2F261BB8CBCD84D39EF0F0BA674CBF899EFF8FC80D699581ABA7D9D6F
98BBDA827BF8D401514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED289B59E
0F97561179C2C0F08E832E2DDBE7C66ADCED36369AF8B34D445FF8B74EE2FF24
AACF3D958348A87DA63DE672CE8C10DC9103EC4853C910DC7205541B16C0E6BD
1F1077D518373F33FD234772443524FA8A11A02AE0B8ED0B834A3E3051EF1D81
7F5405D87BD0B47C50A30133F267F34B10F3F3362BD2CB26778A212CC7282D58
A4486B7166B269B174B9FE9BB5FE94379B638B85AFE160FC1687A50867043566
1C462AFAF04AD44B11721927EEE7C26AC6210E8D4EBBBEFDA9D435869399D92B
E364E9390003F437D9A3A0A4E96E82C73EFE4C84FE034CBE8554026B75A3A2A1
4D27E98234B588434F88042B2956DCC18AE1C1E30A0E78EF0470B3200E566399
5C3BAC056B0B53358140F209905103D3B7C48B8EFBF4006DA984D240911DF09A
7B36D1EB2D9E4311A671CF7A660039A2F36055BAAC24E2EB1C58B902BF073C33
04E4C8EEB16D7EC879F6E9B1C1E8C9AA035ACA1C42A169FFAFEF7C4751BDF434
95DCF8C4F6274740CE31EEBC6E363CF7A318738C841A95FCD30CFD43A02700DC
099F78035093EA6D9CEE7427D41340F9D2987C051EC94178D91F36440E2D23C6
CD2DF4A349A2DFC2A1D978596F39D199116D95612BB8B52086679E50C5E68B67
8F373FA078FC7272AFC26FC32B777EFC3D1F73A61D397621181543EC7117EABE
A6A31BBF76B717A8CC0B23757E96D1E404B1BBDC42459521D54144EE5699461F
6D258CE9B3BBA9321EF1F3DF8819FE785491E998A77BEB9BE59525506F9C0ECA
4A52C1C4AB4EA9235E94E505E3605EBEFD5FA1AB4D32269620778BA0C6E0A565
27E73BE19DD38D43E700961DD0EDCEE6CE7F6AD035A435017F8EDC6CAD38ED8C
AA60D19C8AA1FEC0DC50899D11BE76EC06E5A9D3143473218B6E51F82EBEF76B
E7CC8B80947EB0E96F34CFFAE2AB99ABA68FAD15D42971DAB17CB1C3B9FFE07F
C35008BB8A6F905FE0FEC299B12C9D2C71B6A7454237B652CAFC7937D1F49007
A524E4F3BEB894755D4F2D6944A68175A656514425E96DD970D81D4C3DED38A6
553ECD27B328EA84D69069A786B4CB7F76E44064045778D4D8ABB56D7673C5E1
C6AE35EA0AA27644AEB03C8FAE9BFFFC4147A4AF8F821BFBA1A0F86FAB8F94EB
D6B5258FB7581BC0E605A1D0942F3322C2305190E68E3A3DF08794284CE3F6FA
6E71C671504B7535A3444D643B1ACD9172F151F97F266C7E280E64EA16DEC2C0
50C6F7FDB78D9371CEBBF656CC3101D6E9B3D852CF1E3480229AE081FE8BA97C
63E4670B912619A20C13063E6730387C584C8C75794C620B2330FD5BB8F5BC59
A60F63CB797C09CE1CAFDAD8FBB5062803C344D0CC32979A1EEEC3F9D6E606B1
C0C840DEDEB3A8F8A35FE58B2DB2251EE7EFB4DBC694919D4F41D01894C91D8E
03F68DB5527C37432B01750AD448731F49E12F1FAE92E92DEA1A3435077670F6
311206BD6F96D03E65C08827A12F0007096282DCB872B6BE7EBD89DB74674BFF
EDD14034AE7D7985F97B956C132DB532DF6B115587FEA485DE835831AD5ABE1C
BDA99407F0211A155FCB44F0A41F9B52224AEE1BE964673600B77CBD46C08E05
9960D90175B6EB82DA42596390978884717592A22FE5AD2B7F4DB9EDB2ECD79A
062243ADB3EB7A84E9A79FE1FB0C7F84B345CC06DBE98FE9E52BDF3CF8FEC118
F0F8EE1B3F3CC28EE10BE6610B8820C212630C2D9D32EE9213E1BB04A721B6B0
C7DBE13A219D3A6E344CE9634B1A774A5D7923238B8FA0A7373E42A9B2F294E5
56A14C9C0B8D4D3415222D7F1CC6A54AC5EA84386CFD187B7C47BC40CE5118E6
AB2C12BC77E3A4F5DBD8BE9505E7F66AEAAE9552A75AA44EA785E273ED52156C
072485C5377874A00CEE4705352C30E55B902ACC35DE3AABEE71ED2E5BBA5319
ECBFFA08050AD4152B37BDFA6289EB1BC15D3597CD69A11EF02AE20A0FB0174D
CAA1F281041D6953D207B1FE12D812CB5650C62A761566755D8D9CFB59C4B1D2
6C6EAE8E034D1582CC32CB673DC45718BC591D1B78A3A5E60F14F17E59A758BD
76FF929829B40537B7081C1E401D8828E273A5F5C2E8CE5C6D41E90F1FF97EE9
5E13B6B3EEC81AD19E4CD796A7563CA0E4AB9AB75715DD5605A4596ACA71BB04
D0323445F01FCB97F11E87FEB186E9A7CE7F06836920A1614CD5E7F3244C9073
3BA17E41E26871A176C150FA8EB3ECF9BB19DE8A07FF884C9CD7441B09BD1E19
B5C738F9B1CC3F391D8B979AE175AEEFB8DF6A850C5BA0644CDDAA91F6F0D710
6D9761E795AA7D0D01C75662E3863A7100AAAC4740690A502D258B1E318ACBAF
E1EB024F24F6FB787C7C5CA926B0F6849688C4A374DFC7FFF55F316175AA0883
EFA5909770A7C97B6A236CE267095F25D9A4916DE37748CE08A600644D7D321D
E2C19FDD6989F0AE2CA1C8B76BE036D83282A485C251451DA27DD7DA80F882E2
1DFA7042B80B0E772F33BC385ABAEEC3A1073198DE74FD10FC48990F7BA58816
D3DC570F6AA0757882B1F0FD65BD38D2E5A1E54B4E5F84D18147F3459C9D53CF
AAD25EDB55D7E52262141B84F4470CBDA50834232DDF05580FB2BC843D969642
02143D72C13B747461135CBEC72D82A7C1602D638B46541EBD289AABD77322EA
46F92EBEC5FD7A66E4E974FED756E5E18974AF90AF0FFE0D3B0B72D0953A21B3
2C98BE6C768D1B08958FA6ABF40DD1F36D628DE7CAE9F2844D17BBDC178AFFB0
DEB4493D2BEEDC4666D8B8F9041C564626D94B23D6B63755279D438E60F4D5B0
DB40C47E347099B4953FC39864BC27CBA7CAA49E6643DBE02536E476BA6AFD2D
718F7CE40CCF6CFE964A70E55B4FF633748915856FE50D44DC8903E6A55630F3
070E7B4DAD286C0B44606D8FBDF62122B8BBB73BDC31349F2C26E09324D3E283
575164ACB65D4AE610836FA7B08F60C95E789382461E844AC08B249415FE6E1E
5A87160EB897E7EEBD2D0C643F99F43228885B0DCBFB9C8A95985A0571E67A52
CF637F59F4C539F60B15AB2180C35B8B3BCBC213C7D297D93CE5F33D28C98CD7
E3D280406BED9C56F51E57ACCCE7FC27EC5F4561888E638A27BCCDACF0046027
231DD0993FF04DE46C25EC04EB596F733249CD2C1E671D1AB5F7CA7C1BDC8DE0
1A4D9F59785EE5878824FD5B89CEAD1A82E5713EA6B4D48808A70A70D6C0F50F
BA127E4947316248346FF2D853252B2B7D0E12B87A1528AD133AA61D37E05FD2
3E77BEF1B0FC31670124D5F2F10E7B3B25D4477BA69E19F3688BD2F55D39F731
8B892C04323A7194BE3545EECE50BB14A122FBC553E299214A6CD33FA9AE4F9E
DCC4A3974E504A471105DB09BA503F75CC85EEE7B53365F8337A9D3F20CBEEBF
2327089B9912B98FCE5D86C8F0BC66ABCC4F6FF2D5FAE624A7FCE62310A439B6
4F5E6E68500DB64ECB10062D6306BFE9C1AC11BBC764DA680344D8161D8019F4
11F481BF0555965F257EFDBFF765020C5266CDD6750CF1D8E67F5D816AF88188
DFBA8084A9427DD5A74DC1FB022E9A719E64129D239B843C4046601A505A4A30
E109D4DCAA8C6AB2F9A580BB7C939140260FE396C7B316913FA786079043E117
B5FCD264B69A9D0C7BE6E9123A397CB5D13F516EE5B0326B22695982468FD623
BD36C9BE3FA34BCA551DE4B8FAB248192ECC56CCA70A35C7105068399ECDB2BE
0F3E98E62D57113449AED452FB628FB5B06699A0E02C03E9FB8B9B7AE0DFCE42
28CA853F260B7C903304044EB0D2671A8CB1F4F64B5A1DA647A65731ABB00F9A
75CE8A238B141A9B201F7D5A6CCBC6153C573F58F9467D10EBB29C4FA90C674B
E17D468F364A317FE7F706EEE44993993852F58D979FFA5EBEBDBD5755C48FF9
9753CC38870BBCC7C6F70166FA13EE585640B70BBC9C476A916401FBC00F26C9
A390E19B11B6096F164E3DF0B3237BFF492AFBA73BAC2D57779D1440E573ED91
E6AB5470EFB6C7247B195DC05AC94FBAD4D644BF03C6D46DE514F0F16BF15219
F3BBEA2E4FAD799E1C08881E5A4A615E18CB1125828326716DDF60FC63C7E075
C14412960D708C1402EB70F8DF5291204E048F4AC2D902D5920D56B52C9DCFF4
C043CAABBAD12ECC25094AF66F0A7D13CD39C36768DFE5FC84CF9D2840776A9C
64FE621E344538EF9140C1625B064A353A48D37223B069F20A9656AC5439ADEE
EB73DAA391A9E50B73D75B3AC5F26E7D67FB89B192AEA46E8AB1883BA0BB78A4
070445D3BC01F1F473B8243C36A07B34E9FBF1FA5326EA418D4D732AB8D83A06
A64B95E285E814916FE0F9598983F1B12B71D3D8A952253C48F9E793B279AB11
9ABED23EA5C2E1B209B167B0EEDBD6B01774742454453736A42F78FBFB41D54B
A1B4FF6E240C5C9EC4A0425CE5602E594E907FE4904DB229C80A79F7729C6A9D
70A3BA312C84D890211DEB5287BFE77BD764B5F0BD48504167A33883E3CA39CC
94BEACA980A89D9D023BA16C096767247FF909DC1249B22003CDF2C6729922B8
7DAE0907D06CF9C1922B058E4FDC5B5D54BEE9D2695AD1D70DD659786E40F42A
E8424D2CD9E099E278CE8725C84A22074CBB2B87EA957567407D0424804FB9AF
E284EA934366BC3930C3F09F2EBCCCEF114FE6A0B2CEFDE0B4B58FA1CB6233BB
9758CCED280C3BB0A2240F2F3B866D14E309C81FEC21F246CC3A8D232590F558
F222C6542C41E3BBD37F7C3182D48E4770EA833E5F5AE5598D92FC0EA9A46753
8537B71FC4742DAE4A2CB8965F0CD1715666C640B25D828636C0367CB9EFA3E1
06333C331CCE167E2D13D1B4EF5FB6BD7389619AAF80C120CA2C4D8248C873BD
D415BA7EB95FE8E7DC117141D3510E472D0B66732DF05DB7CE4CBE500B7A24A6
5F8246701B1B9B9B634D79A7414FD5963D2BC8FA2ED99AFD7B13230D2757C3E3
25B6EA75F192D4C11F499B963D846A3BEB6CB2B795C00433FB7BCCC549727A33
0CE3E90A9070BEE5A5706E13A7ED4C1DBF307FC7EAE633E2A079FE40F4C4DE54
5A2C13C54AAE3F78E2DA2FD09735BBCE15A2CD3C19F6E6914D53D78B69B4DCD7
7F6BA19C8FA300CE2DC63DED61880ABDA9D436F7A20F1E23ECDC4DEE5CD824FC
2BA1909E95ECF67D2B2F2D9E73957326A831AB83EAEDA618C7AFCA15EEAB10F3
DB1AA42D183BCC3C56B56766FAC411A871A291E89CAB5AFD0579185A9AEEC026
2677B39630B123F6E825CE223DEACE61E23731574FB8F5C503C55BE7FB384417
DA143C763A07C2A374B79BFA3C1C2E016D8D30FA6EFA183FD9576A2ECE2B6D81
41BF32426A002ED7CF27313B8FD1221555D9C459224C7F5DCE0EE3C93DB2DA53
0F611FD7EA3F74BE513CE580ABEF3DE84BE457899F5E940DBCBDF38E5F3BFFB9
3D67330EED5C1904855567052563AF7E79A18EA5ABECCA606F55C342A5C9E9EB
B6485B05FC33F83790EC47CF6E5A664C9B24B7D8D7BFFA4C6F40732D25F863FB
32F2BA250607E82BC75D446657736E92BAFFF412A27489BEF8101014EDD807FE
E03A6AD635F8FC1B3819DF7A04B48FB3E1A3FD141409D0A0289BB2C159DF9FB7
A768FF906DB136D7F2942A05F9E88091C1E01595D5382FEEFF9D83D106C80731
8037BC9D64E3E609FACA0FE571D66EB66801C6710BCC3064B329782170C742FA
8E97619E3C2242B872B8F71096CC6979574C3B975CBF6C08D6865C83474AAE4F
264D278E23C6C0AC1885832BEBE7D6A23F5F3B790D3E80AE0EA0AE412E998EC8
B74D7F02D399C56214D115A8111D6515947E608C517209144E76DC89F0B6E805
2D12B8BF40B53D3A373DD0FAF455AF7EF1D646644BC1EC2BCCC8A5EACF829981
FED71E164D289BA5C8B36FFBDE2F05B892E83F597E7B8E4554BE704BF2BA382C
148FDEB3B2EBBBE4E1525F370C25FDF5954AF752D90D259F00FD6507F628F7EA
ABD7331E8A87A385736E597BCE863E3D24849D0055FE8FE69CC9A9E8D0FDF3EC
CFE0BB292599DDDEB8A111203325862CABD9A166F4A3E55E16A502095861638F
0BDD4A0B8EBCB13006B2EB4C8D810DB48A4BDD73EE4BAAF1D654649670A6E076
CC86793F8529624631882578DF67644A8F294BB9AEAA95107DE25B746272A9E5
880791EAF02F1E4B561892DE93863E1E6DF69CA24459FBB7BD37E4E07A8F3323
DF243884D37B6C4059399EA9783DF0CBF34D9A7F3BE681B3F57B88A0725F5C6C
C35D2B2B502D772DBCDA66D42B6F058623ECD1EEF1A2D1BB10E402389D87B885
9FCB87405EF270A816607F9FF2F430ECCE4C1764EEE9E9C34674894E7A41E33B
1F157B3CB1EBAF2669444986D0A120953A7C063314C73C2D56ECD28B66D5FECC
8F050D556B6BA81A78627B104324673FA480C5D6D72096155FCC58282FB23867
68B817AB4DC69F85C74C300A0D979634AEF2034BA43E1A5EC021AD9E7E488694
E44E0A9FF6030E13ED925C55E4B0DF0EE83519BCDB47614C9A2A812E8B9301BA
4087E097EB46E2A09C5A5E76B7336987A02976927A711F3E47C847548A6BEF77
9EAB01C271D0B82439B01A0375F39E74E1C237838427FB73079923D7249BD8E5
A41B7E0342FED299CC343FC7E6C72759F11099A21AA2DD77ADB40CE7FDF4B637
8B2A583A150BF4B530660C745096FE59774F0979B664103E6455B244B9BF3C6D
37C289A27DA187090C9ACA0864D7780F784A6854D18CF645C3D426C0480E8343
0E8470A2D7137E219F050AC61A82E399E6B32D948D5C6F3F6902CDF7D94DDDC6
7C2F4BB8D697BFBDC7DF9AEBBCFC8519FFAE78614C0FE99E9621B066956495AB
BAA4B9F3F8378EC3CE2036B32F788B88BE9D83E95D0738671DD8CE3C2527991A
8D6A2EBD90792DF49F5F436E5CF6B23E0534BFD24452D20732B14591EC0CA154
7C3DD5975DF54CDC89FDB684E5E7AC22C56018B34C287E89A907420321FC1411
66B5E4F9E082B02183C270F2F4373D5359576ECD6D5BB7CF2E168A76DF715383
544663401032274A8FDEC338BB1F01840F678C61A6D43CE1EB7C274D32F94A92
AC967F36238BC9184128DC5C7D2FAD4705C352C043CEDC49677957AD00A7873D
67263CBF84A4FD63188CFA0A15045E1A6A9E9EC6E5B1330DD2F5121CA0391030
0840D4554864FCD953C31C36F88DEA021A8F9C69F0AE7B8CC1B42F013227F096
920979306DD3FDFA3610AC4310FED0EB215E137FE304E843878EDA71D6F32B8B
F810FE3F3C28715EB024FBF5B42C1E0D23EEE50A53FB8C24E338D2B8263F1BF4
00C239ABBEF9BB34463EC0176D57B611280295B12C592483AF0BC516AE5D6CC4
52B2C7A20ADDA72DEBFF291E02E788D50D0BF95FC311E93436A7F981BE7B4C46
661C18DF34FA1240D20F2D61DB8745F540566EA3478621DE5244A6C2CADBF208
C276B9BAA7E73078E6C15C8A8F37942487DDFA1840F84B5E60B91B70F84CC5F0
70174140B93FE01D0EC0E83C54C858FFC73AABEF396A58E26F086C738B62E38B
60273B2A1460C5ECDCDE54E93598333324779B42C5EF2EBF5F043CE58A1C6830
ACEFF59CF6AE2A4EA90AB9E0339AACA8CF34B3862D3704E28367B649EBA8457C
422EFEB6C02ABA1FABE5F732186B0B6426A1FC77DD6BF0B09AB5429DA86E6462
CCE12B7DDD994DBBD777DA8CF10BCE8B2C32EF1AFDAEE04DE9E5F33870AEEA6B
5D588F70E16623C82F3DAC2C2AF09A7BD222ECD4FC8C09B135F7936FF386ED46
C05041F2754CA519A685CF7760C8B6E2F7E8722E2149340F7483F65A45E50E01
F7BDE3F075E8DC01024C4BB64F6809A42EEF2FFCBBC039AFE477977E2693473C
4EAFFC0C53FAB1FD7B55BD18098CCCE38D218A10F217D43D2E8F6F9A380EAAF3
CF241EAA98944DA9302DEED3DED324B27991A85C4B5FF2D79806627C3A43CC11
028EA26C8ED4F89A87C063D77ECBC1FE8D73C3035470B048831758731E5CCD23
48264F5277BCFE483FB76ED60AA93FF29AC0C1C6045590C65892C80C06A065C3
EEBFC2E98A935D6CDE00461C4D76BD964909830CDAF58F23D40E85E73F8FCA6A
1082209AE17B7755F08331796CBA52F0C72203AF1FF5FAC5A41BD314CE0D6299
D48060A41F2F3C10D5FCF52109B17A795B880D6F30A4C67B5FA6AF2A06AA2BE8
BB86DDC7AE22011D34D327EA70FD7B951AAEA05AE37D533848D0D95676C2A216
119FC7C90EDEEB7AF4A7B3546DCD30861254E68D02C40EF15AB45582C89FB3D6
E2AFD4A2330D54EA5BF9CC96ECA1F72E84E64328B2155AEF963448AC4A00E23C
9F24511066C9F4B0ED25B290FA88A37B8AAAABD8796B0E08914D4D53C3A57E2E
97377CDD0D0D9E4151B722DE12FB4EC3BCAEAF554DF5D95E23604AF01B5F46C7
8AF8DBA54FC3CB6B6E02126E5DBD7FB6FA2763AD9858AC61E95F28B8D635FF3D
41B91C9DCF235851A6A30989730D98F80BC093C9E693265E822A6149EBCFA2C3
C16E44690DF49850DC7DDCE963A8976DD028109BE45F0AC93E0E8F7273077916
3EB85E5D4300AE44D07EF94D314EDA2D49E0397872ED118687CDA28EEAA56709
F29DCD7693D9267E3BB6EE3AF70FA8BDD77A0284BAFB0BD17FF9098419BDCE76
0D1D4E61DFFBEA83E4178F5FD274C950A7A4E0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B15D3E0E5612AB895CEE090EBCFDCC7FA063640CC7DA5CD7158B440
55AD0BDB84D1572BDBCAACC6E7AEFDEF44878649065CD4399529BB7ABE4FD062
C50E8D3A30679D42ECD5ED599C09D4B98CF509F7419521C6327A650E249EF2D6
ACF38C5419145C44A41A7EB54EAEBBA72D5AB58317E9C6B46974EF0D867E05DD
52F3426AF18E76D1BAB3647E897CE2910E7A96112C109A170D21972EBE426375
AB3B77428276D5434CED32D7E1010A966E9963CEB447E7CB60046602A3569090
A230BA564503FFB362F8485896191BE975E62281825FD25359A10F84AD9A1870
6CC30F6EC61199EBEBF1155F34FDD9BB4E925596FE4DDA936CC61223A218A88C
F79B4B972AE6F7325F973370C589B66EEE9F6CA9194A2EB640F2E213494457C4
32214A3172F067D1B15ACB8BF11769DABF2A0A1C3058ABF110679DFF5E57A65E
E28E5772676DF80162171DF5FA100E90C8C55EBC2B0CB48CA3D2E728F64BA15D
05DBCC9EE0F8860687741316A34DD87933C12DB7A3584AE88CA1B1FB99E161BB
F17053FFF4AF30128AD1822761F2BBD45681C594938871724F9A85088E451122
9EDC0D4302F9400975DE4D96BE28E1F9CE055DC3312ACFDE8CACD53D969020B1
B90028C373D3448E0971C4EBD080DEF7DC1DC7862434771FEEBBE47115F8FC3B
2FEE502B5C833390E70A78A4D908007EEF75ADC5848FA47997BE0A910F15AAF4
7DAFAE85D4E92F3016E5D1417A577059A9898F5AA91A506F8A4B02FF565BDF30
87B82A71DEC8BC8F35F73F00B1AEF79937F8732EC5F6933D4E42AE341C2E060A
1DCCE84D112C2F382C0FFB9E1B51FA8BA97C63E4670B912619A20C13063E6730
387C5E77D72384082A6ABBC6F62F9D368D0F93C4E2551F1E11F149B5DC15AEC0
C2F352F81DBD13A927892557DBC967EBD31ACF955AA10F59FAE8A04C619C82B9
B4FA45604CAF87440C0E1A3135833BA88073C0D4183E5BB54060CCB7C0022C63
69C6842C0590A49C2B40BCA9D46B7EF501FA7C1019B8A18D4135ABA532531BDD
BE618CC7DD66B56AB89C1B289D953CEF5E55810535C7B7C1D182C9CF0AC7E2EA
7DDA0A2646EF4AAB9D4FE759A92DB5E5A9013CDB60B1A8C0D7384A59784612FD
56E140E47866C62025FED1159B3B459C9A1C77AAD0993B24FBD49F3BB83F3A73
3AAD55F5E3583DB2B679E154B890317737F63AC7B1CB0CADFBD34C9842FA82E1
AC98ED5B4CC9ED4A4BE9AA7F2ECDEF3EB92EEBB1C14E45DFF805D75EF6E7C4E1
6C8921168A54C0CD269E45FAF0FCF80AA53B258E61F11605E87DF7760C0B265E
69091135318B5BAE543C44CA0AFC7A0E65BEEC544A2F266CDEC3FB74A0BBEBDC
84B93BC82B897C7A9CE0513B4F6ECFB861950F9DE73C669793C85487C0571E75
403D111C5EFE83AB5351D7B656BF961AEDC4EB2355B3321C8469F0783D71E6CC
5E2D1AE640852657EBDB5BBF685EB2A4606DE4260777A2080A3CF844D40AB9C3
A7A165D6AD0D9482CF180D02CDD229749F777687ED8E8879C26149F64F2403EC
82568588B9A6F0330D35F65509BDD99A537F5C974D7765E0543DB5D8D094EBD7
E6329FC6ECB630A8C37202C58E575420BAA422E712A38924F38D85B2F6ED028A
2F301EC9B98C1A21082507B7559E22271A8EB903B7480CD24AC1EF57C5CEA6B3
ED3261CF7652215E55CAD75EB726F41BE342741B157CA626EC056A6816AEF1D6
A65201736291FCDCB94A4BFC64D2CEF445E8588C47E353A75CD528BDCB140E3F
6B0C36554C29EDD3DE5931CC93B4859A21AFADEEDBAEAA1268AFC408D019ADF2
A20C75052F46FDB53266BA26B071C8B15143C0A3A3C21733B85D1285B001D05A
4CFF9E679553C2535B4FDD75927036E62840318511F6C85B224108ED3708C50B
070833B9DD6E94F1A57BDEA2FFA247A7399B354B0EDEB8272D75E4EE205D1E7A
FAF1B1BE5B9FD0D277D5AFB48E827DD0B979E7FCD2C24AD339181124180169F3
AC7E7A19D8565769126D3C6CCF19C49E038F56DB0698B5AD852CBD82C781D2D0
DFAAD9EA5958819F5CE09132611EDCAE65629C4AA8C3C317FE4D912A6D9E6461
17D21B2A19589168DC41815541EE2617DC9FEBCC768D997044CB1395A056C063
59596C63BCB936321589906AB24214F3C046A1F2187238955795B8B5F0761CF5
F602D773170B7EF67E0F7940BA9176D2E877C9D142F0D0D31BEB4EFC0774D958
2D4C8A6826925AAAFD9133D41A180C72273C6F5D2619D655C3533FF17CC7A87B
F1B8EB98AAE2811E499C038D545584A870538E2AE9A38C508278B2D4EB827E12
F79C9CDF60BD277D3774B2F379F9F5FDECD13B94A5241A6686EA803D098DF13C
41812E5A530C0BCE5DDA5883534D7B8680D0D3062AF0E81ABC55AD12406EBBF9
6E8ACDF42D79E6E714278AB53CE7A124D7F3B46EF5E578EC302A5C63F547BC46
19E5041C903E520696B2E0C6564EF9A8E2D3ACFD8C67C2C4DC81E7F689B108A6
1F2B9B09CDFE5866948199CA27C1838AD3956FC5FB394169622625F2493AD95E
1A2BFFD0BB02321F10079402E2BD9735E61CE48C7E5A10B6E3F943862A958998
B61EB83C71F1C2986427D31DF02F4FD057558D6634038954796DD33BF10760B7
510EC5152259D7DFADBB7B3C406E42973CFF2274467AF9BEBAD63BD1D7F8363E
5D0A84FF62E8793F1C76C3A2577467242CC0BA47B411DF2A9F775B7C1FC1DCD1
2CDCD0270D8C278559014F0E9A6DDD0A9B3967BB2275D8AA11B3733FBAE56E49
C9C013F25D837C598F5DD4B9D36ADAA2F91781C807A35CFCE12EB1E2913B766C
A2BAC3FA555CBADAF2CBF6B2B8CF3EF0088B45FC024C33BD3A870590B28E3223
FABFB27EED75F22A4799C741EF0E366457EFC5B4DF8C0DCD6A89C52B018E46EB
E636B6214175D6C3850D907C3EB1AD965E8A5A3ECEEBF44790D57FFB857764A2
CF51481ED7C692CF08BD1EA6C5B30BE280953FB8F580F94CE7152535E781B50D
4E0AD7377674DBCD9FA6D600C82868714AF2B47D07416D2A51B83AEB1553EC40
20BAB60E15C4E1121B95E28503968CB3A16A964C582DD898A9FF87F80D8F8693
4EFE29A1770D38441A486C7B34AD90BA1FA4C3229B2CBA7CB2DE62566DC837A2
8FDE9E1FE0C6E244C61B9C513E0CE251F9DF1CB1483EA78FC5C87A4507A5A160
228B838CFCA83A445FA0805AE960D06C87661AE6F7702989E311B03130ACA988
305882A38AE0E11915A2C90D9FB34EDEDC15BE430F1B98BBE7BE6677BEE121D1
2E4556D8D996A9C156F993B8C2E0D2B584097E1E26BA59C2CA42F8B32E1766E7
1C99530FF774722C2C0261EBAD645E2B85728154248F5154BAB7FAFE3F85BF28
264EEF0DAB99A669F70EBC4901DF9C5469C868EFD4927E32DAAA559BAC06FE38
E3D3AFB6B950C284946E38E65634B80411532BF22520355476023178043584B7
07817BE4300283AE5AC540D464771454AC4CA92840D1E94E1519C2B831FAC8B3
5A706E1AE8CD24F26DE3F05B060A61211158E717BDD52F97832A2A59E8367549
237157219D7961B7541CF4FAD357036166066751004374D40F25F841D521A3D5
9DF85AE314797B8AE47A823B0B770945474C5E9333012DEBDD4D7D8FC73AA6C3
53E83E2BACEE7C23218D77CD3B06ACC51E76B2F1CEA0B66A6581C8E32E105EED
44E6BC186D8E80A43A38F8D8A304F10AA59C7F68FF78A919CB89CF09574A32A7
C80F548CEDA6494D521C3EB79602AD279CEC3BB0BB89428A16AB108B080E4843
0265D9D7DE14279362110FFA7CCDFBD6CBD84ADF8C3C42F37E144D1CA6B12A06
23BF496266F6078D1D621FC19C582E1945BF8D202612E04E3A809D42C1965C19
0515766BA503BF6A181C733217455CE86FAC9474583F4E982C00AAC7BDB8E283
0239F320E74DF96F1E9C6F4A4A88EB131CB74750063B69BD5C3E13F4401C345C
DB8DA721E6D00966D8F9456882520611165AAFF404AE97BCA826076BAE04AC75
E6B054D06BA41BE5211DCCE23A1D4E36BF29E98FC50B4BAD4B66D281253CF9E5
A926E68BD8FFC7DF941FC8B89AAB3A6B938D42256AC84BFECF508BD25EACD55D
FF3F1353634D255815267C3BE9EC63F5903E91A8C41D70721AF5330B26D0A4C2
CDF77160819636683431C0ABC374587DCE8A124021C6EE599D8BF4DA0E2139A3
C2B5EB9A80E1906586DE3115BB7248A739751CDDA600651B0FD2BA97369F2AB5
312FD53B90B04DB1205EE707196730AACBBE43F6DEABA4FF818ACD1C34BF7022
60B696D7DE32A497551FBCC20C9CF10B21CB0EE58980239418E519BF87CBE5D2
667EFF62B35B333C7B47545AF5F7B5C6FD967D1B63DD157A1FB5E5F3DBCFC6AE
A0D7E0D33BC55E647C77A11105A0B102D7D58593719EE723A8F929B9DB31C6A2
A6D57CDD711BC920B020243B809FCA8BC884BF01218BEC1F8CCFC59CA4C7B350
FD18D4FFE2E7FBD364E78BA80F068AEB94A7B944224BD71FC4B35820914BD80B
DB74B11E91159A7883F26899850CAD8438CC88474CE8665C20BCDAE442E944FE
E3A5AA2EEFDB3320968E128591A484834CB6BA824EAFF45E41B8E9947919ECDB
A14F018379816779A609910C33121DA526D70B201DA9A742C9EFBFD47359C31F
591D1C3FE1B19366655963300DF475FF5161E4AD059D5C1EF2FB0FFBD8C32B8E
9FC3FF3B65E9789BDC8356C369D7930FDFA14F8180F1F0BD8E8B5341D98F016D
D507C29FA803D78E49C4A05388EE0A45AE7E9FA375979D8FA2E5C61BA78541BF
372B90C216906376D99297F23B74F1D41DCB6D62DC7D712B6677D85542713BDB
3AE5EA91050753C5F96E01B61BDDC473CE62
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (siezad.dvi)
@start /Fa 202[33 33 52[{encplrm ReEncodeFont}2 58.1154
/PLRoman7-Regular rf /Fb 78[53 6[45 47[60 71 6[55 6[71
41 37 3[61 75 60 1[65 9[139 6[92 80[{encplrm ReEncodeFont}14
119.552 /PLRoman12-Bold rf /Fc 150[23 105[{encplmi ReEncodeFont}1
58.1154 /PLMathItalic7-Italic rf /Fd 83[65 171[65{encplms ReEncodeFont}
2 83.022 /PLMathSymbols10-Italic rf /Fe 139[30 3[42 1[50
4[29 6[36 44 19[81 17[23 59[{encplmi ReEncodeFont}8 83.022
/PLMathItalic10-Italic rf /Ff 173[44 1[44 44 1[44 44
44 1[44 5[44 1[44 8[44 44 2[44 44 44 44 44 1[44 46[{
encpltt ReEncodeFont}17 83.022 /PLTypewriter10-Regular
rf /Fg 12[42 55[37 1[37 7[33 5[46 28 3[37 3[37 42 38[37
44 1[60 44 46 32 33 33 1[46 42 46 69 23 44 25 23 46 42
25 37 46 37 46 42 6[51 2[85 3[46 2[57 65 4[43 5[63 1[59
62 6[23 8[42 42 42 23 28 23 2[32 32 27[46 12[{encplrm ReEncodeFont}52
83.022 /PLRoman10-Regular rf /Fh 198[42 1[42 4[42 42
42 1[25 46[{encplit ReEncodeFont}6 83.022 /PLRoman10-Italic
rf /Fi 12[48 71[53 4[44 3[42 39[42 50 1[69 1[53 37 38
39 1[53 48 53 80 27 50 29 27 1[48 1[44 53 1[53 46 10[72
8[91 8[73 1[68 7[27 1[48 3[48 1[48 48 2[27 1[27 44[{
encplrm ReEncodeFont}35 83.022 /PLRoman10-Bold rf /Fj
145[80 4[37 3[73 80 70 1[75 6[96 6[88 9[47 3[92 10[44
58[{encplrm ReEncodeFont}11 143.462 /PLSans10-Bold rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fj(Zadanie:)54 b(SIE)-94
117 y(Sieci)3287 125 y @beginspecial 98 @llx 530 @lly
441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 178 3969 4 v -94 286 a Fi(V)32 b(ob)s(\363z)f(nauk)m
(o)m(wy)-8 b(,)33 b(grupa)f(olimpijsk)-5 b(a,)30 b(dzie\253)i(4.)f
(Dost\246pna)g(pami\246\242:)h(128)15 b(MB.)610 b Fh(27.09.2012)-94
485 y Fg(Sie\242)31 b(lok)-5 b(alna)31 b(na)h(ob)r(ozie)f
Ff(ILOCAMP)40 b(2012)31 b Fg(ma)g(struktur\246)g(drzew)n(a,)g(tzn.)h
(nie)g(ma)g(cykli)f(i)h(\252\241czy)f Fe(n)g Fg(urz\241dze\253)g(za)h
(p)r(omo)r(c\241)-94 585 y Fe(n)18 b Fd(\000)g Fg(1)27
b(k)-5 b(abli.)28 b(P)n(onadto)e(k)-5 b(a\273dy)27 b(k)-5
b(ab)r(el)28 b(\252\241czy)e(dok\252adnie)h(dw)n(a)g(r\363\273ne)g
(urz\241dzenia.)30 684 y(Z)33 b(p)r(o)n(w)n(o)r(du)g(staryc)n(h)f(k)-5
b(abli)33 b(i)g(urz\241dze\253)f(sie\242)h(jest)h(bardzo)e(w)n(olna.)g
(Administrator)g Ff(P.R.K)g Fg(zde\014nio)n(w)n(a\252)f(dla)i(k)-5
b(a\273dego)-94 784 y(k)g(abla)36 b(w)n(arto\261\242)f
Fe(t)476 796 y Fc(i)541 784 y Fg(oznacza)5 b(j\241c\241)34
b(\261redni)j(czas)f(transmisji)h(pakietu)g(mi\246dzy)g
(urz\241dzeniami)f Fe(a)3006 796 y Fc(i)3071 784 y Fg(i)h
Fe(b)3167 796 y Fc(i)3231 784 y Fg(za)g(p)r(omo)r(c\241)g
Fe(i)p Fg(-tego)-94 884 y(k)-5 b(abla.)27 b(Dla)h(dw)n(\363)r(c)n(h)f
(k)n(omputer\363)n(w)f Fe(a)i Fg(i)g Fe(b)f Fg(\261redni)h(czas)e
(transmisji)i(pakietu)g(z)f(jednego)h(k)n(omputera)e(do)i(drugiego,)e
(to)h(suma)-94 983 y(w)n(arto\261ci)k Fe(t)267 995 y
Fc(i)328 983 y Fg(dla)i(wszystkic)n(h)f(k)-5 b(abli)33
b(na)g(\261cie\273ce)g(z)g Fe(a)g Fg(do)g Fe(b)p Fg(.)g(Jedn\241)f(z)h
(w)n(a\273n)n(yc)n(h)f(c)n(harakteryst)n(yk)e(sieci)j(jest)h(maksymaln)
n(y)-94 1083 y(\261redni)27 b(czas)f(transmisji)i(pakietu)f(z)h
(jednego)f(k)n(omputera)f(do)h(innego.)g(Oznaczm)n(y)g(t\241)g(c)n
(harakteryst)n(yk)n(\246)d(jak)n(o)j Fe(M)9 b Fg(.)30
1183 y Ff(P.R.K.)19 b Fg(p)r(o)r(d)j(nasic)n(k)-5 b(ami)21
b(Bitoasi)g(narzek)-5 b(a)5 b(j\241cej)20 b(na)h(w)n(oln)n(y)g
(transfer)f(dan)n(yc)n(h,)h(zdecydo)n(w)n(a\252)f(ulepszy\242)h
(sie\242)g(i)h(zmniejszy\242)-94 1282 y(jej)40 b(c)n(harakteryst)n(yk)n
(\246)c Fe(M)9 b Fg(.)39 b(W)h(t)n(ym)f(celu)h(c)n(hce)f(zamieni\242)g
(niekt\363re)f(stare)h(k)-5 b(able)39 b(na)g(no)n(w)n(o)r(czesne)f
(ultraszybkie)g(k)-5 b(able,)-94 1382 y(kt\363rymi)26
b(czas)h(przesy\252u)g(wynosi)g(0.)g(Zamiana)f Fe(i)p
Fg(-tego)g(k)-5 b(abla)28 b(na)f(k)-5 b(ab)r(el)28 b(ultraszybki)e(k)n
(osztuje)h(nas)g Fe(p)3162 1394 y Fc(i)3190 1382 y Fg(.)30
1481 y(P)n(om\363\273)e Ff(P.R.K.)g Fg(znale\271\242)h(taki)h(p)r(o)r
(dzbi\363r)f(k)-5 b(abli,)27 b(\273e)g(p)r(o)g(ic)n(h)g(zamianie)f(na)h
(k)-5 b(able)27 b(ultraszybkie,)e(c)n(harakteryst)n(yk)-5
b(a)24 b(sieci)-94 1581 y Fe(M)37 b Fg(si\246)29 b(zmniejszy)g(i)g
(osi\241)r(gniem)n(y)f(to)h(jak)g(na)5 b(jmniejszym)29
b(k)n(osztem.)f(Zau)n(w)n(a\273,)f(\273e)i(naszym)g(celem)g(nie)g(jest)
h(minimalizacja)-94 1681 y Fe(M)9 b Fg(,)27 b(a)g(jedynie)h
(zmniejszenie)g(tej)g(c)n(harakteryst)n(yki.)-94 1955
y Fb(W)-11 b(ej\261cie)-94 2137 y Fg(W)35 b(pierwszej)f(linii)h
(standardo)n(w)n(ego)c(w)n(ej\261cia)j(zna)5 b(jduje)35
b(si\246)g(liczba)f(ca\252k)n(o)n(wita)f Fe(n)h Fg(\(1)h
Fd(\254)f Fe(n)h Fd(\254)f Fg(10)3076 2107 y Fa(5)3113
2137 y Fg(\),)h(oznacza)5 b(j\241ca)32 b(liczb)r(\246)-94
2237 y(urz\241dze\253)i(w)i(sieci.)f(W)h(nast\246pn)n(yc)n(h)f
Fe(n)23 b Fd(\000)g Fg(1)35 b(wierszac)n(h)f(zna)5 b(jduj\241)36
b(si\246)f(p)r(o)g(cztery)g(liczb)n(y)g(ca\252k)n(o)n(wite)f
Fe(a)3270 2249 y Fc(i)3298 2237 y Fg(,)h Fe(b)3392 2249
y Fc(i)3420 2237 y Fg(,)g Fe(t)3508 2249 y Fc(i)3536
2237 y Fg(,)g Fe(p)3636 2249 y Fc(i)3699 2237 y Fg(\(1)h
Fd(\254)-94 2336 y Fe(a)-50 2348 y Fc(i)-23 2336 y Fe(;)14
b(b)50 2348 y Fc(i)114 2336 y Fd(\254)36 b Fe(n;)14 b
Fg(1)36 b Fd(\254)g Fe(t)511 2348 y Fc(i)539 2336 y Fe(;)14
b(p)618 2348 y Fc(i)682 2336 y Fd(\254)36 b Fg(10)867
2306 y Fa(4)903 2336 y Fg(\),)g(oznacza)5 b(j\241ce)34
b(k)n(olejno)g(n)n(umery)i(wierzc)n(ho\252k)n(\363)n(w)c(p)r
(o\252\241czon)n(yc)n(h)i Fe(i)p Fg(-t)n(ym)h(k)-5 b(ablem,)36
b(d\252ugo\261\242)-94 2436 y(k)-5 b(abla)27 b(oraz)f(k)n(oszt)g
(zamian)n(y)h Fe(i)p Fg(-tego)f(k)-5 b(abla)27 b(na)g(k)-5
b(ab)r(el)28 b(ultraszybki.)-94 2711 y Fb(Wyj\261cie)-94
2892 y Fg(W)h(pierwszej)f(linii)h(wyj\261cia)g(nale\273y)f(wypisa\242)g
(jedn\241)h(liczb)r(\246)g(ca\252k)n(o)n(wit\241,)e(oznacza)5
b(j\241c\241)26 b(minimaln)n(y)i(k)n(oszt)g(zamian)n(y)g(k)-5
b(abli,)-94 2992 y(p)r(ozw)n(ala)5 b(j\241cy)33 b(na)i(zmniejszenie)g
(c)n(harakteryst)n(yki)e Fe(M)9 b Fg(.)35 b(W)h(drugiej)f(linii)h
(nale\273y)e(wypisa\242)h(liczb)r(\246)h(k)-5 b(abli,)35
b(kt\363re)g(m)n(usim)n(y)-94 3092 y(zamieni\242,)30
b(ab)n(y)f(osi\241)r(gn\241\242)g(taki)h(k)n(oszt.)f(W)i(trzecim)f
(wierszu)g(nale\273y)g(wypisa\242)f(n)n(umery)h(t)n(yc)n(h)g(k)-5
b(abli.)30 b(Je\261li)g(istnieje)h(wi\246cej)-94 3191
y(ni\273)c(jedno)h(rozwi\241zanie,)e(mo\273esz)g(wypisa\242)h(do)n(w)n
(olne)g(z)g(nic)n(h.)-94 3466 y Fb(Przyk\252ad)-94 3705
y Fg(Dla)g(dan)n(yc)n(h)g(w)n(ej\261cio)n(wyc)n(h:)-94
3829 y Ff(4)-94 3929 y(1)43 b(2)g(3)g(3)-94 4029 y(1)g(3)g(8)g(33)-94
4128 y(1)g(4)g(3)g(7)1890 3705 y Fg(p)r(opra)n(wn)n(ym)26
b(wynikiem)i(jest:)1890 3829 y Ff(10)1890 3929 y(2)1890
4029 y(1)43 b(3)-94 6155 y Fg(v.)13 b(1.00)1692 b(1/1)1755
b(Sieci)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
