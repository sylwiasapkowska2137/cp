%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: robzad.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLMathItalic10-Italic PLRoman7-Regular
%%+ PLTypewriter10-Regular PLRoman12-Bold PLMathSymbols10-Italic
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips robzad.dvi -o robzad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.01.22:1235
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75F7B8F53BF7592F0
CD9C8E87EEFAB287EB8E1B539A2B8414C096EA685574267948222A7886782776
0F7091469FF255A729266042B1D09030AA65073B4E07DA110B5F7919D4DE6D16
F95A17A9025C1F684CED59977D21563F33124B63BE2DA62F951C898CF665ABF0
45E74379D67EC0B65FAEE2BEC619DD75BF2679D456299A52802A64B2E52365D1
8733275A1938886D2DC102825CB3EF2A7B55379066FC8C4F948986B1F80EFD95
0B74E614A6F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904E1BBC688FC7FB980
05BF250E91BF91F719E5568DAC7CB6961FC49DBA6673C707C4F13E833E87535C
CDD84389A559822986C68DB89F3C4DA86F1EF4A2A92FE4F54472863A43FD9895
C72B839A36171E129FD3D862EBAA36D35161B3EB6C4035E27B1E2CD553871077
DA94D205818CD5AC4E30E92D029483909939354ABA64D7FD59BA1F9102D5A134
92C763050D8E3ED64E592BC6CF9935D1EAFD4894A600072ACC70C91B876A4EC8
599D53A3367BA3C28DB6183AE68F6564178DC0354B62EB1227A0123488E56195
B04061E73D829B4B03D84D88904AD23D3FFBF1AFBF1164062F545BE743C40D7D
4B37D84B5D736ACF96F6F943420A83F519396B2291F4C2E19D7B4C688D432B1C
1C2F6B327227BA2A0F6AED502C2F97871DE3AF0C9C46D7B941BE395732E73083
0CA81BBC2AF34B8516ACEE9AF62EC3249236C0B31030E565CAB34881B3D7DE98
FEBAFF0B41C83E756520A3851274FC638C003286810D94689182FE102D02B63F
9E285348D39D3B5578962247714847E6D5E5A69393290CA539B14401C2FAE06A
05A703A3A4C06130F8B2A4308C7D7316EECEC5122BC1D02CECDD52C7DE191A45
34AD9403CD892B54E5FEFE8258C7638978C6520D2667DF005C194F225F73A3BE
3E7B17B1FD9EA5D79E5772AA6922C7D4B56C2234B34A1FCAE111E66E64D76AC9
9685B50E26079B5652624F1862C8152DBBB00809A5A5F8BB27D8A3E942C40C77
346DF4781FD6628A564853CAAF633F4029BFE5BC27A10F7DCC5DBDF880E30217
33E027
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F6265D695324F79
1BD844FCD673511EF353CB0B4E8D09C7061B70DA800342C5F04772E859AF9F16
873B5839C38230F1F3BEB84FF65D8ADDDC895066DCA909781F4BC06848F7FBE0
C6C268C6BB20D3A28860B537B954DF7DEF9096D27D3D6FAFA20FE86DF13E7C83
431A4CEE4425C40ED537AC41457847C5EC09C01622C089AB3CB216A5C27D6291
2171C1B58B5FE8506C4330DA185CE61BE5B932D6A16B7EABC23C5943095BF1E8
2A90ED92588858E5567ABD3D9951F55183CA0B9098477F133CEE7A913FB67F66
1E0251CD156190FC3B3561C0C632F7330AC3426AD987867C257217C859D48C16
03730AFD208403DC91461325F612CF1421F3099CCD799C2484DC344A2D22182D
25E20A544567954F49566EDF37EE3889D9DCF5A419F65532D5DA715E9749A991
55DC4E3E2050CF50990C44A96214F93C68C7B70266EDA218C6D2606A4B755B30
1AE48959C0ABC289CDE655EC5D586D483DA699A34B584EF886716F299981EC9B
EA227BEE986A9A085E392102C671FE3892C7AFAA4221539F3C13CB0187243FBA
27CD4F9D6D60195EAC4220B7FDF85DE8F0EFD766202167DF4DB18E58917EC684
2451E3F7441B4E9ABAFFABFA38EAF53F517136457774C464F3D84206094178A0
3A3D1129C1204E95D0F19C0E9A42DF896D9AC7ACBCF38CC4A173A9AD53A10D1F
E691EEBC3E6B2D5597A2E3D1C3964D8E87EB47950899C82E7D266DE38408C023
26B40E27E034DC75E7E797B53DEB549D19CB1BB28AE2BF8E9F267D621E7358A3
AF8A5C4C8849ACCEE49E15DCFC537A774E8F036EA3BD1FB35B42C28855BF64EC
9BC75371A98095CB51BE7FF107E4C7F5CA76EA74AD464CD041B7CBB8892F2DBA
833118BB4C1014A3A628D302697B4125B5FFD2CB27C6DDBA47F693F10DC49A87
2AACAEC7DABABE1EB7F65A47E8774E2215D28DAFF0B369FB7E14A12FB3D4E764
B32676885C19FB751B46C7972BDAE3C044E0BBD0FFCFB0E04CC70C954BEAA33A
81A5EE27B9220C89DF8C7471D9ED79C967DC7FC302C4D295E606E3BEB5DD0B06
8D6EBB6367C2521F9AB5BBFA9D7776DB2F6E82348B86E47123FE0703A8D69B9C
0B4E7B3E0E986592AE73109785467B15C17D2D0C33C824A507CB2FB6E384BA8B
AEC8EA8976F522C889AA3F48827DD9280D36D698735A0BD0866C190439A0CD83
6EFF939FB12FD026E09A8051E70F9702416274BEA717043740561888CF924934
CFB0BB982F75ACF33109F8AE7ADE4954D0B1E18020191C0EAB6564A3371420EA
9EDBC2DC626CFB63F174A874BA41F3B9B737DEA3E9E3CA3A0263E70E0F026E3C
2297E197FB8A2BAE24F3FBBBD9947BC5A800F9DA6B7BAF861C67383913C77907
FC344161A50B22D67F4575D447A186400FAC77FA44C3B89C7255A4F118846B75
70803990A8BEBAF47B290A01263D432868618263B265E238F5DA81E737091B05
A3BAA49FCAE6E32DC9D1AED22C2EAB674DBC7192AB3401CFE6A390C5E7694E88
BE4550161F029518A84A313834E9E3C9722947CE7159296455F2CC1347B4D4AD
31E7B1B93CB1A2DB181104E45B6898445E8F64F293AC397201E04A676205A3D7
94B7D6E66F956B857291BCDA9B6705F0B062A78EFC65E27A1476F19BC2ECC2D4
62741B0BA00C6561DF4B4C685145E00F29406853D8A5D64194339EB99785EEB0
1885573E091E4820C12FE47E3154789E02FE363C31913E206476ACBDCDFEFC8B
7BD24AF41D55196DF6FB2F2C15106F20D14D13E3848CA95BD36E5C55162E3FE2
6F0482EEF9893042350E8125A6FC1CC6271EB7B2024A96B939BF23B27B2DF046
F314DBFE68DDB61B2D4B9A2DDFE2574EAFEC90D0AE1BB2E46560BA9B4FA1E3CF
03621E157AAE9E14AA354D1A5140E0073F861996EC8D2C2382F99AC70E64D36D
236DC6CB621036A15558EEAAB08B10DC15E662E4E766AE5F6AD0EDDDBCDA16D9
6BEDA842C9B8078D60E5FA106E3980191D23B7C261CCEA2B02606837B57B4F38
BF32513D5EA33D8601BB35995950CB00A5EC95FC4A76220272D54C2FD816DB22
097AF5BD0BF8F100FF57033A1752FF01B8F9F0315CAFC23ED4F9CBBB2EAA73E7
98838976553A8C441C04A64A0C41F8C9F34807DEDDF20BB1BC3337970F89B6BA
6E8B05DDF2B538BC24B526ECDC0ADBC7566716822F634A96C5D192FF5291CC7B
F626C1ACADA2BA91DAC4A076052FF4259FCEB707A378FDC8E849A8639D82520A
C5332EF9745D6349263BED8EE2895A696AAEF0EB67902FA53D9E8BCF2B5B2E47
B28A45D6F516078C72A4B155A2715B713EC35C0A1CA24A56DA1CA78A8AD61511
F8DC678BF43D83C9CF30862318FA154E5C882BB594473D8295F50F1F6421C03B
D138B0559D3E5887B7EA9C9C54F8335F55CA5FE4AD49B5EE0AFE3B6468AA01AB
C8EFFD9B0B6F1AA1D2686A8563FEC560FE9E9B5851483AB6B534EF308FAE7384
B80409243C6256300F732EBA77344762A700EE46CCFFA51CE7669DE142A36E47
CBE1D39D16881DB60C5915CA0DE369A0D7112BFF6CAE56CB9BF699D3154AB288
B2B12B3DD933BDA035B201304263EFF2FB966C94394D91C7EC0AA568F7684A6B
37CCE936BB4B133F0CE1B55B2F5B035ED70817E8C999AEF82993AF6D23E6A4AB
07D283706CD71D72D330171ADA792E1E9962DB73373C3843AC9611EE9F5C09B6
46D3235BCAEAC9EAA9292428B9368284EDCDE7B6926FA86E486C0EF2C717050A
9B73E2CE44EFFFC2DBE5AE8A5C994FA3E00AEF1C2E77ED22D3BE479644CBE0FF
57D5829CBD7DC325BEDF738EB6D550863099C9AE6A1D3DBB577504BFD025325A
2DEC8E69751384DC7263DFB82B20F6CFFF704353DBD5BFB6B54E649CA733E6C3
93F48B82775295D1CEDF1E2D29BB43751614AD7E2182A565D4CBAC21C97AA0CC
30F28D3CA0DEEF7AD2965206A7EC7FA96F45E80F93C8F5E3C5F1B8186AEF2574
FDB290350BA113FC6EFCC91AE9BA0E8326CA737FA1492D6F882D3C824DF8845C
2B2956842A37190960D6FE43CBD8FA5C8559DB2F5D34D306A70916C582642552
D35A1900E529B3BD95C3B4F960873D60416446459FE58E1C4D70784A4E748AC7
A4F1E4CD883F8E1169728CB98517734A04CD40C7D1E115874CC37DC24690EE3A
F7208471B6DFA05F97E8CF3AE4E496D61AF2FF2869503182FB535B6443B111DC
7313274B47BC909CDCEF234B8102827E70E4F8731282B36290F48FF66CB87B21
86B6ABDD864C9489AF3A245ABFC23930FFCA9B61E834172739CB2E920FF32877
388A9B328687B35AF17A93AC3B4BF22924C666A1DA8D15B13ED2C052D61F445C
25BFB73B1FC7048CE37859E6FA6078E8812774B6F14E82CAB2F1E3508C67D8D3
2CE12AE7583A52341363A32430E38B6B4BAC83BC55DD2327F28FF8E123A1C934
62B31F0BC5BA341F4F83FF794467BFD86D550BAD2CB7FE1815C0C58D439850E2
E6665F87510116738DC48860AC1A02C88518AE99D29D8293C967E1D0220C8D52
9E2D23F7B428C533ECF980920DE1E3030CE647B480AEF56A5805747ED305FF9F
7E5AE8B14C7632CD5B215BADD3B2577A28A5D6EC6BD7E1A54E68FA94EEAD91B9
2F75F66D7321C4B601D885BE1AB10BC3D49E7667E6F3391ADBAE6CC062790773
89A2D4C38FAB094BCC838D93AF8CD24021115A9D2928631C7012882F8972E006
DB4486CC80838CB383D35A0FFB0295235F79BD27FE299B4493A07C1A4718388B
A92FF69C5EEEDE9F3178E967EF8A4160DB646797F2634C51CFCE5CA54D5168C6
F77935B72943EB9C488BC2B66BF9ED9B159253F8DD74BA4DB847010FDD939F68
C964F39CBB55CB12A05F02665B62A0D59DD639819CA6B289C9495A1E6CC7D1FF
DC60298B0EE593D17B83D0A13BA77A9C399099E4F84116D52E5969CD42A07ED7
FB89AD49AD4F625AF1A2F671E3A60CBB746D984C1B03B4A0D007D5E236F57805
EBC78508DF4FBA2233FD0EA3CBBEEB58A6D3918573C8438BCE6FD04D13F17C5E
9CEB74CC64B5E896E05E0897338A8C79EC9F6D88DF2E3F6787C0175105561C47
B8524AC6F9EFF852910DBC01EC84C91D7A4D06C33B5A40C1112B66A70F5E01C7
5B675B54B22323195197BD435BFFABF3D55298EAC7F0A29B481DC448CC39F017
332F4692F6DF514C7A57C2E0213985DDD40515E7910F31BA64A7A2FCE2684FB0
0591669EA764BF690ADE3A5587DFB46963C1AEE7D4BBB7F56C34154E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD30767592D9A23AA6C1
E56A863D331505846FCB0E22541651CD027DDEB4CB303F733AA01D92EB93F4AA
8854274B18EB71EC2B2539F6DACD88AD19F7B80BEDB94D712AFC36194FFB831E
0CCE1C66F5489890F3C969C9EF12FC145981BEF74E5720D709C036188AF869E8
D791FE3DCFE97C403F8C18AF31035CA74ED20FBBDDC934E46C672803E64B9CF4
913F00A74D86AE19B3EFB921DFE1EE62F6A1364DB2AC7A86820D032D68A2AAD8
14C28F147D62B7C151CE79D68B766840E346506B981C4C25D93AE5718AEB05C3
DEFCF5D5356B1F80FB8B7B33BD1F07C58A58DB0ED47FAB9C30CCDD623647E2B8
007D13E2494CFFD7BA3B23B8D341620CE93ADDCADC733590F2F8D79A7129C3C7
D8AF3E613E52960D63D4FDECD83FF202A0DE23B0B2C5627F57DFABEDF792ECDC
E774320678CD98763BC55ADBD541FADDF1E67205A795751921BB291E1B9676F1
67BFD962726374DDF91BAAAEE61A2BFA88C8E7DA0691EFBBD520BFFAD30C1B58
77754B927D44910167462CC5718A35DCD92F7A27F87BE5106A5B46D78C03A086
6479B3EA229199123B48198EB38B7D8736A1F7246BDCC19D6B2ABC8CA46A543A
7153DFDE02E96C652CAD08E3C55EB678ED231EAB3C3A2C6BAEAC301EA314B5C0
34290CA66B3B84DC131ACBAD72E10836F8B8D1634F5EBAF8D57BB43430A3F85E
1659185786E1F84C1F4309F708B08E34245704BC7DA4083E0C5DBCC456163A65
5B3CAF2A85B068C74E61BCB7FEEE9AFB15D5D8B7000967DE2A5DC3A10F66569C
5340FFD62F1FDDCC54875A64C931F2D44F4576983B81D17E6FDD62467D7D7E61
24B33A90D4BC70F8F017EBA495E650877C57769FCCF82A44C7D300B2E7ABD839
98CEEBE4ABFFC83871F015928D7CCECAF674409692113F8BFBB0BE38F2B7D1E1
0D8506237EE36E1407A280CB87811428E6F11B819D23139032C0A7A75E7BC3F0
45731024217326062C6B826C02584190E77700A8FC0E5E8131A74EA1742E2397
6F9C2E00782611114F32277DEEB67F4D90E2168978E85BC0C65321DD05A2D9AD
CF823C98DB5287ECF63781B9828CB2DAAAE50C44F2F4B06F2D482F9C2C2F4138
DB632885F26D5041CA01DA5974FE4702FF2449366690CB7354
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC44184E183
3BDC0CF3D97EC8E6DF2561B49331578ECF6BF0E8003939628B934C1CEA33D161
1D05E59ED9BE05071BE95A8E1A84BA0C4B54ECD961F0EEB3548BC968950BF5E8
4160FBC4C2709D6B1A9863A27EF5934C5CA2043B9B0E5081E58CE7F78DDB9409
17756A2D719AE12C53BB38A15021AF9FB97DE82874FE58772E82FEE206948CA2
8F5870230E9DA69ABC80788F2F72CEE5F5594B2AD33DA5F0E0E54A39325730A4
38A6EBB464931916CCE9A37170F0C02A9C7143D722CFC08677622DA09CBFCFB4
CF3D13A7D2321812C81B5AB9FFB7279EC7FEEE5B8D8919E0D1E69B1FE209C5F7
4C4588B11876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8808C26A27C674BCA1D
A029B6AD3386DB54549957A9A7DCC731D0F06699DA05CFABBCE8EED734C62EDE
D4A8F360F63EFE2FC361E1EA453299493D312C76192227BE5824E9A8CACDC4E3
CFC6D20C02AEB57014209F2FA3C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A
280C40D63870B38E4100D67ACF9EB4C072D3196F99FC3BDDAB879CD224BD2B3B
D4873BECC873A9C71796A4714883621CA300ECCB25BF1330E865801A5A5CEB09
7A3BD2680A776E288BEED70181DA51D0B73139372795868271605175D3B08598
7172DC1CD4920DEBC3C4B0D6DBF2A3B3A9E8762D1956F9E3F9FEA1B89B964A7A
04D3F5A0A6E35A3550BE250F002073A67F651E70BA8FCA40C0D866A56334B972
95BFA4099D149EE93FBCC6272AF549BC12D2E892576552117FE414336D3F93A3
06F06252978B781B7F571EBBDC53A4272568BDBE227C15BF212BCBD52F01753F
DC5EBCB8388014947DFA87EDCC6CCB31B7ACA789EAE744D803921A773BE8A081
FB687F9FE275A78A90EA9F52ABFD70788A26EBE7BA4D5421A275A806BE5556CA
1B25F2298D1B77928B2565A93B24110D8D0F224B875C05157CD351DC708D082D
9A9FCC54EDE8DF91058E7AB0598BF3F458A9D0B5764CAB17DD6D4CC101215DE7
34D791697B6DAF0B7E6EBF4B3DEE0EECB3CCD1BFADD6009A9533EB573309896E
76692BD712FAD6C9AFB5C010E25FD2CCBB294DA4B303547F01D20F3953C0807B
3E840E1D1D755B40C834FA1B71BB4D72CA4BF8CDF622E99CE46FF5A5A0C57816
2E7812726F959C04D04EC6CCC6D5C4515070E4EB6AD127A7F946F4B419E3C27D
F1771C62E0D8095A1A876A023B72CA6FE435A2B184752DACE1A3E8298420C5F3
05FA5FE356A32BB5F337C05CF64D81FE3741D9345285081A25B0C96706BB7AE9
20C15804482D69A32FE0020B150FA44AC6C6DDD2C12840E74F65461B5F14AF76
071B1EFE2961140479458987FFE44E8010F5D4D89B893B86412505B6FCA5AB5B
C8937AD9FF4898D9706F61E7D6C9C2FE76B83BDDB2CEF6E05700E98E582046DA
8F3A7F53DB8790493D8EC144A3C3B1586B501DCC186F2CB0C4BAA5675FC93DE5
607B266BFD6DB5194F0E7318D7323F9B6752AD3F194F0C8ACCC73F7D8B3CD627
50F78FA3820035607BDBC19C7399F90508F5CBC17BBE0EA117C5B0FEF0DC2226
00B4AADD0F5E3BEFE57112980DDA8F55E68313BEF4CBE85820A8AD3483FE551E
BBE8B2E16CCC5EFD174057C781DFD270EE43076B80A374C5060D0F0776BD7EBD
A80080E3B3FC12C9926B4E53BF077361DE9BF2D7E5C0A53D49E72D754CEDB064
93E9849967F12E6319295F104EFA71C1286895FDFDC0172F32136BC107D8C39D
5F294B66D411739D5540C516AAC99B08ECEB7247122CAA752F7B3EC507CF14B2
1FF5BBADD8023AB9D1FCF2AC39103594EC513AC270F6596AF00C0F5C7D6336E0
E19CA338CCD852E0556CB04C7CABC1D37D26ECC85EC180EB8EED1A6E828D22EB
E619598C6FB61C68169211790027B87A0F039085C2BD7D5FC13534168DDBA440
83519C586F6BCB15AE8B3EFD96CF662C4E1596797E4AAE50E83A2958759F1519
6F9653441D5D99563AD6A015995764F5EB8B7FE9933D1A469A390397432293D3
349640BD48EC0155C85FBB37E90D825A61B6714D5788BE542A21A80B3A2838B2
856305810D0B9F73DE3B805A31F7B99E98377D80FCCAF634AE7A1D21B652818A
ABE247C5D0789B509F7B8ED0F3447145128EBAF2B73398289AC2F4A25A71F21D
C09778880C3C6E569BFDBA5CD453C377E8CAD05729634DF247018C44BF442CF2
CD3944E586A1630C50BF67A0BD246C73A1B7AB0D47701866E746D92A443744D7
A31E45B6840CCF66B4118C573E457D9645821305F52F4280487099AB8D50E6E9
73B13812032AB1B15BF4E432D2B8D624249414AAE2ACB7F4CE55C7881F536ECD
ADB8EB59599FA1A9E0E68D4CB6D1D2E899215DD46C1BE959CB5422EA5317CAB2
CF77B15E8EB530781738FD9B2B564EF827120876438400C2DC6389EE182EDB6A
138681B9F2F2134FFB9597B0A149C69800CAB537A70F9439B5E819CD74FD6E44
C7B926620725AD7F459EE1308D622A7DE0629D67916330D355E34F4C55D26D79
83018167926F0F6C9BBD9AF00926B8432723F60B5FFBE0E5171071DE3BC458B0
09309CC0F88823BCF00439E37537753D8170C833CEBEC8C6A32C9382AA303CFD
CAAF388EEAF7B3370C8D19E7085CA0411570A2097C931FA17D07319256EC101D
EC075337EE957575D2E30DAC431BBC257C8BF7E855146E31DA62A2E94933947A
E2E0B502A445BE04AF2C41F99050E87D5D9564C9487D1BFA0C595F4609FF5A65
A9E160304C2D343A45A4FBEAA16BA7C9B17AB68C6B28800BFC1CEE6807BB0323
783283DB680FC21A5018ED68B0D95CFFB2233D053E3968DCFA9B5CB3FCCAD2A3
077DD53E56E73E22D22F5558E5C0386DE16C68D1034C6FB3F1E89FECD10330A2
322F5040AF1434930FA32922CC14ADDFB49992BA5638ED589691F3C514294539
0D6162964F31A8A8F44A6BB4A34F1C96A66CE0828B6377E22EF3D536CC04148C
63EE9FEB2052FA347AE10FF9CD10FCC811FD45501778BD26FDA6B4A0E708ABDC
47CFFE3800AB99A8E4371B3501B0AA743E9B99AC90BB7BFFF569A3D18BF83575
F88CEE714FEC2E64F56D23E792F79528CEC0104634959B2E2088A63C0431EF8D
D99DFBDC81184F5B44DF738125A9BEB2AC10F0BDC77665B9C3323B525773A084
FA912BF939E99F984482F4A28F8942D6F61F7CF16BC7BDAFFA22934BA43A2C3C
72FDF630AC3F395FF88324B9F3DCB028EA565F81F035B035CC145BEECDB5F18C
2FB824A7F4166B2575A15362612FC212D7741D517DCEE39BB4F3D7026B5279E6
32149F5A16B1911CB819EDD7758D832ADB9596B804039E6F64FD7F844EF02C2B
BA2B765166717C1CA0C98CCB47DD04EE9F854749BDF620984BD6297069782734
A12CBD134C664271FE284E7D9633DBB9F5A53B890907F4C0E3F5EF7246581258
8EF964D5ABFF1112B711801FE3A2D664B71DCFFF3F2A8A1BB49D15C3433EFC6D
370067428214560952B01A303796FB5FF7C91057A71F3E78A19A81EB3FB2FBEB
3948FA3D1DB29562D28E8E66C1D690263371FB5D8E539D317E7ECB0005FCC40C
11B5EE6DF66A3A74F1A0BD0D99099ED5DA98D561541368B610BBCFAC134922B6
37EA368D12E2A40ED37BF43197885A2F02C7DBCC35232355883D58D80D5C3BA8
B9D37D08AE497740324DE5AA49F0E0C41A53DBAA991490998021D0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C6897CBA116BAFB72AB0EB87071835353368D815F03138693FD510
3767DDF6FE6FFF496B106857BA914FACCFFFF55192E10DCF5EA55CEE833EAB43
CD441A6B455C18C66C38B55221F5828F6470FAAD5ECDAE5B43D8A97B0A082986
A8842DAF3B0BB5DE1948B588FCB3E2B37A5C2F39F9CCF68BE7F0D3BF5A607404
D2387257B77A69CB5C398682578AD40F2243E60DA5A30435FCE91192754A9EC3
4D1F38D98B427893BB37E8AF3DBA58EF7C2A978A5621CD216F97A098C113BF6C
6FF493D20E76D1845A891F5058D8DABFA6B5D17440FFD03CB81A33D0041C9857
78CACC4DB60700C22ECDF227008AAE8B3549585E94245D9EACE7D6BEA94C108F
E62827C0BA9DB2A54094FEB4A64C7721C7B4ACD80BEFF23D302C6688EC3ABB2D
5F61431804DA1067221469158415996B0671C6C421DF8296C48B56F43C62D3BA
63CF109A3499ADC7AB1CD60E39376D31E045038AABE6DE8C790078B668D79D26
DA019A6B7BDD9C0B2ECD9EC55F129F0406ABC54E3B4FF23649826A2091A48EC0
E46292E803045FC7D7ED27129CEA43EF25E03AA1D0FAB54AA5821C4CB010AE17
9F63473ED3DA2A47FC87C5E3CF18CE4227ED29B9A8CF29DA98F0060A4FCF52F3
2E017E9EB5492088CBFEB4A03B6BBC1019F646FA3F67BB7A2C1F64D94F9EF1F8
710220648240DA37D2B0CC0857D5DA9B3EE1E389F33ACAADD2C782090D827236
F88F30ED88FDC3DC32A552978AC81AFA5B8C28AEEBBEF358B99F3820C596AF3C
8F81FD838DAB49F723CF34D0D7356F6E3655663F9EACCC45B962A67731C76AC9
8678B54E6E3A103EBC0F27B3B9AB0A69C94BB35DF189FB7EA3D31F863B91CF55
8F48C823AC0D1E6CED5E2423CA71E465117EFAA5A252DFFC66F8DE79827733A3
A34FBE1B613C11D6A81FFABA0F871FC82EC65DCC440E0242BE2324E36C7131B4
8774F2AECFE13AAF74B7BD78E5E38A491FBDC198BDD61C3E51EFDF173CE54A1E
878A870E3A3C5219031A604FE3F4EE574E2FEFD527B8C41A950E6527EABF6977
8E44EA099C985525FCF4EC00CBE67EC012CFC28723EC079721C5A3582CCC39C5
2B1A85AAAF39CDB3570C55ABE888DD64DE307DFB8622E5233A7EDD13E960C347
7C6632BEFE3B1499F225653201A8230C66DE46FF0690D39B6855C9EFAAFB49C4
7463F52A6DC120299AE8DEA7D1B5DEB5A1814A31ABC4826485EB47BDF73D43E6
A30C6444F39BAF8D39165A697A533F45A382E408203EEB041794D0377F2CC0DA
F1286142524FB200E2348EA9A0817887BCB9F55C5085890112C69EE1229CC702
4AE6B757194921AB9B225839AEA1ABF1044F67F5ECC4278AC0F0FF1A4D4DC3AF
B3E343F7A4D5C57D4F312EE53B414C85466C01CBC0A57E06CF87E71B725B8D90
FAE6D5EFF289A9B137B2148573DDB07F5E27A40BBE00964DB325318C001E4568
71FFD26EDA54268F065ECEC16354EDF507DB002342802A36FEFA77D26C34ED4A
B1BB401A84B4A328AF09547072BBADD5E554107E44160D89CE24DD88832AEE21
604D0FEDD6E58D26708BEF0C1E781619852B97D087197938D1B85B93D170A7A5
ACB750148D7FD6CF0B5B2E835A0F7FBD451B86BC20B38D6F0E603B8A0AEA4D75
6232E22A432EE212F87BA715977C4B574265A679334DA20F7EBB2821226B94D5
E60A1EEFB5DF6863D826751E20637B8A5BC4F631AD67DC320AEE97F616AB9F1F
F656CA5B23E0443807FC33D3809A19E2533735EEB440F382E4E0515CC9FD1F74
772CCDC67A48E0861895A424A5A0A9216414C6DDA9FC802B0F4617692ACAE9C6
921FF416129EF0D8AF161D0E0F44040833184BC20D38FCA2E54E3F7FBF30918F
E23D9B2ABB016B0C386A2798267EC1A1D3F1E216D6DE9D683227C61E4358A619
3DDD392D06D4EC9F7BA47231B7F47C8C36BE1BBDC59B4EEC32CD7D3C7C2FEE23
CE1E32D373B2FA3927A0BB82F73A6A99029E59F87728A6C5FF3F0ADE1EB4DE93
C91DDB40B4E307761658742587ABBCF9845D792716E75E63FF81289C188C6B83
56D9846FF19546DA90AC031C76502423E818A19FE16E942479286D0E1690BA9A
D7CD55D01B174222485E973BAE12608427C3FD501865604B85880B053A592E36
D0A0488BAC8E76FAF802C174E1A50B703B5A9586C03FC96A6F0FCE72F4094788
9ED65C9A6EF5A6CC38CA586464BFF3E41B0F3C4A5DD8B590DD235A5E32DA7BA7
C5421F23F162255E07DED78A529B13B0101CB013D7E373D4CBABA20CC13FEBB8
8902CF083BCC20BE6475802AD1AEE2FF8483205A841CC9BBDB50C623B7F42EEC
D3D54BB7682DDF4D6DB9326A5B07F654551D0727C28079F6A3B5634CA0CB356A
EE564274D7722CC96C440DDFE530DD02F9D27BDF43D73FA22BE9F2BA6D4F2031
69B55EF0FC5756D539A41B7390B4C398787BD49949C3EF19932AA1E1E4A2BD23
2A771AF1EC6E149FB9305922D06E7D87CC06444C0D7EF8E8999E93934E36CB85
7C46160AF5EAD4E94C284337C2DCC39787D7DF0DCCFBDA67F307D20F3953C080
7B3E840E1D1D755B40C834FA1B76A59444CA7C539201BEE064F7B85AA2C769DA
4EDD9AC25FD8580F0473D5983C86713C32602F00CE59B92B8A5F92EF9DCD93BA
2B0E1F65DAAA5DA710807E6ABEF95062E2EA70EAF25E9CB61C46034BC1140809
BEDC6CA9CB85354476F3534D7B908D5730D1EE3D88940F645CC893A8ABF5E1A2
260C9BEA6A4A6CDCCACEA3D4D346F97E514B2274652669BADF23B769EC4A8C5F
5C1C8C4AAB9CF40A1F5B90A8BD1ECD7621C23E3C5580FE4159D09FD6F85211E1
60973E292DF986A64F30B1DE9163C050CC143F40154F97892EBE9AD41E8CE89D
34F7EDAA341B720F5AE7D24058DF483C647F694320E47B7130978073D89DA1A5
EF78A9D441ED16D4AA44A5E376E4D46DA46FAC07FC42277C9405E5B531393A33
F366F7930FEC7364B03BAB7FD13E263C2549247D8DF74C6863D43B0261C6864D
18C4CD499B20534D33C822226FC199D261126AA02368D2CEDE02799D369A9E00
3844DCDC360E1E6E97A4833C40A5E87DCA937E72398018428652B74064381314
CE48952C97C3BB5F4FEECA2A8F28EF2935387E3210CF1A2479E54D389C417481
1E9E24F85A8B77DD6AE21621F960DF13D910DCD823DF8673A3ED9EAAC8FFC126
923CCCDAA7A4751485A9882335988F647D5F050B809C364550795C54299607C4
39FAA1E16B9860765031E331E895CA8C2B006980245EFFDAF6243518F1E0E291
4CE9D8D5283BC6A81F4260F674A875C33F9F42FF4C40D77F90A9890C2CCBC094
031C716FA0DF40E53D841115A7572824C15974EA3D35F3FE4966C29C460A0C90
CD79148DA619324AFA8E7B01835E579EC85681D27B2BAEE0867FFC641D645503
A357B37DAAF8540530478E24A73D3DBFDF76A4A160238BCA3E29CA7A4FB2C2CA
4E89F62CD49CD42BEF7188C0194F350EDD45406F6381B1E09A640891C8849017
E6E77F4DE8CCA66144F836F8EC133B253A3410A8802BCDA4238BAA68A699D8D6
0BC989D98A57417261A8F12B34EF3C9B1F37FA0152864BE7EF44CA1BB277BE9F
492E4D13C3295C2234F3CC6854EF95D172E1160FA3192D02B42E1A706A9BCD08
6545624E8630B8657F1F3BFE97412FE7C22E31DD168B8EFBDF9FE09187149967
AB61994F100F9A8E60F191B34F09E5AC07A93715F48270096248080DBBE0A759
88ADBC792656B858C0919BAA073453B24EC9919419478EB7CBFE4FA27538E278
0FE896E01C6D3D2577738F553F81135829F9118F4BFE20CD51190BD6373225C6
385265F0B26F3B72A68643D844B4F85DF723970EA00E3C4B798386E9F05EF7DC
1EAC41A25C3E5D75289ED307C730A1DA9018D34E86C0ACB8FBDA3F6372667019
3FDFA7097E7FB76EEE6EF9377B66F8BC530A7E1633F36B0D94CBD6731EDE69E7
694AA468E89D672888605828AAD33F1ADF6FF9635DD8C6FD502B4FBF5D125686
777F93E011D544F6C5022190082AFFEF013F696F06BBA6E66C5BCE592FEE9E02
033B9EBC45AD559E5FB1691BFDCC13795A2A6CE609354C2D5129AF2459B386B7
A2E537D0D348DE25B2081C4DE68461BCB99CBA2A11A006AA062694F556176513
5328C358A5A6E4CD301F5FE888E50E87F183BA1A84845B61318A6B1AA1C2869D
AE9E2DF467D460CA3B26990A2F6A77BC95ED851D7ED60D954F44ABE722C5C313
7EA0B02AE98C1243A03DF92D4F531B2621E9FEE21E8BE08DB1F336010A9ED67B
09A10B9FAF55B7ED5A627CC7EA4CDE0CD5E0EEB0FA4D0BB214B16C09E33E16D5
9F60B06DEF14E34A32F99D79BC380678D76769E7E773DE73456A96D77EF81ECC
A7A1BE80ED8FF0A9C5A3922C71BE4EA84D6EA53DC6DFAD434D6C14DF4430D8AF
530C746496535FD6C559850E6BD0E7929386015060EE423729D154A3AB4FF6D3
78EF8FF5B66C20C24E2E7BC8391BE9E1D31D34AFC710044C03A37A688DBFBD17
DB660FD16F2424D65612EFA74D76F215637DEDE9CF1701F6DF625D51818BBCB5
FA484BB489F2D18AA09F09AFE0F7B73F986729E796B64201FA53C3552134E40B
5496AAC2DA7EE686935761760FD12E32316B898E68FF01BD714994439216BE3E
D099D00C9ED3E5DC10399D4EFD2765D9573215024256122C66F143BD6032AC1F
43D9E8EC9CAF06EBAB65B1EFCCD1F0968292FB8CE82133241A0F870F02D282D9
10275714C3DCFCF1446BDA013135F3B1CF225743FE4CA80E9F0500C471790E54
B9048AA40148CEE16B33FA5FF4AE58D3BCFE770A205CC18EFBE512DAD5FCB4FA
C3F2894EF63DA5CCC4C632EA6BEB2FFAAEB90DE53B740310D49AC7C20BDADF61
37BB24758643DBD88D0A885368D1CA11201A8B64AB75F8D6FDA3CEBFE9982492
91D996E977602A8380E85207B2D3812FAE3285C601D5EAADA44AA792865ED655
420F3872FE632BF2D0AD3A84036CC98A395F45879A1AC0EC06488296A153CE42
6CF7A0924F63AA8B9115D995E6D3B8642F310CA9C3D0D2BF14F2E94CBB62694A
5DD0BDB90CFDA5AB0845B8A45ADBFC5A23B62B2F1D40422793237C405D79E0FA
A73AEABB87D8AF26D31BBD41488B3FF9219E49C2F4D2C8EC6A32E7D5AE05809E
5D495BBC23D19625D23FA1C121A826438EE3E3D49B48C4563EE187B5AF1E8018
900D50C413D56C2B116EEC620BBBE79C3865FDD1AF367D7CE62B74F4798E9A83
1F16475AB6D1EDFAF59AFEC48C4DB42D04043D2EDCD2BE41A528578EB0611BC2
798FE90D859D7D10F00C93DAE01FE476D31E697AC661337A350527EC6809E3FD
02108B4FDC6E7751B866367C37D817393F53FCB6D0491181E08D0CED521B825D
AE452DBB89AB7E7B09E3FC8676E1014CDFD69C47A817C577AAFD9048B173B79B
4E2743AD216AF5BE4F83DF015868842AEF35E145A99A367B6A0A830C582E32C7
E86955F9E9DCDD6B3DB41F93C847A2BFD64180227857BD00DA3EB6ADDB17FD0A
28013957B1252BCABE2051A097CC87101F638F2E5DC3211967EEE2D1ACBFEF95
8A0A80FA9AC4CD7925677B4F96C1A930B619AF16633242C863FB6D57BF7BFE9B
261654A5B7BEC7C2FBA0B284F67EE9B6030FFBE11EB3019BE7EA43B618B5321B
7C7B7BFE3C86A73947D2D5E427CC697614A4FE0BBBF7552A73BA7317AC222D65
C5926838600B8B2D37A25D2538212CE551F433FABF8D1E328966BCA14DFBDBC7
3D1D0329E7A41057B70D835278B4E67A231F2F90E4E863C3EA5B009AA617C33E
C8CCD2E5966F581B0617B891AF11E09CDBB002FE890363605D5DA86D13F085D1
568E8FF6A32D76F61ED719930321F08775A3D96CB597CB46142F993BE27D3132
6C10F7F0D5790909067C258C24F24E271A34C8E8467FD11D6D503C2946620BD0
315FD55074F4E7ACABE595521614C5585543E5920EF95A1628F59CB6EE84D548
E6DEED36AC519741ABC4051FF37994204558D614D126F48BFB9DA456060712ED
0A744AA719B196E6593CD0E53C757A8D4A11ABE7E2FB9A54D9A2C043DEA9742E
2477DA990FC58E46BB8F67EE4237268ECE3677DAF287454BEBDEA6D32CE5323E
AEE31A3F86CE824FB3E45F678E37B752C1DC8F45C1E1730F92BF802A74484EF9
24FA19CDEDB327A1C52114C735651C10DA572E66DBD31FFFE546617B7FCE118E
AF551B97F0DB585E72670FA382263E822354D4DBB3334549AA3ECB01843B5877
32FF0D397524FFF12FA497CC9C1B5388BB398E8D299131251A9331932FA9EC7C
030278E41635F16321917C91A8937BB59332A94A0EC87F99DDA0E9073D21FFDD
5BF579E0864250CA88386B7E02D47DB24D4967AA3B650CEFAC9BD448BA5A3060
90065AC97DCF66ABA1C8C85C8E558E8BE3964E6CBD5B3BFA6A8F721BE9F67609
7F02503F70BA562573ABF4BF18024A748AB7CA4F348A778367577F61C15EFD7C
96CC8F892081E5B31D1CA615F52D3D619560BF50E6716F9BC1ADB8E18F92B5B7
7A9EDDD618E5670443C0A3C9EC293328E334610A086977058CFA4517003F71A3
D31DB7DC20A4C0F886856DD20B135A55924F97E7B8F8F5A2EFD171D57FA4B6BB
682FDB47A2E8DC4C4064A6106A4051D25F2AF81BF9E7D633FA054425CFC7103D
DF06DC5378DCBB72E71628EEE80E3903A1DF423A3E5A635586E73F63BB8D0629
A79C5B0CDB3577B7E4792069663CC3CC9F79AA9A226D103F31C3C193890FE462
96B6CE43A8125A48B13EF3A2B43249E013905FB2AF014D30148DB052BFC7D6A9
403F28444784F029EDC6605F7EC4EDD174F087A6AD3A94BEFE3AAC17F639D1EB
8693E676BA3765521184F530A2780EB35B551962FA2DE7E5119723E6AA5158CB
79282CED60E08A38167A1D8B4E5C81901FE0C5C7693FAEA631D50EA0A5547C0D
B68225C0347F41B7B9D181FDA571BE34F57949944C21EDDDC9A72AAAAFFF48F2
5E98753146FDF0CD0870270F0F404AE44F66CCFD976D87CEA1776BCBB2E0310E
EEA890563C4E43EC75801740A3C9D71918DD09FEDF5B4333CFA619F13D651B80
EC33E35C7FA33998B9B132A4EAA9EA405080345EE25D9152BD87D67B7986AD30
9466C79AAB631C2CC5FC2D15952B534F9A5ACF9D140BB48EE2E12FB631C57D06
9440E793EE6F59F381D35A316065010074F62AC1B3D1F3A4E51831347FDCB789
DBA6886B003E2A75D17DACE842850FA4BDFCF8F6BC8E81C92C957290382D2E48
129DE043798AC08FA8D43B2E1DC65558207794CD43A394782AFE5CDA9E41C28D
EDADA7A5A035F204B83038775ABF6366BCD895CD8B2CF7BDADFC591FB031D86B
6F06FCFAAE6449510E667ED593D8B48CC19619C0BC73CFA86D5D9BF670E8CEA4
459BCAE55AEC7D35E3FC98B730F4358436A3395A13CDCDBE9B6BD24C39E1432D
BE3BBC6B9179829A451E35191A5F42F67D2FC54F264AE396BC1F9A137BAC6E7D
DEED2E4D95A4233C3EAD9673FB172AD07E50A76891FE29AED4C1A28176F8A55B
3F6521AD16F508487E13191484EE9E9FE2C99EF9F22EB5C6E7939B95F179789E
A7275548C88655C6895892DBD596138740FCB561A298FFE33C36008E00A86D6A
B0B42DD87A4E4FCF97BC8C2D36E75E28C44953C0D46726979B18FD87D30813AA
63763C09267C88D8DF4EC73BA6419A7124999CFEA9AF3BA15F3DE6880E86B6B6
A33AE3DABA1B2B3A54C727D077CE0B53DBAE96880651AEC5A672529EBC4686F5
EE36BAA962D7334C227552EFACE79B334C73250843BC3A9186E8C9D40F613D93
94AF76B03651C3482207A40AAD5C25AFA8F44A6BB4A34F1C933BCCD6E6CE5ED2
93BDB6104BDBE1F70FF55AC501CA08F04A3495DF9ED58D167886F0F818454437
8D92CCD6E16C8150676576A17212EFE6714DA958ACF2D73347F5B86B0494C6D4
336AEB83A6E00F972513EAD845671276C3342AF0D3377DAFFED73FB783446BF6
7C41806910223AA218D2C85CA873754A34C928262CF63019E4EF53941EFA1008
3D54D3958803D30ADFEACB4974FD995158AE3B4BB95CF70387C627AB64CBF22D
AE3F37DF1CF4B9B3A9F04ABFD1854F83099C17FAAAFD130FC40F7E3349CB03BD
3297C04D25C2EA8F51ED29D606611F133D7B9DB97ED9C435B3374F45AF41063A
4E40563C5BD7791988957FC2650D7C1E80A9F7E025748C33BEBFF0AEB8488203
CB024049B4B4EE365DCAD8A5433281CEAF3FA3B18551260D3EC2B6A9AF39DD7C
E35ADC395D0F98CCD4850069E5F8D10133C82AF58616D0290BAEB37B948DDCB9
D73F7303DC52FF10DB19868FDD19C8F5B7B8C9C8EE7693AE87F6081DD868DF05
C3E0B3AED92C4F7520C0A38A6B58BFD60F4608C2DED2F8BF507C9CD68B3FC27D
254BB973BF8F3914390E11FD0130C80F4FD2CF80AF7629D53392897EFE18A540
05128A1A4924D66CE0B6DC60A254DC5BBA4BF59E105B700FA2389B71F1048BBD
D95E4E95F958869000651698AC92EDBEFECD76B3A2AC4928FF0C869FA80B9947
F110740234185665F409FFC130DB27879AF2B9A8E15CE1DA79F903B36E66AD4E
A3CDE8B9EFDBEF3656C75B06AA3C0FAFD38DBECE31856C488775105BC5F6DF19
B06F563B76BCFFC471502F7D98C5B9DC1DF83962DC2AECCC1C50ADD93477273C
251BE6C9C5B5747513AC678184B95292892E2A6E47584BD5E9E55BD68AA67372
7F19AAEF8D1D34D4136F5F73643612E8B79371179655704A72CFC805648AF548
DF4B8C33F95133AFC1C124BBDC0B1AA148AC2360C743805257BF8DC28F9333BE
36BBE3A2DC26AD46C50A99F058DE70A36D42F452CA4D126AFEAF4A2CACED55DC
D77B9C24D3723006BD5DE10266609886AC6D6B3E40E406FF525B2ABF948BBA7D
31735351BB17F968F5A1DD37C2F78E97EF1E9CFB59578E2DF4822139251B9BF4
1E697134143D76C8B2BF8607F45CE3802644669C336167AF1B9A0805A1442223
F1DBF0ED5A4F3224933D6D3E00FB15A56C113F239B3FDDB4E283FA7290BBD57A
7256B7FEF7F3951C053AEBBE91534B55D02A134F11773F5608CFAD1444843A1D
4C4FA32E4E2DDC0A29421233129B3106F20B316720F7FDCAF5D38F39D91C328D
8B81850DED7E0DB299CE27761EECBF3465973A8B79BB9959152B87371B1583E9
1A68CD52ADBC31F80FE1D625851C8346C3240FC999E26492A489453FAB706593
1BB598DF1EB51B2AB64546B8DBEC678B6B2D9D508F3ABE5E1C84CFEB516726F3
80DF14293F126426B978482F9041012AD72DBBD1111CE20480B520F5C0F70B56
B9ACD40836BC0C94C4F920A1D1CB1A02548F82897948B05604DFE73F2CA63A48
EB00A741F91059C42F64E1E689E82FC32FCA5B7FF5B5537417134969386D30A2
FCF851AA62ED2115C313D0DCC98DF33C422BEE941C005B0C7298A77C57626840
CE747FEE0F41D523F435E133EA1D5EAA952ED8E905FDCEB96C08C7E86161E874
7036A559524B75F8FE95D9D7489E9A68D3951D8F9ECEF972731B7D1132C3E5BD
6015CA8DF57CD2DD1A7522B09B3FE245E989522EFF97401A6AC7A743C5401DD3
52F43A2CF8C5EFD20FFAD79035350D317C6E6DF767712993CE3F7781C590B850
7FCCB07A7EFD1089CF55D40AC43AAEF3A9F60366CA05AD33D52E8180B7D71359
473C28084070515EEB0BA2CA63916126879D4BF2511397565F96CF9C6D6FB10C
59A8F466C75D3C2433C8FC6F3524751214691EDF58FF957F61D836C0BB1FA341
AB2315D6E9508FF8F40F4652359E733E22CC81F2C17D6633100C0952E03013D1
A4E608ACA6A384B262BD58BF60F9C7BA50514B14A6350902832C2410DBF3300C
992D6873D9178DFFBF15F1F7D1D50AFA41FBFCC7351645C8A97A39F148B253A8
E98C8F892A697549CD60A676FD98EFAC0AEDA259DD9A23095B6DBBF994BA6FDD
186D311A3D1BB87927E708494A2555757B1C6F16C5E70E11F89A45E75ADA3CE0
87E65175582CD58302B34BCE1A1CD695139F7C5731BCC0EA381CE689DD8E6B38
82CC934B38FF2B4E63BAC4C9B80617F163CF140A2C7906DEE7974EE07A3855D0
EE58EF885DE2FFA802F7940BD4C44FF03CD270D20D1488BAD8E0ABFB2A7A281A
CA0B75B93D9299F0DCDA9492E77E92245608D0C15C626B14DE3BB752C57280B6
7B3BB6C57AD0E5AA0B39E36C53FECA727DD29CCBF0440FA694A386B0DFABA309
0E6F4344B253AC5641ACC942C9F480CB63CB095E10248A5065D96D41ECE091F6
52D6D460C56A337117BA32A8C671045D99E37BD18D688A1DB92ABD34DCAF8927
AD8D4CC9AE3CB287943DA33C30B920C168DDE51D29056725E0473202B2648564
0CFE75AD66AF598EFAEC9B1B7BA729B9409584E417D24F3263ABC5C46295F0CD
F985B2A706E2B7822F708AB743990E34931D6C99357B90A7F2C7E62912301D16
DDA54BD74D5F7FF119FCF25EE4C59CC8F75B80C8CBE01DAE3B8B6DF5B6719B0B
49B1F66FB41DC45C446769EE211D3D58BCD2CDE5A8C1F4205CB1EC9307855D93
168998E3DC532438993158F5469CB66797506E3E9A6EC6C2E13B8B9F038A99B1
AA5101CB82AEFE0804140285917C7879A4B18E275EB0CF680A6F9FDA18A79B9F
84F90EF6F1C240603711258F74E54B577CC303364DC67F659BCF39A4A57032B6
1789236327F49D7B7CCCB88E81B371ED1801C35C4576A11C6FED8DD785F2E5EB
F5535D96F2AADC425EB0436A79B3582D7ABD077BC9B9A8B231B71AEB41ECD701
46C33992215F2F0ADDC74235033102B42983A961C3781825BF8E7748D7D90E9B
D040DEA3E93D93E285DBD5A3446C004F7C35B35E022B88766779630589A1956A
84B114EF914A4EECA469BD8627F13E08A242B2514C2461E83B5D56820F5FC636
D202E535663F5B8931416A3AF0D3AD517922CE9FE4076E0A7E843515E66C02C7
2E13688BC5B40B9A2D1D24D6B66B6B6904F4076785D6AE7EE236FD0983157554
79A58894D4C954F2A30A0AD52831168110B3B4851359691664A09D59CAE16008
59BEB6FFD49307EA3C023FCE3E143F3521D4ABCC0EAAD753D9CE4C1362CB48C2
0942EF911062D2BE053128E0AA63BB13CC4A79B7559DB53E2C74D2A154EA44B1
3B1BC773338FC923418D1B384D94C60BFD8B74A1AD97FD605249A085A6D6EED5
2434482FC20EFFA37B6CC0AD35FC519C17AE2975E227FE0654272EE22E365114
46FD9B1C6AA4C5EA9803A568ED5BDA56E9C81B4B3EA6AAFB44D3B0EB39A56D2C
EA65F0F6E92C1C21C4A5FB99D887647F5661E31B27E04542129AAD67DE9503D0
0F915887CB661FB5960DE976716D45A8E54128CAE6038D184DC74E2EA8E47346
B6E1179383ECFE41299E3DB183092B23D85C00F4EC8EE868767B8F4AD6AA94F1
F905F1F64E3EE9FAFFFEBCC7EE907C97F8C24B5B35F761CFE2C05D314D3F93DF
294D4736910FB2A3FD6760E44127B995ABBFFAD3D3849FC1FD557EB96058096D
2572FCB06202FF8DCD698BF1E54CBAE958F0019606794F01AC17C44FE54596E9
1739A847F7A8FE12D433BBDF5B1A3D9383A9FFEDB62525346117F16F4B92F83C
543A9EB96E6A51C18E0B6833E11AE6F735F906E8FEC8F04A4BBF348A3B99618F
3E0AB96C4DFE2FC01100836459EFF2F4B16D4653947C960E75F624B36991806F
E106CE3476E72D8C5BA65B881505239A6AC1DC22D72CB08F2A03B7FD0F5C387E
66A2A30480F8759938F0447AF72DFDD1C28DAE9148EC048184EEEE28C3F6723E
90E179B841E1A226AE2A2F935BEB81AFA356DCF1AE538025A388536891CF9796
CD02FF7E5D59EA7EB35B23966FF25A76764950185C1361A506122E66657732
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD403170A927F496CED1145CFB45CFF0726D1E70CB4F
9208E91D1A1BDE7A973743521EA5B04430F3E9D50F14E5CCCA537A0C7E48B771
1511737434C5B5DACA5679ADA69C578E76BC6A353898A719E7CD195271303811
E9084AE80936F2B089231E6BF13AB85DCCEE46E3DD3464E1174841078D73B985
7D3DE3A550C74279C70F13C171C0AF0550F97752CB10A274171AE6A1990110FC
550D41A501E7B8F8F268EAE9E72113D5B5C8F51B28CAE7383AB171644CF51A16
6494F4C2585F396E54D8C02BF88D47E96162BA6A542A120B4C84EA844D8CA8E7
29C2CDECBF108177EC3EFBBF3F568556278CB92231CC9CC409D307A292EF2BE0
377DD3F2B544C41D92B302383FC197A3093B609A4B0085328CCAF29E3CC12D7F
1A3728582010C71760DA64EEB2E66C6B6798CB14CE5451C36748DD3D2BA55327
2A21AAD20CD8C9C7E980800D2F4C0A078CC95890A8D41134A7D097761839BC02
D9DB75BB830332AEEA17D3EC03BB676C9744001062D86E08380C42CB301E4C2B
90D0A709AE838141F0D8665F831E66951537D3E7BFEAA0865EE9824B7A762B17
9B038D83C1A7DC8585EBA384C876805B273BA42B2C11C312E75BF87DFDAF1341
D7F13425D5065041664D3731862DBDCED71B5F73018E6148CF21706B503DDC6F
1C72AC1F449EAFB8E12BBB7DB0AEDD624969C8E531DA59E5605EF69A5674BED2
3B365D4A57DE723691932E5423B7EA66192222D6A2FEA3131EEDE8AA73133EB8
9F73A803BF1DD7DCCFD57C49A66B5E32F3AA47283C7A8FEB796EC9AE611FA97E
A1178BBF5A9010E01B13C1281739212462D44CF94F1CBE76B5305EFA5A885AC7
1BDB95216DD86849B794B24BD9C65097D544EFA80F3B37BE3DDEB9D72D5F2B16
3C7704BAA1E9226AAA7359ABD208096437FF2C53FC0E20A968494217E7F75A6D
D8FFC3A8FCEBFAECF735BC7394533E27847B69A1690434D98387DA0286B69E6C
339A9579775020B371F9D535FEA885EAC9B1182D6E3ECEA3119850546CBAB0A3
ABA3958129D692D3A331D2874B0AC0FB00F04ED05B257E979B86FA0EDB416D62
02211F1B87113F0C3A13DBD6100820B0ADEE76874A4CD96F8D648D3F1E8DC113
19A8C632E1889CEA0E509944AAB13F0775C899A6F09F65F929C15E3D18E8A26C
F1506D0A99A56D9D597F37947A6EB1E588ADD1E4EBAEDD5880154583CA205ADE
664CA784AFE278C8AC740B0F23B185FF0C9BE4ACDDA590BA3D97BEF3090EF470
254993FF0AFF3B9042F32A0FD6872A6AB104FE1F8FF6E04809368A8340CDD107
9865828DE8AAE95C9F1D3B150403A1B2502DAE9974FCF8CBCF73758806AF2557
E721BC431D451126
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC19A29
B0275AF422EB548505307B85E2D428B2793378041115891F0B6306B6FC72E4B1
EB87B2D527B774C765DCE58B7F76786DBCC6A57280753DCD85073376B5C15095
AD4E14D9CBAADF8EF93A933795C0CBFB7204DC62340EFD3F37C26AC08DA98886
99C2DA581BF499925C57FDA26C1736487F2BDD3FF833163611BB26DA01367B61
774D9D6D569355D10330C9E14A5C5F7BC9AEAE35088FAC2E174B35591D972DE0
DAC5D8E984E967A0E8A93E8741F4A8FA89EEEC2556CD0D4D1C30F4D0302CFDED
66881FB58481B2A5CA3BE03F9A9EBD52235D56ABAA85003742F8271D715965E8
9DD9743B1DD19C90C9AFAE343A5877AB7D005FB3A78552A4826AFD5BCB86C0C2
26DD9642C96F6D3C578E819AD7EF3EE7745D6460F94622AC516E9D777D6C653F
CD96F07CC74AD17A93D3206EF4D481A294B8874E021962213E923ACE057116BF
383D507CED4E5A83378955473442B6A85A7C69A016069015EAFA706682E48B28
E8C9CE4AF423D49CA0DF1B37BCD6C2CCCE1B40173A0E450B1E1CC5188FE9A784
849524F95B87597782D7CCE2196BACDECE8E2451C2BAC4FC371564757725845D
B7240F7804FB3371973117CAB537A70F9439B5E8BAF9E2EB03F07F09F17189C7
C0F139E2F261BB8CBCD84D39EF0F0BA674CBF899EFF8FC80D699581ABA7D9D6F
98BBDA827BF8D401514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED289B59E
0F97561179C2C0F08E832E2DDBE7C66ADCED36369AF8B34D445FF8B74EE2FF24
AACF3D958348A87DA63DE672CE8C10DC9103EC4853C910DC7205541B16C0E6BD
1F1077D518373F33FD234772443524FA8A11A02AE0B8ED0B834A3E3051EF1D81
7F5405D87BD0B47C50A30133F267F34B10F3F3362BD2CB26778A212CC7282D58
A4486B7166B269B174B9FE9BB5FE94379B638B85AFE160FC1687A50867043566
1C462AFAF04AD44B11721927EEE7C26AC6210E8D4EBBBEFDA9D435869399D92B
E364E9390003F437D9A3A0A4E96E82C73EFE4C84FE034CBE8554026B75A3A2A1
4D27E98234B588434F88042B2956DCC18AE1C1E30A0E78EF0470B3200E566399
5C3BAC056B0B53358140F209905103D3B7C48B8EFBF4006DA984D240911DF09A
7B36D1EB2D9E4311A671CF7A660039A2F36055BAAC24E2EB1C58B902BF073C33
04E4C8EEB16D7EC879F6E9B1C1E8C9AA035ACA1C42A169FFAFEF7C4751BDF434
95DCF8C4F6274740CE31EEBC6E363CF7A318738C841A95FCD30CFD43A02700DC
099F78035093EA6D9CEE7427D41340F9D2987C051EC94178D91F36440E2D23C6
CD2DF4A349A2DFC2A1D978596F39D199116D95612BB8B52086679E50C5E68B67
8F373FA078FC7272AFC26FC32B777EFC3D1F73A61D397621181543EC7117EABE
A6A31BBF76B717A8CC0B23757E96D1E404B1BBDC42459521D54144EE5699461F
6D258CE9B3BBA9321EF1F3DF8819FE785491E998A77BEB9BE59525506F9C0ECA
4A52C1C4AB4EA9235E94E505E3605EBEFD5FA1AB4D32269620778BA0C6E0A565
27E73BE19DD38D43E700961DD0EDCEE6CE7F6AD035A435017F8EDC6CAD38ED8C
AA60D19C8AA1FEC0DC50899D11BE76EC06E5A9D3143473218B6E51F82EBEF76B
E7CC8B80947EB0E96F34CFFAE2AB99ABA68FAD15D42971DAB17CB1C3B9FFE07F
C35008BB8A6F905FE0FEC299B12C9D2C71B6A7454237B652CAFC7937D1F49007
A524E4F3BEB894755D4F2D6944A68175A656514425E96DD970D81D4C3DED38A6
553ECD27B328EA84D69069A786B4CB7F76E44064045778D4D8ABB56D7673C5E1
C6AE35EA0AA27644AEB03C8FAE9BFFFC4147A4AF8F821BFBA1A0F86FAB8F94EB
D6B5258FB7581BC0E605A1D0942F3322C2305190E68E3A3DF08794284CE3F6FA
6E71C671504B7535A3444D643B1ACD9172F151F97F266C7E280E64EA16DEC2C0
50C6F7FDB78D9371CEBBF656CC3101D6E9B3D852CF1E3480229AE081FE8BA97C
63E4670B912619A20C13063E6730387C584C8C75794C620B2330FD5BB8F5BC59
A60F63CB797C09CE1CAFDAD8FBB5062803C344D0CC32979A1EEEC3F9D6E606B1
C0C840DEDEB3A8F8A35FE58B2DB2251EE7EFB4DBC694919D4F41D01894C91D8E
03F68DB5527C37459A298C63AC26EEF70C0EBB8C4AC3A3112C05435C4F69B4C8
64B69F1B4BF61C360D64F58C77CEC3005810B42BD9CCF91A006C7680AC05E895
0AE2BB10E6638765C46EB7EB971E2636028109A1C63F58957883B5D74BFF42EB
0738DA3531285EB0855B746968AC7B9070617CC58DC3731E9CCDF34F69DB81D8
6E59B51793EFE0A801818D5631BC00CFE36F7D76A80C47BA74F92DD9B1EA5429
A399DDCD1C52F0E099C5F63BFC6A074E90F0395C6C5002FE74B02B3D0C6B9B20
1C3AC5CD3117B29105CA6DB57706DA244B8DFDC8661514CDE029EAA738F17880
9EAD7AAFC99AE3D4148B8FAD4D27665BF4CF6A6D30104E376490F561BE71941F
283804B00E2D813782B752731F702202EC7A7D616DDEEA23174A6476D5F4A9A8
C89CDC8AA291BEC512B5BE83B18FABD32654B2CECB901989FD377E910507FAF6
8C8D9CB9CEB47BC8DC7B5B91416861A6D90025621C1D1021B2730D8E6F613285
A713A005746307FF70CDFD1C825402103D9308A0F3F02206A7401F3159E4A211
A399C80BF0F828D22DF0E7AD1E993050B7C7858ED8D0686F0EC0E5329D351BD2
3F636CAD410816FC757F595B134E7E0185E7D59DB1E460578CBA2EA4399DABA9
14DC1E5EA07AEAEEA1CFD0C18B4BB16F66FF259B115437A8EA8CD328F08D5A64
6BE1BC3F1D7B12B234A8B35ECFB413AA5F53519AF53FF43524716BEE388A4307
F471E247D8CB01831ED3B105F3C00355E52AEC829F944810ECF70C24F5811B53
E5F2E0E7BCB58771919BE9121625E44231BDCA6C314291F7550BAA81946B5741
EAE03FD28732CB57F2E95555F4EBC6F97D187D7F79012C30DFF443AAE0A3F0C0
50A4371678BADDAC57F4800E30318B8B6D1BCAA9D821A658006E6AD508C7FE5D
C690590583604E5F6DD93A42C5511B7872D949E0FE00FC09D02380CB5A55AF22
AF3C69EC4223BE35BEF421A0AE453EC1FA3C30E880E7EC6F9AFF551D8EBC267F
CCF6E19603BC6CD402A087A7EEDDBD840B31E08031DB686D5752156D5D543F3C
C385290BB2AF56A16FF6A4D6322C25A86B5D41A333B6E5994297712F338DBD20
9DB0CCDDC3425A6901DE59C5A8AEA6BB0567AEE34501564B9514FD3F98764979
81D7F231365BE2C51E738E9D56A523C16C7092BB2677FAEA4EBBE497F215BB2F
C9E628244E8D1B1EF3D2806034C7C1831D53D4FF9DB92D17AF748839EFF456FD
952E94337FEF0B6B2D1EB3FBCC801E5084446144E22D8BF12DE44EC69231F93C
FF3D70DE78262C560FAC2BC019A1711978AEA4FF9F8E8569535514E736C25F23
78F0E9538D5B14E8FBE71F3C5EA18F1648A2ACA6D4B8ABDA4D671F194C4A1DC7
9F2A559F9966FBDE2B55A8B0031DE455BEB83DF8971CCC33045C31014F7CE5B3
94E5C468943C93A222AD65F8064771574015D490A70F55BE1A6C135C1123CB21
6D7EA45E81A167EC7EF8F34D00DFF4C3EB87771381D115F0276C212CDDC05430
19B13C9FAEC0D5C3C68A433168C9F09556C25F0D0CF5081F323C65C3D953D33B
6DBB594B15251FD20BEE1A157259C78BF6B46BF1C0A48402D953810CFB3949E4
4D9E9C016D4D64DCEC325FB1ED9004C10C3D7DADC4AF34DE5C0C5E3693094FD2
953D7C288B725E2F042F841CB8D4101FFD5934A377B4E67B591E1A973C2044B3
F056156E2D3A057EE07464B3BCFED4905B333CCF344D425DF36EEDD62B70DDFD
CE42BE4F6A0ED110E3DFDAD7264DB7C8FF237D7A4B4C37AB655FB13986EF2B27
553860CD73719718EE66D5A70B41056CA88363F0619D0DF82D7C075E0B4F451B
1EBE025DED1E6DC18674717E87E6481781D9C64F739507E1BE86C0818EE1E923
0D3732B16F984C8AA400ED75E27670EC98B81832BEF16CE5938760B6854C3598
A661F26C183E5701C3359A17F37484BC532C7F914B701EAA579FC9ED7BDE49DF
545D858863E9D68B7B1F5B723D6CB6A197EA256C77BA33479A7B773570F6EA3A
5ECE1987E44233E4E54C8C02827D45BCAD891446665E3DC048479C194C6B3749
59C7223DAC1238A38EBBB07B8417C6391EC56F1D1EC252F26F4AAB266BE7A893
491F55E57A5A2C9BAED232E4E35D5DCBFA73C577489177E4C7287E14D6E2A46F
BF1E1765E401B4945CC860E35AAE32D9147BA5CF70B4DD7BDD4358F0A5DA7929
85A0B9B9F006BC165E2771EBECE973CB24F36D2DC9B6AF6E269ED5ED3AE9A16C
8A7A9FD100D0EB0E8E271AD2DAC9CB5F1E2065E30ECEB28747C5C569F841BF2F
DF8890BD04F86552B438A980B6356A4F1B01317B126EF8C1853C5090BE07ACAA
794C44387DE589F60CA2907695E8126A02FD4132885F81E447079525DB70948A
296A27AF45C20F1A7E6FA54729B2EB65ADAA7EE86C11EB4A5E283D1334AA2194
3B4481CDAD0AE444E8777E4FC93AD2EB2636170D45B0F68D246C4060E8E78E41
B27C156F8F31D45010B9D6976F67D2E99F0938748756A64AE0DD42D1293A4851
57CAC95CB37B72BC937E3C07B3FE84D75C6575A255A15A7ED4C7EC70E009D018
AC1CC6AE2A18BA71E40ACEBF21A52D28584AFA90417C3E0C644328C4D28E8356
366954E1B1AEB0D86166E82C4CC5CA07B11E82EF7CEBF236B4D6F4854EBA858D
CCD0FBD4428D20160206DA52FEE4F9AE7CF3E295148ED4B3511D8AB3D925B339
BBCF2DD07AF914FECF200A60A272CE036F098251F70F2E5A40DCD7E5FA9F6538
E882B21DF95A6B312E78DA9B6CE1B74AEE3628FD7E9D2A5A9322C3496DE9F8CD
0DC0DF15CDB850698085074EF3D362E54724B6016F995106B6DC17A3A8C2A741
A9AF12E60A70F7580E69F166475E3C01186E642AC8482B210AC8AEA5851CC95B
C8FA8CBBBBC884A3A6D33C33F820718394A08317DC3017EBA86E0CD67C1370AD
397972FA4E6AC2E7905B5C85306B7AD4370787952384839801F0E5EE283AB653
E23570A14AAA7FA83285BC706300F97A63D663DD9D66833989ECA574CE10A711
121F5453DABCA876E8E2E98AB3708D642413716245D133AC14639E2A871D17FA
8207E34A2813FFEE93ABE0CCBE5C4266374F99AF99479D48FE0C11E207E737F6
6BF1CD97DC5818FEF25202D3C835AB3ADCC16A43614C015ACEECA89BA239B3CB
CD1624540A9E1744412EECCD2C3B6F08F8A6F0AD5491E4721130AED50D8BD05F
3D27874CB9E535B3BD110B9EF060C0BE482116525A49779152C4FA2A9B6E0C2F
CE33612E7B58372B425CF8B4E0E09DF755379A910AA8EE0D37D463D9746EE32A
DAA71D0132483327F99D4205E2C4F3BE8F03321A1AFA58A6A5E4130A735B25C8
F26AA5A8206CE7D075BC24DC51789DFDEBCA79BCBDFFE8BF87C761C354E5B3EB
89E2211EC3397904120AE9B5DFD8CE497ABDE07F5855BA221F82CAE03A77D290
7F61D836C0BB1FA37AEF8B3159A4075180CA63A3458DCBD8E35FF3344678D5A8
7C752EFFEA64FB2B375CABD196099A70ABE2C0445F9F94EA43EBCF92C5EBC253
1F7E865326B2685FC9106D47153362902459FAA592102CB91C4ABE9F1A5EE1AC
40BE9175F94B2E8BBF7D57E26ECAB1F01700959B950669B8E6EE7FE413FC86CC
7B8A6112103E8C27CA59DDA6D011F79F47EE65E36F20C09792F56136C00CC3FC
C39F81436268695AA122AF8CCE7BD35DBFA146C63D82EA81FD45BB2FF94EAD92
AF0490C38F2A9967C2D0E9F1341E1D6ED6A4644FC9C864164966E28579DC2EBF
D5639D6B574DDE38F39F6F12E5D1E4829AFA1EDAA626BB6BEBD5C772F8084E7E
C2BBD3C7656AD6BE22F9668F00F488F34F0D63B3C4A2F4CD5DABB33CEECA12BD
18993CB5E944F2816F1911730337D7CACEE96F747F77069008374573A28098C0
412B0D9C054DD0A07A9F81D6F21E6287F052739E4E29B093694D110BCAE12C84
989D53EB4AE19671E28A88190A82BFD63C0800138B54C4A908EFFE52E5F7D592
75475917CDA7D46B9E1783E281D4A7FE7D4B1F38ED17182D6A9E4D37B024D5AE
5D960D8DB9D4CC9BF208B94037A003B81014E84DF200BD69FCDDB199BEE0BA27
6E45B3A004847DCE7ACC19FCC852BD6EF38D8CC5157004D8B0FC9F1B216A6EA2
A2118A03CABE7D790729476D22EA8E529B40F64530677ED38FE9613AEF764982
762E39B8F0A8FD7D2C8F25AFCDDB480D5433B3E7817AAF1CAA397C33CB25D007
3BD5C5C76A32DB4571593E31DAB4CEEB82B323114D14309D46591D244FD49959
E9CBD1FB73EC1479A855CB2AC0102175D8FF8A19744A6661FC882A94C640DC9F
69CEC65FAA2560BD48F5DA62911EA7BA77A8DCC3E99FCEAF515A670BC1C8B82B
6C0109DDE6B9E41BD8822137D2285A2A7EB19A9D06A5E7C929845CC005750548
2A444274FE8AC0606B17E0C0010B9FF1242624BB2FAE87DE6B45956DBC428CD8
7225C7FF285D737C4668848DB7F94B4C0391E29C8DE3927BF745C3ADD6617D05
87F477344B7C709E7CFB2306D5A7FBC3C193A716D86FB2BBD04D74BE6F5EB5CE
CFCD6D79227B779B7F6BB59716009BEAB2980A23165F8A2A8C3D6704EDFC302E
CF6B94941494F8C7E4B95481E9F5909C2F567B832377D9BBCC125C4FE24B68F3
77713B874CE30610498E00BCD528F1F7E9DE81E4D6ED31AB648527A42DF8E1EB
6B9AF9C97D1E8EA306A5C86F28755D777F431146D11506430816E9544CE0921C
237141C480D655B569D26FE9E4D106D1DE0BADE8D01E5704A3D540D74754F590
F6E1904F59E08444C64B040807788DFB39157CC4DE730ABEC920FEB5EF9D3F48
75B19768107B17C12F3C8F895DD5DDF2F86C5DB0C386B7CC5127AD1693D6A8D8
2F04644679F124EC0B8B29269C83249C15449506DA85183127A0CEC9F9DF854F
E2C537E038A7FE70CE5AA2215862D601AE7600DEFB96253F391BF9649BD97B9E
8E0FC789CC39A262A30B1AF3ADF2426421F0093C6080B27B9C18F008623028CC
986221DFE6D7DDED61B3810D705127AC414526CC5E5CD23C32AA12F1137D06C2
69C9D4E398A6B47BA5477B62FDD330E868E48BA08991F75514D6E66ED529DB35
566F299ABB918FF662A55DFBA944C63F510F62099D4E4FFABE8AE7DCFAE714AA
5FA59F2702E98F17191730FAEF62062F5833BF54B33AB23A0A9BD2B322312F2D
2B8A067AA40EE78335EF54EE2E305DFD6064466EA7E88A21D6850E08F3235BB6
4A435ACC5484AD230FBC4E02637DEE7BC18E15918E7C4F02F79B6D706C536138
5E6291B3117DA9A8C3753F44C98980F7A23A3CE8A015130AAF06C2B4E5D8DEBF
D5918961161AC3C4994ACA8FEAEC099361D6D4943031B793317789141CFE6117
877263931FA40EDC291FC50ABE20BA2903D3F7A6D00D404CD4CF7E8B90A0D680
D80EA86235E3BFAF0844761476C8FEFDEC7427547A561E7F6CCAB0ADEDC94E6B
F3124232B15691292708A917A89D566FCA2192395FA38AECDA83080878915DE8
B90E73ED886FF7384C439B69A184F8E4A9985051C27735A2EF412445F5D5BF99
8A78F09529A828117C55E3ED89E370A69B3B642DFB3B09A267A6C1505B756DA3
B2A1E714A3919F81CAD612A17B134A1C322E16ED720BF78AA0D0D4B752DA3797
350025853383E87A669FE6D42AEA299E16F9241FCC6896FC926F16BFFBF27B8B
A2FED0A9432A387A756E601E09C7739DBDD517581FD0AE706A173A26969F5488
761BF22227C8C04DF310BB6A9FDEF5DCF7C97A9C73CB0884D22A4B6D346A0FD8
3D0D1A22F9B35D0F5E698E6912C73DA5FDFAFF93E07A39C842CD313882D3F949
04DF7F0598D877269451BFEE4A6B8BA877C654DFF38B3A5FD6985D88FDE6EFDD
DA358257DE8BB44AF32E59F153BAD39540C9571869039EAEB2847C15DE2F0C82
55040A839DF6BC937545429668C16636C4E3243A14E0C5DBBFAE50D26227AEE2
4DAE54F7ABE39F09DAFCE2C32470557A16B1F87115D0B587CC0689A437641A8B
CE8F5DE5B33BEE70157EE657FBCEC1674A6AC7FC4F6415E38871D19AD380AEE7
4C6979A7BA8E3F21ED54BEB5DE53176C9962A513031888DEA09CBAC8ED110F4A
0F708A55092E2536E14C741D0ED4DBD95737D2A4E052169DCD0C8C517405D73A
7DA95C0DADAD3DA3378D5D3DB0B3CA5473C230AE7BAEDC9880AB5E57997FFAA2
61370B230E321B8129D555BAC750BA5979B5DC8FD966B3D660EC34EEDFA94491
FBBAB2F913ED7ECC3D8AF3DFE3EBABF39C2FFF0C355B6A6F7E7E1F10E9253666
9132E24855DA5BC194C04D157CD3011C9C651DFB8508553831603D489D8C1665
A6B33C10237EF06EDE8E287D7F01EBCE645ADFC10CAF53D45FAED8BEB38E6433
1C3FE018C627641634CA6C9B6C1C45F93A174A8700323BB168808B6AB5C17462
767516A482B421FBA39DD1FF407AB4C85158CB2EE12D88999FAEBB51DB408E24
124CC7C9923AAE2C4330883D730DD06541206802ED56C749F9BBF50769827750
11FA23B46BC618B40854896F6C35949DCBABB4DB592B0D42E6BE19FA08B4249C
70DA3B3271CBE64AE76DF22D81E8B8593C4218C3345C671EE2A460620B8ED037
8A22844BB2554C3911B330A0F98AD1DA136ED9A254B4AF7E6F476EA15E0C4F27
65A0162FBDCDDF429585BCD934E70994A02E9038CC7B8F42FE58302373802E54
3C7AD243CF44E7CE94BF23C777898FBC3DE3275134FF67C4CAC9DD966C9354E9
352C4955E46012B68D0BF6C5AE5937EC7F21EFAF082AEBEC9F0C7127AB3CC7C9
4E240B79C8458ACB6DADC3B3199E219C8DC28C8092512BE2204E4EF45BB51210
C1F7CBAEA19F108CCF28ADD9B2588CA2175DC7EB684E5AEFF7993694FA088328
04ECD94FC40AF2F05DA29EC82E803AF6B4EB8E41896306C8ACDB87139E3B78FE
E33963385C1ADED8E3108286865218C0C270EA68AE5BDB56EB02CE431CAFE56F
8631E50C31A2F65B49F44B00AE8B9CAAD95E146290F93ECFECB6D933BB9F1609
4EF342E362A2F2C25345A429A67115EC581B494EB3CF034CCFC0E7E6455E6983
829F187031A93748ACC0EB5BE8D82B12E1C46EFBA8C471C3239A4E56C8563956
72D474F62BA582968548D1C5643F322CC6C75DEEA941711F78A30B62A6BF3D12
5B7ABE352A49E01AC6AF177CCC0EB7FD3E2F863D177D8DA6CA8C0210F714CDE0
D7F03EAF49BEAC65F23778401CE695BD1E55B6613087A93FDD3737683E5128DB
F96663DC4FFFBC190B5F02D12BD3DEDBE15EC5BAF8B240190F11C953C3C85C42
85E876CAF77CE3B2DDE7808F27F3B9CA83286A6081D049A34938947DC5968348
026A7BF634EAFFC525E39D95206AD927DD66DE77C6980F80FD0E86A3A599C084
AC408A818F06832BC1EA785ACAC5D1D130E1ED14B178AB5DB5B8DB02F5DFB0E5
CA9C26A5EC8CA8D4928D7D9D4FDA610FBA1220B5D3AAE633
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C8594AECAFA6BCB9525C67AE8129CEEE93D0E
4438B41FC960603870583723D3E94A3269EE3FF46B759D4679EE72AC56640152
A5010D2534367BE03C23BE1D546F09D1EA1F32ED2DD6CF5A8F1A5C0FF4171D21
F85858C05CF435AF9FCF887E90B7D36C1ABB4CF0C396668126CEB68B790F811C
FB3DBD9C638C42E8E4114225586D716A0A37C6ACF8080CAF1E504C9831402131
ED6D516ED8F5CF021DC450426725D35E3E91D4090954392AF6E9F4038CE1ED6F
82BB418528E8E69A2887FAC7A3D8CAB54D79BB7FF1573C2FB94057C3B531CAEC
1757543978CCBC87D955EC77EE217FE521EEBDFCB8F50D9647104DBA0309B8A9
B656ECA068D2E5BAE1239C95C23D213FFEC4246283FFE26D4D264FEDF2D4F7A2
2500F6D6BF85AEC02ED9AF67500ABEEFCB6026938B0F5E78D3661C1ED9366686
AFC924E8517AEC114183C3838D9401260A7437D44D8911F60949C075630D5E29
912CD7E6362E528F33580AB0B97A1D1C0F5D153347BF6FD42588189F585AE3CF
7446958BE65A5DF20F620DF8CFF93105AFB42CF773DBAFFB575E604831D00D5D
2B8AC5CC875FC9826356B9C9B135AFB15D7EC34921F8D7309549308A47275184
BCE1FED9383CAD844A41FFE3E7979780D3E69742DFBFD9150E3D78E74F71768A
9FBB3D01E7C7B997E60ADA11E5359E316042736A73C196D8618F85AB3F011E78
7205BFEF3B22F746C851A41C3FCC3E4B30D3C7EB03EC82C5613013EE8F7EB0EE
C8BEC655745BA1696ADBCFD64B5305C9183E5F70C838F679EE6982C30F3E1C93
9E06C8B19862BC10FECE4321EAB5005525342C7441E266106AAC9392C4F07133
6D985CF07AF471A7D61006DE62D1920CCCC2C888C72E33A322C4BC33DA2EE5E4
F0DDA1D74DC1E502BC8DF09A4A79C67EDD81356AD9DDECEB1318C2989F6987A7
93380CE3EB8D3877E76B3542DA201D7EEE28E5BB6426A755DD95DD3147F6DECE
01632A1A1E5F674DC9E2F9012EB7CB55205D35F9669EB883C2943D85C14315E1
D6B055A080328E19941498B495D61E68677C6AB1043C3A8FA461F426952D79C4
BFAC33625AE0D5FC43ED05B56D018DD7CCF24550A2E9991603D9BC5B47C97B20
E69AD0070120ADD58461AFC62AC7A6794BAB9D6455B525D034B120016FF95C2E
CE9870757E42DE79CEFF5E08A99E8A16C6731E716DB481B54E0DBE1301E5C229
EE7D6858FD8EB114594F9E4EAF49B01D44790DA3409AAB20CE17CCD10C4ED1E8
14CA297BC8CEFAA88688F80F72F4BE989D77A64C7DD9FEC407740913B3D2693B
4120F7E7E35AB69C1DACE3EB09ACA94E28A67CCBB423527AECE390C311309580
D5334A523AE3427D9846911C6779A48145C6C5F586DD1AA3B98CDDE8052818FF
280C63B8E6429A8646C167002FBE2FC035EC3EE73A7EA149580132082317DD4A
19E976C76B85EB81A89AE8928FD7CC9AA2B9F7983C12F76D67EAF762FB6ED54C
C9E41E6562CBB4F3DF32AE563381A1642B13AF7C2E28DF5904959122E200ADEB
44D45BC997D10BCA22B640D87E79D2ECE9675ED61644E0BEDE2AB1EC04B921CE
2D0DD3942825147170D7E904E940BF416A86F976D1C93970CE84EC6B9433F84D
118630A3B2233A129E3BE3D833A1E4C4ACBA7793B1FA243568C3DF17E4F251A0
C3B0BC1BF93B1F0A90C03FAF28E738D0C557EC913EF06F43E2EC53C778F67781
FFFB0332E9AB8F89530F22D92C5776D705868DBD0D7BDDFAA73668760CD18C1D
033F0ABCA75BFCF60B8865CE249E002FD5D87E084DF3880829969403F025ED64
D56A52BB620D29153A1A52CA65303AB420FBE9A7F8F5B59726D99E2108E0FFB4
CB01CF7EB2149419273494A85018A22C3FFE633082B4FC549FAAC67CA7F6A670
87C57B5519A98804735147BE66CDFF2229931E29E560A86CBD5BA52AF96078D4
FBB581F15A4C7E80FDB79FB0CA9553B16FA5E8FF48CC39F01876D4FBF7A0B1BC
EFF5C2FC3FC6CA25DE86079D9FEB48539D90AAFECBAAB4B15C12C7A9195DB370
C2032FA38514C9D088924D732A4F14D3DF39BA595ABEB860A4DB1C3DBBF8049D
6F0C9529571D7A5694C8333BFBE1B3217BF4B743CFC5807C551651FF922639E5
077C139E3BB12185833ED8F5A2349BBABAC94E9F1B99B392E751A4F47BD5FAF6
CDE696534896934CECBFF0982B943697CFDFD94ACF4AD64255F26B3D26D7F228
A451D0075911DF2C7F74C3F9454C5CB3A01C8AF3B601B64D63B696A123E40964
0DFE681765B54067A2E9AC046453291395C141525C234192DBBDDE985B647B00
9DD79D487A67EA1D9A22A508EEA8494F7BD45B8E27A908F9AC1C484FB10FD114
9384355F3DB251C33D6399B9C50CD21979C66ADC45E9788EDD3A24389AAF928F
C7A22B23D2574425D4D3739ACE775C6F589775DACA901F57E05BA8B4D829DF46
84CB74785537AE1208815FBFB1EBB18477A990C93CBBDAA93953F0A5AAFD3E68
160AE0D42A628E9CEC9E0B59788EB9B9FC143394DE2797EA505DDC0A5842CDA6
E6E5484BCA81A4944846B376C4CAED815AF7DE96B7F31FDDB22D81B2404D4109
E3DBECC4B4B8D44609606321914FD4DAF84CFE502230AD234F8094D28ABC6DDD
9D99E49A7FBE3F92D884416C53CB94E22E173DC75E79EF118D6930C73050AAA9
4D8CA1BAEABF4F49E1035E0D4AC54FAE46B09A0A16D02CF3159698706B044D81
6B85DADE28C0E3947E6ADB0C1BE48E504494FF4AFC8A878098D38863B9C8202E
4D3CA8B8899F9B84DC89457496897468652B863C1EC7346505E261ED86EC6CFD
A227E0B554A9F964B3C0D3BD5EE426955F25BD3D4181C84D03DEE36C9F732796
2806E6F0CCD7039E630D0A7BB94ED4DD307A0797DFC4C05499D6AC9ED69D15F8
16E3009C46AF7B6A2D09BBBB49B72169496F57C21467F2E268E3F2AB0C62F99D
6FAD3ECF59AA38B2FEEB448B4CA0C8726ADC87E473C8719E6DDFBF4CC6E06F7F
4E221AA17F75D36F7194C855026B5DC77F7364BB75AE20F9C1BD3E7B9BAEB373
791EF5B1F76BE7CC8B80947EBB89A89EA4C7FB495CF36760D1CA5A56CB7EB397
CB297898F1FD13F6E99935F9CF04F9DF5E6BAC30FB746726E33D98F5CC7AB19A
BE805DA22DB03751EF775FAED0A3079C9739DB56F4522D0245F2A5EFC2A6431B
9A2BFDE79334872823D8DDFFCCCF536D71CA6F51CABAAF6F0F96059F16748F7B
1B043BCE4173DEC5D0A23358A5F1BAB491FB81688BA09F511B1E2AE1740630CF
FF16DBAE0E837722A97EF05BDF1424526D9A079BF5ACD30A86AA99BE39F43305
D97035874D2B9A76CAD0DE92CD06CCBD88107E873D64A78C27A3B3F586C5F70C
2E005213489EA21075A3BAB4C48835820DAB6B1C21DF7AE2EF505C0F1C9BDDF1
747CA2F9709DB907A3B343C618E5D060218601080A9395F9FCF7B7D252A50B02
C5AA368E0EA45AE3A0C9A76C320DDC390F56F7D2902FC0E967F6DECAF7C61F6B
D96E51C0904DEC1822F952EE20A57985CEEF4463E64190821078AFDAADDBCB87
A9F70806AE911679D3C10E902CFB5347651EB1CBA74660FD4FCA5F53F50806EE
676A5E68220FAB31E433AEF746D7411C1EEDB0800E26953789F6A345EEE41AAB
D8A1EF891662502E97324BE745DD4E2D0B8E19B1905E49AA1CC0D92EB72B7C0A
90F8BE44375D797DD77D914D1CA90A605CA3746AB4D82F3282A5F6414AFC2514
C4914C9F3A2AB5909A019214ECCABF448F92E9EB110EA75E0C608018E4804D5B
DC389740ED350459FF8B8AA2D2522C5B1A35697A19D8A0AF5F72BEBCCFEAECA9
171EADA0AFDC6ABE1EE7FF0EC25DEA1FBCD86987D017993C212FAAF36EEE3CDE
E06ADE989B5BAEFA34B2C441115D3AA20F7F00BA629970C41F0F8C103DD0F3BA
4BCF9925FD0456B3CB0D87A4C5B1D492E3B0AFD624E645210D5E5CE92AB43CD8
BE1AFA07C5AE26D8183E6F50C7FA248CBE8DF08721AA8378519F711A9F21CE25
814E308764701CCB23B8CDE885100F5836C748A609B5998CE5F11B123462990B
3ACF37E860C535245A7D43375F646BCA961A06558ACC7A601A25B01DCA8AAD5C
99D4736B5378CBB3925C5E46C05E97CBE5F98779EEFB52455A5E0386F49EE1B0
B8D21AB04CDB0FE2463AAE2A4BDDA4F8A445459BB40D170C020F3AB31924D9EF
AABBD92443256D84E25A0067C83A4E317A007C572C3A87BE5C8D1C14DEEDEBAA
DF81303F29A9C1CF562178AAE5C1D9E46FD4A37429B93D8203686348BA3F5DE1
D0712AF9D96706A3B9454D1EB9A0C76E06C54C5B46134733520A67BF0583029B
D8BFC28FBF4DA6389CB5282D9FF3DC125A9CD36B9D2B30EE0A1CACB4B2F537DB
641109EDFB136FD8560F202B98D8F5EE9020353219565A6C7602EDAF16DE5AE5
80BA9156CFD4E8F8F87430272D48AC357ED45E1BD5D2721869E3315DDFF07527
41EC5728FCED3AF51CD92061DC533CC14295FB88533B1C2074729FC3F299815F
116E40062C9DFE8731277BBC0FA0EA0C4ADEA67971C0E4151A4E57B808B1338B
7697F29E531252C876BFA4432224E833253590237C11E620993E31A5B05073B3
3C906127617D2AE1B83368575A5E191184406069A7221658FA3F9F3BB1F3490D
EE3F8F853553175CF568BE3710DB33F0AF507193750CC28FE49111B7264B9CAF
B4606388BF0B5361AF57D3F6361D4DC9EC9D95DDC7CA00CDA521E690A3B68143
4D885AE358EE4D05C7BDFE3F759FB19FD317FDDCEF4025E9674123DDF6D0F609
F574159BF90B8BE0A1963A9BCEB30E8B61CA283E4735002A61E607F0688964E0
14C36A87CED702E6346589B2C742F5D8927AFE1F384F90F1B47DB4868D5526A1
AB77F2E230A93D3367CAEE4A16832B4E4AE56C4C17BD62772542804124893B9F
72214E007C02F5C84F71ED0AB8D7BDEA294D3AC230DDCF3CBAADD93DE69871DB
8A04907D5BC787080D95E468F6B7CBAD05CECD4E3B8C910F9637A6533215FF7C
4FC4BF9A031C4873B44B0DC853017574D45512D5F1E02123B459B5AB4A27BD71
45C91D76BFA92BEBA473AB45201861F2467142AFA8076CCE5F7E9586CB838DA6
314BA347DD33DCF7A06530CEC541F5CB0DA1EAD0F43283BCA59F109E5B5A246B
4389BEA40DF3A5AFD51F80CE2ED00A1ABC9650ED71D59DC7BCCCB1BF5DC32F5E
493CD164D1D63BADD531EEF11EAFAC566025F471BC767A6709E58D6D78ED3120
F74EEE5B1A7645D01144252359BF07544C00B5840F03FBD1AA3222004F7E00DB
A26BF96FBBF2B6148BFEEDA977418704E260C6C2F224105F844FFD3617226954
B02DE58CFD841D8307AB48E7E5CC0565
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (robzad.dvi)
@start /Fa 83[65 172[{encplms ReEncodeFont}1 83.022
/PLMathSymbols10-Italic rf /Fb 78[53 6[45 47[60 71 6[55
6[71 41 37 3[61 75 60 1[65 9[139 6[92 80[{encplrm ReEncodeFont}14
119.552 /PLRoman12-Bold rf /Fc 175[44 3[44 4[44 2[44
16[44 44 50[{encpltt ReEncodeFont}6 83.022 /PLTypewriter10-Regular
rf /Fd 198[33 2[33 3[33 50[{encplrm ReEncodeFont}3 58.1154
/PLRoman7-Regular rf /Fe 134[41 47 9[50 73 49[23 59[{
encplmi ReEncodeFont}5 83.022 /PLMathItalic10-Italic
rf /Ff 12[42 55[37 9[33 6[28 3[37 3[37 42 38[37 44 1[60
44 46 32 33 33 1[46 42 46 69 23 44 25 23 46 42 1[37 46
37 46 42 14[61 1[57 2[76 1[65 43 5[63 60 8[23 5[42 1[42
42 42 42 23 28 23 2[32 32 40[{encplrm ReEncodeFont}48
83.022 /PLRoman10-Regular rf /Fg 204[42 42 42 42 1[25
46[{encplit ReEncodeFont}5 83.022 /PLRoman10-Italic rf
/Fh 12[48 65[38 5[53 32 3[44 3[42 39[42 50 1[69 1[53
37 38 39 1[53 48 53 80 1[50 29 27 1[48 1[44 53 1[53 46
9[99 72 8[91 3[36 4[73 1[68 7[27 6[48 48 3[27 1[27 44[{
encplrm ReEncodeFont}36 83.022 /PLRoman10-Bold rf /Fi
144[79 80 2[76 1[37 3[73 80 70 80 75 6[96 7[101 2[114
12[105 7[44 58[{encplrm ReEncodeFont}14 143.462 /PLSans10-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fi(Zadanie:)54 b(ROB)-94
117 y(Rob)t(o)t(cik)3287 125 y @beginspecial 98 @llx
530 @lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 178 3969 4 v -94 286 a Fh(VI)32 b(ob)s(\363z)f(nauk)m
(o)m(wy)-8 b(,)33 b(grupa)g(\261rednia,)e(dzie\253)g(3.)g(Dost\246pna)h
(pami\246\242:)f(32)16 b(MB.)740 b Fg(23.01.2013)-94
485 y Ff(Ma\252y)27 b(rob)r(o)r(cik)g(jest)h(usta)n(wion)n(y)e(na)i(kw)
n(adrato)n(w)n(ej)d(planszy)i(p)r(o)r(dzielonej)h(na)g
Fe(n)2464 455 y Fd(2)2529 485 y Ff(p)r(\363l.)g(Rob)r(o)r(cik)n(o)n(wi)
e(zosta\252a)h(zaprogramo-)-94 585 y(w)n(ana)d(sekw)n(encja)h(ruc)n
(h\363)n(w,)f(kt\363r\241)h(b)r(\246dzie)h(ca\252y)f(czas)f(p)r(o)n
(wtarza\252.)h(Dozw)n(olone)f(s\241)h(t)n(ylk)n(o)g(4)g(ruc)n(h)n(y:)g
(g\363ra)f(\()p Fc(G)p Ff(\),)i(d\363\252)f(\()p Fc(D)p
Ff(\),)h(lew)n(o)-94 684 y(\()p Fc(L)p Ff(\),)h(pra)n(w)n(o)f(\()p
Fc(P)p Ff(\).)30 784 y(Chcielib)n(y\261m)n(y)19 b(zna\242)g
(minimaln\241)g(liczb)r(\246)h(ruc)n(h\363)n(w,)e(kt\363re)g(nale\273y)
h(do\252o\273y\242)f(do)h(sekw)n(encji)g(ruc)n(h\363)n(w)f(\(w)i(do)n
(w)n(olne)e(miejsca\),)-94 884 y(tak)27 b(ab)n(y)g(rob)r(o)r(cik)f
(nigdy)i(nie)f(wyszed\252)g(p)r(oza)g(plansz\246.)-94
1158 y Fb(W)-11 b(ej\261cie)-94 1340 y Ff(Pierwszy)29
b(wiersz)h(w)n(ej\261cia)h(za)n(wiera)e(cztery)h(liczb)n(y)h(ca\252k)n
(o)n(wite)e Fe(n;)14 b(m;)g(x;)g(y)34 b Ff(\(2)28 b Fa(\254)h
Fe(n)f Fa(\254)h Ff(10)2766 1310 y Fd(9)2802 1340 y Fe(;)14
b Ff(1)28 b Fa(\254)h Fe(x;)14 b(y)32 b Fa(\254)c Fe(n;)14
b Ff(1)28 b Fa(\254)g Fe(m)h Fa(\254)f Ff(10)3782 1310
y Fd(6)3819 1340 y Ff(\),)-94 1440 y(oznacza)5 b(j\241ce)39
b(o)r(dp)r(o)n(wiednio)h(wielk)n(o\261\242)g(planszy)-7
b(,)41 b(liczb)r(\246)h(ruc)n(h\363)n(w)e(w)h(zaprogramo)n(w)n(anej)c
(sekw)n(encji)k(oraz)f(wsp)r(\363\252rz\246dne)-94 1539
y(p)r(o\252o\273enia)26 b(rob)r(o)r(cik)-5 b(a.)27 b(Rob)r(o)r(cik)g
(stoi)g(w)h(k)n(olumnie)f Fe(x)h Ff(\(licz\241c)g(o)r(d)f(lew)n(ej)h
(stron)n(y\))e(oraz)g(w)i(wierszu)f Fe(y)j Ff(\(licz\241c)e(o)r(d)f
(do\252u\).)30 1639 y(Kolejn)n(y)g(wiersz)g(za)n(wiera)e(sekw)n
(encj\246)i(ruc)n(h\363)n(w)f(w)i(p)r(ostaci)f(s\252o)n(w)n(a)f
(z\252o\273onego)f(z)j Fe(m)f Ff(znak)n(\363)n(w:)f Fc(G)p
Ff(,)i Fc(D)p Ff(,)f Fc(L)p Ff(,)g Fc(P)p Ff(.)-94 1913
y Fb(Wyj\261cie)-94 2095 y Ff(Pierwszy)f(i)j(jedyn)n(y)f(wiersz)g
(wyj\261cia)f(p)r(o)n(winien)i(za)n(wiera\242)d(jedn\241)i(liczb)r
(\246)h(ca\252k)n(o)n(wit\241,)d(r\363)n(wn\241)h(minimalnej)i(liczbie)
f(ruc)n(h\363)n(w,)-94 2195 y(kt\363re)e(nale\273y)h(do\252o\273y\242)g
(do)g(sekw)n(encji)g(ruc)n(h\363)n(w,)f(tak)i(ab)n(y)e(rob)r(o)r(cik)h
(nigdy)g(nie)h(wyszed\252)f(p)r(oza)g(plansz\246.)-94
2470 y Fb(Przyk\252ad)-94 2709 y Ff(Dla)g(dan)n(yc)n(h)g(w)n(ej\261cio)
n(wyc)n(h:)-94 2833 y Fc(3)43 b(2)g(3)g(2)-94 2933 y(LD)-94
3115 y Ff(p)r(opra)n(wn)n(ym)26 b(wynikiem)h(jest:)-94
3240 y Fc(2)1890 3235 y @beginspecial 1 @llx 3 @lly 70
@urx 73 @ury 690 @rwi @setspecial
%%BeginDocument: rob0.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.11.2 (http://cairographics.org)
%%CreationDate: Wed Dec 26 17:21:10 2012
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 1 3 70 73
%%EndComments
%%BeginProlog
/cairo_eps_state save def
/dict_count countdictstack def
/op_count count 1 sub def
userdict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
%%EndProlog
11 dict begin
/FontType 42 def
/FontName /ArialMT def
/PaintType 0 def
/FontMatrix [ 1 0 0 1 0 0 ] def
/FontBBox [ 0 0 0 0 ] def
/Encoding 256 array def
0 1 255 { Encoding exch /.notdef put } for
Encoding 82 /R put
/CharStrings 2 dict dup begin
/.notdef 0 def
/R 1 def
end readonly def
/sfnts [
<00010000000900800003001063767420a11cd7eb00000374000006546670676dcc79599a0000
09c80000066e676c796648138ffb0000009c000002d868656164de7154f10000103800000036
68686561123308cb0000107000000024686d74780bc701a100001094000000086c6f63610000
03040000109c0000000c6d617870055d0d80000010a8000000207072657025d64dbf000010c8
00000bbe00020100000005000500000300070000211121112521112101000400fc2003c0fc40
0500fb002004c0000000000200a1000005ad05ba00180022023a4021120b0e0112361c5a1f66
086d1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550db8fff4b40c0c
02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2b3121a3412b8fff0b322273411b8
ffe2b31d273410b8ffe2b31d27340fb8ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a34
10b8ffe2b3121a340fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b02211a160a061211100d
0c0518090916171a191e17b8ffc0b40b0b425517b8ffc040150b0b065517170021221e020102
0018180f0f0e081eb8fffeb40c0c42551eb8fff2b40b0b42551eb8fff640090c0d42551e260e
9c06b8ffe8b40f0f025506b8fff6b40d0d025506b8ffe040340c0c025506060d0d0655065d20
247024802403242218020c0c4255180e0b0b4255180a0c0d4255182001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c025500060b0b065500b8fff7
b40c0c065500b8fff8400a0d0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b
2b3c105df62b2b2b2b19e418ed2b2b2b003f3c103c103c3f3cfd3c12392f2b2bfd3c103c392f
12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b5d43
5c58400a08400f390f103a11123a2b2b2b590171435c58b9000effde401a1939112219391222
19390e401c391022143910221f39102215392b2b2b2b2b2b2b59331121321616151406071617
16171323032e02272623231111213236363534262321a1028ac4cc7acad34d28554cfff4c255
6e572d214be101a185964e97a3fe3005ba4fc8799cd61d25244e75fe710131848c380b07fd75
0333377947688600000005ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7
fe69ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c2
01f0001800af00b900b400c800170044009c007c009400870006005a00c80089005200520005
004400940119ffb4002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d3
00870085000d002200410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa00030021007700cd0004
004d00cd01c0022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068009a
00ba013501470221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da010c
05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f000000050018002900390049
006f00be00c700d0012301c1026f050c05320540057affd4001400310055005700a700b400e6
01f7027e027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f01560229
026f029e03720008002c00310031006400690089009800c700de012b01b6020c02cf03a304ab
04fb061dfee0ff0e00060026009b009d00c1010d011801200173018201d601e30243025f029b
02e2039404a904d20761001c005e006d008d00ab00f7011201380151015b0168017c01870191
019901cd01d001e802410254026b02ef0368037103bd044204420453047304830586058b06e8
fe58fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d900d900df00e2
0105010b010e010e012001210155017b017b017e018d01a201a801a901b401d001d001e201e9
01f201f501fb020002000206021b0221022202220223027202770294029c02cf02cf02d002ec
02f903170322032b0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3010c0118011a012a
013e014c0151015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef0200
020d021c02210222022e02350242024f024f025e026502710290029202b402d602fa0307030b
030f0315032a0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a041f
04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d068606b806f10736073e
07500751075d078f07b607d4086000b600c300b500b700000000000000000000000001e00381
034503b5008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b402240578
063b023b014e00f00426029402c6029f02f6023b034d014b0153006a02310000000000000614
04aa0000003c04c300ed04bc026502ce03b50078060c017e02ef060c00b201000239000001c5
0330042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e05580021039c
00ae0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff0003024e00b4
003703e30083006b02d800ed00770088009701640467008e0033017c00e700a6029e0329056e
062a061501c90269048a021301b4000204a9000002390124010305140084015d039a06ef02d9
007500cf040a00de03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078006900140057006e
00ce00b4065402b80067050e016500e7000004cbfe52005affa60099ff67006eff92002dffd4
0087ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d028a
02d90253029600b700000000000000000000000000000125011800ea00ea00ae0000003e05bb
008a04d70053003fff8cffd500150028002200990062004a00e4006d00ee00e5004803c00033
fe4e02b1ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed
04b001d200b6007b00650252ff740365fe690094008f005c0040008600750089008940435554
41403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b
1a191817161514131211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b0206120b04660b0042623
48482d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d2c0110203c003c2d
2c20452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051
582320b00d44235921212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b0
177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a4518
6920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545b01923
4445b01a23444565234520b00325606a20b009234223688a6a606120b01a8ab000527921b21a
1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b31940201945208a5458
2321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2c
b10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121
592d2c0120b003252349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840006260
23212d2cb4000100000015b00826b00826b00826b008260f10161345683ab001162d2cb40001
00000015b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b
5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012435c5a5838
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158b00425b004250120
46b01060482046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d2c
4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515a
b012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121
592d2c4b5258b00425b0042549b00425b00425496120b0005458212043b0005558b00325b003
25b8ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043b0005458b003
25b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b00161b8ffba8b1bb0
468c59b0106068013a2d2cb1020042b123018851b1400188535a58b910000020885458b20201
0243604259b12401885158b920000040885458b2020202436042b12401885458b20220024360
42004b014b5258b2020802436042591bb940000080885458b202040243604259b94000008063
b80100885458b202080243604259b94000010063b80200885458b202100243604259b9400002
0063b80400885458b202400243604259595959592d2cb0024354584b53234b515a58381b2121
591b21212121592d0000000100000005199a424052735f0f3cf5081b080000000000a2e3272a
00000000c9acc9bbfaaffd671000080c00000009000100010000000000010000073efe4e0043
1000faaffa7a10000001000000000000000000000000000000020600010005c700a100000000
0000002c000002d800010000000200f2003c009d000700020010002f0056000004ac0bbe0005
0002b900540328b326181fd0bc032900e0032900020329b22b1d1fb90327031db23b1f40b803
23b31215320f412d03200001002f0320000100200320006f032000af032000bf03200004005f
031e00010010031e007f031e0080031e00af031e00bf031e00d0031e00060000031e0010031e
0020031e006f031e009f031e00e0031e0006031d031cb2201f1041270319007f03190002000f
031700ef031700ff03170003001f0317002f0317004f0317005f0317008f0317009f03170006
000f0317005f0317006f0317007f031700bf031700f00317000600400317b2923340b80317b2
8b3340b80317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357593240b80317b3
4d513240b80317b344493240b80317b23a3340b80317b331343240b80317b32e423240b80317
b3272c3240b80317b312253280b80317b30a0d32c04116031600d00316000200700316000102
c4000f0101001f00a0031500b0031500020306000f0101001f00400312b32426329fbf030400
01030203010064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002
edb30e11329f414a02e200af02e200bf02e2000302e202e202e102e1007f02e00001001002e0
003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df02de02de000f02dd
002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc00010000
02dc0001001002dc003f02dc000202dc02dc001002db000102db02db000f02da000102da02da
ffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc0
02d3b2121632b802d2b2f9291fb90326031cb23b1f40bb0322003e00330322b225311fb80318
b23c691fb802e3b3202b1fa0413002d400b002d40002000002d4001002d4002002d4005002d4
006002d4007002d40006006002d6007002d6008002d6009002d600a002d600b002d600060000
02d6001002d6002002ca002002cc002002d6003002d6004002d6005002d6000802d0b2202b1f
b802cfb226421f411602ce02c70017001f02cd02c80017001f02cc02c60017001f02cb02c500
17001f02c902c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002c7002f02
c5000502c1b324121fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f
02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e90800001f02a600a20800406a
1f4026434932402043493240263a3d3240203a3d329f209f2602402696993240209699324026
8e923240208e92324026848c324020848c3240267a813240207a813240266c763240206c7632
4026646a324020646a3240265a5f3240205a5f3240264f543240204f5432b8029eb724271f37
4f6b0120410f0277003002770040027700500277000402770277027700f90400001f029bb22a
2a1fb8029a402b292a1f80ba0180bc0180520180a201806501807e01808101803c01805e0180
2b01801c01801e0180400180bb0138000100800140b40180400180bb01380001008001394018
0180ca0180ad018073018026018025018024018020013740b80221b2493340b80221b2453340
b80221b341423240b80221b33d3e320f410f0221003f0221007f0221000300bf022100cf0221
00ff0221000300400221b320223240b80221b3191e3240b80222b32a3f3240b80221b32e3a32
6f414802c3007f02c3008f02c300df02c30004002f02c3006002c300cf02c30003000f02c300
3f02c3005f02c300c002c300ef02c300ff02c3000600df02220001008f02220001000f022200
2f0222003f0222005f0222007f022200ef0222000600bf022100ef02210002006f0221007f02
2100af02210003002f0221003f0221004f0221000302c302c30222022202210221401d101c10
2b1048038f1c010f1e014f1eff1e023700161600000012110811b8010db6f70df8f70d000941
09028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f41150197001e0401
001f013900260125001f013800730401001f0135001c0801001f0134001c02ab001f0132b21c
561fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401
b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c381f
adcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab2
1f5e73b80401400f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab2
1f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f55
37b80168402c07960758074f07360732072c0721071f071d071b071408120810080e080c080a
080808060804080208000814b8ffe0402b000001001406100000010006040000010004100000
01001002000001000200000001000002010802004a00b013034b024b5342014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b
58b101018e59b0382bb00288b801005458b801ffb101018e851bb0124358b900010111858d1b
b900010128858d5959001816763f183f123e113946443e113946443e113946443e113946443e
11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0
964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f04544
5958b9033e01f2455258b901f2033e4459594bb8015653205c58b9002001f14544b9002601f1
45445958b9081e0020455258b90020081e4459594bb8019a53205c58b9002501f24544b90024
01f245445958b909090025455258b9002509094459594bb8040153205c58b173244544b12424
45445958b917200073455258b9007317204459594bb8040153205c58b1ca254544b125254544
5958b9168000ca455258b900ca16804459594bb03e53205c58b11c1c4544b11e1c45445958b9
011a001c455258b9001c011a4459594bb05653205c58b11c1c4544b12f1c45445958b9018900
1c455258b9001c01894459594bb8030153205c58b11c1c4544b11c1c45445958b90de0001c45
5258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c456523456023456560234560b08b76
6818b080622020b163594565234520b003266062636820b003266165b059236544b063234420
b13b5c4565234520b003266062636820b003266165b05c236544b03b2344b1005c455458b15c
406544b23b403b4523614459b347503437456523456023456560234560b089766818b0806220
20b134504565234520b003266062636820b003266165b050236544b034234420b14737456523
4520b003266062636820b003266165b037236544b0472344b10037455458b137406544b24740
474523614459004b5342014b5058b108004259435c58b108004259b3020b0a124358601b2159
421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d
412d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b
2b59b0102342b0112342002b7475737500184569444569444569447373737374757374752b2b
2b2b74752b2b2b2b2b737373737373737373737373737373737373737373737373732b2b2b45
b0406144737400004bb02a534bb03f515a58b1070745b040604459004bb03a534bb03f515a58
b10b0b45b8ffc0604459004bb02e534bb03a515a58b1030345b040604459004bb02e534bb03c
515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b
2b435c58b9008002bbb301401e017400735903b01e4b5402b0124b545ab012435c5a58ba009f
02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b
2b00456944734569447345694473747545694473456944456944456944737445694445694473
2b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b737475737475
2b2b2b742b2b000000>
] def
/f-0-0 currentdict end definefont pop
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 1 3 70 73
%%EndPageSetup
q 1 3 69 70 rectclip q
0 g
0.265126 w
0 J
0 j
[] 0.0 d
4 M q 1 0 0 -1 0 72.038391 cm
1.559 0.121 22.727 22.723 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
24.418 0.121 22.727 22.723 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
47.055 0.121 22.723 22.723 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
1.559 22.98 22.727 22.723 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
24.418 22.98 22.727 22.723 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
47.055 22.98 22.723 22.723 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
1.559 45.84 22.727 22.727 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
24.418 45.84 22.727 22.727 re S Q
0.265126 w
q 1 0 0 -1 0 72.038391 cm
47.055 45.84 22.723 22.727 re S Q
1.492403 w
5.2 M q 1 0 0 -1 0 72.038391 cm
48.594 34.516 m 42.477 34.516 l S Q
48.445 37.523 m 51.43 40.511 l 40.984 37.523 l 51.43 34.538 l h
f*
0.746201 w
4 M q 1 -0 -0 -1 0 72.038391 cm
48.445 34.516 m 51.43 31.527 l 40.984 34.516 l 51.43 37.5 l h
S Q
1.492403 w
5.2 M q 1 0 0 -1 0 72.038391 cm
36.719 43.629 m 36.719 49.746 l S Q
36.719 28.261 m 33.734 31.245 l 36.719 20.8 l 39.703 31.245 l h
f*
0.746201 w
4 M q -0.000000000000000184 1 1 0.000000000000000184 0 72.038391 cm
-43.777 36.719 m -40.793 33.734 l -51.238 36.719 l -40.793 39.703 l h
S Q
BT
16 0 0 16 53.118196 32.023645 Tm
/f-0-0 1 Tf
(R)Tj
ET
Q Q
showpage
%%Trailer
count op_count sub {pop} repeat
countdictstack dict_count sub {end} repeat
cairo_eps_state restore
%%EOF

%%EndDocument
 @endspecial -94 3488 a Fh(Wyja\261nienie)21 b(do)h(przyk\252adu:)g
Ff(Ma)5 b(j\241c)18 b(sekw)n(encj\246)h(ruc)n(h\363)n(w)g
Fc(LD)p Ff(,)g(p)r(o)h(wyk)n(onaniu)e(4)h(ruc)n(h\363)n(w,)f(czyli)h
Fc(LDLD)f Ff(rob)r(o)r(cik)h(wyjdzie)-94 3588 y(p)r(oza)27
b(plansz\246.)g(Je\261li)g(do)r(dam)n(y)g(dw)n(a)g(ruc)n(h)n(y)-7
b(,)26 b(otrzym)n(uj\241c)h(sekw)n(encj\246)g Fc(GLDP)p
Ff(,)f(rob)r(o)r(cik)h(nigdy)g(nie)h(wyjdzie)f(p)r(oza)h(plansz\246.)
-94 6155 y(v.)13 b(1.00)1692 b(1/1)1622 b(Rob)r(o)r(cik)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
