%!PS-Adobe-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: cztopi.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman12-Bold PLMathItalic12-Italic PLRoman12-Regular
%%+ PLRoman10-Regular PLMathItalic10-Italic PLRoman7-Regular
%%+ PLTypewriter10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips cztopi.dvi -o cztopi.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.09.22:1404
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F62642F51E636DA
F5961BD727624234A542E033BC060B2A22AFCE035CB729C721F41A591AB15139
ED8A122CB8657959FBB81B499E5B173784A3649CDADA88A61CD2FE2A391276A0
826B8C01908F281BE8B6C29A69D695A06D169F15B92FB4F28F60952D93E3AB87
C6E8624038186B76DBFE95476870168A1F78B39184438CE528180EB98040FFEE
5C67092149C83069C3B48748A7F0D4DDBDC498751A0D375757D95AE364394FC2
5E6E0D02C68401A42EF6FBF55D8A0F6FD9E30E3B040CE6D231029FDF37152EB5
82AC94ED5B10EAFC22C750752A6B85D56A2AB3C4CE836E99DEF32A5250765A9D
4B49446401D04E84C65AF8E73FD3EBCFAC71BD5CAD1B04BF4396CB98024006E4
466128A5C8C75DC8352E4BD2361E66C1C628B460E131ED9AE9AE517555527DFD
2C5451934A8A7064DD3B12ED78B7415374AD07575B2A05E4D3E10656D67BD304
8E231A371B2A470A2A03C88DE26D8ED7DA3A6C181536F2E5330AB6BC5E2CECD6
8B9981B2BEF1AED8D00A3AE7E8D886D93F3F45630436BCC3F8ADD162DEA2677D
46D79BA26352397C3DC55A0FCD95276517788B57C33608C101E7DB49FDAE75FC
DEFF3FA973F81891F822A59E85AAD80204DC99C183E7A1A91654B5824F6913B0
838C5BD7BBAD0E7B1D3CB99478738676C9F4162A73778C52C638A3AC85949190
A4CBFD8BB4B69C2E7307C9DC662F98F48D298FAC594D6552FBE05C126C8A2ADA
F1AB82C7B2562DC7F8E25F85ED7F7722F38BA1917A296C2BA099D0B491254DF6
5FD37B110A735BA2759FF48783B48644FD672DF548C439A883086F14F419820F
312F32DF02D40576568262B2289BD805DF76CDB22E1F984B716547F63EEF3C0E
D308218EB19B25DF20C182AE9EFE6B020BDCC75B131B92A963902D10C5468AD2
BBD42B7BD88388082E54DEA0654438F36357E82DD0F8301E3FADFD7E2B257511
6286D1C2A40545F973870CB8CEFE5EFA7E35DDAE6A622AEBA83E477B00A3527A
B198A0E2D41B3BDA6A44150847D2F39D64EE9A217E632DFCD526B40537B7081C
1E40B0C63DDB5447A46E63948F333C7CDE4ADB791B9175238042237F2F66F121
7E97098D74A96DBF256B24CE34BFA4CAE11F367A505617C94E1777B9756689E6
9FD66A336C2E1F0A83286D5290F1B81A3E44EA8FBBE07F57E8BD5D238147474E
8DBB6F049C331EA174787ABA8C3EBCA6A4A7AABF1AE37BD4586C793B4E7904D2
3627E2FA765DA5E53E6A0FFCF2880D54A722D3F6B82E80C5C78220CFAE5B3A49
DD4E2D0B8E19B190DE9AD8D2B070116A145A4E3B96AD2955DD8B1A35CF423DD8
F3BECD441A5E7DEFC2E63B34AC259F84ACE7D6104AD009271852AB2DDF8555CE
DD6B1BDFD5E9ADEEC72918FDDBC8621128B1E465A354B42C8975742F75BCB6C0
CCEE1136FC79A73774870E99EED3D74C0EDC41BDA6D8EB06A20E3D9C737F1E00
45498D9DFFD86A5FBC5B77D311153CCC4CACC3E018EC530352AA84C363FD00B2
D8BA9B25C6F06D362AC08437C13056B5C2A458062AE898513954C8CEAA65BDBE
9E0FA91DF22E6A4F66A29D45558E2B22AF63B0E2FCE3F56EB509A17998BEAD9A
49EB4E1F4E6D6FFE6BE23910E7F181D048F238829D415204D67B63178165101C
27F5EBCCF59911E33447DF3FCE2DCFC39617FE918475FBD0EC66FC2DC0504D43
292BA4F9908402DEF9AACE7BD76B3D4A244E3AC74372B782F24BF7ED544AE148
467180DC2293FA812D804DEAD0D71412F8FABE5A24DE1560CB949D746B5C3510
740A6F22569A9BD942A13C1FF22C22F84C48B07958B78A6A20247B49CE410908
042ACDE9414264C06FBC55F4D67B93EB6417582B7D7B8E44EC96CA2888B5283A
5DB3AC79055A14E1A2AB1902F879F1361AF8C044F7B0D095E5B3AC70F1C11CEB
9E9EE9523460F1109AD533F1948A36F07F2E642E6FEE5FD39DCBF8FF3CC303CE
D5991EAFF6938C0E68D4AFBFE14B9497864A0328736C2D25F4CA2B2F44E2127F
D415185CDEC3E9BFA8AE90301A28BA4D14E7FACE24737C044BBA551EAD50C6D5
C0196027C17B8EE7BC6B1A60D30B2C94ED125A9C214F7FBD75ECA6A609E46822
553290493732333529F06FDFCA1636023C3B45D99837E560B8557B6DDCDE002E
74BA03A2B15E0529E61DCAC207A712FFAD1ACC1A2DACB18A8108B8CBCB5FDBD2
B0B1971293A2561D4783F11B5F18899CE22DC92237B4D55F45A0507D35F092FA
58B287777FEDAAE750B107CCC7C2E14D55C1DC2D87D0DB079D53FC25B4AC1600
5CC7447525340CBBE92862923F31B8FE9C75C0F505BE6261E8185C378E7C7961
340E398551177A7D13B2A9214E4EFC399C46C1426F4FF72A744B8EED9375BA41
4409EAEB45541CB32FF7D147CB85CD34424CE13529BC0312459A4602CFA5EAE2
D3112D43FF22C4723429BCDE2F628B26C43D6407CA7C624A72C20520513461CC
A61D3CA293576476D8AB9050ECEECCF35182E14D08DD577E6F40B4A6BEE3B698
9C474D1843A471576D48950AB60BCE7A4975433D1ACFD965F3C47D22B2B8E48B
7625364396F37130C0E488CEC4339C9309BBA8B4AF94BAF2FABE7C94EDB0AA8E
432CC2BDE47A570DB69E727ADC7CA9998BE79DBBC7E1738945BA0F664F19C402
952F48F61E0B528F4873A53214B80D797AB7E3961956537B5AB9C6544250D932
14EE0589DB373F4DBD5B63ABE36CC2C0C7204BF83B4F7349ECC5BFEEBEE1A897
264EBB5C05F467B01EF827521F304CB4345C855E6489EE5F1548A11C21562D86
3C371D8202AE312F96E516CCCF43AF3052E8F0428FB3CB4A36DB5925C44BDAFF
DBA8DB8B2C4487DE9EC1722AC14066A7B4DEB3168B89E9F85BD1D47602C83B96
77F41ADE04A9951AA6C042AC6847F2B3291D30D4EEB934A0173199BA211FB163
F4B524313B5449F465FFEAE0369FBB390D273753CA82B54735DEBC58CDD279FA
9515D92BCFC4142E1B66D135E09A46B054E37922BFB709F40562DA7AD5A6991A
E319D33A4379586D4097FCAED8EC41556FA741E3DE1884D783C1E204CB756411
281ACC3A540EDEE8BA08CA0C72435B46EEE33FF345FBF6D9872F2721700D25D5
8627C2F794F6A4B7EE271180615961389D8AABF60E1FC137204F52C5E8D54121
CA17B978F6D8FF68E66F39432115CF53DEBA0329CBC2AC27533136FF020B88F0
4265C624EF23B5888450B2E2CDA1C2B9BA31E502AA5FB5C4E793EF194493E1EC
093E3F9BCC4C5B052F3F4219582DE11A0DAEE2DC6AB02316DA55BFC37DE2A3E9
4C5B234A87451785B86E483A211590E11802AF13BB887D6E08255AA0E48FF213
0846A1B37F025548E4706CD37E7F8CC1E7F8868DDF6458AFC8E2C0F1C9C944CA
575421774268089F37D20E3535600ABF4B02F915E06858EF82EFBA0DDA0F4F72
11B5B5CC960099631D4DF1717FC86E5D4997A516716967A6A48F454A051088D8
30CC9E5C42483DE7EEAD1CF5F43FFFEDAF7B0A7E2B8C4FF84BF59CABBFBCE3F8
CA32ACB45BB2507784C96CC6EFA868F2CCB3BBCD41A70FF669FBE185175E0282
00999915A5D86FD0F184C8AE14C3C50A8012448445FA00
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD3076759733CC544C44
0A98D7C64DC5ED73860FE5AB0582F4BD8A6D8AED1ED22C3F3AE5E82CA55AD298
299A9FA987376ED991BF020D89506CD1278CDE3EC446CA203E7C1CD1AFAC29E8
07E5018CEEA86FBE5BABE8947404ACD14B3594882B491F7926694EC48CB03CF1
EACFD31FEE3C7AFFFF0C58477A93B93BA8E0E0B086C29AA069A41EEED25AABF0
B84DAA951B4DC882EA2055C9C28A70D205D41EAD646229028ABC08FB2713C4FA
27A936F7574C3DFD9C3107DA232FE1FB923D3ABE78293BF063FBEA2CD43B910C
9CC062DE49266623AF9AB4BB367E9C4970968D38AA667EB01597AD234A19054D
3AC99E19495C077DAAE47E6B8FB0144A861E53B3DFC6938DB709540F0AB272E7
12360039168C43B3F6A962AB4404A910BA042A87C52DDDF210D5A63E33196FC3
0EDFA4A0DFCD9542FF08D635CA7258037BA6D2E8EEB16119F4B0DE59F4E11987
D64A444A48369EA0CAF43AE69853376D6EC23465F71746488C2FC5C5C44D4F73
767697464E20BB367D033E1EAD017C8A2A3E2884C74980A622B52369A63D07D2
C3DE5FA12F9B3700C3AEB8A56BC8338373E8843B3ADA8EDF1AFCD5D3D3ED719B
680B78067B2EC8EBE3835E0BE1AC5F71BCCC47C8D3ED1253C4342167A4E56B92
5FD8E6500C5941F83318E765E106CF438122C81B699363E51BF633C9A68515FE
5ED0EDEE3FDD7E37181D0CB583C88598E025D7DE95DC54B64D75400E90BF571B
F8098D545C6C8F4B4E22A68238918F466C32F773473F8D319C0B6BB035973FE6
1888BA25FB3A4FDC96BD7B5293084DB1B8A373589AEB944971559487100C6977
3D28018765D1DD730D978649BB6A299375F60383CD686794AE9C466FB9167136
A1638B151E9A3034F75214A5CDCBCEDAD4CFCB41ABC6E5E5D68E1B3ACF9A015D
CEF2D233702B137F44DFEE9E2231B41841FD9D895876F76DD908E9E80CBBC347
6D500B6D225B507B573EE375CBA5A675DFB9B6DFCA3381EDDEFAE4EC4069EC7C
7617C44DDC67757EF62BAABFF81700132C7C584586BC0FDB2C3A53F7DE0786D5
6D60050B01AFC17654D96FBA61E6F36C00A334008ECAB1174B84144A39C9215C
C7F2F8FB526E1ADE21C95D0E065946BDD62D029A305141D27A47C4D87331F41D
0602F199E4A9C70BD0A58FBEFAB0B264090BF1B02879067B77EE7CE27657A7DA
B30964717E61A9DF6D124A0BDCE211EAFD156507650D871FCEC343D8AEE1473F
10314FA9B62A3CBD32208DE6863081DCA7E3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC9493D27F6
9182967BB12F9376607AF82584F6DA9923AB749CBBBD8D59822CC389A78F94C4
7C06D56BEBE3BC697F92706083F71F6522E0E632E06D5E9B4B46A152BF638DD0
0116F721EE8768AF0CDA39644925E0998238D8AFB6C60488FE9462E903CEA643
F8ECBE4C52A10C03486C16535CF46861E8FA19A95B7960199E665BDCF1E6EDA9
F8E0AF2AF7C74DB79A2B45A47D4119D363B0AF642FCAEB99606BC079F3230443
D11313D6EBB9375B19AFD46F6695153F1A30638D22228B109565757B3503F6B4
CA4588D5430DD9943FA6EE299A4FD75A836ED366963BD57A5FDDECE89ACF7D2E
AABC3FF07087834CB6BA824EAFF494AB782067526084160AF809BF804BE0A72A
AFE74199DA8D088056F1F1323CB0EAA684D03E7415C80F0190E33399F0347B27
755DE16C376C331F091A85796A82788E3378756BCE8659E9DB32DF74EEB735CD
1C98201F895AB94234C55AC6F7A532F194C524458044D3C80CB40D65BF919B7F
AB715D4FBE5C2A8FB3642FC27335DB20167BAF3C281CDF14552A48F8354F0723
537CE2B34E5B2F6E80B2AEF67FAE02269F12F8A4744D26A922667C766EC65BA2
99BD7256E9A4C6307A403D7C8FD123E6E5E46C64AF46438C5BDD042EFCC54604
A5EBA143C13EA781A742D0F7BD45038726E9EFF964271C4486490F6121B4E97F
E7BD80F37982E97287906415A54F2879BB03C350A0B6C5ECDAD7BAA8CECDD769
9F2B38AFD236FDD824E7C7E977B08864DE542FD27078F618A7286993C9001466
7E54A717E38F553606386E7DE74D9E03D3741668126B3BFCA26329522299020E
AE1393E0A51064408FD311A19FBC6D656A4ED57972F4E82560FB682B012314F5
9987523FFE736958E2FF6CF7CA18D1558C6A0E7E99C202C693EA49C753F84041
9F7C93DBF414A071DE0206D6D4675979A474DE178B729FAFC6CDB1A356CAF064
9B3E5821F6D29BC72B84229D33C5E51F232CACF2867E6F462C044BC20DA885ED
CD480046EB649018BC811251901E41731659C69FEDB4D615CF7BDEB2E80D58B5
26E647AB7936C6997E133DC99E721B1C866536E456C00A92BAD2DD31D36979C5
99CFBA98058DA68BB2A3832DF7CCC162DB746AC013D8B8DC4D5FFEBA3F61D35A
E7A03042D2F0C84EB946AB4463CDFD3ACD21F2431580556CCDCCF71D363EB5DB
CC1F28A86E2BE20EEA252B05882406022BA0DCD47B44CF2745C46E7B37695A8C
66140F7F8421138892F4801B6D0106543A53CC16344BD81A194FEBD786139377
16683829AD9700B3205A433016971AF248EB257228DE88850EF4DD9314C0FEA2
661CF8688C3D53F22AA6990779EBFE36A6E658BD6D9B80881A3CFDD82739BA45
CCB35AC90D3FFF1DB6F0D85F9273AAB84A5F1542FC35CB2E2AB059C72A48AFC1
B010A5F5C34F34EAB1A93C5A22632DD205AF0786A79AFDDB23227CCD9CBDAA15
581085459FE250BBBC4D930258426AE5F0EC2B32D92BD20A3E2112F44701EB64
66C1DE8DF646DE108DA08FCA308A1CF611A29EB57B6B0AA5B281ECA40D76FA16
D597879F762BF7CE394D18DC76D20630189D088F2433B0E8C971CB07C66E1B7D
10869521223EFD6E1F985DD607832F8A6922F3A7991E8A856D787A3A4D15E091
902C8368DFCF9AA0F11EA6E3E3EEAF36D90D7C5500A05DBAA0C671065C069B7A
80127C68319F43CA8A11A99510B0A8B7B1E654C8AC3E8D668AAEF813B1C5E2DE
5B1C88FADF22976279F1B8285F5EEA144F9AE5827A5B89299EC09650AEAD8210
F7AC185DD36171F3EB972479D537F63B50E8088F4AD38D692662449350CD6DE9
13053B7A675D0F0519B5B7F5A93367AB4B91945C512870DB25935546B48FD610
07E16150F4BD83E8B60B622B7FF1AB525FFEA25F6999C733FB3B39579CC1D94A
D59B64A54DA9FE4C01E4EBADF841193197DD6640CAA6F371095A260DE5DC01B8
DEA95ED045FA7B95DE5A47A7CAEF9406DA16A1BD6B4FCA66B1105570BF8BB79B
0D31DECC727407F47C1A22FB6F818392B62116327A2627A5EF9666EE8BC26CE4
36CB8730DD1D4D5EFAF5FA6A47330C61DEB643C506644C1EDF35D2B3B7FAFE3F
85BF282642056168CB6D42230045E7AA3F84DC7F506506EDE0AB0F26F58BA375
285A1ABBFFD5A0FC0A6DFE97CB69935E132341CAEF0F022DD19B9B368B0C4FD9
3AAC08FDB2219A656D83139769F56B466B95CF4D412DF23AB1A952F8979C7A5C
A5D52FA1B48C90F140B934EB585D094DB52D650029AF22167A5DA9F08FCC3727
D2412AB3B1B4605A00D65EEBA914A515BE7F74FF21BD3F4231072495E724E633
F2433A5ED9413970F91DBF8F60BE39F222D587253AA8719E8B14653F7E486166
90BB16FF05F3F6B0E45E4BE3E27C6679D7DAE638AE3ACAC72EEBB98B57A2562F
7C7BD7DAA3C8C73B78F1F3FB158C88A253D74774970B11342D30A798FFA9B269
512222EFCF4530BFC8481C361522D9BEC6A0A706A57EC4E931E91CFF26875BC7
B6E61FBDD658804B2AD3D9474A2E8AC3005C361BEB7298B3923E75B240505A24
DC1E70AE93C5A6A30A9621DD83366B5594C8534E26DF586F226C0E947E150E97
68207B6B04D41973F487D4C1353E3F1733C3965F146B2B8E0BA3B1F2ECDDA53D
0FB7A4EA07345657454DE24789B8D452C3519685B6782783CB45FBB6159527E6
E1D49352D051F9EC73CE9A0D3E373EF3B38F17242FE8D965A9A1E34DEB59EBF5
0E9247DDF3685DFB4E7D3D35EE35495B91C1FC95139CACE769E8DBA3CBB54553
819C9D996CBF5A82C037D70E0C4D0A331A8EB74A4D3822663E0A9AED80C5D68D
354036DA43F8AA35A984BCFC332556F1F116A5B2750FB125CDB417F602FFA18A
91156FBEBF96A9EF515BF57432F92C55AAAD242CA2BBF9AB1A06DD67737DC422
B50C202E74519F043C7C7B13CFB6B1E77C366BEC19F943E4C04E017D50897C7F
4D9C84EAC23BB9AA6E77BE4E00BD1499187250AE6F18D97FAC685771A058174E
A8826C72B8EEAB1893860BC643C137765DA3233F19D50EAE2B51815266002970
9F10CF1B584AB9EFA87B40112860777CD607D125C029132CDC27736FF32ADC47
9FD926CBD59BFF16890BD6DFE825F13E2E433D2C448BB4946B1200100A4C6C58
5BCD37E44F19CF2162D3A1F9655B64931E26ACB166304726F0CBB50FAFBEC18A
895ECDA0EB2568B336FAB54B0E17887FFC2ECE145F6ECF959AC859E955EAA828
B45706AB98F45BB46151918E35B379B67D17D0D9A6112BF0189715199B597005
EEF6C0127DA4CA415062EE796CFCB3D58155114CD8A01EB71450DD78B69CCC23
ED88199270D1592D758C0615E6F15D384045A4315F86EC610D25AD1E23C026AE
D6B24CEE931AE040EB95BBF662BCE3DC13716AD5FE269922AE57978DA05F371E
FA90757FF7AE0E563793D1696D4AD8DD24767684E2233CEFD0629A6E99340EAD
436D1509B96CF3F6944B9A2A8C658600371B7FC13BDB0A89F577B400B85380D2
EB0DC3EFF705CD588D26434F6D1913FC90E17CFC009112A7F5C4285FB30745AA
38661459BF70CE1528E4AF223B7EA064DFCC4AF314685607D7F48275A72E5E1E
CE8FE1A535285479DEC4361B200E17EA1BC0DBE8B0F8E0751678E83AE38F7CE8
0D1D00670985464E5E7239CCD72DD7081C3B389D50FF8F700D0DFD8D64D27F27
00150718EEC8F8F4FECC0858E57E4A6253EBC53A1549939C9D3BA9D9E38ED3EE
04AECC98C8ACC18BF06DFD4784AB6C2574069E0B2F645C415A92D78B4A989C7B
5E5993CB52AE3FCABD0C607DCC956F60CEB5A0FF055F9B7ACAC896DD54E6EC29
BE203C79F3DBF54B8CF97DC593DCD4AC2B439FBA3E6F6C0FD8F43BE10DC913B7
3F6C39CB290DA14B35F7FD5329D8169816387CDA4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C68DAE93DEB86AB350C47262033C9FAAF70818A5D7F8B72134B62A
AAD92F23C66BD8C217B0CB4310039F0917DE40B5AB834A276E31B6EF8785AFFD
0AE83089985D38C578EFE0B2F85E94E9F28134691588EBD908411036E974E512
71CC0063DA24EED171179933973AE6D78E6DCD1BD872B08567D66421C3F8D00B
0082A9CC279C47C863FB0F906C8A37B82E3DE8401D69391E55590D512BCC84C6
59E06B2F8407B51B983FB76F571DC28E809F4BF0BDD676AD4FE71C0D49B5278E
1BE5859B9D7D602DBC212AF23A97E281E39E68B80534BF71185D838E564A9DA1
858C6D43BCA16F7DB74AF6D8B7583DA8B560CFEFFD5FE0A665E590FD8DB06C90
9001288FB61B61C6631B40A686A52C93BCF81D3522518E6F4D1336298BEB1309
D5313DDDAE77C7EDC2C01CC6D24E50F93B44605F41C9F92E6046241B48399D31
48AB83A323675CCF6E56386C460CBAC48646408B9D35CCB3ED7E2D4540031BB0
990F9918EDD4A9F45E13CAD5624115DD269CA344EADB4FF27C763A6E1A4628B2
C011EB11C8B451D87CB0F5BDAD1CB1F65A6B2EA9EC0111D574BA4192FAE078D5
DB276CEEA8E344D59FA04D1743B0445E2BF9764A594B1F458F9F148CE480314E
BE6ED76A3C8C41B013E56246C51B1558ACA5E0047A2EB6FED9A8F6AC625547B3
06482584CDE835E0E10462A1F245381836712F4114B87C19A431F3AC4F69A84E
19A0CD8F3AA627419FB1001B13E5263DA6B41BF42430C43E2ACD89BA1F5C253F
B87444F07DE38907B58D17A9BF7713E3898334BD99CFBE66C4FDBDD9B9180627
92773DCB2823847EA18AECF20E578428AF5EDDE767DFB9F2FB5A92DA2D93B044
17CC9240E9C69240725AD48AB67E603D910231250152026ACC581C6097D96890
E871AAEF1686958BF96782B62706AC98E317B1F7F2A9AE48FB775117DAB8D0A9
E3CAE4AD82BE10B4591D1645E1411EDF1557062D17AB36C1AB786013DA17E6DF
4D24EB01807D1617B9963517A6278E6ED9B7C0A0BB72D1F4D8D636EBAACBCFDA
AAE5494EA995902761F7557FEF701AA67B20A9B019C760B2BBAE623DF5A9457B
E71903E55F765EB2BA917EBB1BC70EC5ED7CD07E8B0EEF923F69ACF125C7ED23
E55986E920FBE7B55963A157C63A27EF5913CCC979A81BB7AABDCA80424C527B
80072ED8788A3E83B6F77CB76F4723BB02264CC14A45B6745256DC9C88264BA9
3D1B61D98B0849A9FC0FDD3318C6F02672DCA125CCD3B8AC4FD0E771DF55C052
F73CBA3AFCAE741FE28E9B4BB39E6D60149928D9B9BBDAEB18BE1EC486B89616
B10BA843F9D564201AE22E05F6F7AFEE8FFE021A8F74A0D31168BCE6EB752919
E21F4D43D780B6A336BBF93B6BA1B1983C2493CF1748613844681B29E4D6AB77
3091F637CE847C8BD673B1CABCFBC67F3FD496D3909FE5A80F480863A5B0FB0D
0B95163AD741DFE7A35CC782AF17212C9087CE41AF595861CB347654612544A0
41C3F93DB89BC3EEA51264D010DFC501641985060B8735BBAF51A976A534C885
519815287BB44C6C1DD90CA136530ADA88BD7BEF9A0C24B6EA3DD9BD7081DB39
C65AED2B871A9EBD2C08E9B153D572F416F31C8BAD1C97D24E8F822E9DB1997C
E26CB7FE3D34DAC394A43773B02101A8C274698D6A2A43888770059882A8FDE5
AA396EBD58CD1FC98261FE9546C44D20D15D0FFA4E22B5A0CB4FC82C4BB848D0
7EDE0C1005DE2F337F208A379C22193172C271B7877B8456C0969CB37078AD65
499335985084BAEDE5C9D82FDF66DF05C9EE692FED5F88C0B8AA8412B61DAC55
971C9145466CC98D56527938EDB5E548584FAC148C6D5ACE6D2243A0CEF18E8A
EB6825DD9637F4578C9D47B354BCAC4619A7F8E9C09CF9428E7A631C420A08D1
90989027AB9043E2F30442CB7A982E841D5B9166DF86FEA1169FEA3DAD1E7FE5
C7E8F49795DA7A3FDD3141AC202B790A64FCB8832EF7C98D95005E339FF41A03
A56433FBAEDD77E2D4C0ED9BD2DCF45F6BA5A2D78B8B9D69FC39DCDBB55421CC
30444EA9DA277A0ABCD847690B051BD5EAFFC3CBC07187392D22FFE55A492872
F7109042654C6D3C0A97013C14F34C0640B6341DD7DAC3B891C395E7EBE62C2A
481228DB9FBC1CBBB3481B7FF1D1B853FEF70F55023C46799019ED64EBCB1E1A
CB6AB02A0EC0E08A0FE66EC27CBD74F9ACB748842A457D7D25D524AB32E027FF
B7349F60E6112DF7B0803F1857DB3A61D578E4C7014E46B8B236F925E0A73E1F
15030EA41B1E8E50909D6BB91B005C81E19D8B3273E2D5286FEE74194176499C
5917DA2800228F364ECDBFBD5A51257A6AB0570B579E88A5058EE84D1258EFC4
A5A7E18DCBE20DEC1DA560FC100271B5AC530D0CBD5BECDDDF6276608CA2BFA3
D5FACBE0AB382282DDA0668321267BCFC5EB8217179877B7B1915483D4E0A0F5
F5BCE01D7F0BDEBABE33BA960CAE066689289BFDFAC540D3E1FBE67446176858
96E9B64456186C469B5CAC9DA5727DBC8D5BAC9F356825098D94A992EAE05670
7765AEFFB6AB533A5CD92C4A38B5F15529115D38B484207D8F70375F33685187
91912A781A8EE10572D29BF719D021C96D9CD02D69476AC0B91494E9EF33D46D
ED36013722082FFF5ED08D75D49CC09AB4C312D2954DD2D03DAAC2B681D7A601
53CE19AB3CE48BB89C85B9B0B4C79E765E7F900C2AC7BDEF8F40FACC0E829A33
604AFE29931A27219C9DEB29EB6B9C5DB61B2D1A7627E16FA1858DBC9B96EA41
E892E8EB2E35B40B02E56CECCDFD578525FCB5623DA1351D0253B53A28E103F3
FA695B829977FDC844A7E82E4842B40FD37AECA651C58F6A0662BED12A73EDBC
9404EA0234400E6F65F0DAAC98F2AFB98FBB721C2095CA9E6FFD8A921F94B67E
7E100D6EC81280D8B96348FC955EA33BEC1D91D932FEA8A790C218DD6FCF2714
6064E6F486D75602A2234943DC1CE150EB85DF13A0C82A356BBF2829B6065E0B
5320C1E128056965D300A786157F9B9EC4897DD4F12C7911C45D8723CA7D2A6B
00CCA24AC55E90EC48E4ACC15F3C8B3C0F65BD90C45171FB5CC0C1A1D15B5237
1CC1FA65CB61E2E8ECB211C93EA9F7A0E95EE6B06B44F459467B9D1E348B902B
3363E8E2DAC7360F9F7F3BD274731B1A3D05DA8960309A86FF21EECC0C6B78A2
0B87DAE4716DEE4A1926685A32976BBC645437931F9842D36C0798F5C481E2DD
9EAF6B99D5EDBE2499BF00ECB6C5C0F3CB6F2433FCCA5B1F80C5917EA8C3D12C
66F1D16C532B86E162876E6A27D5B8272B06C9662CDD158D94792241F473034A
8645A68D436C46361091FDD988F5D4C05348B811342DD3A2B352DF1985CD0F49
911A0A346813FDDD1DE9E1A13608EFD1A873C38CCD1AF0CDE7B27ED270EDEDED
489482E320B6C22969741F837894C0AE2121020757BF1FD2092F3637173FA779
ECF227CD8F8E2A06C327B57108030856E5E8BD7F439982F7FB9105DE3F3CE500
81BC034F92EFC99C0E85370EE150884E0CA12A092840A740F364E44AE8D92AA8
6066C5A504924D326A00862C8D3DA8725FFAE7E017A42A6A1CFE48B2CBCD1624
540A9E175E977578DC9636A29E80C51633F9B498B102DD0BD186BEA5C46CABB6
D498BC122D73F66936FA0EA881B42CA3AF4A3E2CF81BABCA96E38108FD985811
76A0359F3531317A239486A2278BCF1E6C388D6DDC59C6DA3DB9E6CF0CC24E11
7483CE3EA475C1AB11B1423B6534A835D7E1D2DD547B2376CB0A2CBC4627306C
58257F497C1F7FC1656BE602CAAF7D246ACD3D0CE1522775101DEE97F2610903
C5F36E58CE6B486739CE5265CE416C4308095930150D0AB4682B093CFEE843A3
BFC9BA798ECB12D69DE26EC6AA3257982ECB274ECC3FCCA3E288EE3F0EF0EFD5
6598F4761F381E4EC5CA20C163D011F02A479B77355DFE59C2F9E1387B2E4774
0934C54A3F31BAD0E82E5F05D1F96035667AA14B3C6CBD50988936ADCCB5EECA
F200E1F89176B9DC36CBEA7C2ED59423853D6650D0E4B4C9307EF97055925139
73DF94CC2D3799D9A126A4C615D48876B6230BC8FFC676B149452AA0BEAEE369
9A7F8FFFA8BCBD4D5D0731559C721052784D16ED5F06D14E4FB96F0F69193E86
8789380DC127C1A3A20885282382FB1854E2317ABB61D9F28207671D7C58F1AC
6564A3371420EA9EABD2A144F20F58EB4D6392D92503E01001F5FB965434B51B
C5C9FE203C53FBB2EA72EE4865F3EE0054B00AF9324170F05DCACF49FEF3F433
7CA9C108D262CC3BFE10B6C23F1C7ACA39A6117CE4DB91E197AE3678D7238408
2A6ABBC6F62F9D368D0F93C4E2551F1B85AB7E3E61A7F1029FA5E9FE7BAA6A17
7DA4CC2B58A05760C9A1E878CCB4473B079387E7097D69EF7EBA5E126CF08035
59FEA21109820B4E7C5262D53910DE1DA605EBC25D213F52255DBD146A709446
02BE875C0E8D325BA2C3DEADB6B31FDB14998CE9A257842F4B2FC12B41D90D28
3E6E547DFFAFA5F8C2CDC7472D885F3CFAD49B6349BDB74039EB70471C8680C5
2629C985387B05029DF58E0AF0387A7CD0F3B55733D44AF497C9901964816EC8
42A956F9884A4B245F76DC10DC0AF2EE31FB1205CA35E62925CC12F81F15D593
4DF2891D0C954B079BD2977384B96D846D394953D1544A636A804D2FD66D00DD
193F32736CD5A19A8B6904D34DE04FD876777454D42C7A73BA6C0635F4D60C3D
5A5DF07B0706485E397B667AD5554DBEC8B0D7EDF692F4AB9453DF1DC7A80306
508485665DD0D7D1F2FBEB6A3FAF29FAB8BF5B899225144076451EDAB30B5C3B
CF4A6545B684009954445E65FFB254084F007745881B43AF086CD52495B2BE7A
12DB75FEED520B3D368C16F2D509D9C3917237D73C3D886616BD792F01B6CC21
CB7528AE6937C1C82905A41B5FA795ED72545EE87E0829C84A53A5DA40DAA79C
EF1C48CDA4794414D3A33079BFF21E80CE9369FC25C823A3470ED6C166CAF2C8
516E7F2D5AF26895DF3BBE956423A89CF2272AFB099FDED04DC8D2E6DEEC6AFD
341546CB33447D7D56C66B76FFC70500B370B8957F62A653018E986F4E889332
F3DDBE1A4DD5ACAC5D017B8A799C351F2396BC2B077B3FA45E4ACBD8FDC03A1A
AAE09A418549810321B3D8198462A4FDAB571A450D41163C25D248361F7C6B8D
7717BF7CC73A2A4DCE64FAD101A68B0ADA53CC1162430436FE4552526C2A4AF9
8BDCB8B187F14D2D9158D3CA8FD102191EB1518D01FBDEFF3428631E5F32FFE9
FCF0F8E23DD2AB1C4EA280463A4EEC4D3325E8EADB6F64237777D4CE6687A739
D80E665F0A16D0246E084CA1DC5DCCFD5F6A15E18C6D3FB1211A20825CA7AAA0
391500DD4AB3456628421BA764E71C1F0CE0474B9387802EFB8FBD6FD2D99477
BDC5B2DDDB6FE3BCA0FAB86BE4B1EE8F29B099EBF74F1D9B8C8AAC6D700231CC
D11DA697D5A2E2B45BB3FCA768B1748F638A48077B24B0AC580860B60F327744
9AA4BFC4C430391085ED02313E3C29D18E8928045FFB7FBC2006AE8671E18CD2
BA673924EBB8A89DE4D3EF24D53C0FD1C00879A300DF42CA51735023F5B38E27
C87E16217452D41533A7626CCF82B52BC0A3CF6D2D003C931F4F6B148E5BBE00
822DD6045B1A2FEB75A6BA43CFC5807C5516514647BFE7C97768C9BA2804C480
8888B0925C1592FBDE08AF8CDDA32A97CEDDF0E56B795E6F596A7323AA44DED0
9E52CA3C75D01D1D02F426714CCB722946252CB0F15D87254016D754A9516E28
A0037C23994E9342B11A53AC5A1B5EBF0695A4693D62E6180A57CA983384546F
CE2F3FA4102045BBD100EFB9622B7AA50B42AFFF1CE59206396DC0735BEA8DAC
7036691FBB7BF6A6A7CFB09F9EF79E2D99A27ED6066C4ED502F8AD4D22AEDFFD
0219D62E4016343C8AFD37DABB8E2B7BCB32FD35206BD5AAC4303FEE072FD87B
997D0B8F2357B24BEA89165C71AA2ED435C9DD52616D0291145DDE8FB5C983EB
44AE623B85F62E775BABD36C14622EA39B2F90965124AF855AF2CF4E1043EAF8
F1E06165573A94C6792DAF3FBEA2AE79810E86318CEA0488C2CE9213D2DD0883
3A4E4DA3CB08A02ED723CD8484A122C2CEC798F1025D4271541A33AD33541737
F2E43EEF6A5661BA7773DA18514A1ACB9D6C3B6F4FC1531C5795A6E9F871A2E0
A891D00642CFB0E93C6F1EA5B9F8AC612D3A0B03B8B549872EE75AA3E842B635
F6E58D94F80DC87A3DEE8A8EFCC84F58309DDB411886D7FBFF91A4DC14D6A5A8
01674B733DB224E5BF96048D467F924D062B3FF12119D96590BC64B08B49EB31
3D349385CD0DA602385370C031590770763EB580DD932CCB56EB975A2B3E2CDA
2F0BE82E167589659AE5A380CC4A81D8A0CE7ED0D5F914997C032AADF13EF2E9
67E742C95ABEC4B2D702563C571A4E4EC8C4793F211069373025F74AFA482664
C59B17BCDCDBB7561F1B6862EE1773FFF54FC9616755F94A8EABB3CE42618FB0
01EA9422CD3573D716CF6FFD07E726AC79A6B27D72CA62AAAB3FEC63D8CCB795
19558A5198F69029CCE4D1C5B14D7B9BE1DA54BE91784BBAE0A6E70AB8B09F9A
F38A073C0FC161B50FDF3D5090F32068FAE5A07BA7C5D2474A2EAD990108D384
6FE48A7BAD80EA385484284F9BA65B19A56DE30EA1EA95DD9B7CE98C2D4DF4EB
A1F42970894CEAF8F31CF9F0C185A96D63C80F935A0A17ADE04554505ACF918C
00AC3782A3BC45306FF32BD6052EA042C661DDC6D9EA3EDC96C7B0579EEE49F8
39CAF5D4FC24976307B20F1BB6FFE177871309AA5B3C84D8953920140ECFAA3D
DC8FA47028C4E5921196EC3FBA3E7D3CC5BC27297C5BE4A33293591879007718
BB983E94E7C1C2DA740C3177B7E4676B60326BC6E16049F0F60750C5FCBF2E7D
91938787040D7C30B1951ABF407800635D3C8599D73B891FEEF7BB41EED04A55
39B18D3F3B8793F6C64B17A141D8FF68B50CC1E92BC6694D83F9CE5865A95E0A
59BEA57CC96C2994CAFFA7B04EFDA735FE89131215F9E7FC646A0B453ADF416C
8F6602F1D671B0A9E989A7F06E8930EAE67A8A082E21E9D5B691621FF5E13883
05BB77D35180AA00B443915D436C16B4C9316685309890899D113138CA800BF6
5661BA08C3C213586EBE6CC76A66A6E7FF1D9B21E1BD8FB5843FB4EF1A6E0331
0CD747DA43EEBD355A465D0F434B02B85B9E5AE0DD8F1B4DE870DDFEF1E47302
C69090CFF8815E0ED9B836ADE637D73077B72F45E7262036D62E355B77DC794D
6373B713BE7A1666D0126713294E1357D4F5D19C4929463DB9BEF67457C0BF94
9F667E991BA993F3B5FEE71B6BCFA9A9157A06801A4ADAEB08BD626837E1393F
30F89AB17C2A17612B916654C44CE0BC64908B4CF8D43B0E601FDB637D0DF298
C61921267940BD35B74A60411E672649CE80D9FEF6998CA19262C5DF215ED64D
B2AF4DDEF4ECA79BA75D76E66BE0F594048583D09BE4F520FD00169C98560C17
527E7D601077B060B72BA8C6E6D51FC452FEC38A58DD73690617A97851BCE295
057EE59E3D2FFF8EC80571152057B06FA475A6228876ABBC78C5D95A237A77EF
640622C50CFC1A743930289DC2FA739504B9FC3C26625C170BCD985EDB123C99
41E5D2CB7C802275024AE29EDACAA317AB5C3F3F93F0C7E2C0F39B9E4D9AE8C1
955755E28DBC789D7F3F28A80AD7FBD718B1C93E41DB7BFD00B4623B5F27CF4E
5FE057DFCDA6D91C31A315394F3B6E5662BE90ED048A30304026E60AA20A9F78
7797F926BDB7759F773B5BA3614BEC2466EFC4388242242335BF6663088E4ABF
46879B9971F5F98CF2854B4AC5DF9413FD997DD6B9FD61E1541B0BA8A31996B2
487C693526D7EF587D1298781B63F6E4CEDB8597F0EBDFA03742974620C88182
FBB79F619473D45E5B325531D187D51E05CAEAF730FFF37E860BD8D688E91FAB
CDCBD2B2E659EF747BD6B0AA1C9F142B38FBB3EFC535089B0CF16EFB0DE62713
3372EAC31B125BB3A4BAEDD1FDF6218C862898B307FE0A8DFA11BA9F47B3A2A5
DC145B0D1FEBBB35C67C5E205DE29BCF83C24B3B0F9E93F226D709B4C7FEDC95
A98C0A6A6B40B0C35B576DCE2F0AB9A32BC54999EA417DE1E67DAC679082D9AE
804145F9784F21D826ADE565700FAC25610A8E7230274AC136CEB6AA922F3311
133B72BFF75187B206AA3D8A145D6E114890A8ABC5175854B8771856F4656C65
0285B1F408C6B5DC7D260A040448788B4AD254A561CF3B2E35B5BE2EE34C7B74
199CAFB684E6045AD19FB6B5E7CA98908E76485298E9AE9F33D485B6476B8831
678BDDC1B0C9884D0521786E3FFB8FC5DCBACDCB043A79E76E4F6FE223B11059
6C75432C98337CCE4352608602B8E694F4353F6EE972C3F75497BA1F253D57AC
414D41451BC8D26CBAEAB02D9EC34CC9EFDD9DA23C2B6E82BB66B5957C90DA46
0C7589C031DBB2212DB1529851BF96D615C24C9B05AB35C081586C5C6B4530C2
CCF358B02F5FB1DB6D902DE8DDDC48C0FC104086F38F869FDD630EC677716B05
2E39A4AD3DBF2C38EE13A4844654B6D5848346660298F253E362CE686E6C8C65
50335565925076AA37000594753A6F64FFD674770013E9FC43C8276C466A7D16
55615369EC8D01784176B9A506D24C7744EE01AB33228E8FAB8A96AF94D817FD
7EF33529E27A38CEFA8A294722C3DF38AEA475C5301500C564B9DE96D6F5EF99
4E0F94E78502E158A6D2F99726B073268E1FE41972938C788547342A20DB4E22
76D673A44182BBFD148D91D2066A5662265D2964EA41789FE1A979E4D3610511
DB0215F5B418877256CDC507E10441C2EE6477F7E0777A0753DC03F5917347F8
F8C33EAB57F02D8482E15D9A32FE27E0042ED34D59515F32333F15828A483C94
8FEFC845ECC69ABF353905D6E3CBF86029CC979B757D4563DFA8FDC201D70E8E
1A6529F0482DB5C5AAAE8A2E99EDF5AC6BDB3556DBD953A65C41AF863BB8527D
3670FD809427A84A1DCB2140B335FA159D40F7C844D112E6E3F8C28EC36BA0E3
591D0586818FB3E6CA347B95115D4D961DEDA71E18C99FE32F67FB912234A80D
9BCB559929FD0D5E8ABFF55551FCE9DB02B4356E0CC0D188AA6318C777B22D6B
701D9048C9D9216161279B5576DB01670E14336156795D85C8C6B344D13CFCB9
27D25857D3C8CF2FF9EA4CC7BFBC30CCB7023CD41BBFDF804F9A2570AFCD5690
C6DA49594A4B14E6C474F88FE4C3E2DC95C66C470B7F570C5271C9F0FE7B9639
F7AE08D8A0B8960531A7FA3B3D360E533A15C8559E6030B7E1B328B8D73B842C
7222D65D3F230719F663919448DAAC7D2D68ED07CE000C6D0B092AAC8BB221E1
E0D699DFFB62DD8C6273E3775E6EBC3297275B563898E985D51927E2104110D3
2C39794E709573E34EFF7218713B0692D3F714BA52669FEF7D47530FABCAFC5B
2428C31C264FB902D39829A3A2065CE523BF267039C84295854136B0ED501C4A
3700EADF2DE3E452D77DBA6D676DDF1F6C61D7CA16FCCBB434DF47C1BD2475BE
8020A27CBD23A30573719F90CBF32D393BADB4970E40FD1DD80750993B5F0DE8
2FBA7D3A790E2A14CF54722827FBC24AEFA47779CE3820076E700BFD61897CFA
1548458593DE92659B7F626A5D88C565347A3E4F50AA494ABB740D8C8153D7D2
FAB1904DC11E8B525A7CF6B132AA3693B5B9408DC24886F71C86C0678D60DBE4
D046B2FD6D58DFEA34D9251B37858B057790D96106560AAB76BB057F8FEA0335
243A92C21F8D4A13F0652C35ECEC6D8523FCFBB022EE10C5A4FEF05F65AC3B6F
0EDE253F164251F412F002D7E8CE4477A722B1FA619B172B5AEBD5B35396D5BF
EE11FEC32494E441C0FE7E6327929AD378E294549F01FF5229ED170F92F97C26
C1B7F1E8C8DE87E0F8C44BACEB1461A9454B3DF65AEFA7AFF1B324BB241990FF
8696F98AF7F37CBC224FCC928AAC938DE38D212B84A881604CFFEDA35887A250
B864C6A8220E6085C373BEF3FC3DEAF2DFE853171B0D16123651A887DD1A7414
E286DADE30797E4E19A9FFF1C0DE7638578F4AF4154C6CF3F090F3B43F3FD0D5
FBB9DADA442BDCD7323568E6BB18152BE84BE07FABBB6EB5E7E7F563820BE1BD
35C9B27E25D2FED418A3A603502AD328CF06B3378A584D2FAD4D66B1331E60ED
86EC6CFDA227E015ED6BEF9DA77082AACC9092202CB98B3AB35FA8BD780E394B
864297FF68FDF28C02B28B50215986384F196E634C5BA44F55008E11B406EB88
B16CAA8ACF435B8412C3BD5855FDE9F1DC7F178C6DC9EC6A218D89A2F6064294
EA1B5193834EE16F85AD833EF169C2DB337883575C580932533F055A49653F8A
986F48EEE96EDEECACE6BB94E504EE8128F6D6EE8F4344239E3F77400582A402
4016D56F12D9EB3777EE02FE6441442D75DE6ED424F496792BD043E88280F51C
26A12C3F4D1881A593FF2AECDF8BBF38FCB70E2649BA8BFA1847A58F58EE7D3C
E08E82952A1D4EB8886D681684D0E442E59AB016ECF8FFAAF3F2A65EF750C265
B3BFF141CAD08532B93D45393F76BA5CE298C1B3E3B0673B71DDF277DDBCBEF8
00CF4E9466297223C40C01C07E7DEDAD4735E1BAD50AE61913E55DB1D48F0F66
34490FB2005C482CDD3199C7CE7EEECF5B0BF7EF74E68C097179D57CAD51D7CD
42A1DE21825EED15FC580B32DD849A81470970F446D135C069D02BF6D70A0E1E
5EFADDE44E4EF010C4CA10099BA9DA95F56A326EA8E00844EFBBBC07BD0FC0BE
EA961E8CF22319665A5CD2BD5AA7FFB2528CFF1CE7985ABB390523F32C8B8383
21E61BADF89910954E18CE65B10F905CF00663ECBBCEFB0DF69BEB72FD7EDF99
3E8B4DE6A34EFF73518664768DF75B1026FF91679E598680079EBB858239570D
7C44B91E9327D955DA8D4C2E26E71FD8CEE1CC5BE30BAEE75E2D16DDDF4D9A0B
835C038350472A22EC6A69B85AC0607B8BDF609026BC270B9DE7FF45B2501B71
9B28E7A9EDFC1D48C706EA1DFAA301CE0525C22DAC2EC1A813AF5E5047FE0BA9
A413698C11611BF3F7A61E38B33E602C528F6C445D91A4EBF0BA0EF7EFF29A75
681260F8452CF1DA3DEB81FDE6E3165BE22412202DEBCC94E518C0926E70B9B2
6C2A693E90DF8782FE0584ABB18035DFA56287BCE747212916985796EC409515
60A9EF4819D4D658F1E5EFBBF87080BA844F201086925BEA0719B47CEE618D3E
19284D97CF9015E4592994C7CCB942F214821E335654BBA80FE6B64D929D3F73
DBED822946F6C78197E2F903F0B4F5F420D5B75AE8069D0FD3363195812374B8
AB540368858362BD3301406DDFA6FA03218088551F0A8DD7B1C5ABD4CFF4B0C8
501016BB9F449CA313C5992903EC80CBD9A4BE428CE0CE7DBC07D338279254B6
7DF83BF9C4FE5EE57CBD1BF28AE931D2A147EFA74DA7BC5D2813B7A2DF8EAF0B
FF75CBCD814C6BF06FFE855BD2D88EEC50FE71F7C985C078D7B40880EC26F845
90210E4CA83CDE8BACBA2E50DCFA96419114099B5245B2197318535CA83BFF7F
E613E7DBBE18D1CAFDE76592C9D4EC90A324BBAA66EA4A5DD232165068E78DDD
2EB48AAAC889B08B0ECD829D60D91855CC803FAAB982EF16E44C7762C49F4E0E
C279E09D5BED979245F525EBC9CFC3FCD3B77579CF87CC8430BFB001589F8BA0
AEAB952CDC49FC357B3A7072A0881754886E06AAE16854A51D16CF4D2451FAFC
B9E3557225C143BE24C19A66E7C5B784E8E2848EA662FD26874D88525387D8D2
176685B102A2B4E74FC04A64B60B5A5CF3BA3342616BD86790A7D020B03DB073
6B8F56DA30AAB7B4520D02B95B516284C56B5BA1FB3503AA0B2AB4BAED589DC8
B9172AAB669CAEA1D2CE8A71A6B6721CC9CAF20FEC34BC6844B076999D50613A
214BBB56986A9A067C2DEC692D2627329ED5F8C16CEAA06FED505EC6A37AF39A
4E178F7766F155FA5C1C2C33E9EABF31AAABC7962A48A07DBD34929B4F9CFC41
2DCFCB309497139A17CED5C364D02954E89DDB87ABF78E25FC99875D8C03D594
508908A1B5CF19BFA6E6B56891F4D8D35DB5316E37BB52769E9B95D429E5CCF1
36248C0A7020504A86F2F40B9B0777BB6EAE2CB867D68AC3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Regular
%!PS-AdobeFont-1.0: PLRoman12-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31595
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Regular known{/PLRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Regular)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /PLRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-44 -261 998 919}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7A26E167F6FFBFA02D201035C41858D1C9BC3
C5482BBAFCF7DF8061B51863FDE697437824573E60CC3736B77D96B9B17F4AC2
4CCBC0394C27774C26FC66F04993D0E73F619503565343C1E03ED8880A14A7A8
E686CEAF12D18FB2C70E54D7C524923386E488A5781001B47276F3CCB8173466
544141F99FD85B6BCEAD8A7E1294BA184AC78C372F2F08D8C26E0D96C407EA8F
1F5A285325ACF6586197C96CFC5AFE9B3D492E233636F73462569DC794CB99F7
633BA55731F3D17A073EA9CDF91F8D30740FCBD8D6650EF871794D7466132A11
622934F97950BE7CE8EF2D130F8283ADD70FF3885814788FC9959AEC25BFE2AC
2E41A3FB3B92BBC8508784969A2CEF8F3F84F71D59C184816E05A7C614086DA7
9390631557257AE26CC85604DB4B0AC6A2D3940992695E2EF2BCAB35BD81EC70
E8F0D3BF4A2147E5556526F5E5F2205D56973203E08505C51D9D58A189268CEB
E96DDAD9059A3D7FBB90FDECED93B7524614BE7C9536154FD33D8E79B4C628C9
2AF3A011B6574E756337BA0CDA14ECCF958C3EB8EE33FD63CAA15C656649561B
5699D761BD39AFEA6497234CEB901BC9D33B0D40297619D848B7EA062080F317
688E9FF18982975C774C401AA6CAF76665774AC5A49814B667887F864FE14B7F
CE07399C862B8259F60D6B24EE59C5DB87ADEF0580CE52DE5680DC3150F45F14
F477BCBF93EC3ACC8AB79ED6FA760677D31EE76F2616C454ABEAB63826AC366D
2EA77A28032CEAD4885CBB8770B7F474F7DC8B45471388614974CE03B8DA5987
B96E0468609EE4FE3C25EF47286BCBEAC5A4709B51E682537890CF0F8A4B01F9
F14DF8789E922361785BB93039DBD04B00FE9AD436E65FE02483ED70660B8E1C
B367EB5133DA9769F396DB2E840596AFED2354CA2CD158BEAEB3DB54349E9C49
C7F91943F369D1533E689A5345A060ECCFB6598F7CE2EAF0C8839DCE3CC7D137
64733DBC22F6223519A4EBB4EB98C1F6B64455C7875D2449B73CC71417F5D471
0460C45C427DA7BEDF22F6F827895B40A47D98FADA1AC8EA8CC04165E5E49B83
8935D95989BCF5CF48F09EB6FAA9EC8FB5ABD0ADE7778C7B84D569EBE76E1194
7E463F2F1B353FA5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic12-Italic
%!PS-AdobeFont-1.0: PLMathItalic12-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32848
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLMathItalic12-Italic known{/PLMathItalic12-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic12-Italic)readonly def
/FamilyName(PLMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /PLMathItalic12-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7A26E167F6FFBFA02D201035C41858D1C9BC3
C5482BBD107AB18A030FF0012B4F80F35E3B5F2DACDA8DA3AF61CA4B9D6F97CA
640BBDA51C5EE4608B0BA41E06E5531A75A3AA83454901AD3EB84A39DDF29139
7F4CC0CDC03202665FB60DB649BF152427838B7192CEC676AA2A0DA9BFFBCDE5
69E48508484670CC75B5E5A534E17E0D46EE7ADB21ACAC0F04EF074403ED76F2
C5C3CFC51955878BC863C6A9608F1ABB162BFB4C183484B3EA75B0D230E9E8B7
12239C08822160EDD9A314D18B0B3695FF1B39260F8B7635556ACDF597C50EE4
BA1BC8827C773C2B82E5645E3E7DA9D7F712E90C68E6CC68C622A6D7F5B5FA6A
CDF9CF484C08411A81036590747D5CD5F9BC810A3BA1F986DB6D3DBC38CD4B60
DC81DC2E6F4519771118F57F6513B74F9F6C1F1587ACEEE6F5C727AA69D611D6
AAC4F958DB61B6128B06B22FD2E735799294EAB41FAA764ECD7CEEE9FFA5CA87
7B3BB43D2C30A953182ED3568B7D74A8DAF08731634F37BB60C7875CEC5973F9
5A8C872458B63F686FD09CF00C8B389DC2C5A575D80E56E93F96FF799BE3606B
8A12ECA7752E0477CC7F945AA8CA30ECC8B0101B45D2A6AFFB7E617C9265B466
295CF70CB228FD9BB9C374B5FEADBC644F5DB80AD83E7792DE58FD4A510C5941
F83318E76520BFE146C917E2B5324EA8770A4C835ED0BE381CA8423F9E792CB7
C220C933BA0F83A021B9E3E55B3ABF6DD4AD66FA521AF1D62621012F048B4760
A6C2E62E07E1BB1456C23EEC38997507E322CA3BED912006D4D60B9815FDD84D
10508B81A0259809EE9F92F76660472C5BA5E78AB435FACF202729FD3E48D7EC
7516E263C79D6A97268DA46DF6052ADB2122FB8822F3A8CF410007FE6521EFAD
FBC23B29B8EF5B8C6E1FB46E5C40B1D2D23D99FAE303629436BB0441D1ACFE4B
66296218E1EFC5BE6D85403FD542F552F40503BD7F3E05B0DE897990729C0F4F
FCB8CF83D7102EE1EF1ADE1A68A18871E174D035568CCF5E146290F93ECFECB6
6E21439D3DF2D7F68292C24BEA418AD1B5584D35A6E465424B06337662B9485F
4FF3DAB0438C65E5A1EB77AFE9274CC14073847C420ED9E422045F45A358A7A1
62679E52850A292A0067F5795C0DA5DB14593F57087E60E18B8233387B627D7E
96D7885472A1F3180A5D75CDC4B045FE299481B1D32C3D557ED2F6F284CBCF88
56B2A22E72C0C523FF3D75F725FF498C30ADAE8FB6E33CA153EB711DC6EA346C
615F5E30A79F2EF46AF98FF43B1D23ED27CE02C44E8A3EDCADDF8FCD6E289C19
A7056DA716700D5FBBE35D527F40F2E194844E76B625836C94F281B434A67575
0515971B4CE4375AE89C979F94EF56F87FB299F171ABEE1BC7E5F6D6DAA8EF6B
2C021F43EF5BC62AB81BAB1AF44BFF337799E457D590247133E8079ECAFB9AA8
02F3002A2944791F2E199D60BEE2346EF570DD073CD3190EA23379DD92B7BA28
95C41A602E746E7F9A862C93438C1604104E1175EFB44CC4C632B1D5D2BD3E27
2043E9223D3C8C26B70C9DA4983601072BE845DA623DF3552990BC4E314A0EDB
BCCEB0F2C34E70591A1A14D96B291CA53ECEB88F7A7E15CA638CE64252287616
8F0A6EB20C1D528AF5650261EC16A8F5E33107545E86D420E5D8526D9F2407B7
A0D14B76B58C9F90C924CE01224282904911C50C1FB0C41FE1D6CC8AB4C5D62B
7586229921DC2F9B13C363C2457C352467513DA5FB7717EB5F51699AA219E19B
1D6D0A4DDC7D2A62965228444F9E6272291050BD9ADDD9EBA911581214E4F7F6
CBC0DB9E510B4E61A73045CC9A7A7E701E93D5BEC043B961C5AF5C30423CEBFF
0781D99A5972C2DC7551A0B9BD4F15392BC9149122998CA05DEF0BAD277BF961
F8E09F12E4B95D50AFA8F661F086287299DF9B2AA580BD275EBB6E78E5F14B2E
505A1E9B44D346BDBB790085F272BA6A6E1A8256D08BD2A8F72FACB28FA010F2
99C49C84C0B833315629060DF5C76A41312E466BF636B7E12423B96986025A25
F6A372E8F5CA5FCB3C101462D88077EAFD6F98DA2D6199C89BF33563F83493A6
2614E851A453D551CEE6791CB0A534CACD76436AB9848EDFE6F448B4F6DF68AA
AA9BF577BFC1469B0ADDF72721E22F958195DE55021531A79738602756AAB932
89066092D12CE58D614836083E9F44B9377EF879532BB3B38F846B6CE9ADF97C
7539A72E553F93AF527554F1C544B66D08115539D8B7EAE62FB5024DBA6D3546
6EC04CB05C4C76AB62559C9521D591C2BD542B32D25DB8C7E0322C309FAA8C21
11E3AA99BEEB105F151D9D50D5734B27FCD8B6B5C151E645CB3B345B898F3BEA
4A07515A1F1D0F8844CD50973F30E5BF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F231A544
0C61220BC9572BDC4DCC9EDEB6C8033AACBCBF00293DA97D9BA21BED9FE2BE83
AA7585F9B7FAFA718E48093E2BD0287A3C313E9F2534823FDFAFCA66543CFB72
E8CDD245A3519F7136A882F1F468479C013ADF5F0AF5D89448E25BBD0E75F70B
0F06F5417CA5CB3E7BD25031B671273D0BF3A3C7921F473013C85B689D316D3D
31DE395189130541860067282DB0F147D29B449C4E317060CB54C640DCDD7CE4
7338B92353B26F0CD98DBD1FADA5AA86EE07E447D8FED8BFDB27007908D48B1D
DBB63B0ED2891146949C92A50DFACCBF9089847F8EE4A2A279348346C7BC326C
4FB78A42CA18459BB90886A9D3F3B3D28B3D3272BEB5EB9167E58B974E5A6FCF
0C7E4C041B33D2AE312A312CB07CE13E38C0534839AE3421349C49878E3945DE
280110D3161CC9F34441BE2105B861FAC6C3D38F32F29B1DB2FA3160D4CACF97
B0D86FF2BC399BEAA86FF6D34DCF21BCB6C44689162EB4A741E46AD71C3E2F92
EF983C0CFF9A3BC2D114FA43CE0B06A5B8FB130A3936C4504264CD1EA84CDFBD
16ECAAB6DAE2D8907671248569054F450ECE4FF7677CEE2603269D5F288AB410
ACA8C41E74E299813223CA556E23D42C79FF0402117F41CD92611D851BABF034
0C25F564CA92BD032903AB9AC57FA2B056916212E82AE8D01C6BBBF92957AE60
FBD4ECC6B166C318121B91A44E9AD3B4E5F7FD7C6AFC0E22948EB6B4CAAA6E96
E1B77E39CF919273E0FC388389432A42B0F48D3B17954EA16D630FDE18034766
867EF86DE95F31449EF355650C284961104DE93DE09EEF40ED1A5A247FA60A89
A2EF6AB95CAE1FB11A010632416E2316A739A2703A399BACCB0A38FF9D61E3D9
102C08C8FAF1D2CAA3E4670A248C72AF4B9FF4EA1AD94FCD6D373246804BA5F2
171C5C56B6562A1004688D162C7FA895DCCBD8276620B10E6C7E03FEA753E582
C59264192CC13EA5A623CAAD1FA80328613C1808BBC8AF9626B1DF061FFD64D5
E9727ED81446B4C23BFAC73BE5C217E4514A2E52CBCDE83FC74CF95236DE8227
69582EBD6E8833159894969F9FA9FF9876182603E331700047B3B66412634CEC
1EC4FD5C0A2CE7738FE237877690E2021015E12CA0DEE8C1E720B5D0C5249E5C
6F4AF21E3A8BE170BEA9EA5C915BDBBE7ECC45AFBE83FD7AE189510DB572DCF2
1972E5CE1A373AA27126199F3AD1DC69B5C9EB911281FBD0B01EC6A7CF522CAE
89E82F7784D21662F568DC9189F7E3A3CA0D7B4CC94DA0FA346806C086E7A55B
48B6D1677896BE2803C2B01EA55296FF3BEC9B3870F03C67135D3E8850002CE5
6D2009EC2ACC1ADD39DD3006B0A2811B522E661BD0C1B7AAE7BA5FBA6FBDEDB0
B7D8AE9925C92F3000131DE408C2B7E0EDBD1371F20C284307E54889EA74760E
16926FC20D903E9DDF533FB7D592E28A4431E1C30A523DCB49AFFC1777436277
D984277A323236AC834D57F69EAF2BD459C51EE7A31E4510F5196DF93DC22D53
B21CC59B60FFCDF4EE3796E249E401617B569C73B926848496994909B2E85BA2
BB40F538F5B022C9DD10D596A493EE99BC53D45F9CD58DDD3964CA3CC7E0AB38
CCA4B5D0F4101C24D58C65FAF6336F3278A678FDDA73D5EE3FB3CF47900B4D5E
5806811912B3317E50DEC9976448C6B948F7712C064081A7EC21FD1F6781D44D
C2D138852E432992925546D047F2BB9EBA43ABBBA8202D430CA1A10E3A4E2B8A
1F5584EB0A7E91A4FCB9BCD2AD4F3305B812FC8512AC127BBE2554524D958A00
24F320D874B005A6F0173EF1350FBB0313A45FE3022BD78AF3677FA5A289ACA0
5D90B5C90A11187357FC46AC8DC1C2D5F7F19487E8C2B17A5489BFCD3AE3810C
3DA334C7BAB0E5221546611A586F818DFFC59E4382D77CA2CC650F27FD453BED
9574E752DE4F12067CA525859B73E6FD4FDC8F586559540722D841F078106D54
A33F97FFD30E36E69B3F433354A88B09E25384B0C3A3A15EDC6C87355C5F7C8F
822D1C02DA3CDB78AED53F98161464DC5DFD2B460B990B04A6781213329980CF
CFB18CF7CBE6C7FA3C27329E3AFF1B13F40D3F8D619DB75BBA85281C413245BA
C803335326C3086CB238DCB99CBCF2F46B8FFFDBBF6346F079A05D382BC64E37
E34B0F5AD1DB099220651434792934244C0990CD5D264A457C0B7D8A0B2087D1
106B5F1BBC113A4110B17E7A2D7E4D7B9F3C55F19F4663A52D372103FD8A2DEF
B6371422CDD07263005CD5709EF0DEAB86E06EACF7F5DA3BC32030E4E23C5E0E
7E84A28FACB03DEDB6AC72F21880180631C81482322567103B18CB7C8DA45DD0
F6707DC77BE488A36A54D9DE48B6CB1AF0CDE7B27ED2707252504B6C74D1B121
5AEE671DA58803170DB43BA10C7628A9A8A5208EBECF35F1F2C83C4716866559
9D948896FB43C31F70320362EBA8FE17289B0B15C33CAB44E9461FB09B9B2CAA
A99336BC2301C2B38FD9308BDC1A1B3482A99DC90A7F04E2EF7D6FF00055856C
79C5FDC53E14B766CA8DCD4ED35AF39CBC57D26831630E0C6CBA9143712D7328
B087D8C9FB45E4E8547D0D12C85C748311C9CB87B65AD43CEF11E4819CC5BE17
E8964FF64E3BB1439417BB2108E0E6FC6C414EBC06A3264AEB5A7A75514A828B
54FFC3E6822BF981212D13B42DDDE6A5B490374097FAA2C1DF59835E8856E8DF
A49E2CFE315CDAC8483406A10524BA00DA02F2DA6615BD008EC63F4C2D3E5E1C
EF7BC968432970CA897C8F8A273EDAFE69F9C3D2D7DD4B162AE55C6756DD5D25
D06821F2CCF1DDC6FF153BACC01C1F7EBE547F10F4F1FD4C20B8E3F22CE2C039
4C2B2BA0D911E7CE1C4E2D9B09BEDD64F775725EEAB7620A10246A3572DAE475
8CB34755F069B73264603D00509EF23D50EC5BEE2FB9EF6B068F37D018A15E3B
58D0F20D55A9010E2375CB2A8F0F17773C8DCD6C76B1C7D4FF35F5419CFB5530
2F0CA0E49950EB289A71840E467E267AC21CE20DEE3DFDE4C6DA82938A305C83
811AB8937263B0494BBA03B1EDCEFDE9407EECFFC5E115E98F315EAE698F95C0
A1C81E61E4FAEBFA9F1684F095F8B4E7AAE5F7552F82A6C3CF2AE1EEF0F6378A
D6C04DB0CB91EDDCF7538EACD4A65A2D435DB47524BBB52D5F3B02A9C254F082
AE2BDE83E7367CAEB8F64C657D4147F926EE4A689C295DB72601D43AF399C226
4540350C9C4105F867E2AA3F10C3D702F21D06A6F3355819580C478B6E2A509C
ED4243271BC7C48A4186630DA766AE8A57D650A226E068F1614918C0530A8383
46B7C97C616E393DAF3553A5328123CC6538E43896A851344E2E558660171175
A2563CAA355DE4B122317B6DC4051BBDBDA7942886181D89F8EA7BA11962E3CB
744DC17714ADF12E3A6BA5E1EEDF1730B4A7D2CED7BEF00A347F9CC5E83F2940
5CADF62219D25A6308E3C80A63783C9D73B889BA71F5A5DC318DB29744CA1B3C
D0DB33DE8AD5B269691F3457B094E8E2B1A483ED40E46D109DA5F02CEA6BF060
8981083A11F82D8B318E8D3296CFD614BF1BEB5E8857B7F9811F323BEAD6ADB3
37FD15F086A946092E64BB91D4B4A1F6FCDA17D8889E782A464DB2793F99CBDE
9CAAB4BDACE0D592E8790E405B9610F18D34F88E34236850880E04BF198A9697
F78C7D10397B95C20B2844E08EF68957074EF51DB02F81D231A526D6EBCBECB4
6D7BBFA670B4C844D370ED9E4ABCD02E3516DAE89BF2BB48FD2EED20B2484ECE
6D7A6B06B26A64649EC2FAC3C6C881BF12B0CD5BAE18A5D396586ED5CEB10BE7
2C69A9163A1EE43CC198A13102322862FB58196876AAA8B5B09F27A43DB37A6E
21371ED823589E9DE181A9168B0184092E75F64BA80709D21381D77729CE0617
0BE8FA8D4C3CED995DCA7A652A504BD6F48D79CBBA4870961814BD84D8801DEB
6A30F8BA2970DA0993AAA2CC647F9ADF3C55821E5463A006FB22E2DE62D6C898
23D1D0348CDB757D895DAE6C00630F4342716DAAB528258C06D0EB636BB99B6F
C98D802AC6E789E218E0CEE6E6B4A8FD798892E8865EBFEE9A71FF308500BE95
B54CB779DE63B6A4FA13F85E56D1FFBA60EF7079A9C3DB907D0ADB8BCB39981A
A52356048689A810612DDB862408BBC31C5402905F10A76E35B4074ECD6E129C
444C8E47A7E1EEEF76AF9B9C60BCFE36B32CED980D9FA956636233CD4A0CACBE
9120750E6F5E40B331E480A50E49FE0B669F0F11B262A65E4BC9571E13A6D25A
F7DA08A064E8A12F9ABF48FD69D228564151BADF167EC541DAB63DF73626391A
4FFA3F8929AC788CF783DE771660D617BFFB757D88A77C5C5009DA8D813FB586
3C6F48FC65BF0EDE7736CF86DB504EB4F60DEE91592BFBB2663220DF6E8D8CF0
75E6D48B0934EDDBB37B1CD40ABE188D9A6EBC1B7147572728D1A905C430EF17
4E787D404C4B7678DACB3F1EEBFDB8F12D22A39AA3F9B6A0EF6D4714B8F6519B
440F7D02D73C4280251DA84FC40DFB8532B820B484BE7D1BA4D4AEA678EFD7B2
69A1B33EEC97BBBC1940A57648CF204F1C82FD856A8463FB3A7CFB2BDAF86BDE
B89BCCFAE1F04BCA8B3EFC5893E9A64B27A918CE080D78757175C780B8444F9D
0335FC83AC8B962312B86C3BF0443E5D2059BE892CCE838ECB819ED827495E3B
3EBA4A53922C4710B1F39B8F4A82C37AB1FF1B4980B0BAA3A4797C3DE2479546
C58FFB6D4F67DD54B97FA91BCD245EAAACE703DB59B25E9BA3D3183F4AC973A0
5E48D15DBD78FAB3E40071B568633E6DD20BE8A590BF99760E2DC54DA5CE824F
3D4F50D509C0218FC6C3F644509E5EAE38E1B562A2CD999AE5ED17FE2105A653
FE9CBDEA2135951DB6F54C9F696596CD8F889057BC71B8BD98CE1E89586D654B
57B5E3E2E1EFAA6C1BC75255020FB738783D87F167752E40325864EAA6A18B3E
637F614EF64DC837018886A5F147C1F02BB37C7DFD0E7D4FB76BFF93AA9F0FC4
666352EA5ACC3E392BA4D72A4F191B4E97D90318DC9F213A83D5C25FF1A384B5
DC34F2B1631C3205405881F50E028AC3D8021C8C59E8E4398F568B335F0EF0AE
FBAC263077971500ACE9A5B0A934E9E34E2053156E3C56BCC14BE9EDD8AD3BD8
FB3CD36D38552A3AC4447FD80DBA49529F10EB7B45D647A446300EC6641981FB
1A7A4DA28C77F9148E36FB79E4C43A8EB0303D23
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE6257B72DC16D9
D0DF880EED34399ECDBA12E343A4E98C401049DF3269D51B05E6CD3ADDD27D09
B504F072B85E8E5B867793FD6BCE759F838227F22C21EF480B4213C0F0282032
7BCA4E19A46F1A7B1D5C72BFEECC56AEA9C6C4D28960B17BF4CEAD88713B289E
12D7842C2A3A9861C89A23A219AAFCC0FA245C6731A2E8E561C63B7BC3147FFD
23CAE96C94B20AE2F1D147AAB602E9889CA3D0FDC3FDCCC9327BF4BFA65B6310
1131838C15C706FA899166FC7E7F6EC4C4BEBB3CEB93769EAD51436F18DAE625
C2B99C0E088ED65F67D42CE5148E2667761D0D301AC007CC53D1D606A525FFF9
B82673288CE52AF94EDF33E6CC70BC0E96636EAAB676E726A98803800320CE9D
1388EB8895F6A221BDD6E2223145BB57C81B3B44D9E5F789B7877ADFBD0F5BF0
D86E0DC7B68E61D4FC7989EE78FFB2B37BD4CB3EC67FF81E7E675FF40C89B75E
7FBC53EF85680076F0A90CBC58D064D05D69FB6BB517B593AE025E7DB76E3B3E
083DD36AE0853D94BE904F870B9858C36B4B055C846272F1F86EE6401E8A6A19
88B04AA2224B995D6BAD1448D45D97887184E8E036205B149DA99B2CD2F33714
7B5D3EB194F08BBC60B5DB9D19965C742945873049981546A58CCDE5BBCAB373
1366C3B74072044D3EF2EBC1CCE57368640F610F2D84E7E4B4D198973CAFF66D
AA609795D2F750BDCFCAF1E66E95CD51FD3CA7793F8CEFDDF09788C8877FF9D1
19C062EC9DB71DDBB40357DF35D1393498ECCDCB076A6A7E850ECD3A062F050B
7B9CB27BB61B4A077FADD338C2A01580D84E0135EED3A7B44886FDE2CEE84A34
22285D1F143B6DFD8FE992605E775EB811699792290062325BD588D00D8A6A02
4DAAFDD92534DA0E0876FACE36FE6F39331DC4E3A7670ED524949A252036B921
751FB3806B69940F415B6FAE4F47FEC164D1134B43DDEA6F428ECE9BA632E1BB
CF6E32FA15B53C70BD06F06681193AF93A55066E891C5AB49AC0C200FB38A6E3
6220611A604F7E994148776222EEC2281E4DA5F7981C060E5E26BE8A2FD55D3E
0DD6F6D4F4FC37AE95FA98E586D00E782A89A8BA101270D15AA6590DA4E9FFFD
E23B9AFBDC82C3CA50E70F2469172097ABD94AB45C10AF3F3FE34DF9CDC3D9EC
38276EF001BA57BA20A70626B00D4EDD0246B024644F92E34598BDF81AA6149C
CC4D1063186033F421F8CD131E2A211E0810D651C175A7E8184B1F020300F291
B2E624482DCAF786C10BEDB739584F60DEBA56EC609961DC9A0978B33CC28427
A451103E26FF950B6CB82BFAB5BB2E73ED0578D79771B9D519C1DA50C70763B2
676327EC212DBEF80F9865CDBD6441ADA2614941E5A2F473A7FB099D3D51EF85
BE0B5CB4694A3D1358A365460B5AA814A25CF558DBDE81261295D6BC8963372E
8DA264DC745C7970A1CCC9F3927A22C16DE73E5A06C67184BBCF69B32C4F358A
707613C0A49B19697682E4AEA88E2C9D3762C911AF08BA10D1A1524F8E24ABDC
6DF356C1DD844D9C65C3A5B0D92D7D4FF7DF5BE2434118077B908451C4ED8341
D28937405947C5057E9B1B36E4D572DFB217060FF2853B29796B274E64D31D34
5CCA3ECFFCEC8D83BCED6066FEA12077762F4B71862C04384D39621BD0FC52CB
938CB7D7E24E2B18FA0D5A7BAAB82D3297C9CEDC20F962ECA9F961DBAA19CECE
749A9FF24B7AB8A5C5A2BB70F00C4CAD4A6BE24650D5690822D31BAE22AEBB9D
F67031014AB1AA8D98D60F6425AFF0DE5B6428940FB1D0E447DDEFB6092A54D2
13F2519554C19369F0F95D1F1D921DD21A2D91C2C88736994B723070FEDE72B9
CB77481778614D372B043761D928D66FCB9D760D34EC67E216D0BFDFD8EFF9C4
1FA280CD6F62F72BACCEA2681A5690076A43C82C91B97EF18B281560FFF01520
19CC6B7B3E06ED049DC52596D4BC91E76D014A5626E1B24FDEED5696E31DB153
7A8FC6C649D8642B0BC4CD40323E726066DB7FB9ECFB39AA243B3D9A6A8ACD51
AB349C117D5C38B29652E7633008763B3AD2FCF408DB2994B562ACB834EC25E1
A752FA9CE1F786D72DEB17ED5899E3883705A8C39A0B589AB05732DF1E68FC08
C8A4A94565306DA7789B558F764143BC783BC2FF3D142B1A85FBD90EE4335774
1406E35CE1EC55B36C6A5CD3BDAD275DF59C97C76797E3EE584720A15D4817ED
2AEFA04DB0DF5142AAC0BF861FC7500E1E5A7D7B748755A9F2ABF38061A81F52
C453608F52E66BDEB89C55809E7E77423B3BAEC4179C288847B41B5B8AB2F9FB
B13A106BB450F47C50B427FB4C637B30DC5CFC57D2C30A64D9AD6445D2383920
9CD9FEACD72DAB5A242A3B73372013EAE84B8D6283FF4D4B99F07451B854BE9A
C328EF02E7F52EBEB2A0D7DAE0BFD778771270E3C5804CA2E1AB36BCF95D8E75
388E07E4D03290AF44A45AE74D0331309A680EE313FC3257CB7433A42C87CC6E
B5986CEB62205464E9A4DDC1C1A9B77BBF79D9EA38A45F09A3AF7283C0B05895
17C6FE0DC3778D5947EB66A8FB539C748D71A7B681010C216E989E038068C303
3D0A0FB4B60C57B34B683CDD3FA68BDE4916B1D2AC46E7F4C4636AC5C346F40B
2513549C26F30BC257CBE23EDE9926018E91E51CD14CBA5416C175CBA0463390
4E1805C7669BBE559AD2256C07B0E4948FAA3509E628984436ACC4D3E98582D8
8AAFBAAFAB3D26FDF7477C912C8D278A2515DFC46C7CAFAE0C9DEE1F9CDC8F60
7C2383D32B96B5041235FCBDE00115727BDE9561A55E5844635E5D8F42DDF5DC
C97178EA4B0C1C50ED7466F06FEFDB6B36631CE7D99AEA9F96084842C93D46A1
E7745B3C004A65BC63AFF1A2B05EC1DDAA66C1CC55AB2EA3C3570DD2DF1003B0
3A0FF55A5061EC058F1D7A1986C5D58A5BB47FFA94BD4F24646F1B4B1A3ABE08
BD216DC68F56D5937DA5A9D8CE2B88363E1D9E01335E12E96AF00265B337064E
ADE3344339E4D22D2D6D1533A7D7A7FCB0E143E36E7D2EB8004AF97692DB6545
1DDFDDDF367D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC19A29
B0275AF422EB548505307B85E2D428B2793378041115891F0B6306B6FC72E4B1
EB87B2D527B774C765DCE58B7F76786DBCC6A57280753DCD85073376B5C15095
AD4E14D9CBAADF8EF93A933795C0CBFB7204DC62340EFD3F37C26AC08DA98886
99C2DA581BF499925C57FDA26C1736487F2BDD3FF833163611BB26DA01367B61
774D9D6D569355D10330C9E14A5C5F7BC9AEAE35088FAC2E174B35591D972DE0
DAC5D8E984E967A0E8A93E8741F4A8FA89EEEC2556CD0D4D1C30F4D0302CFDED
66881FB58481B2A5CA3BE03F9A9EBD52235D56ABAA85003742F8271D715965E8
9DD9743B1DD19C90C9AFAE343A5877AB7D005FB3A78552A4826AFD5BCB86C0C2
26DD9642C96F6D3C578E819AD7EF3EE7745D6460F94622AC516E9D777D6C653F
CD96F07CC74AD17A93D3206EF4D481A294B8874E021962213E923ACE057116BF
383D507CED4E5A83378955473442B6A85A7C69A016069015EAFA706682E48B28
E8C9CE4AF423D49CA0DF1B37BCD6C2CCCE1B40173A0E450B1E1CC5188FE9A784
849524F95B87597782D7CCE2196BACDECE8E2451C2BAC4FC371564757725845D
B7240F7804FB3371973117CAB537A70F9439B5E8BAF9E2EB03F07F09F17189C7
C0F139E2F261BB8CBCD84D39EF0F0BA674CBF899EFF8FC80D699581ABA7D9D6F
98BBDA827BF8D401514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED289B59E
0F97561179C2C0F08E832E2DDBE7C66ADCED36369AF8B34D445FF8B74EE2FF24
AACF3D958348A87DA63DE672CE8C10DC9103EC4853C910DC7205541B16C0E6BD
1F1077D518373F33FD234772443524FA8A11A02AE0B8ED0B834A3E3051EF1D81
7F5405D87BD0B47C50A30133F267F34B10F3F3362BD2CB26778A212CC7282D58
A4486B7166B269B174B9FE9BB5FE94379B638B85AFE160FC1687A50867043566
1C462AFAF04AD44B11721927EEE7C26AC6210E8D4EBBBEFDA9D435869399D92B
E364E9390003F437D9A3A0A4E96E82C73EFE4C84FE034CBE8554026B75A3A2A1
4D27E98234B588434F88042B2956DCC18AE1C1E30A0E78EF0470B3200E566399
5C3BAC056B0B53358140F209905103D3B7C48B8EFBF4006DA984D240911DF09A
7B36D1EB2D9E4311A671CF7A660039A2F36055BAAC24E2EB1C58B902BF073C33
04E4C8EEB16D7EC879F6E9B1C1E8C9AA035ACA1C42A169FFAFEF7C4751BDF434
95DCF8C4F6274740CE31EEBC6E363CF7A318738C841A95FCD30CFD43A02700DC
099F78035093EA6D9CEC8990267B1BD97D4734CF37B2C1255D017F11F62155D0
00AE32705CFBF7A1DD3C579B9152921E8710DEFE86BDCE7763A3CBF62D1AD9D2
ED76B0C306959A4927F976E8D20E8B2D91D12C9BA32DF393C74E1CD3B4EC1402
4969B2187DE398125C3F94E4357A1BBF54BE9CF902B0A36ADC6898E76B0C6263
3A852FDA93669BC3DC2CAB97F476CC7CDCE3DB5DDF931CBD6E01A1FCEAA9ED39
DD8FCF258C2AA5852113C51CFC836540DEAF4B0DBC9D59A559B2BDBAC48EAA0C
F06C0F4276B92651D874ED7DD95F14FC3CA396A84FE51560C3CC5B9D1AB174C4
6433EFC58EEA57879DD81A22F2F463E4B249A0C7844C057C8AB6B14C07D6653E
C0703A27A9DC4ED432F5107AAC6C8EA201789EC66ACE781886627C0793B78276
4422692DCFDEC8F1030FBB8FD7E4D16711DB6704971A7771401CF3CE53A8BD42
F8A80B3F97835DD9572E25670C929A8F9CE53FA33391B26656486721814B5984
0243587FEECAD354A0315D2ABE4754AE3929983BA6E0A977889F923426DCAFC8
DC1CAE559B72273B8EDEC26D8B87F353893A187F3819D3A9429FA9EFF440E2EB
CF3131D85145D70BD7BBC442E4E83BC0363B88C91C86124A5D3DFE0F29A95466
088DF48B38EBE33BB1B746FF762BA144FA7AF1CD28488C1F2033A233D91D9039
286747A02E05B02D4C6603B5D62633D4DC6CE91B83AFF37D9F1425C9DA4B0B2A
389C185F7FCB4561656CD37E96246CC6E5F85E045FE750DA4A9B403FD293CC43
6F65A72A3CC8C866B77F225EB04390858BFF70300B0F4B912E16BF834DA5B133
27538D51A4BAD1812A8111FA766415C09493D47417EEEBD2CC07BF989CEC3ECF
4863C99092C79539210FBE05E529B4C38FE7ECEF0D4618828ACBD35DC636F26D
02E3B7D57D8AEB1D6937008771204AAAB9118DA72DBABC610D0B377000181376
A9071050F3037315183ABC447FB269D6C55924D5DC6D11251F0D8BD58651E901
CCC6BD34A540CC0B84B12DD33B92A53D58C697C487E3C9F825B5BD086A6DB626
EC55D57B5DC09C95C9AE4B4EF735A5414D985CC691700066630D8595A4791342
949F6ECCC6FAB0A20463B7F9FD14D8DF939943506D30D2228233E386ED838B3E
9B2B8B1C12E53388590E4D63BF187D8A93FE9F8CD6208492E7A448BDEDC6D5C9
8D7AF768B0F428AFEB03148A2FCABD1B98468BE62E4A4C69618FE8EE03001B4A
00839DB50763E7C824201D1EA86607CC7EE7225BD92756C22A08FA635087D2D9
C543F44819C0407D8497462FA7C43F18058A889333FB7750933EB3D2695CE10F
F4165908A464C1849FC963393222CAA9B96151BCAE8E1965CFCFF3CC0B052242
8C73C7A6BF9FE5AD4835CAA55F80F97D7F7D67EF942FA3B8659DBD711D2AADC6
0C62242B3EF7756A0302631A3DB64532FAA4D45255BF472555E6D33E14684772
9B538AF6C05B1DA058F32613BE60C6CA25AE8C24ECF3D8D068CD33668C976DEE
0CE8EB56EDA498A5FE71A7D5586DF253C8F6F7E63FA8E54AC57F55BD24CFA4D8
66C96E44060C1D4CB37236209050865DB7C42DF622B338C87A9DACF56D583486
E8DD0357E35E1805174BA890556CD485A15DCFA2866D7CCA73C0F6FEA6D19C52
F0F93C21D4ECA36B55B2704E68A73B5BBE7CCEE97B7F3B8C7FA61ECB48E0E812
9CEEE93D0E443F0B1208174EA21D07C4D7BBA32D2ACB4782013E35F50767E198
4642334D2B9BC265D58FB6052E0217DE72D65B0B07F6D8981A4F08E9A6DB793C
1B89CC58C013153CA8687224E35BBE0731FFC14C39D0FB2C47A87337B1618DCA
FFCA923847EAAF8D8B8D9572760FFA000528231ADA9FCC14995369D629754313
F90EEC2B1A9C9D799DAEC21BA544DAA7C81748D366833CFB8CE4A78816E7F6D9
138B1AD48DE9A3F5B5DACD6DB57706DA244B8DFDC8661514CDE029EAA738F3DE
34578423B70ED44AC6EFE221ADB5E725ABE897F68517D951766E9CDC1DA90B72
CA78C4FA652354994B41FC3B61FA204411DB939EBFFA88D1BB317EFBB6327321
723D48EB70473182818A9278854EA8FDE1C4C59F802A0425C1A4F2AD6C62F7B9
3336ADD7402F1105F9D9FFDC44787F71D921C758A6201DC0CCA60576B5E787BD
F7BF0447FF90BEAD2A2536C8792D753DF502D6E67A86F4EC045CFBD2DF40FE9F
1B3523CFC02DD5FD5EF1A9B4E581823C8DC01463444FC3D79F4B3A24A3386ABC
6423C688F32BFA52D88CFADED7A332D11EAAFC372DD4C05F0911FFE7A6A24F19
126C17DD16A3913F27F12C896BDE5C6BFFB0E7082BCE32D55AA3E61DCAE51514
31DB7FB2704DF7FC14A43FC534751C24EC1C803A793CDF6A86944B3BEE596966
5324073845050C0B5FB12CCF2D8DBB400361F021628F76A2102905B8CCB2F6E2
853F0FCD67C4B3EC8E05A6B65D0E98718F1F3B103B327B3DC2C83E7D3A888053
F0D0BDF164DBD65D7D43BBA7E267377C735170B6E43854D11C6F7C4EC0D4EC1F
6286BD2E1D04364D7CF5B2AA7CD04B06DCF2556325E6E3DE4CE3D598BFC8FD80
314C4793503AB082E02DCDB21652587C0C81E334855BE7191CF65E3ECD69E7F1
8772BEB912937711A48A36078AC2C84F85D4A2F43DEC159965EA0947611CF523
76E3AC94E04B5E7E17197FCF758B22605F4039269A8B063A0EEFF73E6E3D9189
E303F37ACA22B9D6F680A03643BE1C4D91A1AC0DDE4B01507439B1AC562EF6D9
E88F0E48A646E9DB7C0B9D15E6E7FFF7B1BFE2E942FC2A9970B1A93C61E40A93
16F1DF65958C46D469EBBAB75D419653CC0657F0C15C0D604CC024814C9FA29E
224149D56A28D98056DB8748F290836A310969546449DCE64F95368F67ADA81E
5541C7AC979A8AE8A10431A2B2EA9F410E171CAE679D835F14599C71779EE716
24D381B96A09622D00977B75FF4C2AAA8ADCA968FDA1E5DE17E8F246E9D7E18C
B5747691C6B54CBE708825C7BA991F86E33662A1A53CD547D626A27EA30F3564
A944C038FA015A1EEB233DCDAF7476A6FD5F1D28E416D20B8589B907CED5989F
843851FAAC9BA246D388DFA8633A28D025D28D73635E3F645F9ADDEB0D11FA1A
D5316998C9B8CA6815930C91148F5569D477E6304D4462612A1FFE0E059B33B3
009F710A46E94906CE183720AF8F94AFDED61C57526AC7DED1963A99741A93C8
8BF6DF57CCECF31F3397831CF01F90DB652AA271AF4FDB94EA03DA79A48B9331
BDC5D50C15BF97FA6A922B662575F28B716661790639B8E7ECF840B92A92114A
3FAEB168712655F70420163F05E0664D68605BB83964A650BC793BFA0935CB6D
F0D9CE6B6C0B6AD033018EFF9C70B3DFC98E374E3E90AC68909768EA1D48ED4D
7B15A675EA2989C386B2FA1DFB9B22C8E0B36462B1BF26C9A5DBAE4592F2A3C5
3F37059594D5363280DCFF82A207B2559E3E3748EBC5B67A0845DC0CB1FD104B
4BC2BC78445EEC5FD0162DE8575E07B2663EEA259DF17408D30E313D7A2B47C1
0C95FFFFB81B62092A59197EFD1392F9259F6472E1FBB911D5ED8DBCE1347640
CBFAD6B3C9EE3A2D28110E8D6B43C5827CE60979DAF5C1C1EAFE44A4E2D0504E
4A2F0F66713BD5BBDBDE64D71D8C7A1953781BCCD26691C3C8CF779F12BCDA4A
CD157EC2F63FDD483D09E48F305A64083A05045EBE421993391157D25F304180
BB1760CC5D580CB6E1F195840F60D241C660DBE8CEB4D9FD52C0498AA5B8F687
59621CE58500858120C52D7DBA1DF5D89738FDE2ED3E9A4DAEC9A3D28BD98026
F9F6CEF643B33591C89DC2E7262C7DA215DBA462F24D6437CE6889B31478339B
FD7253AEA4CC995FB9B635699C241754BE232A8124FB28866CFF2CD67ECCEE76
8E6CBF97C68011348FB3151F9792FE05230B748D77EF367AFDB2A3C4DFD91BA4
F20322C01DC37945FBC5056B2ABF5E50C1281EFFF316AB9F575483E5C2C8B6B9
53CCF2D66971B5D9B180E291E71ADAB3E6543DB76EF838C48F24C8CCEFCC3176
E48C5C9FD449B61516794891C3E44DD1526E6A7A54CF56FAC785B2D60856C1A2
93144E6CE048F5370D9BD6B3E976D26CDC5AE2850EF1B6CB8ED795E6858BAA02
E6BF448A7510ED5E0B15EFAD29FF6CEEE8B7F64EA251BBCDEDE317412986A064
DDF4FF1F3BF25E59DDDCC77F215C35CBF952FA9609CF420C9EAAF124EA642B8C
62BC90DBA67D90784F033DE5D7E2C829C8223BC95686B8408237A02CB29B153D
3AD1ABA5AB75B5D86BE829F12AF6F447298B689648FE4E86A18430D6BD00137E
6A0535522DF84BACCF31EDC7CAF0FF7028DA90E77BCB3EC517BF3F1BFD9258A1
4F6AD73DC3E9B27D21656F8A7FEAC060818BB03F7FD90536E4930EC37315EC67
D963C9141100908577B3CF5D1DB8ABC0B012B41ECACE38DAFC33A0934D172E13
3268D0F74797C9B2F1FCDC9DD6FFA70AEEFA15B4F189BF5F1847F11749C7EB39
3BA7A38D97571CC72C718EA7D0FC92766107F9132D757C6B75EC2DD7DAF167EA
2A70C6D61CD504552DDA4363A74BE11134CFE9E91380C92D7BF00C6F812943FE
38EA888F3CCA4863E271F51CFB121AC0A17EB986D9B911CAB63D8CCDFEB97FC5
947BB019BBDEDB250EACC402DE14B290A28CBD1BFC3CF0D22304679D9680B7C4
39828FAA36BE5A387475CEA127DA781BA59BFF33F39BA726026B7BBEA615A708
641E70072C32D183EF0A066B48ACB154AF83E575379FBF507F6ADA757B488C61
B416BD698AD36441772E5EDD77633643B5DDA6AFAAB4C174E865253ECA110984
78E00A93C8BEC4BE653B007F39E35B8221AB6AD61398788C0F6B3FF567C178A3
1D225FD05078D5F969B43B0F361FDA6614D966C1996DBCB04822E794E2BD4E86
0BB34E986E691C9E1638DE4C44911AB503E23C114CFD8DF407BC12677C2808A3
C5E4EDFA84B325D98BB90E4A5AEDBAE2EA926CF33B5AF7CE5B67719C481DF879
AA39A9E3A9533DCA4089451DA6D28F43B891622EA54275B03BBC07A375368D0C
70A140EAA7C50A2B15E4D5D5D24E1E3BA205823E273CF0599B1E4A6AD4E062AC
669988352858B6DA9FD2E3B03CF2B30F1B91A0CA8C2806A4793ADEF2354E98B2
88A3091DA0C1F9CFBED15C5D8A25DB5D75B7F6DE27878BE3E7588DF0FF94DD8F
B3BF5DE70E1BA9AAF209EB2EF13E0050358143EC956EF0C08A45FC75A18DA884
DB5CE646872F6C2BD3652AD222EDA0D4659020376A1AEB16D9EAD9A5FCE09933
7BD347BE7043550623362406B585B81E1F1F63286A0A8B33019CEF9E5A0202DE
07569AA7F71ED41C4BE8E02BC4D3F4497F2D1EFF4A31419FC7EFE3C0601A02B6
26A851C1F19C02B1876D5596BE6B7782BA6986DA405369B23E992852A98971AB
42E3AC1D5BF310CA74291AA4391DB55699217C9DBE531182C15CAE438F9FC062
7CC48C4D6792241F360895CF0A23F99502D583ED178BB5AFD540C558C5AD777A
B0D3D9F73D87CA872E997207C508378F7904CA9250072B4D6CDF12D2FDE4B981
5A9F704305BCE3B92A6FC58D5443EA8DD67EED8ECCB35C585B58CD134F07771E
50F1637552EE8A60E1E466BC20A55811F9F69BE90E00B2B93153A8D61F69E946
A6DEB4BA7A7F6D9907042EF283A2C4F46F8B2DCDCC702429623220F145B1C9CC
ACDE3C94C6BAE5C9A61433A7D645E87CD734493D3DE906CF370A722C89B64497
AAF7358BB13CDA7278085623548F3C05CF9EE70DA31233D7314E185AEAB4AD7C
D6BC271D990684943DF649DA9D9BDB0D95793A2DAB4E5C74B922D39F193B039D
B9B90310D5ADEF155E87CC096B7E4759E945721138DE96966CE110D8A5F4E9D3
4D83703201A21581800CB2242AA37D24C3394E6137D795510E5BFA47ED5A473A
9D9DD30B936BB47953648B3C719CD40F77B3451D500ADA995C293D38D64638B9
8C27E1F2FA81FE54BECC7A5037EAC79338D4FC09903A19E17B1B50245D887FBE
A7C9A8BF03ACE145789DB164BB10E3357B17A7E0CAB1B700EA1AAAAD658C6640
5C2ADD69E607D8BF3351239E3AA2765D1D03E2FD892B39977448CEC7C0E53D2A
8ED69FA4CB618BF0D3522F98CC80449B4CE376839AB51B659CA1AAD12A311579
9A69FCEB81AAA5A664BD965DC4595E13B3A24C30B1F60029A6C93527455AD67F
71DF1D91FF9867CDE1540BD46B0E0E553E480DABDC9A5ADCD81C9C8CD84C4F23
04EAA5C14C546190E7D521B4CF618AF039750574C578DB1962CB1ECD392521BB
4749A64BE2E78AAF8DB0411C0A12840ACA1632BFA9A35384B481279DC0731094
749BF7A87DEACA55E0259E9CDA82B077BCDB89FFABBF470418D673FAABB9E0D0
E12A800A1D457B0DBC6D13CE092693B607A67E0AEAEE1D7BE748F28BA276AE97
5EF3BAFF049813B27319CE09F49BE2E03276076A41F04FF6840E071214352072
B6E4DFF4FC63A38B5FE8F52ECFBCCEC56CC3B016E0520F5D3111DDF528ACB64B
17F03C2ED5057848E20F4D4F413A452B5B588258FA806F159C9F29B4FD731AFF
4CE42612957F4367A7EE45B30DCE06A4D6DB50FF23E5782119B77A3F293D5CC3
1B9C5070A2E632D36C86B9CECD461F641EBEE38BD2F4643CCE6D15388D5B18A4
B8DEB022B57BCBFC49750430D453027CB3B1AB822B04659C84B628B143A4ABF3
9A069863EBE980ECA030BEB4B76A570E6D8A2FBDB86B6F31E9666214631D3207
53B0D7463D2169E6A3DD5015C6432452438E365F8CDA2BF72FA4923073D62FE6
C3F5F8F7DB3D06A8CA77EE22073F2F28547DEE9C97CE10E9522AC7F0CC7E42F9
A40AE4B0C30726D35E8C3D36EEF12B63EB082710224AFAF38E0C913BB30426E1
35F8253A2043297BFD1A030571C55089E26FA8A231EB7D550D112F3A259D302E
7354F1946A5CC9EA9E92818D298D3A08860A2703321C6ED47493A2779DD78498
0840334B0AFC891745FE7EA3D6441C093A41832A573E10B083A3B3D3D8CA9E7B
062C86C0DE009FE3FC637F1BABFAAE5D9E69749942A4F568BB22272D360267D0
E232CD05C49A1F7693718EF5B1C41F28B192BEE97C5A693509D5841F6891D12B
11499E57DF34AC38D3C751B99CCEC5E71A0AC917817815AEB659AE1946CA6CA1
B4B8AC3A92525EC34335EFF025EC087568F1EE66BA0DCC866CF79E418B7AAF63
4BC63CC9EB8465CA35DA98412A87F4E1F9E8152186C80540EA5A83F2CD331A64
DC5C517F0E6CC4F1F87A32D8575FF60CD69CDB131E22F17812A55D446296CBD3
A415838C7E5817A08810B4837DF31E091395B73432016D18F94C3E10BBF49055
1846EFEE391569945FD2C5ECE8F8545723F025EFEE30D6CC0B9183CC40CF1D63
92AC328EF9C0460D1854D7E4B975F881E82DBA1E1651E8DFEBAF993B493D2F15
1439B2CE1CE7A8B572AFD65E03AB862A23F82ACF8F1E55FBF222D4BBE77DDD09
CFCE66DC0CF4ED78CCD7BCBC43980499E80B692FFAFE72AFC2022271FE620576
8E6D7E544599B9C5B9EA50642CE2394AE89583EB1D3142407897B851B30F4E12
CA63705C57987C82423983F88540E5323A8EAA5774ADD5460AD6089008846187
E2C9BDFFC504C896A4DD60A2854C2ADA18F75950D216323398D5A5D77DBB7BA9
B5663691A8C256CC17087EF053E3D2800862843A727667B9A2AC8B0BED397E45
EAB1A11D7766AA3C69E6CF3AB5C34CBD11A3CC520B692C3377D3ADA01BBEED50
8E7E03D4A170580696CD56AE555BAE1E5B731941F4E41DF1497DACE1DF7B1FDB
9E5740EAD3E90B928FFE52B605CCCDD6090D12DBA29E77F9419E4E98C62A427F
DD98B0F35E4A3BC8E2088B8542627740A5EF1FAD8B1E90947A556BD270D4A181
D3EFFD75F3DB576B8E939ECE7CBB770A7F9C64C36367A5E1A79580389E628D70
4758CA0A06174C1F86F27C8E33F7B841011D1E9C0ACB84931496619E379AB2D9
B16EF5EB9C58566325BE384A25BAC687B6125ED2FEF9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C859062D7505E555EC90AD1EF1B452C0E871C
C17491B70CE0B7FD64FAF6A044B8162BA39D78510AC4FE7CFC716E9B61193EC8
1C5DB885112AF8ECDD5D9D08AFBDD7A3F7B5436480D434413B7EBDFEEC209720
BB13E75730C6BC6C00338452CEBB56C8A0191E7C77D3605C7BF520C8721763D5
3AEA49AE05CB0D7A5CDBDD7390101CC6A38665F8A220C24548E2DED71B72A48F
6F975802F593E26B7DFADA15E91BE21CC58E63FDD81B1CB6FC331F8FB67C9AED
9400082942A5C533BBC5342091744EB5AF7CF0ED0665F1BE1A2F5D383DC3DE34
556B9849C8602C5BDAC325B0B1F1862BDD677B807FDB680BAB3ADAAE78512210
C4E84029D93F915981011ACD2D6EB21394C6E68DC7145A17B622D4C9687386E9
6FE4CD02ECA91D8F984E262FDBA85AFC9DF867A601597F9DA679B83F9EBBBAD4
BF2AA68CBE2F22356938E8367A8ADC71ABE049F1F25FDED5170BF6156B794646
5D1D51CF46A743A9FE7D4393C65279014BDE76C22106CA436E1A9F545257C1E0
913B055F59EC1F38BCEB585E1069E869DAF7341F84B0904072D4A9A1763C408D
05A5BE1B840686DD57424FD85B8DD7C45ABE9B44A70BB0025C1F8893AB9CAD62
2BCAC0A827E046BB190D8ED39670A75804C1612D317D76FBEBA106D7F7590D96
D0908022518338243E2958069A906E35BE55B81D6C955061B4CF384887BA2A9A
504B2A0A92D771B54A0ADEC289ECF7C91A46344E619A84577E90EDDEEE5BDA3F
3F384215CE8E236E7B83CA8B33865EE0E04BECB5E1A837A3ACFBBA005CD72A37
72B49953986F88FADC94A77124E291CB27BF10E4EFC417FDB11F8DDF38CF6194
AF036EB3090451311D2E0315E7E138ABA231F0FEE5F90D5AA9E862E30E05197A
A0700E5D3AA9E79CB2AC7952170CC7C567F2EE75F60E6A0F4E70BDCFB2CD789D
A845978767D5F7676BB3F2DF243D26555A9CB513DC4ABD7C21981C219CE1079A
52652F9BED468D216C1112E0386814A3975064E4BABFA90A86642B0F8C37774D
53CC63B57F7C9DBA00BFC2345DF34AAA57C2F6CF86C6AAF1D31DB074CA7D4CC0
3956554B862FFACBD7062004232D5EAC08DF59E141721760C6D0D1418368BBAC
261C1CE08A4D8635BC8BAFB4BEE6FD8E6C6A79D4E8BFF1B49E3D1F0372A9F8C1
D960BD65D3248D6886F191AAA34ADEAAAB0702CB2127BFCC99C091C5D13AD5F2
FE0265D549BF86BADB73B39D8E04C98C19775810502EA4F9C5D5BFA7B4856565
5563895972BEE88BBEEB6A40874E9A5B2B808890A4CE7D9C9718E91A5160BD5A
7E99FA0D6AF96381BC6B3991C31F72DAABD5D647C26E129590B260B9ECBE1927
215C422B508A5B0E8918AAAB85529C24135E6A5F1A5FF27FC1322BEF353ED2E3
D3B333444BEAF07554BCE0AD72E176552EECBB14D0E86241AB753C32214F6A8B
3B924B6F0B44384D04D8C4369AB7F74A9A68EE853A35D512BF4CEDF87A6DDCDE
002E74BA03A2B15E0529E61DCAC207A713A4E778BF8F6C497935F4F34F2DB92A
6BF355014498A54B5B078DBE76729D694396683D4125C68AB8F0DB11B3A1099A
46ADFC9FD09C33F30F499CF5DBE572B3127C3BCEF587351A0F324703391BE55D
C28812206C226AFF4188F1A23451DD3285D3161F1BED298D7ED9A0F6C3E33B3F
38C479F0F091B2B4794752D7EE5D9B94524DF768ADA13159A338F3F9D6BDE77D
D5870A87CDA64C1ADB7F3E6A28C392E6CED1337D2551AAB0D6EC96CEDD595DB3
CE1E4081AB2558BD8C173A1B6B45B1C25E75CEF61DD8ABF5E2D8428D248B1736
13738E35732216736F12E3E76D416DE4318230675A951D247C5A2E208983DF2B
D52684E1125277241FD42BB5CC5D17CBF0E1965C0E6EA3DAA2EC5DFC975689DF
9A6609219685284FE6A4E39C4EE44BE4AB58EDF17EFB45BEFA31708BF7B4F1FD
E43D1C1DE8C3966B2F54B2752F54C04DBD85A788063ADCBEC519652AFDE0D0A5
73A1FD2E01CB1197990EDF8444CC83F1AF7F7CB78472DF419022F6B4D7B1E210
382DB0321D08CEC65E177259F34C2EADE01F1DC12B1E324F1710B2003B96E71C
2A75FD1E629A7FAB889C48A47680E82D0AD1FCED160FB8C9090B9661194AD230
901796C4CF078580B031DF432E38FDE5799669757E46657E7A65FC3C541BBE25
DE5A4A29FA482C7B88B2BEF1AED8D00A3AE393251302BCDA11FC4491EA792C55
4CDB77B0F15E91CB7EEA977B58FB6FA47D6FFBD7B0C78E1B9C0308C2FB9FA87C
0A98BB8F77D161F6F1F0EA8FFCB0E856E7A959DDDAF7FE9D1C5BB9B3676EE853
A00FE2CAEC1313D7D45811C1F022BC3A9AFB83A41C415EAA2C6DD59F4CB5511F
BAE3C48B1B02C987984999752EA62EF9FE7CF81EE3DA486A5876941BD639BCBB
24D0CEC45CCE9134E120F85C107CE5E670014BCD381BC1053090C526CA1A8F11
97FCE0E63BE2711921CC607838911ABD2A1FB29A5124992CD43B1100ACFB2401
BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EF8CEB55C1CFB942952C5F2D227
B7A94085C657D1C6E7C72A88AFEBF38541AD1BB12E1C38C34B695E681E50DD99
2108AE4903D01C0D1793C6F4572DFE1471DF7815375915D5E677C4ABDB326584
908EB10CF8F6677DCA7F1C95904308A43EDCAB9E58B4DB7EBF5F94A5470B4C89
E24C9D76E1220627BA1476C89AE25578A2776263E15307130F9D746AF9A3D01B
69C18EB9480289790693FF4D510A8181C171816540E61E5A2E2947957AA9A7E1
9292986A66BD545CCECC92324DC9B2B6C25A3BEA868593385D5C288EDDDE2609
F3A712768687AA35357DC4FD579D42576E11490218487B10878E9D800C006C11
7377CA22D9D499FFC8F3118E30CEA0F5B50D610ED0ECBE9814BD19184B2C0F3B
04B2D3ADE2358D39CE2364A75F034DD192697C4EFD4B9DCFC50A59E5DBBC8A40
5B0A4947CE3C4A3E85563107B43C6C16ACA581432FB7BBE41FD692FBC23B3E74
BDEA10C3DA37A73F99724821E1E756D3DE2C16700A2AD75665525EC2DBFE798E
6A68580FD4C97972F66DF5E525250725A95D15EFD0B5EC317437135C51675C39
B92C18AAD0147814BF27C8FA6DCA0BBA0FF116F053374FABA813FDA935FAFCCA
7A3BB1E8AF7D6ABA0EAECB3611AC9EEAE94F2C970C89D3DBE624E72E3AD8F47C
1D8468D4237442FE11604AD3607A91673A3DF62988DE97DA96C5C43CC6354A01
7CEBA3A38EE6BA2063A650CBC87EB9D1C2DBCA3297BF9C0C96B3A99446E31C05
C3DAB509552A5D9200E2CA29DCBD6DFF1411692A72F2CE432CC9CCAF37A49046
BD2DC413BEF2621DEFC6EA812E24DAA8DBD8E81D9D7B6FBE67A34A71235FF037
6B8C0BF372CB2FAA0C0BFDADE047DF64BC977781861C0A28D90FAC8C87F13F13
0AED19EFC60FE811E0CA2E52A0EB32A0B19019FDE2501A86FE88689D4089C6B1
47D97D54EC2767CAE72563F58C453F45C231219FC9727D553F342208D76F67B0
0F6B9DE822EE15680E972DC7BAF61C28ED46A45A1DEB1C93FB1AEE54042F3750
D1FABAB44B7EE36B8356A8740617776F18D167F6AD72D6C2A16ED07C1CAA5CFD
900457DF9488A87C9BEE2F042F82FD293ADE50A69AFD141242589D0C2A9B6082
3BFD97782599BF530CEC82132BB0F26BBFDB603F1478F2504497A06393E78CC5
4F7569488E41C5B0B57F2093376B8D6BDAC8C419CF0778339EBBF5332A2C1388
4EB17C99A3A4EC0D3790FC5F088B930DF915B5D8FB90366A4CD61AC6F55F2B1B
52A00AC4C85BDA940CE8E999D8D5B9383AB4333598623593D0F050BDE8237EC7
5E6C82E5F25DC3DFBA554318FEB1A63D0130495AC697BCEA1E3B3DF1A082FC44
AE93FC5D382A1FFC42D02BA33455EA667F70DA99F3A85A81B3387479EB977768
3565CBB38D4C895235566226001B4DF6C4F609120E791B9465D18D9E86569F28
6E723167AA7787A96424C2D236770610730FF332E58D31EB5C42157606846CF2
0EB65CDEE05125686BBB98D4FD566A819F010147302352A211511886BB5433A1
0DC0DA66A760506A74E6F183BE443EC5DA4EABBFEBE2D252565501B9FF22D09B
1790B67948C85565E260CE9AAE1954A6602874DBB1BB77923851EDD650ACD46C
5924318A6F65B75A83212773A0B3E01132623C12ED876D9B8BF97B144326F457
6E8516A70C4A50D5157917E34F4D41D307CEB887D662DE80E0D14233C4F2345E
0255C426ABCF96EC603ADD14EEAEC16CFA310F51AE03A0F69B60E29C72062E44
A2C7151B46495449B685EA40E348094992D7E467E479C27A6B2CA846C1726E4E
F53662228F2E89B2EBEB7DDB70DCC612ABD6A6F599D3B39E008BC043BE1AC787
C569806E793EE329218097658C1660E1D09BC83B9E990723538DAE5768D60935
7E5A0AC001FD111419F150F44198BA633D86983ECA97C050C5EAA16E1BAAC04C
1B5EDAC1700485A937CDCBCBDD643F1EE4957EE7B34F1DD0AEF14087E036FA85
2196D27869EE01D1CD1DC542AD9BB8E2C55299B1D651EB569EED194A44EF8EE8
7B44671A7957C7254BB38B471BA7A9E484DEE1F81F8F686C6F17382959FBE929
00A5DBD00D364864309A87220F85CEC890A4F8E77604837E192969CABA0844C8
C901C7AECC4E3243C3BDA91B6962B6979FBA2E2F4437920849357A2C5214A709
4F1C134DF572E2D7E58D9C61F7C0F8E2E13CBD8261EA8A34296E847A91F769A2
8FE6D8C51C519948039D92340AB686F5F34B6F9E702A6286DB508477B59F5977
1E7F28880AD275A748142127E56DE4D18CDC3523DE8DDFA84E0C3986360852BA
3FD5EC84DC44AD64CA30B08EC10A016FA5E5DCE8F8C2CCBFC8A40C97A65C9FEE
D271480E6455EC539F7869AD66438FB329B97C310770169C59C9251FD18090D6
EE761B8190DA4D57CEFD46412583540B9771C90F11B553FB3B320F3DDA56720B
BB503A76499420232591F6378D4F950896350DB6F7C7CB850408F9562E518C52
5F1B7A0E5458B51643EEA1A668FF1B7B51E37DD2203EF190A328688193003EA5
0D0F1C9C4147D190A76BE62BA4B56FCF9095BA53B7B5F0A5882220EEA20772AE
A346572BE35733497B1E657141FF853165D2AFB6E3B67D369E9B7843DBDD9550
F0072CC3BEBF41B61D3FC819880DF4F77B07EEAEE68A7AC8D4991755643F210D
35494318DF5DC3E4629739F91A9CB50EB9DC46A3E01092F5DD1835731FAEEB6B
99B3B2851735DB25CB83909527C39F244A37B7BBBDF0C97E8E3FB6F96E8D041B
E661E7A4541E22F5723384D2877A940175BAE9CBA88769EAE7E864D29AAB0E4C
0433932C9777D8B12E717BC2A61A23FE3D96FAF6505351BED05C06FCA4E049A2
DC5FA9540DA45BC29A3C0B92AB3305714223B24B7C4FE381D8A24F79D1AAB18D
CA7D9DD77E91748D6777BA9A72B8E941D34C78602E4A7A8A1409FA460D027A81
14B03B1DB53EEC641D847CF5DCB2E8643DF6191BA10F30217BC77B1E075A4B18
B2BA96A502C979EECE4681CBB052643C8E4751365CE0BEBC958ACE194914601D
37B871DC35C1748F5C5E1BD5E34B66904A5AA66372A4BD30F68D80008265DEFD
AB996E9AAA5B464A82F4065A9196B8342BBD9677FF493BA9B30F0575BB735F83
74B2A0D84BFF810ED3B078FD6473A5F94AC02EFFE13C1C5C6CF9E10B7CC0DD3C
5050C2231AC2081539084B07B3E92882226EA475B4C7EB338F56FAE8B5F709
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39139632 55387786 1000 600 600 (cztopi.dvi)
@start /Fa 145[44 9[44 2[44 97[{encpltt ReEncodeFont}3
83.022 /PLTypewriter10-Regular rf /Fb 204[33 33 33 49[{
encplrm ReEncodeFont}3 58.1154 /PLRoman7-Regular rf /Fc
145[50 2[43 34 29 25[63 19[23 59[{encplmi ReEncodeFont}6
83.022 /PLMathItalic10-Italic rf /Fd 12[42 55[37 9[33
6[28 3[37 3[37 42 38[37 44 1[60 44 46 32 33 33 1[46 42
46 69 23 44 25 23 46 42 1[37 46 37 46 42 6[51 2[85 3[46
2[57 65 3[65 6[63 60 8[23 6[42 42 42 42 42 23 28 23 2[32
32 40[{encplrm ReEncodeFont}49 83.022 /PLRoman10-Regular
rf /Fe 214[46 46 40[{encplrm ReEncodeFont}2 119.552 /PLRoman12-Regular
rf /Ff 145[70 30[89 79[{encplmi ReEncodeFont}2 119.552
/PLMathItalic12-Italic rf /Fg 94[65 38[60 2[97 4[55 2[67
75 1[37 2[37 3[61 1[60 1[65 14[100 82[{encplrm ReEncodeFont}12
119.552 /PLRoman12-Bold rf /Fh 205[42 42 42 1[25 46[{
encplit ReEncodeFont}4 83.022 /PLRoman10-Italic rf /Fi
12[48 65[38 5[53 4[44 3[42 39[42 50 1[69 1[53 37 38 39
1[53 48 53 80 1[50 1[27 1[48 1[44 53 1[53 46 10[72 8[91
3[36 4[73 1[68 7[27 3[48 2[48 48 3[27 1[27 44[{encplrm ReEncodeFont}34
83.022 /PLRoman10-Bold rf /Fj 94[75 44[58 60 53 2[79
80 2[76 1[37 3[73 80 2[75 6[96 7[101 1[101 114 20[44
58[{encplrm ReEncodeFont}16 143.462 /PLSans10-Bold rf
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fj(Zadanie:)54 b(PRO)-94
117 y(Prostok)l(\241t)3287 153 y @beginspecial 98 @llx
530 @lly 441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 206 3969 4 v -94 314 a Fi(VI)s(I)32
b(ob)s(\363z)f(nauk)m(o)m(wy)-8 b(,)33 b(grupa)f(\261rednia,)g
(dzie\253)f(6.)g(Dost\246pna)h(pami\246\242:)f(32)16
b(MB.)701 b Fh(10.12.2011)-94 688 y Fg(Rozwi\241zanie)46
b(w)l(olne)g Ff(O)s Fe(\()p Ff(n)1263 645 y Fd(3)1309
688 y Fe(\))-94 870 y Fd(Dla)34 b(k)-5 b(a\273dyc)n(h)35
b(dw)n(\363)r(c)n(h)f(mo\273liwyc)n(h)g(wierszy)g Fc(i)g
Fd(oraz)g Fc(j)5 b Fd(,)35 b(szuk)-5 b(am)n(y)34 b(k)n(olumn)n(y)g(p)r
(o\252o\273onej)g(na)5 b(jbardziej)34 b(na)g(lew)n(o)g(oraz)g(na)5
b(j-)-94 969 y(bardziej)27 b(na)h(pra)n(w)n(o,)e(w)i(kt\363rej)g(obie)g
(w)n(arto\261ci)e(wierszo)n(w)n(e)g(s\241)h(r\363)n(wne)g(1.)h
(Wyszukiw)n(anie)f(k)n(olumn)h(wyk)n(on)n(ujem)n(y)f(w)h(czasie)-94
1069 y Fc(O)r Fd(\()p Fc(n)p Fd(\),)g(co)f(da)5 b(je)28
b(\252\241czn)n(y)e(czas)h Fc(O)r Fd(\()p Fc(n)1006 1039
y Fb(3)1044 1069 y Fd(\).)-94 1344 y Fg(Rozwi\241zanie)46
b(wzorco)l(w)l(e)g Ff(O)s Fe(\()1426 1297 y Fc(n)1476
1266 y Fb(3)p 1426 1315 88 4 v 1428 1385 a Fd(32)1523
1344 y Fe(\))-94 1525 y Fd(Spr\363bujm)n(y)30 b(p)r(o)r(dzieli\242)h
(wiersze)f(na)h(k)-5 b(a)n(w)n(a\252ki)29 b(32-elemen)n(to)n(w)n(e.)f
(Ka\273dy)i(taki)h(k)-5 b(a)n(w)n(a\252ek)29 b(mo\273e)h(b)n(y\242)h
(reprezen)n(to)n(w)n(an)n(y)d(przez)-94 1625 y(jedn\241)f(liczb)r(\246)
h(32-bito)n(w)n(\241.)30 1725 y(Dalej)j(rozwi\241zanie)e(b)r(\246dzie)j
(dzia\252a\252o)d(p)r(o)r(dobnie)i(do)g(w)n(olnego:)e(dla)i(k)-5
b(a\273dyc)n(h)31 b(dw)n(\363)r(c)n(h)f(wierszy)g(b)r(\246dziem)n(y)h
(przegl\241da\242)-94 1824 y(wszystkie)17 b(k)-5 b(a)n(w)n(a\252ki)18
b(32-bito)n(w)n(e.)e(W)j(takim)g(rozwi\241zaniu)e(p)r(otrzebujem)n(y)h
(szybk)n(o)g(do)n(wiadyw)n(a\242)e(si\246,)j(czy)f(dw)n(a)g
(r\363\273ne)g(k)-5 b(a)n(w)n(a\252ki)-94 1924 y Fc(k)-51
1936 y Fb(1)-14 1924 y Fc(;)14 b(k)66 1936 y Fb(2)131
1924 y Fd(ma)5 b(j\241)26 b(ten)i(sam)f(bit)g(r\363)n(wn)n(y)f(1.)h
(Zau)n(w)n(a\273m)n(y)-7 b(,)25 b(\273e)i(ab)n(y)g(tak)g(b)n(y\252o)f
(wystarczy)g(spra)n(wdzi\242,)g(czy)h(w)n(arto\261\242)e
Fc(k)3416 1936 y Fb(1)3481 1924 y Fa(and)h Fc(k)3682
1936 y Fb(2)3747 1924 y Fd(jest)-94 2024 y(wi\246ksza)g(o)r(d)i(zera.)e
(Op)r(eracja)h Fa(and)f Fd(wyk)n(on)n(uje)h(si\246)g(w)h(czasie)e
(sta\252ym.)30 2123 y(P)n(o)j(znalezieniu)g(na)5 b(jbardziej)29
b(lew)n(ego)g(i)h(pra)n(w)n(ego)d(k)-5 b(a)n(w)n(a\252k)g(a,)28
b(wystarczy)h(wyliczy\242)g(o)r(dp)r(o)n(wiedni\241)g(k)n(olumn\246,)h
(co)f(p)r(ozo-)-94 2223 y(sta)n(wiam)n(y)d(Czytelnik)n(o)n(wi)g(jak)n
(o)h(\242wiczenie.)-94 6155 y(v.)13 b(1.00)1692 b(1/1)1571
b(Prostok)-5 b(\241t)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
