%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: kakzad.dvi
%%CreationDate: Sun Jan 17 15:54:02 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: PLSans10-Bold PLRoman10-Bold PLRoman10-Italic
%%+ PLRoman10-Regular PLMathItalic10-Italic PLMathSymbols7-Italic
%%+ PLRoman12-Bold PLMathSymbols10-Italic PLRoman7-Regular
%%+ PLMathItalic7-Italic PLTypewriter10-Regular PLMathSymbols6-Italic
%%+ PLRoman8-Regular PLMathItalic8-Italic
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips kakzad.dvi -o kakzad.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.01.17:1554
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: plrm.enc 0 0
/encplrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plit.enc 0 0
/encplit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/sterling
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: plmi.enc 0 0
/encplmi[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zerooldstyle
/oneoldstyle
/twooldstyle
/threeoldstyle
/fouroldstyle
/fiveoldstyle
/sixoldstyle
/sevenoldstyle
/eightoldstyle
/nineoldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: plms.enc 0 0
/encplms[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/xlessequal
/xgreaterequal
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: pltt.enc 0 0
/encpltt[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/arrowup
/arrowdown
/quotesingle
/exclamdown
/questiondown
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/visiblespace
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/dieresis
/.notdef
/Aogonek
/Cacute
/.notdef
/.notdef
/.notdef
/Eogonek
/.notdef
/.notdef
/.notdef
/Lslash
/Nacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Zacute
/.notdef
/Zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/aogonek
/cacute
/.notdef
/.notdef
/.notdef
/eogonek
/.notdef
/.notdef
/.notdef
/lslash
/nacute
/.notdef
/.notdef
/guillemotleft
/guillemotright
/.notdef
/sacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/zacute
/.notdef
/zdotaccent
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/oacute
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: PLMathItalic8-Italic
%!PS-AdobeFont-1.0: PLMathItalic8-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32857
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 556 156 0
%%EndComments
FontDirectory/PLMathItalic8-Italic known{/PLMathItalic8-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic8-Italic)readonly def
/FamilyName(PLMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /PLMathItalic8-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7A26E167F6FFBFA02D201035C41858D1C9BC3
C5482BBD107AB18A030FF0012B4F80F35E3B5F2DACDA8DA3AF61CA4B9D6F97CA
640BBDA51C5EE4608B0BA41E06E5531A75A3AA83454901AD3EB84A39DDF29139
7F4CC0CDC03202665FB60DB649BF152427838B7192CEC676AA2A0DA9BFFBCDE5
69E48508484670CC75B5E5A534E17E0D46EE7ADB21AD5F8B433A001279D54FE4
66730968D8DD7CB05F42ED6EA3D86C6AE6B21B3D3BAB9E27B9C46721A475898F
4D9018FBA3FBD95F754DB80DC5375CE15B229DFF01A6DDE71F29724C41749179
4CE2CF23B2549F1CDB2F992C900FFF4C58A50D89FE2AF87DB2A40D86C13DE9A6
DCB1AB47B273AC768471B1A5380A8F13E35DC0B4F61C2BE6C7AF6DA740B3B420
5A3D3E5905EB628EF58212420084AA1A390A401A8701AA5695E99C908FE7FAEF
78B5907B740869BB38525FEF89E5722C9472D7CB53F3FC4F591BFE0EA1D08956
FA78F7FBBFD715357EDD7E5EB84721E202AF56F3070434199E1D6FA71F8A4F04
8F596C8FED02A5A88A1F78A913B92D132586C1F3194CF55F2391CC65E4E12E7C
30BE87678550213E4DE8F527B408B31E72EF7F0A034A2747CEC6361673853B40
7F1D4B66DAA509D22557AC69C4DBC3484F2FD9DE63E6754CB8D08942DEDDE123
2689F54D016463A0B1F41FE4D072F74D115A86E41528CD5F32A66FE1C2E5249E
E8FD6EDB02342F7D8DEB0C432424110F3F04A96C8D15374712B4B9AF7C0059EC
7D8790B5CE07341A3E263618C8D175806B503985FDE7829D50921E67054B3DC9
04CC261AA7E2A0E7CC9A43A11BCE685BD0EB3265AD3F1CEFF7C2025BACBC6EAB
6217202FCB1705F263C1F5B5FB072AF8886AB76FC040DC671144860C4F73
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman8-Regular
%!PS-AdobeFont-1.0: PLRoman8-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31375
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 556 156 0
%%EndComments
FontDirectory/PLRoman8-Regular known{/PLRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman8-Regular)readonly def
/FamilyName(PLRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /PLRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-46 -260 1080 920}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7A26E167F6FFBFA02D201035C41858D1C9BC3
C5482BBAFCF7DF8061B51863FDE697437824573E60CC3736B77D96B9B17F4AC2
4CCBC0394C27774C26FC66F04993D0E73F619503565343C1E03ED8880A14A7A8
E686CEAF12D18FB2C70E54D7C524923386E488A5781001B47276F3CCB8173466
544141F99FD85B6BCEAD8A7E1294BA184AC78C372F2E51950F79844BF99538D3
5CA2530E636C821BDBF28843F9F48878C5B3D1560AD7EBF9279E90C993EB09E9
47357DAFC76071F98E84AB3C17EA7B49A06C55E512F6265F15555A6C47AEC525
381449C04D2A48C5C72CB15E07EB74DE8FF1F8572AA28AB47DC19E5558D0CC68
A51733DBCCAB4AB8798079565B82622F61A03472AE0A3DE6CD251493DEF89C38
5255DD4CD5F214B6A7B36AFBBBA1E86D352FF82CC01B72872C33384180326A01
4C998B467A6F5307BB43CFC5807C5516517FC7066CB1F147229B0CC9A0E20126
28A6BE305080E8FC9A94B98D56FFBE6688309F6D9793FEDAA5926EA5679791D4
74BC0B7939D43C0AA387BB7D9759D0213A6F36607CC721D6B87FA453D0E82635
D5695E1B8D43FB421979DCB016E5CA2765235A8148701570D9563168F06C40EA
E2C3813033A5D7441FE2F5A3B451290BCA5D541320D8DE86610389C0D9DB3032
4F35E3F41F7FCBEC699C2392CC42065233DA1DAC8F01EFD3C68B55FB44300E0B
11954CA5863023430A727D50DFB8D021C3FA1F371DC668BFE9B1CF2E2C93B0CC
107A3BD2986CC84CF28D4940F93FA5BD3D4314B3C4B93CF52BF89AC53466038C
05C0592171D6DB3717525B37D33DC7D4DCE62BC5140AB590C156D658E164D88B
56E6F9CEAE61FBB850C398377A8B3B9B0605595400D89642FD874209635F566E
CD661D7DB1F56E2B1E6D718D50CE18101A05969CAFD3ACCB57F595DA2E6EFB69
AB1E13576BDCB8A368785407F9C69A99672261F1E1A87F79EB1B060A6E004B4F
2E228821779D0ADB49D32AB3AE3974CE9E21383D62CB54502CD61A7AE78F39AD
2640585468A01573CA01F7C2B5AD714A8C62DB98092C4F8D2AE698850D937C4C
0AA7836C183E3A66840F048CF6D7F9FC1BFE838476187992837DA31C6002F972
E3D5243D6279DA448E02A66E899FB0501F8ADC760BCF25BB48E60DA5B41DBC51
77A1604471ED0103415C36C789E0E6E5C4FB98CF224F327CCEB361EC8C36EDBE
C14C5256B9940F0800E6DD26001BE1FD4FC7D829C4255C893F7749C4E7B67968
55E211E675143512EB64E818E423405497D6AA2AD167513801EC2CDB19C9E2FC
6CCF92AD19CD99349742A7B5FAFB4FD8DB29B700CDD10249A1B9BEDE4244D27E
0F6F336D8AD84BC1BEAB05441AC3D52CEC1DAA446B9C71131EAD2C04B0DB2E67
6B4110B6299B66030EE060DEDCDA41A15BA57AC41058B5ECCF4CEA8D7BC267F7
D4B921C473289CD30A4463C89CE51D484F7E49765600A125D6DD423540BCF10C
4EE4A1724BED4905EDAA8A46A337EA53E08716B203498A3906733A92966C2F11
E260A5524656A9A5AA27CECEEFD28947BC07BBC931938F74E26E1F6BF457FAF9
29178B7AACAE1D371228606B58787EBCCA903DCB4959FD0B5F87FB1A9C53632D
A393490200108A8B1E58BBC7E4668BB7B084FC502F2FA78D55CE95FCF060AB90
F4191E0ADBFED4FBD0C2F23F385F22CC161ACCFD6E18E46F235B2B08E2F7FBB3
AEBBBA63D3CB4ED2D93579B6AFFE518B7F48308EAB5124289D23915D057931DA
90A8AEC44B0E145A1163142B3FBEF32002BAE8B740656A044CF4AC45C94302FB
F237C394A769D03D7A3F8DA9F08DBEB3DF01D19F6EF642E4654A306B1AB51FA2
6D5AA7B82190DD3EB3A33AD53C9B8AE77C4BEF2514EC8AA3C6B7335B3DC4CA3A
ECF0E1B4E908BABA9FB8D8992A145FD92822D955776E1B6C453088E1217FAC6A
BF3636ED201011F687AA6A1FA145D82267A2755D31CBF550EE7E64A39B4FD2EB
D646FF493EAA1C51AF5DF9C706CF7D8C4E17D3B5E585C5FB4789C8A8AE1ADAD5
7C252C362887548301B606BD69402B0A0C79955063005FBB283635BA2ECC9435
E6D1FC5A366844F81A145D5A71FA0362C5B867CE949AE5F275D2388D59F5232D
64F2C1E338E66C7563D41F4727CA7332E5039A2A820AC1D88D01B002715D5389
AF0C3828062B54A1B064BCE92091644002E054F3673391C853D3DF8847F665A2
0DE17AA4BA3A452362ACFAFAA53B0B4282B09EFC1FF604A24E3A4EF8CEC72FF4
2B72DA6FF08AE9C17F455A79F3F143C053205C1110D2503B5343888B8CF86711
A918ABF26B9E1439111BEC668F9B6380CAE5E75DF3B8B749E7052BFF9D02D134
C1FB66A12D2BEBB44A71F7846168F04B32A0D16914AFD58BF2848706C4A307C9
69E3375C5A42A3E0F40F3FD51C8DC838B04F2D44B580F39C32AC99C72B6D47E1
0A2911FB0BEB2432741FFFC4F302E6D69388281F0AF776D5E542A2EEF5D51BE0
2AC50855B9158840F97FA94CC7875DACED6F47059CEEBBB988E953AC22110E33
66BD0BD429C6AEFCBFE9447A13D00FA3D6E666B4AE09D182703365E481FB19B8
877BBBF6147B984B193B34B60E69B69EA76416155347AB062B5CAC173154B9EB
5737272AB57BFF451E81E6AD44BBCA701E7BA4C09F4722510F2E216FEB85F098
DCA9C67E9EA8D2261E09AD662E24306DDAEDAB157B7FB7431AA70981E77AA5B0
246C19A9A937AED6C244BB6C4247514CFAA004CCAB6069442CE77EB19B206483
64E83CC10DBF157F62B52B5462BDA21D0F909C5A83D86700D6A10203D03263B1
C28B26EADB953ED292A11CBCE1D7B9AD890D6BC64614C5CF9B2479B4E7C3B12F
AB5D4215A736793F0C6BEEB47A5B1E049DCC89B7FB429610B1D2E27FC2B5C49C
B24A18BE141E5B8899D46883B199E370879B537E40FB5010F22C646DDA1374D0
5800CEF19D67CCD897B64C3B4D28FD5180F75EEF61BE7242619B6D005F2D6E38
8D59B9F63D13289DB062EFE9875B431BF80DB976EF6CBC3F064E5756A8828D2E
68E42BE5077E261E273CD534DCABD0D3F7F5E280CDFCE4008A7DC06BF88BAE21
0FC1CEA674D5663731951B3B20971CFF1A344ED1E2F931A4B8D11D1143E99AD1
1349AC385DA2E83139EAB70E02BFD1E948D0DFE16BBCB28A27C3E6742B13F05F
71D8C40C2B40BBE45CB5402826C52949BA958A4E4E57F1F0D63E09DA8572A5B3
EE0EBAE8E565A349E869213680FE0ACBCDE8A1C1C8D8115B1FAB7E45EEDDE989
DD1C48749A1200323D28FBB61BC0923B6B653A7B19C47027AD5C2E9F9907D29F
2441885D4654240473E897DB1854F135C2B69D885DAEF783AF89593B1E16AD66
1B365662F6447C26EB04DFDA3F6CA83AEAA66AAE285D962A9027986FB826C00C
314938DB7F515575C5A33E49560BE2AB1F996F3925540323301C441361AA126A
9D298C9D8BE918437C5F49A67AB609C05B7F98D40FE882DBAE774DA058A5464B
10D12BB3907BF9E396349CCE3D47F08937928442EDDB37864049CBAB399B95B8
F9D99262054B27EDE102927B55846630D1E858B5CC614498914A75250DE6FB69
CD1F3B560701E1653DF36A29C8C3254D402D0140F5FFEDA5AA797045F51DC5F7
F319DB82956DCBD8BA4A7EA3620EB66AED0E0A1BF963CDB14D5E413EE329553F
E07A7A3E2C97458AD7A361512E05D95A3737194E9447DF0224D8406F63B2CED0
73C5F6916F9AF0C5F519C9B8A968AA504F99130FA462E978EF86249E99EE6647
923ADA644178CF8E7B46FB82297B7404FD53F4731BB6385C594B53758CB07AA7
7899611C0880F7EFFDEB3275AA6D50937624358F6029628AFEF7514C925C2940
5C1F2E0C2F488BA00D775978537663E0B0DD1698B9D1A2777ACAD657DF714500
F5D1F7562F7991F7FEB5E602BC71CFB91E4FDCA44F6CBE296AB0585242A0053D
86D75FFB21205CBF1DA27BFD4A1EC10B2554EA6D8EAA60052545C40B1E23184E
7DA3809637444D659BE32998D5641A652F234491148F2868FFAD1BA378B23B93
36F12F73A22316553C89E3C490BD3B098CCE53DF664145B6BE1799CC20AEB9F4
D3BB38BA7E016AC42A19D8209A0D7CDED19AF65453E4D12B82E32D8BBF15045F
BF9EB30599A56C679E651A93E2E26D779627FB62BAAC2E7660209330540BDB2A
57ED3FD2E3D8B66473C7213EB2348EEFB69C71CED6BB536749E4D4134134FD42
F89FAC0837D199EBC0B99FE53DDE45530C3516B1EE4DD1AA03DFC82895AEA51A
4EF44602D954D6AECCB31CFDDD9B6CC425128211A73DA5D626689A01CC0D47B6
B1342600782340F700581F8179E4B7182CCA68F8B35F57AA77C9744B8FA0E80A
AF7AAED4A85C93F667F85E6D5C125DEB1A8652FB530439E0E8AE43B43CF100A2
43A7967826FD4095095317784AB2F2B4BC80D764D1841B2FE33F3DF5262A92E9
8F7A5873F70B95FF00C629DE36DCC0F40361EC449F8A5140E5A43050BF35A932
F7DFAF08150B07848BC8902CAEB654E3827BB71922BC9474D03BC93FED60C902
17C235EFF70A777E892F5B7BD352E355DE386E2A72FDE206A7B4D098057BB2FF
C239BC4D6CA31795C0EFF6E38CB7F506FCE8F0819DD43D12C109FA7F5529303B
9BCBB289AC03CA093B86707AA85D2BAE4E8AB9930B4D957AA263495FEB5A3217
8B4F8CFE93389F3780DD65EE069203DB9E00021831DDAB3D794484C4A85B8F00
97DEE9BBE479C8E653F92046E1E5B36E223885BB7E1E8B28B162624FBCB96CE6
7468ED160438641E71D673717BD05070749221081D1C75F39C3FDED02C7B5394
E53581F40FFEA970858E80ADA63052023889668F4C3E845E7FF4B743CFC5807C
551651FF922639E5077C139E36B517EFAC4D403595265F0306D9CB3B26CB5F05
EC56744AB8BB89FD722AF048CAA68E214A189C6177D8F1504889141651A5DEA6
262FD54F422E7F9553C125F73425A27D029AAB11C5669F6E445F5486BABD5339
C0F1466966A4708189A7BDEAB25959C4E3C5483C949AD66468DC27CD99AC7D74
8CFC64A80AB9D2F9F0891F553381351024D283BB3CDDE26DC6489F825D09A330
FC50A1C768CB972B35EDC8A6EB58E69DA497958C0A9EC6E8CA6C6722B3367C19
32A11FC996FD2D03A1BA252D76A846C1FC2C760C11AF0077A07798A4C6128164
F916E3BF46CE85562F2D44F80CE45A6DAA0BAF795333376EB45EFBE882572815
7D10E32AAC6740E4FDEDC5CB3117574C69C52C46CBFF6B5F27E91C7640502257
36E344440269FEBA8CDD5A6DC8FF2215258D2B99EB2B0063EB9E3B6D82C7F4F3
41B4BB7C5383D05EA02D410D26C06E7ECCF47BEC65DC22173CA628D9FD24EC31
CA514DEF5E701BDC76E7B98937866A0600C46789DACCC18DDC84BEF2BD6AC84C
EE11E276624DFCEAD5E7F776EFF43F421B688CB61CD866633D7E35D3C11871BE
BDB51A4BAB43CA7AC0986DC506FACDE2CF99E9E435D4899CFCC9AE5AEE1AF318
73D832CE47DDAEACA26029173814CDA401F086A39FA7A1AEEA3F6C937F0427D8
D3709E96AF4B0A1E4A219CE920A9E136161C3E3ECD588934788209CD5FC3FFB9
D118BFEF0C48CDBE9C0E761054F4DCE4394F959FEE471D8B35068C5237E84B18
B0D52C2EC645A7FBE076E329C766EACBD20EA82A649B11BE896825DF280B85B0
D9C77CCF891F1091F201B45EA2C5E4CF43905178F9CDF29D8A88990803C81135
D87819F5D6244DF68CE4F145D14A4FE23946187B3D4CA451DC48F142AF62D05A
60B07AD00D50D1793AC8D2FFA34F4211BA7226CB709A8F4C8FED138610995257
33199D765A70860AC974FE9AA88E11B74C91A81DFF9C420CDC3DD8927ECBFA5A
90A1CCA9D08495FD52F82F0777BFAD9E6098AF69A7CB11D6BEFDBB167E0ADADB
CF35929FEB666F331C66F4E44B8962FE139B045F52DA2A63A5DCE4EFC789DC62
AD541BF17D0B593BF1433E4CF98730E85E7D926AE634B94AB3FB588A26531F47
3119609B854A3329A245521FF9BAC853E1A6A4AE8916FD3E4F7B945A99A43669
576D6A01F79F869E23A65A7D1B49BF717E83040C561B4D73781538C409F3D968
E9D6E021E0284413D624ADA98F02246DE51597AB9878A6014D4FAE116819C01D
C2CA61245AB84B4868718936C5B051AACBE7EE949595CA1817C4D0CFFD9B5969
BBB443FB46A8EB343EC9232869301719F038DE89EFFD366D63FCC2B2D016CAAB
7C73B99782FAC2901B629CE4AFA0A26E46B6DA9BEDD87ED0418BC6F4DDE55F0F
AD6A70895242A96664B5A176A602E3BA47920B8AB328DA3936D55D303DDA2712
5D923D2AA72C7C43BBB5CAC2631D29DF75CDD40994508EDE2515975BBCD17AAA
0811D38CAE7BADF1D5C8E56329533108F38A30B8722A686E846E3103F7407028
E382A5657A8CFCF66D8469A22CECC4AAE9A377E02897A8D648158EB5D5FE1F9A
854CF95A9BAF457485C7E27E7143B056BBBBCE2390BFB83228C20D53498BE8B1
F3350DE30A5FD5E7AEC254781818495489BAEC3E56B70C6E31AF44AD90382329
CA1D9EE3D3CCC1DC81B3205A5A5DAD2424F73E2D5A9A9CA5902110218670FD96
F74F1E025032ECFE936F4EC84ECF3B06F433A41B24AE8E0C5907A86B3B66370F
22FC4592440DB48C2AFF1136916DF5067BC827C8D76AEA9D61E0BEB18D8D9B9D
2227C7AF2471A7C1D2708AE5BBCF0851F164E31CC70B27E6CFB38F0DAB007F9F
A2BA5A79B3CC52CD35ECD7DFBB707E72AF126D43006DDF78F461059F8919D843
E0EB4B2582252EEE284036FC203D866FFE389AD54F99269AD2B34694C0D021B4
2B5DF764CBB58A0BD82F7F95A25D0B2A7BA27CA8D8822A8B23D0293EBCD42C5D
4C6BB0D258DD08676A99D909FD8B1E60539D1220FC2AE095D9D1C6315F0B292C
F3B1557BACE4298CF3CD55BD18608305E5AAAC0139C80D304F52879BA9198666
5C656F54C4B9E0F71275A4B05EBE0CAD1A2421F033D3CD9AD3AB8669A691215D
E204693801C3008946F8652D7D0483B49756E1012ACFA152D6BAFBDF6FE76932
B1C53EA33548FB8DF77D5DC1CC17DA86E8F6A93EC55F3254D9DF866728328788
EE5B43B3A904E756D506D6CDF4235C9298EF1A176B8BA9FD1BF8D390D76591DE
36565FC6D37960804EC558C23F01A96AF2604B90471F75C3DE9DD23C8D189FCC
AF4E5A35FD77C130E8792CD2178E353E7465E22B64A523982E8E75D3D368803F
9500782A2B6D566C94C799EF392F3CAE03647789279AF0D7F2C0766BFF9AB254
AB8E2834DE419C65B7748427F7DE3757239073976CCB482B46EC3D29F1599302
95870B6646616E1E33C0D86FD2B6901552AC97B9972E226E1AD9818E6EA12F35
E45673FB12BBE2F6D4871DE23C1AB7535B1C42AF662AE71A6FD7307C2DD59116
325B029928211863DD203453C3EC2986F399830457EBD8EFABA7EDE9A569299B
4DC0A4698C65F100BD537BFF1FF6DA94A81E986340479C1DB8604DCC8A34A6C9
B40886CA73BC8F85440F64B318D93E2CB299D0B7B2D375C52AD9A24989945185
0D26B8492D2A9D2CC63879AA362E40524F69A59B40DB3FE31E7C5680F24C695D
E52DF347275E00F953293D8D156823137773729941C3831C45473B57E851FD96
4ABF5A251F438CF54A89C28F8BB248FA41B2FC718996EB61BE4072EA02D3F909
13517DF1AE26F6BF5174CB48323F305F4C6AE1561FCF58A3F59B7407F95B0D9A
C7C38DD9771839A6FD478747A919BED7E26F5F581EE6F9BFBA3BAF8416553A1A
9171E36E18C7D4BA833DF7B9F8BD345270B4EEB56566BF150F55B1592FB09C7A
8191C0311EAE206510BE6D0C476C1184AB715DC3530C9C68C5AF3E6EED9C56F5
1E57ACCCE709DBF5E9F207296498B0DF16CF4B0401E8EFC06287ABC55128649A
2009A2541E408F6775D43FA7BEE5A5E4BC1A6A0D7B8A11E33CD0B7F53872A094
66185C426238A7038063E54CF28E4D24116EAC1A6EF10237F332553865219534
A55D6CF8F0F56893C3AC9BB915D49ACBC6D07D3BF3953C45CB2F5EF810D66B90
5EF022724F4610CE5F34604DDE2944A6AB2F89B8F17194752C89E5D1186E4608
787E5211C5E7C19E14B2A9303AF19FD1687D202EE0EC3092E2179217739F9727
7A61CB0728023F9F71057C32C60958D042C4BCB4546476F0833611783E48DDC7
69DACAC84C16DA4BA450D615D73C0A289B3280F1F594B78AD8513211F683BE65
6B35FDB9084FAD290EBF462CD7380D247BCB15477FF5C7970362B12E23236E27
0B6E59C040EFD3E39176E655A03BA975D91A50B30245A93A1B7482453AF6E40E
091803D9D14037121DBE325F069CCF8D3C6A54DD360E69FA6C7E580E3D950DEF
FA38F516E3C8CF815426067B6AACEB888DD8582B434B24EF443A1CDF099BF367
2432C3BEAEF54643555A0FCC635F7227DE9FF96147F73CDFD447AA1711DB18AF
64760E31C83EE46A4D7A4B786969B48E62ACF39F1C1D8A54AB4C5EDB1DD944BE
D4865C3AB53B4E0BE7B30B01BCE770343661B728B2AF22714CD44A04CE296CA6
9F6A0EFBED4598D39A596B3B970548DAC96FD3DE50C2D52E414C3CC061E7767B
64194B2DFFEE8382009348CCB0D1297E5F814FEA083DE1D9AE54711A011AAFE0
8F1F10F5D5F44A314CE4A1724BED4905ED14963B2570071483C2DBE8BBD10538
30C27A2571521B80BCA0708E7189BC828653C95AAE1E787592A9C33BBEA2B7C1
B236D14DA3445151A81737122BB52128C6EDE3A4EAF38034E5F9D97730FD6390
E195FA484DF87C992C27CDE694EEF9892FFD8366840FCF65EB522BD33D83C865
B0E2017FD410F8C96238C5591C4DFBBCC7BEDF35D589BA517169BF282CBE6E15
3A1B80817DA1A66663831B5278192417A0C866B90035AAF252506723A8F726BE
1B51FE9F69609FCDC30A48DF73AC7963F42E0D1467F1DF2E2D1046B4191CF8A6
7C4B178FD6DCDF4FC7DE23929058D00CA4701D86E026B07E4266D322E879B3EB
12BC3BA76261E0F9AC87E9AC5A145E0F689BD78C6B126F603DC99E29D0C8F7E5
10252C744D0ABCB80955E8BB8E6AC58A684AC12B4F976517F948544FABCE73F3
D3721A89451311B0C8AFF2D9E1928CFB53B63AB85A071F264A294F747504367F
9A98AE73BDC625C64FBBE33BA3C1DA3178BE9A2257DCF791B3B9458EB37A179E
0ECD59A59D93608E66A6BEDBC9B8C44D60078BA6D8DDE33BB1F668CA66E6A912
79EA0A2995156E9EE5ABBD2F795AD8513E42D30D48F8DB2F88685BD7DE8ED419
8B85927AA3629A3BDC16A208A755C85F1FD222B728B4EAFC722112D2722EFDB9
94078033CC7DDC4CC4B96257F4C15B5DE3149DD00170EC1D1BACA890FC76653D
9A62EF76D4428B342A4A72F338BC36860A311A89A3FE0DFD20E9768E4323D6AE
E118542617537F9D44FC17A2DDEC317BE5E5D572C4E282F7953E0D503FEB242E
58FBAA7DE3AA8513C1F270DD069A500E5F7C5AC357518DBC610A1A68D2939EAF
11E9FE762D05341D6E1E0087A0CE39AFE5AF4BC9B34280B98628E4D07865FF57
94DA9441E315DF44A642B739FBE58C5932691A3039F61C5C663B538878E66FAF
8870C1DF5573FC2E2F82F2D288216ED6E534D3AEAE48106DE89B753E5B6C17CE
C764CD0FB38EA6C2EB6DAE4EA4FA1D25AA28B17BC37A04B54C51EB5E8CEB337F
5E9745D61CE50F9FD4126DAEFC2699A4A63548826145CF4C548BE05D254F7D74
63437C60B2BAED7D31AADFF807FC5D5BECFF6DD16A984AA89E4A4B98EF4C1D15
1893306FC09386E2CE546181E48A80D4FDFFB642BED0090EA61D42CD1891A519
6567F5A8D4B460732BA565B69B8DCB0B1C2DED894157C5AB95B5907D0FCBD92F
3683FB808078778795AF4CC9E565DEBBD5D9895785F1AED8C91A3C969E852561
BEB731D5E5C8BEE2003F565B0365A97E886A417637B11AC707909A7D46F884FE
193263C227B72FAA56622E3F418D4E6361F85EBBAE7A1D5BC12AAB40B7F88D30
66FA2063FB220A57CF47F1BE25F74366DF4028B32FFED6BCB563BC4BE1449AF9
B1DC692F852B1D1A87E8B72B40C3E1BDA93D0FA4B51EE1E4C9D0660FF3C9559A
8AF32CA100C19E938E344BE58CB3A3287B19084FBF55D1B234A35096E901CE5E
FC7E8E02D9C7B612C11197D22CA817FAB06F624A6FA2BF20AEE46D60C65136C1
EFBE93AD4D5448F0A3C841470A629D58B5AF72421B9A824040CA9776B141514D
5FD2B3AFDF36AABCFA58CE8189AE9C325C9DE15E6A99FE6832A3D50ECE5AC149
8D60927BDCDF727636CFAD8895FC40E43A7EA149580190F42644E538C252FDFF
15FC73FF91E3B47B5B582DEE1836BEDBDD53C1D2FA97438633685CC001C33064
E82B283AA4D1F7A911D8B78737A85871CFD6B3C3F6CFE9E7D8C337CD289755D9
3E4D347B9ADBFDE76B1637530A9CE2E0302643FF0AC4D71823DB5107C0FCB4E2
B2EBBE3A4A94D7C94BE769E7FA20759D968A9F0A69B3AC3A214E1484CFA58697
DB932DB546D06CBF139B39BC8C210F53C8E020D3B63CA17FAEEF46838ABA6AD6
5E3F49B310896490206DF9D1D827FD94FB80EAD28FB3D4212934E6C58D76A7C2
7674DAE741CAD6773679933DCB3FC48E6BBE8D0EA903C0229B8F550D96C10F39
F9E9879983F48CCAF4BFE6745CA611A789CC1FF8C55D7E92F9D3D224C128A995
51A6020232DDEFEE657967B5895BB22ECF273901D997D0754FC527E00914D4F7
10200A74827B93C62366FF860350FBAB3DA2D915A5914DF3E56D3358251F0DE6
16062F046EB3C2D1CC7EF8F6656EB4273DAC0E9E620503256FA1D5124F394EBA
38F693500B15538F6A6DD986B8C2A3508CE1DF526D9F2407B7A0D1E9BDC2B0C5
6B8DD6B3A2E59A8A7942E86D8CCA9BF24F6C57A2870DE204414408856576EEBD
7EEA603BF975C7E5EB98E038933BF1F2BAABBECD9F7FEDC1127FB44D6933519F
63821BCDD9D1D7BCAF15E618F9BF1CAF9DBB87362D090A861492E17D585E5CDA
81E215B4345A7A7A4BDC0A4215FC48E07A7487DC7CDA6E5B7FD29E9EE82E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols6-Italic
%!PS-AdobeFont-1.0: PLMathSymbols6-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29885
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 417 117 0
%%EndComments
FontDirectory/PLMathSymbols6-Italic known{/PLMathSymbols6-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols6-Italic)readonly def
/FamilyName(PLMathSymbols6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /PLMathSymbols6-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -948 1329 786}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75954FC56CFE8EA07
FAC26C11F80FFA3706A4BC08DD6698ABFD26B1E4EEB6AF0585C7CACED2867442
F5FE4455978BDBA063C52E8210D675E198F88DAE125EAA7F5977208E4CD75D5B
8AA2D56A3111A050E501FD978DBEC0E0DB9C4D5A1BB8A9E7BB776B37107CD588
225511D4A92100290CDD8BF9315A05962616BDEF31DD007AC99947459D2F1279
227E647DB37994441D207FC17B5F5127DFE683A18263F071BC1C3B8023F974E9
CC07FF8D037BB5AF2B4B2270AD045D8403691BD081A40737D0F0342EE72FEA35
EB14C1436CEDBEF0CBBD90C30BC65E229B9156DFE7A7BD5C77FE682174FD23C8
2AF7EC18EDD6F6DD47C4E10A4C34E88A6635D7D4722B4E21E242820BDA800727
8D9693376CBB1E4FE07C28EC69D6FEA2B7FE7B91672B138D84E3F74184A7F3CE
ECC365C8F426FCDBEB6DCEF47BAA871A9A44C59469303DAE0BC50089DE83C023
F72549BC0713419E949C0C9ECFCC1442071F834087547D63635B2BFEC482B0EA
FC4D7F619DFC295E89965D506ECAEE0B657A72DC10C0D3914CFD5C1D9AD1D9A9
75A34B46E8B745E4AC883EEDB050DF2B162EE88A2B99A7D173D3ED24B33D238C
222A4ABB21DA37898AB1237D81A457DC2F198F21AB3D1DD84436B427C08A0E49
DE69F997997B660A8DB48696D0EA7405C8FE9CFA136872AE1212FF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLTypewriter10-Regular
%!PS-AdobeFont-1.0: PLTypewriter10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30532
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 611 222 0
%%EndComments
FontDirectory/PLTypewriter10-Regular known{/PLTypewriter10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLTypewriter10-Regular)readonly def
/FamilyName(PLTypewriter10)readonly def
/Weight(Normal)readonly def
/isFixedPitch true def
/ItalicAngle 0 def
/UnderlinePosition -167 def
/UnderlineThickness 69 def
end readonly def
/FontName /PLTypewriter10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -233 537 841}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6C94D51F63E64
70D007A07F878F3893E6E571AD8BBA278AAF7EFB8F0A7AB31E02ABAEF85D758B
F0730D68A8AF328C93C87D63E7D880FD43060576D4135C4770C67A889B690C04
8236C8CBA94A6B64D8D619F5DDC7FD1FD4CB930E7DA58E007039E605ACC1F1B1
D89D4B0C2B4577B3DFCF493F28972ED70D511F110720685AD658D864CE358D6A
89EF306AA484ADE81533D684D562E16F24480D0C449FAA71EC9A3DE16419D253
395B707865128C1B002C7DF3DE96919CD0D3FA4BD859DD6EBDBF06B135EDA74F
625DD091A85349BCF021F41B13DD8BEB0B1F4EC55ADB11604834B61A25CD7D37
DDB32F2D3C7F47844DE016040089CDEDC89AD3C25EF330819F626D6B609235E2
9B7E9F3127D1D8C8A7CEA28D40FCD6D9B32185DE8C592E33C2243F227677DA48
200551FD1140A4F25DD65779019E678CC83A1A2D62B299187ACC0F680A66A9CF
8F56BC205F18C6088C6DD81AFECC3B1A51AE4850C6FDD77B051AE1826675A5F7
CC5523D27FB37B08E03DB5B38CEDA174CA001B312141BA6CC5B99C850C4A7FCA
FF73E3C7106DE30A0BE3EFD47261CBE2F070C178AEBFA1940239BEE8FC585142
7F8FAE45D1B02B4285E6B9CF45DE0F5CB549A5E0A3C3356C5A1D6F56FF059F99
6B83FBD1511275A29FB284F38140F048E98D29500AAE888596D0262AB6252494
32DC72DB3E25A9DF8158DF67183B0FA6ABE87FCB83408D736745F975DBBEB205
EC6A890FE0409E6E1B2AD9E6E2504891557AD5CB93AFEBDCF500010696CA208E
72B7B067FA0F0A2EBA9CDD4623A905532F771BDF7F58E13069AD495AB6F42764
B791AA22545893E4A3E6C92762820CEBF255DED91BE00FA6CD768A42943CFA03
EB41DFCB6DE54C71B8E0D1EFB056FD514402C80DC7D665E16FED635D2A6DD921
4AA1768A364052081D7FD3FD0C43F657CCF46DE5CEF9652DE46E6F8C34A098CF
802123AD316B7E49BB8F1995B80849295E58FE100BCEC05B2F9F97E9D98B53B2
D91C18FFBD6DD25AF4A87D737754BA36A2B8C277FC40487E39611DE5613C22A5
0C295B7FE684C9E36961AD0EFAF89717D89B5DE470A3075F0CD95D628007987D
EC78FA64ECE4DDE11AA3604E9C4544E92FC8BA2CC10ED14E3C45A19EFD429E2F
70F719CB08135DB8B15A2E446D00FFE496C38C160F9C9C896F97910F00E3EF79
E994A1C485B18EBAFA9AA9167FF60D0B4A1798F95A800014EDBF7252453146DE
325D73F22A7514CD4497C6D098DFBAC2DE3012CEBC96EACDC2406F8F2128B1B2
4EE922A3179CDE1D00F5D09E5E4DCE3144FFC0C9E36EF2CA5E5BB1370468775E
D1FDFF87964F7752289FF8A6EFFD032E983BBCCFF493F484C649F65CA60EBB87
DF56901E0EA6583ECEFC663855EAD5557AA5DC4D622F10A03BB243CFA2287FA2
78A711B0018C0914993E3DF3D89034F8672560BAF9AEFD4F48A6959522B8D186
DD6359EBB4DE62E55CD88D00F46E85F2DFE9CD8712D3ACEAA6AC3D93C0E21755
519AD21B3362EE110745401E8D529B2B6D3300EC0483ABA0531B4663E5D78143
34BEF3EDBE84860123DB51D12D07AD18CA5BA354ED57C91E7ED214AA6E3B0757
906DAE6632F2DF0668BE50690B42DE7DEE6F4874934AB01AA428DC48BC52224A
E7873A937162D5FCC90316B1C7E762869C0FEB17891428F04A82794921119A32
C49E80EADA761FCD9D06008E39FD35F145DCC99F1AD4933A34E4274A5A6D1BBD
EE22C122618CD89460F81B085CE62B436B3DC530BB3C2BA94588A897E5A7E042
4F73A578A5CEA1BB760037BA80FABDE6D1DCB67230EFF34E525E5583CAE2D6EE
D91649AFB6F5AE975ECB441A140A93B50AF8EAD6191EC185DD801A4FEE73BE2E
0C6AB5C4C53E09C26B8150137926F0319883294A709130AA95988CF6D44491F9
DB896751C0D14652539D6A768D58E30EB04153FFE9359342178A40DF466BED3A
757F9545EAE00597C3511390206E02BAF537317203AB64737A29BEC2EC4B5EDF
CB1AB686FC98735E0DCB2197B3601CDCF79EAD0CF5EA9D0770A514C6D704293A
407D2C035D83CFCBA00CB3994E60DAF862B20DD0F96DCAB8AFDEA48855308E9A
F03EA4C55F9B30C403C581FE4CBF36154CD5728DA118CC87BD7BE5105DC3C67E
678A26C8A50438AC15A01CDB3E481E655EC97B77A2CFB289A191B1DF67BC0BC6
D2726FC909BF37DE4A2DCEAB569C59D058880B4639BBFD5C0D3A1A01771E6B6F
F3F5189F028634E2AA15CAE5CE8444CDD106413040627BF5B4B0F74392AACB45
7647C6C939BF83ACA183DE9DB5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic7-Italic
%!PS-AdobeFont-1.0: PLMathItalic7-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 33180
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLMathItalic7-Italic known{/PLMathItalic7-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic7-Italic)readonly def
/FamilyName(PLMathItalic7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLMathItalic7-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-1 -250 1171 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F166942E28C8AB8F1060C53B5724765FE28571728FBD4816AA3B9061D818
2C6E01AEA946C53F8D5253B037F98A39A0A54BDCEEE91A3AB6AE40600D30DCD1
48597DDE11727CE760DC74B749BCDAC11EA913E118A6B353A7C7B5BF72A0C8E0
A246A563BDD4F3BFCA697082A08CF326EA8912CFE36570286A6DE009100C2387
E1D37DFA3256E714423101E3F7806025405B6EC5A45BDDAD39589C1A6BBFA393
170E7908D55CC1B570BA2BBDCF3EECE31194BA92EB03A7A77FBD6DF87FD4718B
1684B464F4C4FFBD4F97A1903F2B52EE686402C0E72080E2685AFD9E78BC7EED
245B9D1F2CF292EEA22ACA0D39AE27642002187134D55E9F851AC3351956FFBE
3E55321156CF52EF3840E5BA7802C3AEA4369EC8C2738BFFABB86707F61CF32B
A17242A416716B5C82BBBC8D37EFD7DDCB8F86FDB93BBC91FFBE6C83D561EA68
7A5620314119629F3C9156A8E3570E640856403246955BF6F56CFB6FDA12DD94
D5837F8101D3D65F56FC73A5A5A5F88F111054172447AC57A8B69B4DAAC8F2D1
7B997EFF71C0B00B951A7570A341DBF602CEDCFB5A046D818FBA90295153CC3F
F0A4FCB3B2F24FC93A3C6D20B40CDED1AADCA60A7E22E14EC3674CE4718AFF4F
3A1A611D47EE7B715BF06D0F86AD787B605BF15540DD278DF04F7CA22DA96404
69563E178248223C1CC6A866AF0BC332EB55D3FED9CEFC47B9D8C537E382B549
903534CC577FBE9D2FBC52DDC427B2E52302597BFF0F12D7DF5CE21971671507
3177002F908641625F5C1C0C6A364E3100A357D10632538DAA07F1893EE9DAAA
E01D549A252D77E79AD37BF5912E33F96CD42386C234A9447B82BD519B639D87
A7C50A649229C60220CFB93E13675D87CA50063135F166633DDAE163E0CF610A
1CA47EB1505EFB8F59A75C5A3F9642A8FB4D2B712DC2F51DD16A4D54CBE7EEA1
2C9B38969962D4B5905E2359990E0D7D8AE9FCFEC6C4DA1A7A256B315D5927AB
8BDA61AB8C64608230B8819D948C73D6D359769C4CFA5BB68BC03ADB9537A497
C2B9474FC4A738C02D239DE884C96BB923B1EC8208BD7DCEAB0FC2293629222E
06548D553D4A6EDB24F8208EBE13214E89E02093FF8BC53C16D34888A41F8C31
08AFD4ED24D99E1B9F91E225D0AED56107BD6F4565A426421AB1F43F68311828
EFCB01B35A95D0E929461A4A0166B3AE0673B0ABBB29858F65E937CDE31D67C8
47719779DE0B35FA23975251ADE05F6461CD7A3BDEB3FBBCB3C40D7AF9672154
62DFA4B954884D387C1A6D45A43FD6866077E289FEE4CA595331D0914E4C58F2
0B471A91A242A08BC434A30CC2E5A3BB80141343236B499AEFCAF7E22B090A14
F56ED1959BD60C7F7F5BFAF8497205D4BD5B2FBE87991F755B2DBA4BD765F7A4
F966BDDBC0507E537E9CCA690FA83F7A9EB23119348D2C82A64066B391ABC1C0
05CE38BD1FA7357A6B5182917E61CDB10C351FE33884AE09FF5C7902A20B32BB
149310D7CCB0465E8BCDB1AD43BFBDC89608A3AFD4DA2CA72E964D2C493F8EEF
610467347A8E0D9DA3F9A5DBB5C837634AE662E06B49F97F02A3ACA687FBB3F4
2A7704BBD690823BB0018009A8E1CC861B8131DCEBC3DD83D4918D2C6FF35AD4
350A565A6313C91B57365C9E293CD84D7FCD00583930CFB25E01E9F870CA8523
DCDF93D57CE57C1759F570AD6DCEB0ED314523E81CC6D0102B969D7751807A61
CF78220F28E45A84B0FF35C585C18B19C61B51CC96A65989A7AA9AC8B6930AE5
74DDD32FF4BD7C970F75302E7A8703A70517C9FE24A6930AC314870AC4DA73DA
3F8F41970BAB2954367738E47B53145228592E2A5A281B2437BBC4295CCDAA8D
E64137227F139DC0BEFBAE0809EA81F96681C81E903522047C2CD466C90BF8D0
82F1FDFE2CC8A3BCCEA2EFFB91BA406566729D1D5D76D4B7AAF17DB2B6B44179
A93C357E2136C472FD8851998C80FAD9A265F84AC8D76431B25774F7345DE39A
3F1936FF1DEF5402DBD99C6BEDD2A467C58639DC0E0728CAFFE3C5B6A3B4A584
B53AD78A8A6FB59D58C1E794FCBBD27B060EDDFD4A21C9BC9BA5D0107429B595
3FB1BE0128C6BD42F01DB16490CB6A70FFB9477393E78CC5659B3C74C676B0CF
D548B9D38371EF4EF65A50468534353B20EE87FBCFB6380EEC014CEBC4FBB263
9E4DE3A0CA3D3960FCCCD095594D9CF8F08C6EAF995413456AF64058A403CC63
CA5572DE3BDD86015BEC61FFCDA62B59D893A5959E924476E93CF7DCA4E9552F
CBFC07B7FEA769AD6DB847C5FFBF83A9135CC1969899DA1FD2D967EB9B7F6B38
9EE22D1C0802FACD28F8DACD7D1C12433ED9CE0AF54C73172253EFC739D75281
03B8A070830EA0C3BC5E8DF9F395FD83FAE697F455D38161D33361D5D6CB2705
1D0A45D2BEE293F0C3B5C01CC56F1D1EC252F26F852E1B9114ABB6758C430BCB
BC0BF0A4DD2CB038B8843685BFEAE15514C343CA3BFF447255A99CCE4EC0E8B4
18284452650AC9F59D7817CCB865978492F2A9FA7A855C906D2220332D9B69AB
9FB5659AF715D308A82D99CCFDE7136C97A1F58E74F724DB01EC7E67FC33903B
7DDA3697D159B5DC61C7964BEA151336168FA3FEC3A59203A9B6B8CC0A044DFE
23F23A74A5B94006341F2F2D28E8F1EC67F1F663EB9AF9482B19FCB440D3EC1C
EBE50FBA2027DACC2C14EB92E2F97FC88E8FDDA774EBDBE7A957E5ADB870074F
85072866D8A8F08DA5522265A58C52865ACB51DB8E763943AC6B7E389D3E5E15
22071F6264E3F4A0F35E7D504900FAE4BD474243AC49E2EFE8875294E6B03162
66379C8C19A2FEA41E20DD8ADF38149AE700528B5F2D12166421764BB8F9E4C1
848619EFECFF39D78BE6FFC046E53F2B283D5C980D19E2CCB2C3DA9ABEB1B913
570A51B248C68C2E71D04C768C328B6F7986A757FA1EA02A88929BA557BCAB48
B34B2A133920763BC728A3E41A7315436648E1FD2ACC01C4BE9B1376B55B0A02
AAFD2B6018DD0631B30CD0303960FA035F5D8EC638CEE8A5CD94D7F5FF9D6F3E
D1F3632CA86A8D77418D0E3FA57AC6B043644F39C3381576F7DDBA34A7720675
91895D6F527462B03B7523ADCD485B93FA7091BB21EDFDC55FF4147D13D8AE20
FC99E8AB6638A8A8365918C363B088F0F960E5BFFA63434F2CC1915F07A6BFF9
F33D83AD870D79554E2B6D1D5AAAD9BDAF599CD1CE7A6678
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman7-Regular
%!PS-AdobeFont-1.0: PLRoman7-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31544
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLRoman7-Regular known{/PLRoman7-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman7-Regular)readonly def
/FamilyName(PLRoman7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLRoman7-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-37 -260 1132 924}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E690709BCFECC3B5135A8CBEB94BA28A680C84
3460F1619CBEE9EEED90E246A4C30051A637580E5DB364FBA3065418393BF9D5
20306F5F358F19F44E3D39A6B1B2D629A28FE9B837B3D5507CE6822000D3F8D1
424EB8FEFF12CA355FAA13148F5D61430968C544EF8DBBDF3412895F1ADC64F3
BF6D3904E477BE5A2490EAC616D70A7DD766E0A8F3609CD187A05D32FE01518E
54DABC3437318BAAF30F23E3BA11D476FF95643DB130E5E850CF93C6DFA9B59A
748436CC020679720E74FAD9A2D3C40B82F1C448975E5A2034EECC362FC89B02
66CDC0AD54454095AB737F0E503FD4E2CA9009B92094CFE0AFE41310448E3563
5A619ADF7654CB36056906DB3FB788EA903C7BAD61C3AD3076759733CC544C44
0A98D7C64DC5ED73860FE5AB0582F4BD8A6D8AED1ED22C3F3AE5E82CA55AD298
299A9FA987376ED991BF020D89506CD1278CDE3EC446CA203E7C1CD1AFAC29E8
07E5018CEEA86FBE5BABE8947404ACD14B3594882B491F7926694EC48CB03CF1
EACFD31FEE3C7AFFFF0C58477A93B93BA8E0E0B086C29AA069A41EEED25AABF0
B84DAA951B4DC882EA2055C9C28A70D205D41EAD646229028ABC08FB2713C4FA
27A936F7574C3DFD9C3107DA232FE1FB923D3ABE78293BF063FBEA2CD43B910C
9CC062DE49266623AF9AB4BB367E9C4970968D38AA667EB01597AD234A19054D
3AC99E19495C077DAAE47E6B8FB0144A861E53B3DFC6938DB709540F0AB272E7
12360039168C43B3F6A962AB4404A910BA042A87C52DDDF210D5A63E33196FC3
0EDFA4A0DFCD9542FF08D635CA7258037BA6D2E8EEB16119F4B0DE59F4E11987
D64A444A48369EA0CAF43AE69853376D6EC23465F71746488C2FC5C5C44D4F73
767697464E20BB367D033E1EAD017C8A2A3E2884C74980A622B52369A63D07D2
C3DE5FA12F9B3700C3AEB8A56BC8338373E8843B3ADA8EDF1AFCD5D3D3ED719B
680B78067B2EC8EBE3835E0BE1AC5F71BCCC47C8D3ED1253C4342167A4E56B92
5FD8E6500C5941F83318E765E106CF438122C81B699363E51BF633C9A68515FE
5ED0EDEE3FDD7E37181D0CB583C88598E025D7DE95DC54B64D75400E90BF571B
F8098D545C6C8F4B4E22A68238918F466C32F773473F8D319C0B6BB035973FE6
1888BA25FB3A4FDC96BD7B5293084DB1B8A373589AEB944971559487100C6977
3D28018765D1DD730D978649BB6A299375F603990A4C6DB1674D3DA70BC2C811
85D99C4BF6363A63B9BAB7F9B9125694F4B029DD55C423A63CEFD1F86834D009
A211ADF9B31D0050CF30C45C35CB473071888934BB709A770D88A53C0F4FFBB8
6B6FC3C6D221CE5956B71A59E132BA0A99F029CF0BEBEEAE3763603A6CA6260A
DAF2FB838D7FB43D901DA39F5BE30F4AD46E62C2F600854CB0731181472C8400
94533EC265503762590F3721D7C3D68B0637AE1CC97C35CB9D523B1714B8F989
BF2C51ECDF406D5F1C5698113E6214AA46AB2588AE06FB8D5D8C08573B5710D4
635DCD667B023057AA20CDC3F780001C15DAAAEAF838427B8A20E2DCBB87FEAC
09757CA4678849F6FEC769E641B1F9692240B6C647927894A9823DC60B0F729D
4032F90FD8195202DF1FC8F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols10-Italic
%!PS-AdobeFont-1.0: PLMathSymbols10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29712
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathSymbols10-Italic known{/PLMathSymbols10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols10-Italic)readonly def
/FamilyName(PLMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathSymbols10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75F7B8F53BF7592F0
CD9C8E87EEFAB287EB8E1B539A2B8414C096EA685574267948222A7886782776
0F7091469FF255A729266042B1D09030AA65073B4E07DA110B5F7919D4DE6D16
F95A17A9025C1F684CED59977D21563F33124B63BE2DA62F951C898CF665ABF0
45E74379D67EC0B65FAEE2BEC619DD75BF2679D456299A52802A64B2E52365D1
8733275A1938886D2DC102825CB3EF2A7B55379066FC8C4F948986B1F80EFD95
0B74E614A6F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904E1BBC688FC7FB980
05BF250E91BF91F719E5568DAC7CB6961FC49DBA6673C707C4F13E833E87535C
CDD84389A559822986C68DB89F3C4DA86F1EF4A2A92FE4F54472863A43FD9895
C72B839A36171E129FD3D862EBAA36D35161B3EB6C4035E27B1E2CD553871077
DA94D205818CD5AC4E30E92D029483909939354ABA64D7FD59BA1F9102D5A134
92C763050D8E3ED64E592BC6CF9935D1EAFD4894A600072ACC70C91B876A4EC8
599D53A3367BA3C28DB6183AE68F6564178DC0354B62EB1227A0123488E56195
B04061E73D829B4B03D84D88904AD23D3FFBF1AFBF1164062F545BE743C40D7D
4B37D84B5D736ACF96F6F943420A83F519396B2291F4C2E19D7B4C688D432B1C
1C2F6B327227BA2A0F6AED502C2F97871DE3AF0C9C46D7B941BE395732E73083
0CA81BBC2AF34B8516ACEE9AF62EC3249236C0B31030E565CAB34881B3D7DE98
FEBAFF0B41C83E756520A3851274FC638C003286810D94689182FE102D02B63F
9E285348D39D3B5578962247714847E6D5E5A69393290CA539B14401C2FAE06A
05A703A3A4C06130F8B2A4308C7D7316EECEC5122BC1D02CECDD52C7DE191A45
34AD9403CD892B54E5FEFE8258C7638978C6520D2667DF005C194F225F73A3BE
3E7B17B1FD9EA5D79E5772AA6922C7D4B56C2234B34A1FCAE111E66E64D76AC9
9685B50E26079B5652624F1862C8152DBBB00809A5A5F8BB27D8A3E942C40C77
346DF4781FD6628A564853CAAF633F4029BFE5BC27A10F7DCC5DBDF880E30217
33E027
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman12-Bold
%!PS-AdobeFont-1.0: PLRoman12-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30818
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 833 233 0
%%EndComments
FontDirectory/PLRoman12-Bold known{/PLRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman12-Bold)readonly def
/FamilyName(PLRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /PLRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-64 -262 1150 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105913839B4BA0F86A32A6A82138954F2347D666
032FB7FF33D092CB91979191A32B271C0742860D857519D788346C2EF3C679CD
53800C1A8AEB5CE9744899546FC40AEFD4A4D4EA43140EA650CFE8BCB0EFDA35
97336F23B3826CE7DBB5EDE7401B155F735F44427A2855C162D329CD5D2CACB5
95FA0064D23635E31BD9FD22AFFCE75A635084717499DC60895D01C49748AFE1
72ACD2A0497812158153C87485838797C670FC11234439F1E445BCA14FA47E82
5930954C49EA029548D144DEC97E6EBB0F8B8A469D1E873907C1E4076C9222EF
76D31E9F456ABA0CCF2339006C06BB56C5D74EFE71A3347F0BCC112789D4303F
66ADBB5CFF05E6626DB80DB665488634BC7A3ED82F6200B8074986A5F23D12BB
D31B1CB0D92E1CA5018D817548FE10D773E1060081E00F75245781241A91B331
2938D436C3B46D66196CFE9F181789FDFD66931D0A458DB268A679D4FAD134E4
D4A222577BB9BC650DC7734F67269458DB829A20CB5E8460B6B8BB46BA0B2A96
E810DECF6C6DB8F03151EB9F022BD2BB1D80CEED73812B66E3738E8F677979A1
52180966B29031A79FE3A1CCDAE03EE8CF0E20E7D547FD647E044206E1567BD5
89C6D37033A588A77AA1E454EF28C6D432330FEE56133F3C323F865B47978D22
8C684452513CBFC52EA63C6319DEB18F9561E61F4A5D73D7458DD1EC86915E21
8C0ECFC7C33787ABC3D34172433CC652E9B2516AD0EEC9F452135CAFC93C6804
9EB787181EF5A84EFED825BBBF84FD9994054C2AADA5F7692E9CF8CA1ED23207
470711B42AFEBC6307EF11091F0DD6C57D331F979974A64029BBB643502BCF00
5A05EA389DAA2721AC6E6BFF0015EA347D44EB97D8A5451711BCF10381381D3F
DDBB3CB33249FBF132C911E3A9AC9C7D0F84DD55916AF27033EB736C1C79BB3D
11F2E85043560FF3ED1C64D62E796ABADF1DDD6C13968A1E1A06128EFE1AA372
5453F8EC53AD885BB9E33516F9265DC142777A64A8F61F48BC1965AFB023B6DA
EBB4828BCD9E576AD252BAD021A69CF3BE1CC9A04292732610576D4AD66935AE
358D255388F02F884C708783A88C3D972B871F61463B49A103FEBCBCE948157D
AB8E0349C181F5660EB0F1CB3828C11BFD0AA6D93C6338AF65C19367B8F2C61D
3CCF9AA4C92BB8DAF718C8AE53F154FCAD6AB2BDD1CDD600537F581BC20910A1
56AD22AE7F7C5F36F10247225B2A6F846CE65D5869318FE640DE6C8C6BA09725
0D6B6B3E6330059159C189615897A97EB497CFB2F67A3B4814650B9437FE4234
1F275800E9DBE9E1387EB3C2B0B2A85823E7169DF80E23A6F7EF4ADA5F11FB1E
640D484E5F57C00B1336A8F61DE8919B9F5A5AAC0868C39500AAA7F469E65339
83CDB9C1772CA11F9A79DF4200CFA4CE37738023D1E9C94E39C0092C5F9449A6
A25A26E3DF4FBF136DFD7EF4BB6D14D462C6B66B159EF695080C2C3A5459F52D
F5237EE2205F822BE8A0D748CA8E6176D5CB36C10BBA4D796B7D132682B001CB
15032573A4E440EC830939D2385947BF66AE46C3986F26ADFF3BDDE60A0C3532
9E09C14982F57DF8407901616CB8331179AF5501E919561E017599932E8E5092
8D804FA25CD75FC0577BD2D536B258094918C3BE86414AC14AC2D75E5EEDE043
55A2170325114C5985EED0B4F03E7872206B3C189E6473D42A8B3B0186016DA7
9107228DED1B4AC374E4D0DB5024B0A05421302E4430D8AF79983D5174B73474
74D00EB27062F8C5DFAC9731CCE36878CDD85FD0D3289A89D5BFEBEBCA238B8A
793F5C12C01AD27DD4B34CDBF2092D956F919527F33A206FA2304C6B9306BEA8
627A99092879897E5E67DB8A021F37873952820EF03EB99A23AE97938041F754
1CCD2694F09B786DA36565148F3FC891B295E7A73C62066CF520A47FDD6C18C0
8A283861D5CE115E38AE2884231EBFD304FCC6345DF34AAA57C2F64F2AEA6BC6
68325DD036C58AD394A08ADEB2B51FD97C780452EA0C83DB4DBC407935FF4FE6
52760F27C4C73559B387CEAEEAFA60BEE83343F02D797A754B4304D8461FC1A6
1A58083D88B0B69E15EB9F7C3206B8B4B33667578C90CE30A316B6D412E48CE6
DC87C20244698BB756D8D9BA458A0FE8BF74577EF9C645314BAC0C5D26C1076A
A31C8E8941644E97A63FBB1D5283638A1D4611412ECF92AD53346F5194EC9D21
C4CE14300E0582551D09E5F84F913F03035B931994E458787505F9E727545B36
80C3280563268AFD11DD6EF6554F247CDFD15598DAC63DF62BE08B1A2CA7D8CB
954B8D0C0DDEE5BEC984CC8A93D55990B0ED3FB10D3F812D1C1DD4CFF40E3A1A
878921DF2371F5BA550D29E620088D80E10137478368798C53924BE5753D96A8
22F27B1302A9E2117BCEDEC47179FB48DEB0FC94009BFC69A4C12F62DF356AA0
926F5AB120CA7FAFF1EA78D0D6FD12743F6BC2976298E9DFF45B230623DD9941
11A1E8B4BFF9EAB5E6E853582B91F272CB2FAA0C0BFDADBC2F12E2D24C823277
1ABE4176D07FB34134A62BB131780F6E2A39223527AA66FC3EA3CDED5A11595A
FCCFBD7CD6FBB41FF7BDD693FD7C17D135A9B8DFA02B8B05136C106FE7784D49
BBE35D527F40F2E194844E76B625836C94F281B25878557889C1F0806C014F8B
B1EA2090DD6C02C642E73BE67303CFDC5446CA09C26DFBC3E701148A9A15B7F7
7E07B8F37DE282B5B6062984CA5731AC4034A3B9A911F3408233BBE1B009AF11
642E22ADC6A563C249F338E8F1516AAD7B89846E96852878792D64A7BEA283E1
9200777A6B882F96B951F92E5D4E51D532F29BCDCC9AB7E6636132D020E394D8
7F04FD906500C48B60FE6952E32ED5CF84D57BBF8F0D3340465C49BDAF0A1660
351ECC1541F80EAEABB72C4CE6818C162250ED22A64441FF6949A8AE1753283B
F2E9B0A86139A8CD148662293B5FBF0A378306D6225DCBF0C8CCFD652A1D7C41
5D2A2EEE4351AA5B033930976308543E2BD113D4C2F5C4ECEE05B9E81D6D5E00
1B17A8D845ECC703FF0851D4A534AF0B9E7F7F265666D7579BCEA6D053FE58FA
2BC93F39BB30841E4EFC9ED1858353AC4063789B6A407EAC56651DA6117D663E
34E5A7DE2D3AD36415EE850751C56EDFDD64C1D02FD6CAB479EDC8D234C897D9
A60BC3AF7D3920B6AAF8BD2A93221E5C4A1A506DE8457D18C5533E87C9686694
30A2DE4A125D6F0DF7C4807961D00FB683593A036F894A471939C3E3D1B577CD
A4D9598EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB6D5923ECAFF807F25
6B3112A586933D9E8476145022BE9D072E89CD3CEBDDBE952168DD4CC8580528
57CBD0CA43B01897576FA71515AB22C39F59B10ED7095DE02D2099FF665BEF70
E76D981C8075545DD175A836C0B599C1746FFAF89879D4A1CC22C11D3DE20AFF
59D9628533AE56E652370360B301F51DE0923D0D962237040D07D471C71FD747
B367DADBEFB7DE551FECD6767F1F3004976D095955C2C288FD2689A4650B2349
B67AE2785C0D2C0E33261809841B7E184904A4DA26D80D31ECB293A9415C7123
29CFC7F3BE8C6B6EB13447394FB285C583DD58083284D057D8D5F808BD4E16D7
026D8483CADDD8958FE829DB4ED7D0456B8DB3EB8C7159217204E97FBAC624BC
02EE277E1C63B924A769D9108582AB276AFDECB790793CA7308C429CB0DD0279
D0FC834B3DA7B3B8C176ABD522E206A6376C080E96B4E84895627B7886F57773
C20088CF5B4D919ACD596A9D502BA1E42C174F9041CA1DCD6104D59BC5E3D95C
697BC695E18215311431841DE8187A20D6664348C7A8ADBE9C1006FCA067BD53
77B5734328533AF9DC509D70F21192599DF251D86352AE75019BEE8D81B2EA2D
5BA6F7C0764BF53506D27D54D7BD1B948B1BCC4E6AF1EA51E7BD4831A4AA99AC
8B08E2AA54ED803C800BD638EB51173E04AA8619373F06A1983104FD0583F6B3
B0E85E66C882C0AABD66948773A58D5AD92CAE65BF3607D98D4D298A7D59A1CA
EF8A8810791D8613A1E28F3111EDBB246DF8911317DE4C75D695826A4655336A
EFC575FAEE1B5EC42CDDC027C7AAC514A42B4F9E62C4DDC5ACE95A878698528C
4C0E32E2C73CB8F701B8F7A1015057767BD78B47448E2DFFEDF66C8DA9AD62A0
1F110FCC34240312140C7B7D15F19EEFFA8813BAB9483B011840F09A39E72281
6D301D2429D2F08BE6A8E86209246518F54551E2C3EA2EC45483A47C5E99A7BD
F253DD208D98452CBF26810824DB81F1319F9405D22258AB40DA47C6DDAA24CF
66E8238F97350C442BE02FD2CB07611575F1D1E74EFF6F58CB5001C360E11153
5AC3FFC197AE1509D3D4E9BC5DBDC1BA3071FDD58AC78A8AE2BE9EE4D3B97FCA
F750E5AEA7F3F58044EB8F3E514541D96665CF1D783EC7B15B439A8F31A64264
D26738B29C743583B3E57F83AD14E6F29C069A6C470095C51D77C987DC44955E
6B8D3E5C40F486C3B7DA0D1B2517E41E70640A306E026408F5C9B23FAAC61ADC
EA12295652A4E767CE7172570CA3961A35B7EE7FDB0FA7FD621B116A1BD6623A
05E50916AF1BC22D6EE418864A8E71E7F8F51E8CD5E5B2D92B60D912FA131B19
3815F0CE5CE0E37BE68944A3C65DF816382715ED50E59DBE37A370B34888998B
FE192711B72D0178E5558CF85B382FB0C4BAA5675FC93D435986443ACD4B3496
677EE44FC60F5E73535ADAE14D12423DAA47663264882E616D50EDBC187B8967
067289CA2F840F11091CCC07F19ECB29D2248692EF72D6A2468AA85CD9C1ECA6
6CE5FFF3FCA9AC57C0998DC6279A6C74EE7B76C062C8702BFEE138CCE26D4C38
D855CC53AB254A195C910118E22B1EB992C7A809FC68431CFBAE4570E16CC4AA
1013F5A6B8BFE96D5C8D66F256B9A87B5274D675D8422518F5488033B40DE31E
BCE28AC7F10202389BB931691CCB29B79DF0CDDF29F86EEB193D3753259F94B1
55258FEFAE4E5F01EF56072A5DD9C9B2322E8B7CF94C931FF82A95230CC96860
7C3A0997B7F7C0E9CF55130E86C3FCF0848A65F3617473DA7DA40E9A70F38A7D
61DAE4BD637A1EDCDF6F2F1BF6D729B8EBDD497FAECE4BD0FD8AAD104488212F
7FB70D978465B3F62A4266E23A13F96E8B5DBA1DAFF6B09E5883A4DC79F80444
398D40F38EB26590D1C2D97EB20FF8E49F6B149780833232EAB12AFACCC824E8
927ACA9A8A662538834D668C66BF1E59107D1210E201BBA9A8053C1570F17382
32244BF90BB52B127047A2C76E5F18C27039C383910CE789D0B138ECDEDB14D3
6BE838F3F9B954C160DD457942037EDFAF7D74C79D83113052EB734C516EA04D
B7C34974DF5B1EE67CC840DCE004D6A79A86C714497F57E678E2DE8DD0028323
9C4A1413B097B479F3624820441FBDB75EC25F69F9F4011DC6804D8F7FDCBD10
FDD37B53D2E0284429B5A0480157C7B0A05C23AFA47AECDAA9E64DC048F35F70
446C2521FDC423350CF96AA9ED4A354A7E32A64E7883B8DAFA4DBBFB5EDC7BA1
686E67FA9000E9CBAA21CC4B0CA8BCF1D49793E20A6AFC7111A2B5734B0233D7
270B865674558EB0D6140A2C7906D16C915447D5158534EE24A73870D0834F04
D2ECEECC796610E11A756F35700F438E266BD721FF084A5C40F861E4FF99888F
94D2CFA88CFBBB5BE4C5CF7D2C4C636001F21366EFE8DC0198819E1F10CB0A69
CFDA9D04C130E382038DC54BEE0350FC71C8AB2FF55EE8CAFB133C2196F85AC1
52A9BAC7D9B8EC4D4302CEA31F8F612BF5FB0C226A84093885623C01FCA157C6
3EF5D4022008744F93F83BBD47E48E4B8ACE79FB76B04C4B13795718EB418F29
26916FB309120DA18F9EE45996CF6E20264DB4CDF972D82DAF3529650D3F362A
2B60BFDC28F59A5175877D75673B2291EA6C50BAE515FD67C76EE34BA9095E85
59C2D88765AA5D0D79CBC22B554CF912ABADD3FE6C7037B8C5A4EF0C53ABAAF0
D54F52823E53503A86580AD36D2BE36A796C72F8F84852CB83B8571F58A93578
9046E39D4ADFD26F2A5FE027D59AA8CD26171B29C49FC235C5ABE298D887FF9F
BE2658D280AEE658E107A1B97E29ED6E395300553B11151900FFE11398BBD426
3F56214A86A5BA5EE5BE17EC790B21E160E65D2ED3DE1E8DE5DA7CAF15BAB75C
A69DDB1AB2928EF65D3869022A1B5D6DCDFBE347EB7109DC61195E23F035CC74
720A167785C1B397A0EC1C8793545F842B0DF965344CCA69A30C8B8FB2158A49
6E66A80BB1E3C7873EC910E6D9D82E44F7AD635101CA5C0D71C4F43754CBE0FF
781B39A37CA14235144FA25B25C2CAB6D04E552911
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathSymbols7-Italic
%!PS-AdobeFont-1.0: PLMathSymbols7-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 29656
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 486 136 0
%%EndComments
FontDirectory/PLMathSymbols7-Italic known{/PLMathSymbols7-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathSymbols7-Italic)readonly def
/FamilyName(PLMathSymbols7)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -102 def
/UnderlineThickness 34 def
end readonly def
/FontName /PLMathSymbols7-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-15 -951 1252 782}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BF4659ADEAF285B288B8C45EBB1C430ADC5E0
55C153C58D0F07FB32132C3CEA11815265D39A20821F7A1A778738160578BCED
399653EFF49CAC16EBD0B780A11C18E6966BE38184B550A4D69D69DB456B328E
355FFDAA78C47EE83DAE72A4DB5A385052324763CDF9D67D462D1550C78C3AD8
D5FF01E46EAFB7361C516DD8C71870BA0AEB8E6FEAB79E82D9CF94B9945492EC
7526AAF2785529A98FD4A7EBB5F15BABC0619FBC49C907F07FEC8E23D3D35C71
A304A01A695DD9119D8866D0A5DA72A216E9F80DABECA85A56CAAA79DC5E42A3
CF4F1D171A6D50DB9BAE2F88130DF372B37A75D81089B6BEA6002C995ED468D4
58AC20B9EEB2AAC85F82943BD9E77210E6753EA5604033D75954FC56CFE8EA07
FAC26C11F80FFA3706A4BC08DD6698ABFD26B1E4EEB6AF0585C7CACED2867442
F5FE4455978BDBA063C52E8210D675E198F88DAE125EAA7F5977208E4CD75D5B
8AA2D56A3111A050E501FD978DBEC0E0DB9C4D5A1BB8A9E7BB776B37107CD588
225511D4A92100290CDD8BF9315A05962616BDEF31DD007AC99947459D2F1279
227E647DB37994441D207FC17B5F5127DFE683A18263F071BC1C3B8023F974E9
CC07FF8D037BB5AF2B4B2270AD045D8403691BD081A409A754FF0F25A13DAD43
CB2C93EF8E629D0F32D7EAB6B78F6F7B2451A129210BFEFFF831F5F193321E04
E185AF0743E8E3285F821C473E324A19B71010AA29280E9FB23D7CC8C5D0629C
B0A4596894F0A6BA91724E2D3FBA08434BAD9A009FB05EF0202146236228221C
96019DD82FF337F7E39BCBFDFB8CC65E9CE1FD0028F05BFE624D8DC6F2F65B7A
67B5EF304AD1A82E6F88B96EB2FDD86152CD4DC3118C40D8A47FDFCDB028743B
ACD2CC01C1F80639D2C4C32FF79864C4EA0A58E6E7BA7659F7556CC81ACAB818
9ECDF87E3C57592BAA1F067B364E006B5E573CA5F1F2029B0BE0A30439CA367B
F773D8086905AE10BB80073214E847801132434D686EE19DC457DAB41C3EC3AE
C097151B21E4E1FEDC9F4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLMathItalic10-Italic
%!PS-AdobeFont-1.0: PLMathItalic10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 32833
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLMathItalic10-Italic known{/PLMathItalic10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLMathItalic10-Italic)readonly def
/FamilyName(PLMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLMathItalic10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB46756D0E9C08DA00B7832128F421D3754E3B6A7D3CAEE493B
CB4F0F8B277CC700028FB9B689C7C175090713583BD22AD445898AE250F18451
D4A4EB41BE0EC189AA18A7925D5076EE41F93834A44E8C71294EDE23F1B2CB10
AA4955B3F124A7FCEC67BCBA1D20B5C48C67C16B3BEAAB2CEC0DBBE9BDCEB0DD
7828FA5F364344F5812AF689AED51E6361964FC81602F18E14FA43606A8C9717
6D061B8DE7AE358E36B83FA84AD2C687FE892E6853D6791D20FCF0FC96BDFF33
318A6160F190B4EC787F67EE62BE2C3BEFF11BAEB636F668CE7E5946B1B560BE
E46A33E3079AC2E1553681CF461FBBD9768A038A733ED6FD82FB5CC44184E183
3BDC0CF3D97EC8E6DF2561B49331578ECF6BF0E8003939628B934C1CEA33D161
1D05E59ED9BE05071BE95A8E1A84BA0C4B54ECD961F0EEB3548BC968950BF5E8
4160FBC4C2709D6B1A9863A27EF5934C5CA2043B9B0E5081E58CE7F78DDB9409
17756A2D719AE12C53BB38A15021AF9FB97DE82874FE58772E82FEE206948CA2
8F5870230E9DA69ABC80788F2F72CEE5F5594B2AD33DA5F0E0E54A39325730A4
38A6EBB464931916CCE9A37170F0C02A9C7143D722CFC08677622DA09CBFCFB4
CF3D13A7D2321812C81B5AB9FFB7279EC7FEEE5B8D8919E0D1E69B1FE209C5F7
4C4588B11876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8808C26A27C674BCA1D
A029B6AD3386DB54549957A9A7DCC731D0F06699DA05CFABBCE8EED734C62EDE
D4A8F360F63EFE2FC361E1EA453299493D312C76192227BE5824E9A8CACDC4E3
CFC6D20C02AEB57014209F2FA3C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A
280C40D2EF711429AE67240FBC80961E4DCC043262B1A7B46B939C84315306D8
E9FB7D395DE207819AA68D19C7143877FBB79D3506C066D4236275830C7D2699
F67DD8FA095B8898E928C3DA0CA15A02A3AB427C669DBE7489BA62E86021947F
87553CCB456D8DECC98269554C6FE06B85E1744EBF71C9C5ACAC0FA8EB09BBB6
F232318CB05F5C32363E808F35C9C79BE3BA370215A15953B841058296B4C5FF
EACB990C712F7D2C8DF98DBB5C2F9BD1AEEFF7F7114E2C511E4E929E45BD22E4
CD81BE03D0485539DB465E39510F5E7FCB527AE18AE5A674548E1603BB616C50
692C567818AC28F6FADAFA914C1ED1B237EB71EF971907D915352458CFD581F6
37F9D98CB418E27A2B107FD3B678450D9CF9EB9B6B42EB7F12D8DFF9DC181E7E
6FBD26EA37AFEF8E9AC026D40C3B4E19D8AD0DD3D5553A04E37C2A91EB404923
C1AAF1C9A3F06F904A61C147BE8A7138A1926BCA7B7C3F049E3E5B235D984FA3
14E9F3AE83240B7BDC50E6F576CD581517EB4EA159E15183E0BAE950FFDE5D53
ADB1DD728C02742D0E51D69C7381507E3776F11DCB71C93034BC2A99354DAF37
05C420BF2A05C08668FCBB02FD86B02982BFBCD90A5B65E6B70FD350F7574995
0CD2F08701DED9BE9D6B06CC0B9FF029B6659B40BF3DD9AD2D9BCE76781B0672
E3704ECD2A909668841183ABD7EFE82B09F02939A2DDC0468DCD65C961DFA7A9
D7580AC15BC89D1266566CB9CBC69E106EE07FFFD590BEDC71CA9AD4AC12B09C
2731E01F44EC9827715D8D755A09BA38A0C320169D158E873523346BD5A991D0
0BAEE2F2A82E2D45D45D78D5D431460E2842F0FE03D8D9746857EC281AB2A732
E44ED3E9908B59DB3B3506C60D3F766ECE69AE220200F1DBAC1F9BD167FCB362
05F5C3579801427AEDEDB255B43E04EF1076D4422E27F4227102CF7D56823696
43BCBC8CDBECB12CD6F738CD7508D0EAD76F73AFC25C72216D96C9CB51264A9D
F525C7577F2777C252193DC6A2967BC611E1A0E232A0FF57D067A939ED8017D3
5E25BE199A9AB7892E680A23603F2267173F89FB6BA42D64A1609E07F378A1AE
072D1E66EA6A8B30F6DBA549ACBF1B3D209FD686A800CD5E1F43E984FAD3B08A
4B47513E1F8CDC2763558C93AC71A4C6A0E7018B719D7F6F63DB11FCF3751A5D
80A8849721E151B50264F98CB091B751A58D4412A949B9E6E8CBCF36236A9430
4A0FF6B67A7C777A1E24E9A65FF1BFD845325197E0C22F0D1816C6254BC7611C
6EE919C34736B551AD5C83F6F34B1E87272E8AC300761CB99C9DE50DAB99A669
F70EBC4901DF9C5469C868EFD492731BEC9DCB0572AB667F33FE709E3DDBED5D
26699EC05E3892F7C7C03F1D5F4748B5DFC1F8D787F99305E3323788CC991B61
ACB6AD7863E30EF2DEECFCD5E0ACD80A6AAEEE08946129664626458C7C242BDC
C8A1BCACCFC113FDC2E229B27B32CFC272B920A21A60DDB2317D3C80B1A70B71
AA537516A6AE93B18FC5DE5224FE992AE7CB66C69DBE7886D7ED3F20656B3AAB
40F2DF4E6AD3AADA6F2415A8BCD5C987B221F6CD07360D944875E8BC20A55FE9
F8D56353106F372E4CA8137E90503E63140A7193C83DE369C48C9AB811D26EC0
9C0A5F8D1038506BCA47762C1A267CFC21AF1B3FC5D973408F12F02CB8EDDF6C
E870E720C7CD90B12E50FEF3F5C56140966AE46B713D0F7BA51782F6EDC4089E
D02E567923AE6DBBCCA48C246A08039996CBD0A038B6BA98B6078C9FCA1556AE
B8E16DC9E2929DC4A9F5B183E06D2DE8EE9FB83985B96CA9DC3C6F51118988BE
87E3095772E9182CDCDC689A49173FC5BC990E95FF774220B0C63FF460252CD2
61AA7A78507F69DB391CB3BD10F6DF81C4B0DC7231FD9603FA5CAFCB0321CFA3
E7E0B8A3A8FEAF22D367EEBCC0FC20D60DAA2167BC2938ED47340DD6A1829E2F
9D5C5690F8BDF9414D13B811177772757A5E24C4BE117C8AF971B48025FBCB36
76B9137347C70D03F7B5BA762CF42DE8074C107F07026CB528DFBA1D7434A0EB
6C6E8AC981282010D6B11CB8C655A7235488E5D7E2390043580D9BA6DA3FA9D6
E17341DBD67778858469EB07B3FEC20EB78AAEBC583BC396A86E5E089720DC81
6EEEC160EC6EC28BD2A5CC6805F1FC8019E5014480B8549FE008117F03C84044
377DD58A988DD14DA7B5212DCFC65D6B95517D685A8FBE02DC74AC23828ED52E
9579D294396968D56DE2115D99CE1815EFB6AC2DE71D6B80B271C137460414F0
73BA1B63C596CFBC169AA286098D92805DA5E981E67A4B499454FE68B01D2582
0C5E4159230192437EA286C1670738E4F1946560706DF50496B3217495D8E98B
AE558CF918776F1557940CDEDDAADB74C32CA873C9017DDE70AB98EBAD747D39
4CAFE862AE334FE145DCA0067A71A6079E91FE2FD2A83D9A84E9188A2FE80384
28CCE36F6E8F6338D62574B4BD03A6114B771F54FAAD6B30FBBF55F3E6FF0526
F1E15D09E3433482B237C5E86720C736F284B4A00AD7CE0831AADF4C6B05B544
F0FDCC76BD8006FFB8A70631E4E3159BC1A6E4553D057C0B803C978FD256BA79
7C8556BB081EE9AAD89DFDF23E08DCA18B76F49F3E61BB8ED48815F70FC02CB7
E747F7759B051397BF32EFF6F4C70F8F17D224477A21FBF59AF2394CBC6E7DA6
38CE5DC4A3CC0B2F20AC8F5AD9823260982E07949238BC483D570AA3A8CFF91A
99790F7CAAFB0315F5689B6E9269CFCB5300A845AB59BBED8F6177286473C80B
2696D1AE86E157189668F03A076C2052035AAA49F50FC1917352D46C4D1BDE95
4997971296D1117D8D15ACEA7CB6D87AE4014331CD57F2A3EC446BD91BD931B1
A85A9E6C01BF9D95350B0E19F535137369988324C1B85DCF49FD8DFB813E5D8B
78F0F3A95D6CD4D7E058BAFBE5160D7493A5104072095D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Regular
%!PS-AdobeFont-1.0: PLRoman10-Regular 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31776
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Regular known{/PLRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Regular)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-40 -250 1009 912}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8A0CFA7CE67B5ECA4F182C85F02E26380FDDA459734CFB07F5D3EF76DF8
B0B6ED087E15B9FBCC3B3448F1A3D1F9190CF7B9AF9453489A6954042CEE8CDC
0776D2E062CCBA3EA49E20BC847D71571B571F981004B6A0E1FCF9F993344AF9
A5C913D4DBB04D8DA0B3061FF90803F49CEE5174268D51E1186D639852E46A1F
D4069008ABD3765A006B11572C9BA66662EFA0E710E229F2202A1BFE48F75DBA
2FC2A41C494029A55990E51A7A0393994D28358536194716F19186198704C178
C75F7C2CD3BBA670C623A0469010A36F8C813E334065DD8FEF5F9ECD30C9DAE5
F4B7D24209F4D5E9371D8F37AC24949376CCDEC69AE3DE6D901AA4EF5690A21C
4CE6EDF6E48B9AB1A57F10F03083BB89F311F30BEEA87416E0D16129C60E2669
45D9077600B03DFEFD1C4E9301ACECA89492A161AED9AFB1B259A7B19DC09BD4
D0FC8AFBF4EE5E7A2CE280328B5DB6C18852EAAA0B86CD121E11712C9DB2DD05
1A85066E4C8A831785480A2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C791A341A
949FB7671F3DCB141F5395AD9CB286C8B6C0725F3100E650C89539B2AF2E61A6
2B64A00691C60947DAA664E4646B8F09669DDCB94F7ACDB29826C09D16AB4F43
972FF957469563D0C9922640E5FAE583B53BF3E745C7C96F9B7010371E9BD19A
71244D1C6795BEDABC7C47532B4B80F77BF6EE43CFD08C950E719066FF7CD953
856542DDB97C686FC32389A0081A6846E796269C90FFA27C5A51513DF558A8B4
99C7B6158E517606AE4A6A86F7EECC222CA705C035DC49777BD5D2C9B8E295CA
FE8CB6024D40E18F1FCC7BAC5F87330C9C40B2123936DBF7D6E0C043CD6D918C
8C67320F67C6897CBA116BAFB72AB0EB87071835353368D815F03138693FD510
3767DDF6FE6FFF496B106857BA914FACCFFFF55192E10DCF5EA55CEE833EAB43
CD441A6B455C18C66C38B55221F5828F6470FAAD5ECDAE5B43D8A97B0A082986
A8842DAF3B0BB5DE1948B588FCB3E2B37A5C2F39F9CCF68BE7F0D3BF5A607404
D2387257B77A69CB5C398682578AD40F2243E60DA5A30435FCE91192754A9EC3
4D1F38D98B427893BB37E8AF3DBA58EF7C2A978A5621CD216F97A098C113BF6C
6FF493D20E76D1845A891F5058D8DABFA6B5D17440FFD03CB81A33D0041C9857
78CACC4DB60700C22ECDF227008AAE8B3549585E94245D9EACE7D6BEA94C108F
E62827C0BA9DB2A54094FEB4A64C7721C7B4ACD80BEFF23D302C6688EC3ABB2D
5F61431804DA1067221469158415996B0671C6C421DF8296C48B56F43C62D3BA
63CF109A3499ADC7AB1CD60E39376D31E045038AABE6DE8C790078B668D79D26
DA019A6B7BDD9C0B2ECD9EC55F129F0406ABC54E3B4FF23649826A2091A48EC0
E46292E803045FC7D7ED27129CEA43EF25E03AA1D0FAB54AA5821C4CB010AE17
9F63473ED3DA2A47FC87C5E3CF18CE4227ED29B9A8CF29DA98F0060A4FCF52F3
2E017E9EB5492088CBFEB4A03B6BBC1019F646FA3F67BB7A2C1F64D94F9EF1F8
710220648240DA37D2B0CC0857D5DA9B3EE1E389F33ACAADD2C782090D827236
F88F30ED88FDC3DC32A552978AC81AFA5B8C28AEEBBEF358B99F3820C596AF3C
8F81FD838DAB49F723CF34D0D7356F6E3655663F9EACCC45B962A67731C76AC9
8678B54E6E3A103EBC0F27B3B9AB0A69C94BB35DF189FB7EA3D31F863B91CF55
8F48C823AC0D1E6CED5E2423CA71E465117EFAA5A252DFFC66F8DE79827733A3
A34FBE1B613C11D6A81FFABA0F871FC82EC65DCC440E0242BE2324E36C7131B4
8774F2AECFE13AAF74B7BD78E5E38A491FBDC198BDD61C3E51EFDF173CE54A1E
878A870E3A3C5219031A604FE3F4EE574E2FEFD527B8C41A950E6527EABF6977
8E44EA099C985525FCF4EC00CBE67EC012CFC28723EC079721C5A3582CCC39C5
2B1A85AAAF39CDB3570C55ABE888DD64DE307DFB8622E5233A7EDD13E960C347
7C6632BEFE3B1499F225653201A8230C66DE46FF0690D39B6855C9EFAAFB49C4
7463F52A6DC120299AE8DEA7D1B5DEB5A1814A31ABC4826485EB47BDF73D43E6
A30C6444F39BAF8D39165A697A533F45A382E408203EEB041794D0377F2CC0DA
F1286142524FB200E2348EA9A0817887BCB9F55C5085890112C69EE1229CC702
4AE6B757194921AB9B225839AEA1ABF1044F67F5ECC4278AC0F0FF1A4D4DC3AF
B3E343F7A4D5C57D4F312EE53B414C85466C01CBC0A57E06CF87E71B725B8D90
FAE6D5EFF289A9B137B2148573DDB07F5E27A40BBE00964DB325318C001E4568
71FFD26EDA54268F065ECEC16354EDF507DB002342802A36FEFA77D26C34ED4A
B1BB401A84B4A328AF09547072BBADD5E554107E44160D89CE24DD88832AEE21
604D0FEDD6E58D26708BEF0C1E781619852B97D087197938D1B85B93D170A7A5
ACB750148D7FD6CF0B5B2E835A0F7FBD451B86BC20B38D6F0E603B8A0AEA4D75
6232E22A432EE212F87BA715977C4B574265A679334DA20F7EBB2821226B94D5
E60A1EEFB5DF6863D826751E20637B8A5BC4F631AD67DC320AEE97F616AB9F1F
F656CA5B23E0443807FC33D3809A19E2533735EEB440F382E4E0515CC9FD1F74
772CCDC67A48E0861895A424A5A0A9216414C6DDA9FC802B0F4617692ACAE9C6
921FF416129EF0D8AF161D0E0F44040833184BC20D38FCA2E54E3F7FBF30918F
E23D9B2ABB016B0C386A2798267EC1A1D3F1E216D6DE9D683227C61E4358A619
3DDD392D06D4EC9F7BA47231B7F47C8C36BE1BBDC59B4EEC32CD7D3C7C2FEE23
CE1E32D373B2FA3927A0BB82F73A6A99029E59F87728A6C5FF3F0ADE1EB4DE93
C91DDB40B4E307761658742587ABBCF9845D792716E75E63FF81289C188C6B83
56D9846FF19546DA90AC031C76502423E818A19FE16E942479286D0E1690BA9A
D7CD55D01B174222485E973BAE12608427C3FD501865604B85880B053A592E36
D0A0488BAC8E76FAF802C174E1A50B703B5A9586C03FC96A6F0FCE72F4094788
9ED65C9A6EF5A6CC38CA586464BFF3E41B0F3C4A5DD8B590DD235A5E32DA7BA7
C5421F23F162255E07DED78A529B13B0101CB013D7E373D4CBABA20CC13FEBB8
8902CF083BCC20BE6475802AD1AEE2FF8483205A841CC9BBDB50C623B7F42EEC
D3D54BB7682DDF4D6DB9326A5B07F654551D0727C28079F6A3B5634CA0CB356A
EE564274D7722CC96C440DDFE530DD02F9D27BDF43D73FA22BE9F2BA6D4F2031
69B55EF0FC5756D539A41B7390B4C398787BD49949C3EF19932AA1E1E4A2BD23
2A771AF1EC6E149FB9305922D06E7D87CC06444C0D7EF8E8999E93934E36CB85
7C46160AF5EAD4E94C284337C2DCC39787D7DF0DCCFBDA67F307D20F3953C080
7B3E840E1D1D755B40C834FA1B76A59444CA7C539201BEE064F7B85AA2C769DA
4EDD9AC25FD8580F0473D5983C86713C32602F00CE59B92B8A5F92EF9DCD93BA
2B0E1F65DAAA5DA710807E6ABEF95062E2EA70EAF25E9CB61C46034D499887FD
76E6303E40EB034A23364C6656E430015DDFE849A4F9E4F75FF1C9F2F69CFC5E
3EC768519280B604807215323DC5C4BAF89EB9096FC4300D038C9F0C47B7DD6F
3FAE90FBEFD00E059858293901A0273171299F9A1752A3FC5532ACE462F7A283
96DB3C1D758792EA95E5ECE5A08ED9D8CF4D5A92D4A4D63EC9131A8E3E52A99A
A3C8BCEDDA5E74E855BFCD9C6BAA4108D2C1E20D3E664AA2258BB3CDCE8EE707
0179A637C53CDA640D1971689C0F359224627423F0B7F7570AE7611F12FC2A45
5157B1EAF6CE067D8D02131BA130BB993DFA541BA5D6623170BAB89CE464D849
6EE557077EAAC299CA588054506521227674339C79F366B6CA9EA7CD06B98530
AC20BD16ECAAB6DAE2D8907671248569054F41CBCB2F3C361ECCC811521394D8
B563DCF379C1A2FCF757545534215831882D9D60FE574AB39E145D67903DB2C5
992F25C80B3A2E1E5D976C33A4C1B9D5384F70ABC8F9F74EC9650F28745E5558
46D993E489258923DDCC59A1ADC3D968F8F7923A763D8231689C6BD81DDC16A8
8B893F926BC76BD6E8A8831E03E9A3CD593DFDF04BABFB8DDC93E3391A3FD89C
DDBE3C36AC382E169CED04A78FD15712A4278DCE78A202392A840C03215EB573
C7785B85F11DB678E92C734EEFEF9B540A99B608E8F82365172D6AED4D7C9B78
9B27A1108EDB82A3C982205B9F1A4F8D667A607A04D9C7A87F8930DA176DBCFE
6A5FF188B5971363661AC197B24E1CBFA51DDA17A818297E578EE3693A3BC41B
415182F40F5676D8B57F755D35D7DBFC11538822F0D537CF0A8831E3EB2CD437
16B8FE68531BA1CBF50CA931A8AED09024E38AD2F4310F51AE03A0F69B8F3CD6
528F81E8D5D1DB10358217DFF6600B8226D9A5D5958BC9670F372257CBFFB03C
8EAEBDD3869ED813601BE268B696C66BF7B491759594552996F57141AE9E2865
70E86070FB1BC9DE57F5960CA58A51705171C69F1B7207286751F44FD73FBE5B
089E1B9A97FEF3E79EEE3683B75A88D3BBB2778FD9FFF367226E73CA991938EF
6E160E2424FDBC5768F294768198CAF2D5FF1A8265741D79F3F4337CA9C108D2
62CA5EFAB95DC9FD91A124F9F5AE28E844C6C3EAF7DC2FD730EA39BC83968745
06B7D2BF7DF3EBA27244E825A54AEF3F5D38202A50A83FD3C8CEBEC959F88C79
87AC8FF7F05E627E42F2B701DF842CD80161A57CC7E12A692186B324FADE6141
379BAB315757C5071AE11DBF5C80AFF43179C3EF02476ADBAE3D9D97B2E2D198
D7DFEDAAD93A074010A208577E343CE74E4429F3CE058A3D5FC2F1368F254C9F
877948CA4CF92F1BD51A40FAA35B03F2540B6B6FBB910B766B0D3B593921942F
238557A504436765CACEBA3DE592C9CDA7032E0638F6DCE41980291E89642AD7
37D670C54B52BA896BF1259AAD51826C575048CC768BB8F13C177C54BE8609CC
B13F0003D610043DF7D47684BCB7E8A739C20755BEA87379F2D8CC1A95F550F7
67A53A82F9D8BC4CF9023F58FFABE8CBB24D3A95DE5DDD14ADBE7B3978752070
7B0F5B54914B7A631F42A1CCCFB934D9FDA9E1DC07EFF8041298B7ABAE8937C6
E56BA3356F66D12330CB9D13B8D28BFBBF2F61F2D1D494941B64CD91BD7DC048
EB52152BB04BF5A3483938F873EE75C72B1FB18C4FA5BFE8A5C21D048CEC212A
30D4391FF1229E4F84AB4DF31358F02B4BA68C4F8F52F0A87021F773E844F7E6
0E12E4EFFDD622BD5DFD994787FD2F1FD52EBA566DB1C74663EC0B2C9C15D266
36B358DDA188EE1CA3356DDCAA8EBBBFA3DD28BAFAEFEA46CA506707842AAD19
5AFDBEFE9533719F557B12AF3CC416A6B7145E3FCDA6C29675EF6796800E3708
3552B04A8543BE4A33418BDA1E2D68B5C8DE80ABEB9F99A26F77C1521DCEBB6E
DC5C12301556F56D223F0EEEE2E6F5B4DE4D5A2C986260883112C8A823D7963C
04EDD832CE365EF3BF6294430403FD5C8E6A9371BA2B3D961300629E15E6602B
87FF561A9F95AA38BB7CCE90FFB86CB4ACFC0E9F836CBB661B66D10BD953DB2F
8C0251656017778CB0B45EC8DD46E8A7F4BCF196113C106078CCF2DAD3E38B1F
AE3FC466F2D855531A9081594E5A657F90A7AF10022B5CAA26877704539FE907
3C62B383AC53B53CC77A18BF79676FAE326D43B613991C952BD3505B5BE14500
6015D4E79830C6D6CE155C1D7AC8AB8208BBBBA8B7038D0B43FDDCECAA1E1971
5EBB37367CDB40EB96C089E1E9CEF11CA74FA3C7D19B7127D287910F7684E81F
9667A15DC753881678FEC39BE660F9CA1EE0762B0E588AEF9088F7243A09E338
AF1C82994493463F807C650876F0C82478B90777A2D6D7CFF757B735C730F71B
BE8637F3F53AAF5C7B1CC07D8B86053B20F3BB937868366074119E0C05D415AF
A2779A15413BC1A5483BBA74C9D298F6A2C046C51F508113F98F2F2BC6056FB9
A39A72CA45AF14913335F8141877D00DB9FD12C438E716FCC9A52DB0AF70FA1D
FAF07C0DF2C58A112C14D662203DFB61555A3FAFF8519BA94037BD16023FCF55
4969DB6BD79D72B1B9CD6119539AC560A7F2B66EAA12BD30B420EA3A8F2EA0A3
7D98C87289B804CE29C4EFA9548CB4BA34F3CE91D86CDF61F82F2DD611A2DCD9
9D9E414596968DA8F0EAA65E9D49D0CB4BE513D1FB877A48205F2DDC4C7AFD47
F765E10C1570619A5C873FED11B5E46DB237086D4821C239B79B957B3BB764F2
E652C5F33EA401866098CDDE8DD5AB6A651052D0C16FDAA71E7D4646A59F3BD9
843E3EEDD6A03F2AAB16B78A5E93B14F10E7F1289ED166CC6B2D7F8CECD547E9
3C0DEE8FECAFE978C3F57C3D04616434F0E5C56E18094045507CF1EEDE0317EC
D426F5BFB3889241F50361F289B380E4D6711001CDF75C9F1EB598F21CE9DE08
6891FD6F0D74B8F7F8088500FACCE2F101F15778C684535173DC89CAF96D8713
4F1C9AFB4C9D881729F385112947384A7E41A7EA206C05B31D999AFDAE9D1D52
ADE7F788203C76A13DF8FBEDF877D580395E526D922A9FD0C975B55D5BEF4872
18ED160ED0CC10BB6315A885F7A64EEE6B39B9DC8E9E9C6B09B30D9705B10909
9A3B46166217A1EBF49A06E63E1E3DF4B0AA07BEB17860FDA3EEDEEF9CB7D136
412727A87B48394BB16845BC73B77CA4E01B1E9F3C7E6509AE44949705541650
F78C92FC5F97A21B23245966E12702093F3E8ACF9514174809D4BABA377E3D7E
C64619505809407145D7FB575AFE497484365A5FC16D1B0440B37A9BB69C5A72
16A92A6FFDCC24CDBEC8E3562E5A98B18A32F3901D4DBD0DBCFEFE635112FD0C
FC097699A4CC0DDF9608DA74FD7D18575BB1E36B4488139C819BF4103F4F575A
03E209AC03D6D5115B409DDFFEE27552A8B31B121C48778D1C381C58CF2BEAE3
528D3715A49BF90A8ADD9F7881CF4076B4781B2CD3FF545190E0CB2D99DB6462
4A13BE057075275372C3C9A43FB39951CECDB245F21423A29131D6A08A9620F5
E07ECF37747C2ADBA7CCBB04E294F4796CE851E078E27BE8693A86FB04163ED3
6427F34B57E158D862CFD0B43DA58602101678780EE829C8FBE1C121187D1057
63FA25BD12FE821B6CCB92FB252E57EEAFE5204FF54C9E61E91955B7D975A225
EDA03BACEFF8DD3046AB8FE85A9345C350BB36D9A55DAF47B5E1155660E5F3ED
673329B5B83EFCFDEBDA7D85AD9BD90A80884BB47B890167736C52E624B4052B
E26A0134F904CA823576CC388E712AD9BE0E936AAA81D46E676144DEF1A7F7BA
CA10EE43207C16DDCCE1D09A0996863975B4BA701B637A0033E08053213A0F33
7DFD1391FA36381D2BBD2DDE55A5E63ABC0BFB92FB0E1942DF5E43D5544D2776
2A838BCCC7863F4E579BFDF57C22B7140CE516683AF3DC3F023D7257BA246EDC
7D4958144AF1E9A45E46F7AC6F16B81BE76200011FF43AA01C07BA78D74C201C
05B559E4A2C74BB1D5E7B302A3CC8F02BCBDC0053BEAD875F92B2EB9128EA4D6
5CFB2AD8BD630FB81EB33DAED82D89CC6A46B364FC02BEFB65EDA2A8D6F054EE
BDB8F2470E2F4BFA25019376A3B7FBFD751874FBA8431D4523A404F6208A40AA
AE6E9B47BE9B0AB2D0645E92A9B210A40C19E4AF6A1DD46039A84E35FC7B2AA5
312A7E753C9F6A5F412ADC1C09A98DC1B8BF90CBB9708B8666C5B4C8D9CDF2A8
B6082EF179096798B555C690457411EAF444392B596E93E10F5BD5C05D91480A
B0DE94FDCBF4EC5A37F4B89156C7B88AD1D133D6076975162E623075E3F03171
4842B6BA283750C4D277466FCEE1C89C47A6CD6955A2156296B08E41AA98D6F1
8B7D8E5794090B7832DC362B858D2D40789EB1010BFB7A86EC15F70B0F9F1DCA
D3E07FCD28E6215C91101092FE6FE110CB477D9EAF87BBB4D3F37B4001C77308
4F92A7C5B764055F25FFFABD6B8C13C83A413BC5395CCD79AFBADA614599DB87
7E409D2D3A1B8FB27491B5E419438C565BC5C07DFD2EB488C1CEDB35E3BE44CB
2B239D7CC67DE47E0AB5D36BAE64408B222B710CE1B3A924839EED9023331DB6
66F4148991C3533EE3FB7B0E94741D16BB9CED0E25F39D46B4173C741183260B
D0E8BD766099EC037976A5546B199024BC0B9DD4787AAB7C9A328F72AA9DB82B
6479C12106CAE0C848715AE1A1A88245D9024E0EDFEA9AC6AAA533CC13111EDA
96678E3CCE6C1A5C75E434E8C3516366A6377C563D0C5FB6F720F6181E281107
CB3A48A42C2532866B15016BCF1E766CCA2B8B993FA489C9F7FDAF6571DDE6BA
3DA14AC0D7C6326D0059635D510975E3A4440EEBC031B43B59B919DEF18CEFF3
165DA2B2D0EB376DE47E64900E68F97CFCA61FE21AC75A78A9BA6B6EAA200927
2B54CFD3B2B8DDE206168A6021DAC286B089C19A8C339AB8CBD68232DE5C5CF4
F3725945F261308E9FA3ED127FEDDC4387DD15BBC9B4AA580F35C43BA3358D2D
B91CE893A025FCE9C2EFC3A09A85A9B5E591195426C15CC59DD94DF4A0FB19DC
6EA0C128DCC6D1F90F91C376548F19805F4707F599698F922EE537788343C0FE
DE6813FE6F8BBDD829C971ED01CA2BF794BBD06F303FF1D5A61973AD7BDC4443
E3EA0BB5CE01020100E410CDE4B73FCADB22A9E38A6297DC8DE7697D39C4072C
8F9984AEE1FA9390C047D7AE31E421532DB98C098E0A4FF7774C983B95CD40E2
0EF059EB89736F499E15088B9DFB707E5B111D7B0B39C3F4DB6C2B4F447733C1
F57A9ABBBB674DC7C6FB997DC91588DD644D79F2CA26ABEC21F867BCD838D01C
5214688FFDED607BF690853114D58F558320C86F606299BBCD63D8A11269E7BC
7F87F9E083C4B06FEC9CEE9F78ADE43F5E32CC0C0A17DF6BB68FD0AD4CFF8BA3
81B9CF9FC255A7B84E8B54628A6B70E8B031049F308562A8E9C0FA9AF11592B7
47B0C26A9254D3B06AFAFB4A0D0D8765A8718103B982AF4D556086C9341DFCB9
38D8402AA48EF45EB0EC200F019010D2D42C32E1FDE2D067AD31814318CCC5B3
1126B06BA803E734925DE43757FD7029CAA7A969F27EC208C21AD507A83E56E1
1B005A8794B561E279D13E11FE789227BEE57C95702E5972C4FCFBB52C1C381C
55E954D62B13D08AE9B94F1B44B26EAB3DA9EE9D06E2E814D54AAA6C65873FF8
252C2A6455A9735510749FF031EA422D99B0ACB1AD90C65852B671BA286C8B65
B0482DCB62A31B781D075C88C8956008D22037939FE857DDEA614872D2F2EBAE
7A00EC6CD3C9316D108790D4505E16D418D7B070E1C40D2091F07455CE77A787
76C106329695F0C20458CDDC139115E7CD2AD793AB11338759919BDC7B5C1E8E
AE967B673879D6DA76703AFD12E89B7FFC39E71F4480EC7111FCF14A97B428CD
754D52F617D9B1669541176D856769D28E11996DEE539AB2FDDA88EEC4DE8863
0345E349BA5EA98340724DC71AB675D2E0235816D61E6213816A37BFD920B977
811F6AA18241AFE3821F33E73A06B7AFDE09179CF514BDF1E76876DC1BE159D9
56B2EA72A5F638F8C6C0ABDD46CD1148C8AC061BF786BCB44F8B32CF2F52E9CB
C14368758F784F407E6C9D943886CB3DB19CB2988C8573C367F56994FAB752AE
77F38E1D3C0BB0E4516686DF6F33515D1620A15E1C1595B4E33EBA6021F0C26A
A110ADDC04FC185E9B8A37007BB6BD618413D6C5DF1E50B6306F5B576035CCC0
19094C94A4BF76F29FE9C088D9669FD24A220E245291E60AA9A44EABBBB84CCC
CC5B7278A04C541972C45A89CC8E4986A4A743979D09849B570204725C3B6B0B
D7FDD1EEF01F7A35AB50BC7EB2C1BD3C38680332CD2F1D189B551DB7CC65130A
AC902EF87FCA9016BA8B657E3D76D5F15E5794F2A24BDC5BE73BC9998C2D572B
09E8531A912A3989C96B8304125E669DFF1B974000CCB5A32B5F52C19EFB59B0
2BF8B661658183097FE7CA2FB773674F26C7E99C3DAB2617BE074C6510126DC9
FB4FEE35C974B7C83EC3060A2A851352FF07C966B61B0118AF13A9C1619E151A
F651AD9ED4F6A19BFF32B22435116BB66F835BAD2EEBE7EF54D75CBA5C4D9F1E
760A6961BA4CDBAF7917DCB4410FB98248E7377134FA5CCF8EB0F233CFE1C290
2D0EFFA32E8E6B71D6DACBECAFBFEF8E1822C6E8E70DB9C153C7B8A912A7478F
8FEAD0B942ADA70E881C3143B3EA86A6DF5CD531FB082F4DC34CE88E29E664C5
8A169E464B41B6C78F2000DB2B40A946FF0ACAA439548191366BB44894AC5B12
7BE5DEB1E909C6BC01FAC6A3A3B4685013DC18872F1A37501A393ABD226E755B
1896FA802AE0E2F0099B526BD0F7F0A1A0354D5E41E6C491C61B8EE9A34CC2D9
42A3E7BA924D155DCFF0191004FE6531FC0F07F722CD4D89E26EF357728A4D3F
43661F65E1AAD5FBF1E5DCF14BB0DA4389DC6FB1FC70CB9BE802FD1DF98EBA48
7879DE4E2981CD51139CD91AFE816344DB43399E6A6918A8870A7157B24DB8C6
6A2C08B4DA5E26EA10460F13470582DA3FC30A53AC0839984F609F872CF41ECA
10B7EA9AA951CA78DC077FFF8CCFA4FCEF99AC1CE850F2CB72197153524450E1
2A7F0A3A70749A66753A8B2DE67D0A6BA6C61A356113543B5C15D9DB030CD617
246E57D8A6366475D7BEE18D3CA6209D4150DE8769492B2E343D3C10F6CD26C9
21CD2CEE1439090A78CE3FBF6E69A863B389B1D4DF72A1DEEC17CD595009E52C
CE0FCCE15BBE73F7557B2011A6BA62F8F70B66109A4FDC1820EC1553742F286D
360F55227DD9369E6BB2032276078E741400CD0DB33B39786D350920C06E1A34
7FDA2E2ACD4C25C7D59D268B5A77DC29E7CCA269E8A44B658265A4363F776F4B
AAAF4C2BB710A6993291567B73F8A216BA6F866FCE49A38C299F941DCD00587E
485C764DB8D7BDAE1274887200D26480F806D15B41A212F9B1506B716BCEE173
5C1238FB68520AC3CB32B6DC5FDD613DBC2AFED2A2168EF5DA772D172994D240
6AE69BAB8AFC2FFC77EAE7C149EDFCBE67AACFAAC07E65B535476E7FEAF63E55
5B0EA679A63B82C8497798C200075E297709BAF67304F3B0891B4CF802E3FB0D
3DFC5EDEED15DD91876997A6FD11586DCEE2DAA656D1093DFB0D3B14614F7B10
CCD6EE6A0EE1C3BDDA470223480F88D5E30514B2A330E80621D0873EFDD2715D
FBA5BFDCE91BDE9B28193C7EE6407C2B9C5B727A8091404FCF7AD0C6334A7791
38470E1292CA3206815143D1A02E08E00F3EFF9AAF7BB41EC22B9ABA093B9807
4B8A54A595DE4E68439B79B3AAA9A406DD1054414A097DF9DD34D0B38A9BAA78
10F7C84674DC0548B007CCC7D3CB4A73A35AD4817ED4287E5BF3778E54101E91
15F28AA0C6A2D80335AFAB13802FDCC007DDE223DB24C0BE6788824A842CF6DB
342E613607566A80415847B8C449AF3CB12BDC2B5E356D2C3D7B8130F74EBDC2
EC2651C317E14B320AF234AD8C8957B514459B3437BF113091AC92B9C46DB589
1C5BDEC8C9BAD9831E7CA135C6B39BE18E4F8121CA09F034FC9C48A4299F08C2
407CA03129EB3DBB7B29014A3EF3DCF20837B5F258B2DBF02B42465E25CBA9D8
8E998EFC6FAB68C65621F59DEB3EF5906C5995F5A8D3BAA539DA7CF39C0A0BD9
4B0AF76118C29A99CD5BEB3D23D0052EF8F80D3B5B6DAFFE7460E6859A3BAC8E
31187EFC9879ECC76DCB7BFB34215F0DF56A6037A53E73413AC9031137D6992E
C60D9EC0546E06D83A82B818055F5043BDCD471E47C89BA5C940E0239F530FE5
2137AA2C45BDD06C3225C4A4FDC4750599E13D1DB11BCC7F02654412E6D469B1
81086FDF7C2BA8D8F33D01A16C86385D88E3B5FA9C936FBD67C49293AA1D63CB
DE56F37DE6298373C7D377DAB2BEDF11419831FCB44A48E7F11CC3F4A38D063F
7FCD4746EFB2E04CB47E60CDFB509D0EF6DF58C5C3E9B92D0C2C60ED3B6B3E74
49DFEC32AB51236C1E149590C5571B1D5CC52129AE933FE0751FDACF0C3C956D
73E75F7140B6ECE241F3C97250C32E22B00886380020E91E6865CD3A2FD4C5F4
232F0638045E062C351731B3FC17E8DDB9875FD8FC2BEC1E2ACD0EB3E40B12FD
638483922A9A09713F9B9012A3065F210B57A4B76B98C88AA4B887478458788D
444B142F9F804C05019B3A82872045C2138F36BA36A0A9E272E5191D6C8FF4D5
44CB86B8AD23C8CE683672D2324FADDEB75C5735345FD3CBAAEC365A09BC43B0
6195C2C0200C52D27652FC664521EF5B3B79FE4BFF69F9DBE217CEC91EC135E9
752756068586F7800A2C4DB499F495CD0162C13EE55BB02D04403F36C5B0BE21
7C1F26E9747C58EDAD6435FB2FC5C5158799C7C7FE5827BBCDB759C1F08E0C52
4EE7DCAA7E38006BB283E381BA6B1FBC1311951F039FB1C73CCBFF962E5BC4B1
339DED9CC81CBC1DF26170BEA7CB9F30EA9A6D5E46D77BF9F823199C1417EC28
AD8F364E58758C6EB29980BC1D83CD3822BE0B5E1280B09840FC91A91CA2406E
2DE72C065309713D06CC1A5275DC96CD47351BAD8F3FB2D8098126D9A0C6E2C7
FAE2B647C301C5FB5555B14855A66503B96D34368D7FB6D5F6A50091AACC6E36
EEEA36905021BB93363D61E99560A8FDADCDF8FB3B908561BF208E6605B7BE5A
64E054CFEEF38B8B76CB572FE098F9FB70DBA10802F13A84C99C13A0EC30A62E
8E439E589A031F5876FAAAB2F6F8510242AF91197A5874B5AAB442701C5D8368
7BAFD0DFDB51C999BD176DB706DB85870CB2E335D139010C0418BE8964002DE3
31FCA695D8D6F93BCE1610570D63FA6FAE3CD9339E925DD0F237304909F24451
F5673EF5C44B6C267B52F3DFB915EFF942F5179E8405F668F45566CEF74E7A1B
017488DD87665BF143F0342943D6280897832A28249665D63907DC47E9F889B1
142E1C9B76BD135E6F5E360783EA4401AD9D774E92E621870DB00C365E9111C8
B58DA257CF26F8F72D3E87155F719245A97BE2B71728D322E14492C7131ADC22
F1766D83202727B0231EA6E14A6F35FC7A9E92D163CFE0E104B5AF6E0361ABD7
7B6EEB234EF8DD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Italic
%!PS-AdobeFont-1.0: PLRoman10-Italic 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 37897
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Italic known{/PLRoman10-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Italic)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /PLRoman10-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-45 -260 1134 921}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8549245C478D3
847EB8AADFB62CB467547EB35A4BF02D8B55E71F89C1545C40C5533644CAB92C
A3CF813FB8F987DA2385816670AFA378491E3876A127DD966BC75C014D5A83C4
1EF191D5303C2184BCE81B1022FB29CC77C7CFB60F03947C49894334D7003107
7DAB353FF87287CE817E17A1586FBADF561F7A66002AAFB5DCA3B83CFB4E2677
BAE955B68024B4A0499BD147CBB9027D01475D72F1682E1CC8F1D58639C012CF
687B883A082BD0512E13F5227AF7D5D5A6500223402B0A9DEA6E4E446B9395AE
BE80BF2C6F74296A5FC7269241C620A3C68F72C0090786C3A04B1E9B13579CB8
80486B956C0F0913F2249887DB59654E9459EB997AE97D135EE622ED42353212
A1C1907683C69DA6082C85B19E966F94B1F3FF8711A39E99ED3A8B5B8F81E2E2
32FE7D29562B3B0A2E0FBDCFB578FDC44CA7C828B9B41085C6D5F48BC15D9DD7
D3044F358E7E6CEC1C9464046CC3756C523B5618903695451AFA10C69AD5034F
C9856112429267999EA3548831541B8D17AC88386A79B3499F99B48F8A92F37C
217601D85E1950B7C532AD1CD0BBCED74EB5CDA5AA4A5EF425A6A412DBD0F20C
DB4D1DA9E54AAA3C34FF23F23A74A5B94006A962328555D68A530693A4A06CC6
D3429CB2E286B738BE2719E23968D451A1BF427D1B34CD1E4536CEDA1113783F
70F630B4D9727985D1D1F0CF0362D02534F7BD45AFFEE4A2363C04241DA84FC4
0DFB8532911609F467DA5815626F67E871148DA08FCA308A1CF611A29EB57B6B
0AA5B281ECA6E4C82368E361D4034E462F659DFFB64C404825C32BBA9D613D96
D86A1BB481B92ECA008DCE33EE4B71C66A289FFFEC582BCF933E7EAF912C86CB
6CD5BBDF876BF10954DEDA2F6264B06FE833131E80E20D97F5FABA7A64135F35
66FDD11403617AB2EA0965C54F38A480F18564768DF75B1026FF045A5C6DDAC9
4750B607C7B0BF0798D621F31DCB3E02196417EC4C36215EDAB9B630DBB8C70C
27E469A0D3E7150714F8B612A2820C4011790B0770875A98812716EE289BB9B1
A281D8A17E49B65A0836132D899C527EEBDE4B1910FBED058152D2D295A1FDE6
B8CB84A8872F9CB81240F36E7C736099E23972E86DCE9519FFFC1F1F99B5DE61
B02A7415F0CA5B9E40FAD2C8358FCE7C8D2F7AE98431D266E3E706E4BC5E1198
9990A9ABF81362635BFEBC7A0E37A385D4DFFB6090F02138666627312AFE051E
29AAEECB0B455E2768C603E7F89D4B6E8929944E04AF31AB83EAEDA618C70F73
5DF746994341A37D151D9D9652BDD053FFE120C493DFF9FD4972DAE07A8CA3E6
8A7D3D06321D6DB80CD676DACAB1311AAA2F0804055B6FCE3025B3EFDB81F655
5F09A25CB68EBF9EC64B5221A4CB065B2CE1ECB841AA4263EC9EC6DAC0F065C1
B4FFC8004CF5A4D2116DB1E64C8257C7F197DEDB8788DBF3A89D699C1FA8B29E
D91FE2A9FB9356BEE8DF3D8B37F55308AD88D776491C491BD517009A20FD4E67
AAC3C817A8776A40C94F70D2A03AC5F806A96622F892CFB0E6B720C543B61C23
1F9FF35AF2E541CB02C6A4D9CA2551E67C7E0458FA0553DEF0EB746A2D09F547
375387897FBB3CCD14DD17829B3E3B61F38A529060B541F6E27060ADA7EEF2D2
CBFFA77D88827236660260C19CA8BAEA84D7D6DAC8936854A0E9B5873E0C43A9
8002905B1A1080C2CEEDA53D58C697C487E3C9F825B5BD086A6BD6BF32631A47
8D5C2A0D08CBC5A01C36A279E127D6394B2DAF92F8BCDA0116C947C2A490373F
DF542BBA9AE63AFE43560722E48273F9DCE375599B99D6B206BF23E9BC871243
8F97516BCCFF5CA8A61D2D4856E46BADB692C76EAF3919D4E6947596E808A9A2
EBDED63BF6C9E49FEBC2B0D193B807ADABCA84E043EF7C2EE7F2A4AA9EF43273
6C20245984BBDD588CDD10DEAA79E7BAA7E7FFA6685B06BD101034B3B2AFA2DB
7769017A319CB9FDB0E1DB557CA45541EAC05B4216FEEFDE47E00926FA53AEF2
75FA0D53240A71EB024D2AD29180C709290EC1C54F52A74578534F3A03FA550B
680C3BAD6E8CC3FB74AF7875BD03B40D54E7E6A07208BF9F34237CF8F2BE0F73
2F55DC22ACC3195E9040B7DEC0E8B841FC0414F59D363D13AE5C18DAD1EB7511
8D4690A28A1CB967F4B69774AB6AC34E2B77039483471E0CCB5A95209E71DB74
E88971C070FBAE2C25A7104589EF3884ADF70EFE840959AEF3E34287BE6E17CA
0E265ADB2D8C3DD3561EBCBF76153BDFB19DA55B3F6335426B6C84ED7177C5ED
D9D1F90F10D54EBF59A7E33DA067192A06CB4FA88AF922E0DCFDEF73874320AD
D4AC1C1018431DAB4869A982293003C83BC5371513272676E276792C150E700A
8CCE201830D63CABD9C1922B9904CDB0DEA60DAC64F1E996179E20CDA91CE634
A6B48B53744282DF08D701F0288859A7907634BF9297A1FADAC270C3F75F362A
52ACC17799152809C9B6F79B12C6005B9EEE19E4C5A15C2DEE572BDA14581A9F
76DB4975965A8D8FADF69D9543CA7F6677F8E5175709F03B7B7A379FD2CE9CD1
91998285B5098E789FB377DE9694B47BF6D669AD2BFF4B5ACBA67DC3BECB0053
FEE27EF30CB0A494BEB80AB241453D3D3AD224EFB5C871A3E66FBBAD1AAA0500
842E927CC22AED3CC8352A633E5E9436DB20C3A0ABACC5469189D53FE3B614B9
AF1CE79269CDA3274207F33C6A10932B754A55AEA91394ED682BD5DC5D6E9B1C
40AA9FECEE64771CAB02F0CA6CDE638CD1CC0EBE93013B54128F1E32920C06AC
8AA3B6FE121810CB6B8B671C9AD03ECD95487F217AA6669B98187EBBD7E5076C
05A2CF6E690820C31ED465EBD6AE1C3298FA99C53536EDED25435CB78EF0F4A8
EA3EE8C82ECF6691ED7A4752A862CF042A2AD6EF36EDEFAB33A6A47CE8B32D11
2ED7B9AD13E6EC00D874AD8241EE033E17EE0BBC43A62A277C0093627A6FFD23
9523FCFC81982763EFA34A171A47FCCC4D74549A52F36BDDFA8FF067549F3C6C
A9E8E7A53D05EC001E45AE4B4DF4FFA56A85E06839D169AA0FF574A8D39B9739
5B46C494BC0F5C1F111B48BE82B2286A526F85A386DC278C8FF5A31507D9A966
90708083EC58DDD3A029FC7099D3C8BB62A387062B98CCC6A2D0250C2A867FB6
B5FB5882DF286E8323585CB941530493AA3E83A49B9CAB51C523CED186C92187
8D36BC6DD37C83F7C58FEC4F546B31566D7C3F43D5829E6603AB07E5C0C57CFB
C28FFFC956640872B49219FA101B88EF3F8C419824DFF97F4576D8511C2D9462
B373C59D8C189185FBAC13AC58FA76B08A81656DD25A7835DD693AE5D617A93C
DA0960657CC231C6F1D98278F2222836D2B09F7560C3711FCAAEA9ECC6D0307D
3D502A405BD06ABCD82FFDE90F79F94E7F70CBD8EE081A402CDA374CE41395E5
B81D29CAF34A5DC8CEDCEDEDDBBB6361C3028CA6D11849D17BE65D0ED7A9F515
BBF9F90A8D787CBDEC640E08E5A67B22BAEA024E05215A79DA71CD5D88186E37
A36398245925470E23A6F7EF4ADA5F1533429CBBC6E9631A4BA5F6BC23842A44
832623960A0E6CE1A6193B3E6C9DA143484BC88930CF6F46715891DDDE19BB7B
AC1623C071591578F5127E543A040CB489A8D4CD27D3A862C1D10BEF7FE76CCC
335F6DDBADAA9B42A9430D4A2C4E81DBEE2C34418B805EF51C5C3F8184C5E19A
2887FAC7A3D8CAB54D79BB7FF1573C2FB9405381D47360CAB18398026DBFA8A2
A4B4C7D516C3D8674B79EE9FF01BB0A1B8C24DB58F7FAAF67B92282C5C3BAB52
C48F00B5929F23F5AB024FA740C5E867BF2A04F297872CFCE56CCE1582A3A05C
BC51647CFF73C340EF6A679822A651684F29C48FAC2F2AA1785A2FAC4C7CF4D7
74A401A232E134DE25C2917EF524F3C9160E8783D5F5B6504ABD10116BAF971E
2EC5A4062A9DAC0FEC368B11CD07341EAB622A755D0A82EB0FE4D511FB2E2E44
C8BEEE979A2790BAD80A5F25DAA86025AC03471230B28F884F2E6E8B17AF7AE2
F60E78AF892C68B6248848001D0BF1D4D2C9D54B1BCDB2EA740C65C461C68AE7
A0F56640AEFC29135A93EA5E9D4FF2CCA2184028DE2CB631E375E903ED9EFB94
857D02F0C4137CA38E293AFC6819ACF650F8DED5EFE6AFBFA6625B81A141C3AF
D1CA05777BB56802738F4FE8FAA4A4E29ED940E9AB5A981D904C44E2AAB7873A
A2943C05C912B7B60343A7DC7A3F6F1AEA9D85EB32E60DA31233D7314E18E98E
17B68924D0EF745D00FF74C798D0EFD52011E7FE7D52963D8CADD372DBF3AE79
41F78325CA190CBB2659BCC601BA85B214CBD12D6F6C8571B6512A8DF217954E
5EEA59EA0C7518E760F8878D64D0B7F7B09CA3A480CB24681C6A11F03A6ABE01
F6B601D390E2DC1104F91B54A06D57CA5ACDD9BB8BBFAAA5FC3B713F6E49D798
1896FBB742EF5DCE3C6A1DE1CE9D08AD9CB9D11A5C43643B5F0A6338BA2148B7
638AADB4AF180671B6EFF4B4AEEA7CC556F584599D0DA869924F63F8E9BA65BF
43430A9AB4686BD3D6C996665244F93E21CA459DBADA809440732C455962DE40
12BAEF33DC7A2678C30DC21408FCEA6D747CA4481DC455F14401CBC82E45A684
48549972AF20114D2536479E7D64EEBB031A6A54A6805B7F680B56CED7F19842
20443B8450A4A4086320D14D13E3848CA9DBCB3297DB8B747AFB41E6F7DAC00E
1CC54C45BA2FEE00DB28A90F69D361C31826743EB62C444271924C89E1140C80
65F025842B0F91F6E4080B3C6D4A4A49F2347D128517971542915D70737B3F22
C6A831A9821624A5D64EE33CD2B296D91FAD4848A098ACCA36F24BD9CD6E5555
AFC759E491A9B56937CF8BA7841A58D7F3B586FE7A0CADC3AECD739C9C425D09
CB50B4B4BE28115D04BB18F27BA5F35FF4360739DCFA181DD539CB0ACE48DB26
F515B6576AE85A29BA65112121E1DEDF89E6D77B01086F8190D6BBB0A07C51C8
E50C03B622E4CD954325EA88A7A3362B7B02204F82B51F8E8451802D48AA2A6B
03105DABEB1A8A64BEEC2A8A76E87AE3D015FCBEC0B0BED28A8EFEE408340C3F
96875DB71619059DD29928F2106BFFA3B0957C1905B40EA11B3945DB252F3A5A
5A29432AB379A8E4E353C8D7C7C56ACC6D79CFDD2F4DD1CABE978FA6E90F0E5B
8F8BB675A468585AB5A571BA261FFE2722FCA1E002A7B65B23DDA928828944EA
65F0B7C0EC0F88BB4B77996206F3F3320406F1A124E2DBFF02C21F3CD226D72E
507E5F58241AA206EDCB4FC306273CF3ECF388CE7C1B1C1ACA1036EFC45B3B74
55C660D9F76E2B8F717CDEA8788ACB274DFB0504E3D8AB943670B582AB955022
02440A8AE1FCAC4CA07B1E1C39F1AB2E0EAFE1817C261A178B008656748ECCAC
9584505D39C16821BFFEA198BAA8E68FDC9030A7FA3B3D360E533A49EC181CB1
16510043C04B3841600DD29CA657132BA840875B855B71EADE06D5C189DAFAC5
D5DB16F78988109B90BC1D99166B9BBF0BA8755EC9DF832E6BE3D9448D6B930E
A96C2A23D201A5A84353EE031D1CE7A6D07E849CE6067A1A03BCAE7C9C1F129E
B1429019684FB41B1B87AA1644322433A24A3E872858948E037B78856B2844AF
EBF35B40C1DE5509B5BCC2F746BA844257575F19550551A5E59BB75D3A931069
034F29BF9B5B9C52CF0DF7953906CFA9E2BFB6120322586232EA8AA2468F77CE
1C46E8E03B0A2EB6336C3D02BBE72EC4C50973B32ECBB7A2D5899DEBA2112E2E
03F114147B010DD7CD541F1525DB751733124776EC2B10683B8C1B6EF5D07D06
DF94BE28164C5A0E91FEAE59FA69B1DFCE338508C502F77E4D45ED4286E47D8C
9B02CCAC6D96A3CB1FCA94642068AAB0B99E6533D32E322FCC1421D53A11DB90
C13718D82EE6CE30932AFF5CA1023C14CA05957EBA7AC88D5CB5A6DB6A3029B7
E5B373178BD5DAA70E47C2B9AE6B054F4F48EA0F5EE092368BE23020ED4FA556
0839D4E14F63BCD9684BC7BD34FD4EB0EC8083A3794A906C05D54CB977A7FD34
62DA3DCEA946C60731D59D78D795B7265DB734A16E3E73CEEA922A31232865F0
08D9361762CB4430FE29BF935A766368579CC5E2AFD2F3D00B85E599A3641612
A971AA4851B673A14552A109E586422C3ED3CC4253A8C36EBABAEDB009F84037
409CE80FE06DC5D2507801D602DEF795D41039B2A0CCC9135BB13273BA7067FF
1A48838221A3FA4A1EA5EC2160BD697AFE9804D43E1D896D2E43F41735595FC0
A5D8B116C10A25B481D19E3A7AC4C5E5F737BE110848C8377F6C6111BE621F1C
74DC235B1F1CCF9160A2ADC8E4FE875B8C063F76C7FA75BB10FF1EAE71D64DEF
12F7312AECDED3950059B624949FD9DCDEE507FD78B4EED022FF3FF8EA26F064
8807A80EBB22CBBEA8AB09CE4104026389002CCCEB2B31672C18D0951F3B32D4
F7F9E92166D6CEC9F8AE4E5C39C69A357101EF71C2EA476B7DA2311CF3FAE57E
437F24D25C6D3DE6DA5F60C99C3B3522A4424958FB70969B89C5CB7D753401D9
D57C65BBCD212119954A21223A2E611E8C5F4E6D3EAE59379A92B0B1247E1506
1C086DE966B11857D6BA5C8C5F5FFA0D05D7A055C11CD3F6661B09BC4B14720B
39099A261A1CFD336CEA88F99DA3900F7C47E3853CFBA975E562692C3741E82B
38DC905C5D7C24BD5570A85E9B50FA9B126016C3974A22A2BD9E0D73F3D2378E
13AC9C5055D4452947EDDC800FB61761D0A6A4514C38ABD53AB05402ABFD3998
86298BC2F49D35206077C3ED50CAA8DDF76054CF218F0E68D0FFC9CCB909B90D
C75D2027CC9B60D07FFE3B012DD142860E50154BC4A2825F409A08482AD11103
4CA5B2D8A09ACCB42DBF4BE0A72AAFE74165A96C6FCE07C96ADA9A37C9D0D6EA
8887135874863F0B9452AF166767A09B7ADF1A2C2FC9B939559654B54AD124C7
A25B6579FF337B854E75F9B250DC95FAE859B46A74B590D59F4F9D8071025F87
248EDA1519622BB7C225FE220347F9D7D024CED3115C252B5DD4663D6CD3A59B
2F2E713D370EBB25F548B32C70AF9FBB3EEB3FA80182FBCE67F2121DF830A8E5
822FB3949A6D783F0930FF63E34C1CAAB661284B7C4F851F05DE3AA762FF9B19
64B91F67E4EECE7B72AF9471C2F648C6D4D9E939351A1702749E8E961571F2D1
A8EAB12FDC1BDA76175586C3779698D2231B4536EACF565CA804086F002C2AE9
3B1987027CDE139EDC06ABD1FB33953B2B7CA7A39D0F2725E0DBA71DED3F70FA
465F711173DE3987EE88A55578DBAB8666C70845B28B1358C5758D919F7369BB
6D9AC129733F697D24289B2A2407B2D0ECE650364011989098493C626F4C7F47
2E86BD021690C4BC4A900C6D53C9C7B62FE04BE2FFF7BC4C807BACE450AC68DE
FAE60C05A84993706B64D904549A6498A82728F27C2C8DC8849E90F329A93A9E
6160E08CDD3B9C4C46050D1E3AC94DA42C73BDE914528CEE6A9E59C2FE52A653
9885C364139419373923D542E786BDEA48AD7D58EB8BDD00A20386136736623F
953B4BCDCEEFD28947BC07BB1C77909DEB5D79BB0151DC403489A7C0B24759C4
01BBF8DB50D92A2C49B424D9AC4A9EC8F1E3825DDC9FE2E3E91E66F7DB90115E
4B03DD34718E00B739FF7E0D7644C562D0EF09BB0810011AC110215E30B1FAAF
966B8FCAC6791EA133B64E1D5B0C0942F0557E154C7D4931BA22DF1DECAA27B2
5B017A73A4339294976B561396F5E4F28856F76CA77DF9ACD015E0636BC1B6AD
F62FBA0B585AA72A9F507076291515826E985D146DA793EBC2B94FF92EC89413
AE45A09606CC2FBAD97C6D3B0ACDAF020B04D5561DB1B197CDA71CE5043ECBAF
6EF98848F23A6887A92010D673B2CEE6D273673F881648F3BDA232EB714B75E1
889323DF8D6DA8B026CFA79705B181EDAEFD59C99A130D5781E588D3EBBA4CCF
89BAFE8F3516FE39468282B560517B31E2DD83443EFA6E083F04994E496BB66B
24371FFAA6E8419BAB27C8262FD1066C15E6E121271F4FF4CB25B0279CEF5AFA
C09586DA50811DEBB1E8EC15B703BBD94105A6D0D5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLRoman10-Bold
%!PS-AdobeFont-1.0: PLRoman10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 31190
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLRoman10-Bold known{/PLRoman10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLRoman10-Bold)readonly def
/FamilyName(PLRoman10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 60 def
end readonly def
/FontName /PLRoman10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-56 -250 1164 916}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105A25E1BFC9F2B5D2ADC8239CF6CEB1085A5D47
76BF78D14753F998C47F4FCB1AB6B7595496FA51AF12771741C525CC727551A1
C53B99507CB5132343184F19D28615DDDF61BA4ED26FF746A8DE2D895CD9FBAD
56CCEADDEFE9E0D07A01FA572FA8E90427DA946147C08161A3D49C534A5966D4
9DB68B43E54B6ABCE3674E951551A86FEE8206E15D755FC96D3E006D6BFC1C3E
DC4557CB035687755E7896FBBDD7F0E8FEB84BC965BB3A156AC014EB63AFD5EA
9F86295B06A8954DF1FD0F5C49D1E4FC45E07F61035F23768667FA661FD8D83A
F919B5E9FC42F7F3376488CBDF2D84189AEC29D3442963C84EF6A185E1FE8B2E
DAC61E0AFE78F39DE16CD153A9A5521BA6235A41981D6FA292307BB16E284EF5
4001C478D73CF5EEA5645C3C64499E6F41E0452EA2148BD54BFACCADEC40B880
9A50D2857A8AD5CEC8550467A9C17AB3E3DCAC7FAD333CB781D123D7B13FA066
23CB1EB3C0056F607C2F360D16141A6BD9CD7021261D2C8111106E5F0960352C
75105A1222751EDFBB3E8B729267221875C14EA3366EB3E54D34BC73F795F8C1
C4FA34E9CDD920B0F7E2C38F138EE0922FBDD3D7BBAAE58386D7A6D4D54B0964
63E1F3B65E79B969341091FDD988F5D4C05348B811342DD3A2B352DF148B8A82
FE0584ABB18035737DBDA92F6F61640C7A504A57187D6235449DBC3F67808F28
4D54006817F6B9575AB7FE3A531CA0F144C6C508C1D87CA715566BF4E68A88BE
7913502E5604DB74C310E8BC8794666459CE083EED6CAC66FFFA0F1795731A69
860E393C9CBBCE9111A8912FC701E722D7FA3E8802243901F1E0386ABEC19A29
B0275AF422EB548505307B85E2D428B2793378041115891F0B6306B6FC72E4B1
EB87B2D527B774C765DCE58B7F76786DBCC6A57280753DCD85073376B5C15095
AD4E14D9CBAADF8EF93A933795C0CBFB7204DC62340EFD3F37C26AC08DA98886
99C2DA581BF499925C57FDA26C1736487F2BDD3FF833163611BB26DA01367B61
774D9D6D569355D10330C9E14A5C5F7BC9AEAE35088FAC2E174B35591D972DE0
DAC5D8E984E967A0E8A93E8741F4A8FA89EEEC2556CD0D4D1C30F4D0302CFDED
66881FB58481B2A5CA3BE03F9A9EBD52235D56ABAA85003742F8271D715965E8
9DD9743B1DD19C90C9AFAE343A5877AB7D005FB3A78552A4826AFD5BCB86C0C2
26DD9642C96F6D3C578E819AD7EF3EE7745D6460F94622AC516E9D777D6C653F
CD96F07CC74AD17A93D3206EF4D481A294B8874E021962213E923ACE057116BF
383D507CED4E5A83378955473442B6A85A7C69A016069015EAFA706682E48B28
E8C9CE4AF423D49CA0DF1B37BCD6C2CCCE1B40173A0E450B1E1CC5188FE9A784
849524F95B87597782D7CCE2196BACDECE8E2451C2BAC4FC371564757725845D
B7240F7804FB3371973117CAB537A70F9439B5E8BAF9E2EB03F07F09F17189C7
C0F139E2F261BB8CBCD84D39EF0F0BA674CBF899EFF8FC80D699581ABA7D9D6F
98BBDA827BF8D401514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED289B59E
0F97561179C2C0F08E832E2DDBE7C66ADCED36369AF8B34D445FF8B74EE2FF24
AACF3D958348A87DA63DE672CE8C10DC9103EC4853C910DC7205541B16C0E6BD
1F1077D518373F33FD234772443524FA8A11A02AE0B8ED0B834A3E3051EF1D81
7F5405D87BD0B47C50A30133F267F34B10F3F3362BD2CB26778A212CC7282D58
A4486B7166B269B174B9FE9BB5FE94379B638B85AFE160FC1687A50867043566
1C462AFAF04AD44B11721927EEE7C26AC6210E8D4EBBBEFDA9D435869399D92B
E364E9390003F437D9A3A0A4E96E82C73EFE4C84FE034CBE8554026B75A3A2A1
4D27E98234B588434F88042B2956DCC18AE1C1E30A0E78EF0470B3200E566399
5C3BAC056B0B53358140F209905103D3B7C48B8EFBF4006DA984D240911DF09A
7B36D1EB2D9E4311A671CF7A660039A2F36055BAAC24E2EB1C58B902BF073C33
04E4C8EEB16D7EC879F6E9B1C1E8C9AA035ACA1C42A169FFAFEF7C4751BDF434
95DCF8C4F6274740CE31EEBC6E363CF7A318738C841A95FCD30CFD43A02700DC
099F78035093EA6D9CEC8990267B1BD97D4734CF37B2C1255D017F11F62155D0
00AE32705CFBF7A1DD3C579B9152921E8710DEFE86BDCE7763A3CBF62D1AD9D2
ED76B0C306959A4927F976E8D20E8B2D91D12C9BA32DF393C74E1CD3B4EC1402
4969B2187DE398125C3F94E4357A1BBF54BE9CF902B0A36ADC6898E76B0C6263
3A852FDA93669BC3DC2CAB97F476CC7CDCE3DB5DDF931CBD6E01A1FCEAA9ED39
DD8FCF258C2AA5852113C51CFC836540DEAF4B0DBC9D59A559B2BDBAC48EAA0C
F06C0F4276B92651D874ED7DD95F14FC3CA396A84FE51560C3CC5B9D1AB174C4
6433EFC58EEA57879DD81A22F2F463E4B249A0C7844C057C8AB6B14C07D6653E
C0703A27A9DC4ED432F5107AAC6C8EA201789EC66ACE781886627C0793B78276
4422692DCFDEC8F1030FBB8FD7E4D16711DB6704971A7771401CF3CE53A8BD42
F8A80B3F97835DD9572E25670C929A8F9CE53FA33391B26656486721814B5984
0243587FEECAD354A0315D2ABE4754AE3929983BA6E0A977889F923426DCAFC8
DC1CAE559B72273B8EDEC26D8B87F353893A187F3819D3A9429FA9EFF440E2EB
CF3131D85145D70BD7BBC442E4E83BC0363B88C91C86124A5D3DFE0F29A95466
088DF48B38EBE33BB1B746FF762BA144FA7AF1CD28488C1F2033A233D91D9039
286747A02E05B02D4C6603B5D62633D4DC6CE91B83AFF37D9F1425C9DA4B0B2A
389C185F7FCB4561656CD37E96246CC6E5F85E045FE750DA4A9B403FD293CC43
6F65A72A3CC8C866B77F225EB04390858BFF70300B0F4B912E16BF834DA5B133
27538D51A4BAD1812A8111FA766415C09493D47417EEEBD2CC07BF989CEC3ECF
4863C99092C79539210FBE05E529B4C38FE7ECEF0D4618828ACBD35DC636F26D
02E3B7D57D8AEB1D6937008771204AAAB9118DA72DBABC610D0B377000181376
A9071050F3037315183ABC447FB269D6C55924D5DC6D11251F0D8BD58651E901
CCC6BD34A540CC0B84B12DD33B92A53D58C697C487E3C9F825B5BD086A6DB626
EC55D57B5DC09C95C9AE4B4EF735A5414D985CC691700066630D8595A4791342
949F6ECCC6FAB0A20463B7F9FD14D8DF939943506D30D2228233E386ED838B3E
9B2B8B1C12E53388590E4D63BF187D8A93FE9F8CD6208492E7A448BDEDC6D5C9
8D7AF768B0F428AFEB03148A2FCABD1B98468BE62E4A4C69618FE8EE03001B4A
00839DB50763E7C824201D1EA86607CC7EE7225BD92756C22A08FA635087D2D9
C543F44819C0407D8497462FA7C43F18058A889333FB7750933EB3D2695CE10F
F4165908A464C1849FC963393222CAA9B96151BCAE8E1965CFCFF3CC0B052242
8C73C7A6BF9FE5AD4835CAA55F80F97D7F7D67EF942FA3B8659DBD711D2AADC6
0C62242B3EF7756A0302631A3DB64532FAA4D45255BF472555E6D33E14684772
9B538AF6C05B1DA058F32613BE60C6CA25AE8C24ECF3D8D068CD33668C976DEE
0CE8EB56EDA498A5FE71A7D5586DF253C8F6F7E63FA8E54AC57F55BD24CFA4D8
66C96E44060C1D4CB37236209050865DB7C42DF622B338C87A9DACF56D583486
E8DD0357E35E1805174BA890556CD485A15DCFA2866D7CCA73C0F6FEA6D19C52
F0F93C21D4ECA36B55B2704E68A73B5BBE7CCEE97B7F3B8C7FA61ECB48E0E812
9CEEE93D0E443F0B1208174EA21D07C4D7BBA32D2ACB4782013E35F50767E198
4642334D2B9BC265D58FB6052E0217DE72D65B0B07F6D8981A4F08E9A6DB793C
1B89CC58C013153CA8687224E35BBE0731FFC14C39D0FB2C47A87337B1618DCA
FFCA923847EAAF8D8B8D9572760FFA000528231ADA9FCC14995369D629754313
F90EEC2B1A9C9D799DAEC21BA544DAA7C81748D366833CFB8CE4A78816E7F6D9
138B1AD48DE9A3F5B5DACD6DB57706DA244B8DFDC8661514CDE029EAA738F3DE
34578423B70ED44AC6EFE221ADB5E725ABE897F68517D951766E9CDC1DA90B72
CA78C4FA652354994B41FC3B61FA204411DB939EBFFA88D1BB317EFBB6327321
723D48EB70473182818A9278854EA8FDE1C4C59F802A0425C1A4F2AD6C62F7B9
3336ADD7402F1105F9D9FFDC44787F71D921C758A6201DC0CCA60576B5E787BD
F7BF0447FF90BEAD2A2536C8792D753DF502D6E67A86F4EC045CFBD2DF40FE9F
1B3523CFC02DD5FD5EF1A9B4E581823C8DC01463444FC3D79F4B3A24A3386ABC
6423C688F32BFA52D88CFADED7A332D11EAAFC372DD4C05F0911FFE7A6A24F19
126C17DD16A3913F27F12C896BDE5C6BFFB0E7082BCE32D55AA3E61DCAE51514
31DB7FB2704DF7FC14A43FC534751C24EC1C803A793CDF6A86944B3BEE596966
5324073845050C0B5FB12CCF2D8DBB400361F021628F76A2102905B8CCB2F6E2
853F0FCD67C4B3EC8E05A6B65D0E98718F1F3B103B327B3DC2C83E7D3A888053
F0D0BDF164DBD65D7CB407FCA5B34F5E808CD6568959FEF909B5CBFFE8E38FFE
6086BA297EC0220C91F8BB1A6DA1D1C25392A114AC5B945639D6512DEF8683E7
E4461F10B81794136B570063F2F0D66BCF8177EF21428317218C8D932E63BBD4
80F578F4570CF15B1F9F6FCAE4C7E0B3349A161F05ADD22E972B3E000C750D56
A70AFFA7911BB62EA6983B6332E4B5615AADBEE029FA32F8A803413AE7BF8BB8
BC5CF59F64B7900DF9E0FDF5309E31FA263E9971380F7E86A21369C02A708475
FDB5266C04321BADE4899D8B36ED588181E253CB5F17F21F0F5449F336320680
A934014B881638BB30611D6FE3F0A8342E8251FF66D3F2EBEAEA295D03297B1E
86C7308B545C34E51F30231542744D0DABF087F588DC4E998A043595494DB2BE
E960A5593F40ABDA81D3E575A1C5ACA97FE1154231C8C00C2874DADB057EF610
089DF55AA8DA2333AB208A7A6D42499F06C43F8E395DF2515C0D4B2AF2D90C45
950419DC5A4FBFA4783F3D4CF44D31CD3E9B961F7878ED84E233DCABB74FDBD9
3DE207CBB67E954F751D2D130BD8787D30078BED817E66925DAF2A7469C7CAB1
F6C3BF00866AA86AAF80D7498C62F0F5B35B56D2BE6BA15B20D86DEECF72B993
2828109825E860775854B803FE264818AACCC36B8F448F7F4043077D6E074B90
7C9DEAABA80EA233AB1751062F4DBCE48CA624CFCB41C4AC20326048DAFD4E4F
B7FF2F8A372934E09B754928A55C74DE323723923AACA31BA74855CBF50BBBD9
26DC5EA73D60CC9BFA06CA2A670E0094DE58762FE2D1C0DDCB84A3BA38BF571C
62311158C381B4EF554D0EEBD27F3C88E4F3E188B4E3DF767F2CB4807394D482
EF978EBEB4EEA860A9A97789519C811EEFEC9A80F99E203F1F320212EFF113CB
6290A5F9EBD2154CAD02B29C2620C4FE88DBDD3B7D8E97ED992F26D4FB92CA6D
916BCA4E5DE03F7B2C277E79C33044BB899FE8937288DBC4F966B63BED69CC6C
61D8413C86399422092AECF37B2E7CF1CE825B0348BFC11186CBF58A554F4336
0DE42D1D875614E67151047422C4E47520F2CB3B1DD757AA129E064A446497E9
1350AF3A5A161A4324002D6717AE09E63EF2294334875ED93DDCA23243E860A2
0BF9106E44B185AA3EF1C7255C4603AD02378F80EA2F824BB0529D278CE9589F
CAA2D8D81B828D3C8FF0E4EC01557E21E0E199D2594237AE2EAE581BD5CCF55B
D797A6C085A5C3D84A7F7FF08BB4C31B161A28C88F06C25843E674D71DA23976
6F4EBCE6DA5925CA76B309D647441C23ADCD6A2EE351D282AC76DD7B20F1052E
46F873775FA184A6FB13F9BFDB507AFB1163B985050240B1EF151C9B1EEAF102
410CCBCA20B4AC0C91E58FB1902940B87747561055CE157868B2CC84526A5C54
B47BD3874B77D3B673156848CAEDDD3FD0804AC4F0063906754298674F86C92C
576E96F4FB8C843F54FA25C9B1E0D449617E51941BCD5D3EE8AD014D34D14A22
11504750D9E88E7445917CB4811558EDCE6ECCD92CCA422792D596A6B2DE2F88
C6B4B17F01691C0425A75BAF8E517F744D908ABE14AFB058A7E3C78183385E5A
582CBD43FD965F5AA65B1B8C7672CA83A3A7F4C03485C4AE96FADF1AC5490D25
A96B9596598D27C397922C68112AC4C6D88DA7D754B8D87B2882D29C532160CD
A23F25E24CCBA2C45360185571BC964B623EC3AE4B64A158FF358F193462AAB8
1B686A55AE413DA6F82A7761FEBA79523A9A04D34234E4E751CBAA3435D72AF1
B2981F3E340963BE536BCCE29AD84CE2785884ED64D820A3C27219C144EB49EB
DD6A81B14128E76309EC9D0B811ED4C62E3A786BF2F55974422EF0984F1A3FC0
095CFEF98F840B90908CC40CA01315834708DED59AD34AA679D004B7408D1538
87B18F530F4CB64F7934B3AD53B071248C0D98D8D8706914CADD25E4F8A9C1FB
7E195447A98A040AC783BCB14B18E429B454F0E1FDFC2EB41AA11BDBB95B6914
963BE64384D9680376CD6E26B6DE423A1EF22B2DAA3A800B88241B5D2CA9A105
7E85D40FF816F77F8BED47360E61930831B176E46C12DA6A29AA966F5533B34D
B82E5DC05B449A29692193BF9556094415358CA9BAFB324083C5ABA1F8537787
B781829F894188309087CDC635432D7796E9D05DCE154A4194C42D24436DC0F6
6890B7E5878A730B7977884F9BFFB8F985FDA52216432C12C6CACD072E80629F
61495F42214A025927D15843D9F6726A1A2510204BA795E079EEE1F1AD771402
9ED5CFE9F5267F3C1EC29C81D37225BA4D0FC1196008D95FAF61BB5D4BE4A172
4BED4905ED1026E11D0102AABF64DAC7ADBE17368D5EC9C45C61E3396E36D07B
2E30A722035DBD5F54E6F22283CE288910CFF4F68CD43256940FE005F2B27C1E
51856BB9B56A311494A7BFD8BBFD2D3C8693101CF63225D875330D5CD0552E38
E705E9760A5F44FFE3BA8B78DCDC0B68C33D5A9529F3F61225AAB365FFD6D7BA
780C053F46645EFC338A320AA2C7842FCAED2E37D71DD140CF7CAB77EA3DA501
30FA80AD40764A6EE54FFCCB986EF157625C6F60495750A3CBFA3BDF96E2181D
81957E66024ECA9742A6420E84A167EC7EF8F34D00DFA3E569703DB44CEA8516
7F4306E2AFCB38B22002F47F0D6328DF1F330AB3C8B4BAEDD169152AB13DD205
83BAE92AAE1852052C0F64834F04B00FD71CCDAB50E872F4C83E2FB92116D9F5
823F6397379F9C2A8039174711455AA4A92ACF036D4225F17D2D9A41056C19CB
822B2B168861613578B08AD5F49AD51F99CA8AED43F675735E49BEACF6ABD093
D8886856122EC7710CE86FC09F877A9DAFD6DF54EF0B9C7CA8845EB93EC161BB
873BBB881882FF4E27A09DE85CDD3E09B7F089EA358E4EFDA630694ECDC13548
7CABC9B79D05B7CEA5E43C871C9D20899E09FCCEB19080BF8C136FEFEF562527
A53AF3FA0CCD56BB73B04F91649EFDD51972D8DBD2AB76CDEB17C66955EF5A50
97AB310AB008D0168E560D8E720D56ED10127591DE8D58862913DD95FC2C8FB8
2FAA10AE772C920086B8128D7A9F5374D2A001E25307847599B02E5AA93A263F
57D7C868517BB2345F9183993BC360FF154F0ABF75819202953BE3C439B301DA
7048B8DBDECB1A189EE5B9800D4B2375EF22DC45EFD04E2367F3C893DD08B398
23B551617D6E82F1960BF81334F2F843EBC3BDCDED9922744FB1B7069EC6275A
2ADE67B129869FCEBC46AD0BFCF919868692CF3CAB8F4791005A3074DCECCB14
5188910F12530C3FEE913674CAB1A3BDE88FDC60F4AA58633AAF98C2AB3A735B
AA5B2B386A0376A7305643B4D7C02512F2C2B56565EDEA4D5D7EC9C83DA5C7B9
55C3D33A479A0C955EC4CFEA3943E0EFB15A99C61EA81124B0F048C2F099F9A8
1E35C28BEBDFE23A20264BC807C38C2B648C6D3852CAA4063C184556691978E3
CA1E621ED2A65D6664E538405F3F8448471E8CD294ED3447A22E0EDF883AE970
074E5190E20062A274888CB4B7729B0C210A581EA7E4C450597863B1A314B107
A73EFCE648E04B237255C32619192AAD58CB6D31D03B3F06D38126D82781E897
5F9911B4A5BEA70C74409995D92414373E5A0FDB7CFBDD245EE50D904627ACCE
1B408F336EEB859237F9BA2A8127231EEBE74E7A1D47BAC34B28EE6CD7ED014E
3FE041AF80627CF8346974D85A27BDCF1C4A763E6DAAB2108805F0F8411BD086
4FF0E8607D3235E10BC1A3B28E54604FFE68980848E43B67BFDE0C429F62371A
EF89A4CCA57B96BAF811FD2F6BC8FFE32B0896C42C4958CEB65F505579200378
241ACD5044FDE2392FAEE33175244E4AA5EBC651F030888D93729B9D6F97C32D
A97170FAE3455B013E4F5BAA0678B9F1CF4487E0A932F4DF5761C3CB6756F710
7BA8C627AD76D246D851BE446ECD1CDF899F9B01DC53A54E0EB31291209E0AA4
D4041C47EC591BAE9EB335C7BE482D840F2F3C6AB9BCEDB0E21ACEBABDA058E9
E01C4A44A0F09F4AF97D1CDB9E92A5F725819940634F56FD5B93A39A3AE751C5
4B8C9E65C763CE11EEAB3309B10493FE55A52519E1C2301931256A74C5EECF61
804F0ECEA04FCE691D72C3D14BD8F9FBE2EB7F8B3160F837511999CA23310EB0
D23C1790BCA620CE6AE5EC6687BDAE6F616648EA1DC00CF1BC05948AF4A41AD6
2D6867CE44C304D17E3B69ADB4F82DAC59CFE39E1E2C3597126119C515829DB1
C7D9863946AC08872815BA21B9CC4DD5179BA7834ABF633075933DDFB908EFA2
234D464CBF7BD205227E7C4BF186C3EF296806703B9BEC9044448E75F17796B8
93D8CAED0C06736B354AB0C69A6865EA0069AA3BAE7B474CC32F0BE62460AECA
8847A59A21B00430903BBFD8F79F5634B87576B8D06B4D9F42B8728638D79F0D
BD7278ADBDE1220ED085D99C2DD1495A8E023E5399726EEC479F432FAB9C5698
EF756DD3103D8FCCC3A89D63EEDAB9DECBEAC369D7B4396243C1EF457F165B01
C4041DECD71A10ACCD691B21B492B650FF6163F6B0A9B6912AE9DDA77C47E12D
5ECBA0F84BE93AA3A1A8B44E150E10ACF0348BA8692F3ECFC4E7020890D202A8
F3CC7C9E5DDAB673357B58ED3D009EF95E3BC8213D47CE2D194F793D343FA364
86A781E6E3AB49D8622BEB34E4842422891E97D17659552355ABC7401D8BE9AD
895425E4FB33151E1C4ADA292F558EC5C4757457DE4E731A01BE2275F835BD00
8048C1DEA1E4AA1913CBCE127B752322F28BB597236EFF852321482EED9C8A90
707CCC5320785938D34665DECEB080E765BBDD1AD5204C62B9841D2E3CE5712B
1A11D0020EE872367E04C6563904F9D68DF8B4A390B842BC222AD49A6EED36FE
0FAA3C21B19DD993C34FDC4B834D927142BEB8CB643ABD7FC1FC6B4E4BDB8ECD
4D39B81F300EF9393AAE8EB7B45679BFA992CA2D89E505597B7CCCE535A42025
82C1EAB8C281065D83F0013E52B5317E174FDE578E19432ADC41EE6D9CE2ADEE
4152D34AD71ACEE89521F5B6FAF8031BAC6B3350DF3C5E5B240F23BB4E005DAF
BCA1C93AA92E42750B279E794BBB15899810048DB4816A16905F76C2F9071A4B
F44CC9265F597E5F9892705B3663837BCC688DA6B693B919CF1DD10E4868F3EA
BEDF4CB292BBFF9BAED9C378F3DB52ED285517738826E365EA2EF88F67DC2C59
6BBE7CA35D66AE3F1132B047E2EA8B32BEFEACF0C2818EAC086C3384C2FF4704
412FD846605A5E886C85C652AF08571B02F307F9D64467FEDAFEF1ECCD9F0BB6
1E9B4CD493D7EB5D349175BD8BDC2F8775EBC8974610FF14A4B1C067DE622C6E
C2A9F7DB8BC5059F4165D88A18E87F493FA6CEAE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: PLSans10-Bold
%!PS-AdobeFont-1.0: PLSans10-Bold 1.11
%%CreationDate: Thu Apr 13 18:00:00 2000
%%VMusage: 1024 30467
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997
% ADL: 694 194 0
%%EndComments
FontDirectory/PLSans10-Bold known{/PLSans10-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 13 dict dup begin
/version(1.11)readonly def
/Notice(Copyright (C) 1997 American Mathematical Society. All Rights Reserved. Adaptacja PL JMN 1997)readonly def
/FullName(PLSans10-Bold)readonly def
/FamilyName(PLSans10)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 83 def
end readonly def
/FontName /PLSans10-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-82 -261 1110 918}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E40F36AEF0A4DD20E57977ACD8523F67E589FD
FAAFC0948FE54BD2B7D2D25388C2FE84674304A7741B19D06C9BC6BC7AB76962
11E27719B4F957989E239EC1B20015EB307A6070F16FBB31271D502FBEF6ADD9
EF9FA27034E0B7D1F9EB8B0555ECF08F81B0F047872CDCEEF9905E2A3B49D1FB
5FB6C7378A19D918CBC10A665373827CDD917874888C1364D2F0B9FEA7CFED8A
2F276BE31F1F359F1D9D3D87196C4A4BFF5B485589C29F4A916FFBB524E416E6
792BC5DA80EC276A6124B43EF1828D19248CF4F66070E4BE2970E44B26580CDB
36DDBD32843362997A6CE741A5A6B936DE3878448566A3D3E3760DDA82D79C68
90DA6A8E976A693A093E0EF7EF23883B25F39F5A22CD2F331B63E662A1AF7818
C1149CD13D4B8D7191AEDBAB138014A4F744CA38972BCCE5690FC7C5FFEF0A7F
175BBC50F3077109A7EB314C54A325CDF9C744CFC72D813303F38EA1D7463ED6
9F276EBAE0898218920EA78FFC5F0A7CDAE51158AF491169D5076D3C0BFC32DD
3D646945B77CD65C9473CD152669280A39586639D8E1C418E04748B104D2FD8D
533BAF37BF555A0E2E8EA5610ED0DE91985A236F4AACCEE49E15DCFC537A774E
8F036EA3BD1FB35B47DC96A8F6879E2135374C70D79D19EA9EFDD4781B535CA6
FDE68672554A6F9B04AF1E6B513BF95DD0438E60940A1A7B10FF68354C043DFE
6F770C564FD03120D3CEDD27EE4E5DC2C575FCA78855CEBB99362B625BE41A41
B4E83E09AD7127BF672DA7C5F38BB321849C266CB622F9F7DD740A0E8A1AAAEF
6F9D84C76ACDF3022F452D00E6C3F486108289E9F1B5E29E5FED42C2A0A38A59
87ACF479E0B9667825CFE64B843C8036BFB4D379696E73B84B015B308EFB52EB
7278A4121B118B0D0451FA5C0CF712548B9D164B87B1EA7FB9DEA40FECA1476A
77A097279320FE11B2A16ADF4F8C859062D7505E555EC90AD1EF1B452C0E871C
C17491B70CE0B7FD64FAF6A044B8162BA39D78510AC4FE7CFC716E9B61193EC8
1C5DB885112AF8ECDD5D9D08AFBDD7A3F7B5436480D434413B7EBDFEEC209720
BB13E75730C6BC6C00338452CEBB56C8A0191E7C77D3605C7BF520C8721763D5
3AEA49AE05CB0D7A5CDBDD7390101CC6A38665F8A220C24548E2DED71B72A48F
6F975802F593E26B7DFADA15E91BE21CC58E63FDD81B1CB6FC331F8FB67C9AED
9400082942A5C533BBC5342091744EB5AF7CF0ED0665F1BE1A2F5D383DC3DE34
556B9849C8602C5BDAC325B0B1F1862BDD677B807FDB680BAB3ADAAE78512210
C4E84029D93F915981011ACD2D6EB21394C6E68DC7145A17B622D4C9687386E9
6FE4CD02ECA91D8F984E262FDBA85AFC9DF867A601597F9DA679B83F9EBBBAD4
BF2AA68CBE2F22356938E8367A8ADC71ABE049F1F25FDED5170BF6156B794646
5D1D51CF46A743A9FE7D4393C65279014BDE76C22106CA436E1A9F545257C1E0
913B055F59EC1F38BCEB585E1069E869DAF7341F84B0904072D4A9A1763C408D
05A5BE1B840686DD57424FD85B8DD7C45ABE9B44A70BB0025C1F8893AB9CAD62
2BCAC0A827E046BB190D8ED39670A75804C1612D317D76FBEBA106D7F7590D96
D0908022518338243E2958069A906E35BE55B81D6C955061B4CF384887BA2A9A
504B2A0A92D771B54A0ADEC289ECF7C91A46344E619A84577E90EDDEEE5BDA3F
3F384215CE8E236E7B83CA8B33865EE0E04BECB5E1A837A3ACFBBA005CD72A37
72B49953986F88FADC94A77124E291CB27BF10E4EFC417FDB11F8DDF38CF6194
AF036EB3090451311D2E0315E7E138ABA231F0FEE5F90D5AA9E862E30E05197A
A0700E5D3AA9E79CB2AC7952170CC7C567F2EE75F60E6A0F4E70BDCFB2CD789D
A845978767D5F7676BB3F2DF243D26555A9CB513DC4ABD7C21981C219CE1079A
52652F9BED468D216C1112E0386814A3975064E4BABFA90A86642B0F8C37774D
53CC63B57F7C9DBA00BFC2345DF34AAA57C2F6CF86C6AAF1D31DB074CA7D4CC0
3956554B862FFACBD7062004232D5EAC08DF59E141721760C6D0D1418368BBAC
261C1CE08A4D8635BC8BAFB4BEE40DA110ADA3FF7F79157204E37A4CBBCB1EC0
98442E00ECCDEDF261F9F4E5DF33D55934F684959CFC584B69861B2DAB969055
85E9DFA2D540029F41C240C2BB7E384F38E48F62EBC65E3AB23E7E614E11A001
FEA773B90E88EA16A8B7F95237670A79B04D56A777EC0683B53F47D772B3A60F
AB4F76BE1C99DFE0E400838F718712D374D9AED7F0A85A6C455ADEB711A5D5D4
89D543B8A20F0278602EA080B1F274F914003DFAC638272F8363B436C5B0F17F
CD990619738AF9DE5EBC1C51C6B486D3750307647DCD9AAEB74C7B33F3109B5E
FF068D6189EC26A07D761189F003DD3DA40F4C615A21E140A5152FAD0A33A0B5
67C6569BE4634DAF1DF9B9024F64098C8870C26DEF95A3F30108F42659763B93
E1AADC2BB20892B2E4010CBBB59EE0981B0F6D2340493803D47C96A2745580ED
C957AC4291730A840D562167C50A07390FD01FC6CE69EEDE25A0C58C9A0515B8
AD23DF0A82CC481EAD70AADE0E2676CAC461F8B93A7464D4753A9319354E3E4F
A9C56227FB920B7A5C86A375AEA1A0FDAA7D46CF5216ADCB21A84A440E1E28EB
8F78745A02DE46B994E5768BCBD4A5C095FC9686AEA33CBBC14A90191909AFAE
A9BDCE7871DD01A4598A0C9C494449C69B415B8A30C5BCC1A675A61B6DD71F93
F498F4E720FC9819E6C6AE3A34049A9895F9FB61694AEA08DA49E20BC42CB63A
AD25E7467D5C059989302773F0C3AF78609DFD6173CB81DBA26B3AB8263DDF75
579CD24CCB5AED2B249F694D8128BDB5BFE475E71C5C9D4CC24D0157344592A8
955D5540308E63E48FD31D35C7E933DEC5A069448B4AE94E7286EB21ADFCB876
4401AD3253C2A7A123D97F69AEFDD75AFC0A724E2429C392990722142454EEFF
3B988D41D1A114387DA8829DF67E37A242C5E0FDF6AFCEBB0621A8ADE7529908
3F300EBE5FFB17D309940D9D5A1BDF081F4D75D5C457F7022EA1DB12DE17BE02
EF0F30CE1CD66AD0F3BD5CB2567033CCAA3EFA2BF0762C95531992AD7941AE16
EF07E5231112BA37850D2AE40B85B578AE7262FC845FCCF787429F4A3995CE61
372C2D9A030A92CEC7F3F1B26FF6E2D1797C38DF30977D82BED7274A1E87749F
6B1B05B6CD5047BF5B6F6AD4179F8856BB81184F4256994B5005D654E490867B
BC71CC9509265F6B11B12B80D093764F2321E3965143047BCC5CCBC4A7C3D0AD
578D0B0451F2767A6BF81BDCC37F35F29CF3FAEECABD5306CE4B824F02383FA8
C95721662E0F626F85F24627E9A538A15DE3F85B84DEF373AAE4A4752F9BDE24
042B95B58726FCFA82AA283FBD061A42B6D057F6EC11BCE2E3240C28ABFC9828
DDF70BB109DEEB5B7798D02A7B19DB12BA18F0CE103B2A556525F2B477CB589E
E762CDCC7E4CB9E33A4334F9A0DC2BBED4E3DA2308E321283534F91CFE4A015C
D40CE908BE2CE1ACE2FF1754D70709127DE32FE92176B964274E37B4531F2FC5
ECECDD6997E24A67EB5E0602207597EF34D4BB082EFB52C3308099A680CB9329
8167CE1B3F322C574D062226B47B9CB5B4647CAD084A51EDF2A7B371528604FA
E8139078F1738FDB78BE9E806E91506AADC53D00E01279397F08669A63BE8871
5C699C1A7E489AC8C8299532C59403567379760EF3C4CFBB9A14C921B42C9F91
F41881A36A6DE3DCB6855B65AAA49F1056887D508BCF6743C363A295839A2006
DECA4E4B3F7DFF3DA3EAF20FD08453F7D3A3463ABF03C400D46D35CDB53BA93A
15B889E023A11B6C2A35FAC32CE57D6B2187BCF9798C2553547A91E2D9396E6A
E8053F975EA58A176570BCB441E9B7450D94C819D594746B67554206ADA08992
CBDEF437DADFC8170187CDF780CAF45A8E0C2D394A26B50F8BEB20F208D2B653
B93AF76866E38F6F5B4953BB6790B407C8BD0824DC5A11D6953BF862C76DFFEE
CFC383C358898867589F8898FD812299847E326C3AAB962CB9E16A240013CDB4
F38DF570E3B1E3A6A53326E328A8F446C41510A842D5DFFA8223B03F6F4DD488
E3A1C063B64CC59AC6878017A136D930C9F1AF4895F38A85CDA6516BC365F115
3E8D8C0FB114A5EF5F298EEC2939E007BD78B78ABEFE867EB4E3E29C51B8547A
D8B6B56E6D899A4F43A8D839B656022769E77678A85168DC1B69BBA87EDCDF69
18D106959EBBD9B878323A6A0C38B7DC25D78E2AA67E42D9AAA4535C5D6DC4D8
C0540B98D5CD9EF55CB21F670A4CAED3CA557EB3AD75BE428A088081FF6E74AB
D377143436F29CA63D63D277E51ABC09007E837DDD8ED3CDCB510C9025DBE8A7
DBD18A8B9670262E7CEEC3588B74A13E1486F728A8F095450B9593BD1A98E13B
7CE215741A03B79E4C26DF3A514E97F57A397BEA4315C09652254E780916102F
48215D141BBD5B7BBCABE807EC0EFD4E75538F5B65F112B25EDD3DF01B7259F3
4C2EADE01F9DD2F4D47B2711E4A2BECCA53D512AC291F329C433B95DC692076C
21ED3E7E6E46830BAC30310D17FB6EA70BFF4BF6ABAA08B028C34DAFA20542DE
BFE49BE6CCFDBB3B22563DA5444B0CC6968A5DF25C40D4F5811A2266719ADFA0
211D54A884D156B8CCC78EE6DC3A456312E21E9E93B547827F1F954DEF9B6989
8835D429FCDE70820728A6B2126EC9DB90572CE7B415BC37EAA2380EF01D6B4F
22817A42AEEEDCFE816B139583756EC33C38FC0E5095920E1C456695B1094A79
A398B527F64B531816E610CD9B81E7EC1F49470E52962DBC6E0B8DF56E0211FE
19DDA7BD4F213BEB3D5A62C14C63869FB6C444112DFEB92A96BF122D9DED084E
9229D20DA98FD84AD4180E5AD998B19D95D401F7B92889CBA660D30247D56A2F
6476C93486D9D582698A035C7146A8F03E9F0C0273BFCDFF734FCBE78D3BFE95
27BFAA28C57247AD56BC1CF8EE46D2822A1277BC3E5C2B0E09F52B3EA3DDC847
BE26AEB9FFB6CDFFD50CD9C64AA5DD33286440650E3EE398370BA64961242B4B
1983A5D0102DF433FB5BB838CD40F3E4470781611F14B3C1994E73091FAAF8B9
C816445D5CD7AD3F1BD980020AF5C4C3386E2238D80441858158B5EFD1C3A708
08A6536AFDE20C6CF8B8C442B3A4E47CB0ED398A8BD624F46FE66E6C7FA791D3
BB57DF805CACB6B02F00A1DFF0E2436C536FF516465C89EA7BC4D91FFBEC2B9F
61539AEE81641F410E0AC1968D5B3171CC66CAD261425D2B1F3C7329EA560FD7
62D637C5D2FA3374855BAFE78D8C7B987FDF192686600A3DFE1A7AB2695ECF4A
CCAF59F7C7CE9034FA8285C748E073B6689AE4F67D4D1DA65FCD4A80AE3EB5AC
A3079A084AB1370737E93C4544486E8A34B624436D5F7533D2D358717DA4B341
89E5C5ABCFEC1BEC72032A3474F5E7C654C4C9D0838E5FB2896898C68CCC37B6
5E3623EE5740E351D327EC3C8D02F98C59058162511114777843A59C8FD3C740
65CD3B7EE15C1C7E0BF8187C0D509D7BB71922BC94AF75EF3E0CB1AF75DAD2E0
48510682430666241B91272B59E9E5F5E7C5F6833BDA3729B6AAEACDA2C46A15
74A39BAD6A75D077A7C1934372610A0DB7D8C58F47A495101D259B6F6D62C193
EC19D955B06B3868CB7516B68BB05AE61CA039A6C81BA7005D1D6C9611268187
6D70CC7BF757846B3D2246EBC69353B01733EE45FB5CE7249CE22DEF9FE441E4
4440AAA52197EBEEEBEF5B6FF201BCCBFB39FD3B9D597087165B75F7D7983576
4AEC9D240CD03FFEDB667B3F110F1A72B821CF55141D5A0856A74E38E7E0B4A4
E0D25FCDDA4B1CE79CF6D8C6B93FB6D376F1A216DDC71A1A314E714CB46851E3
F4C2CB16950515E12BB07D1E9DB515F32C40F76F42832EBEAD0D995E3EBB14C6
AD0EA3E7B11C4886A5F0773B62C1B566B6309357F9E7B269679878839FCBD27B
793DC96FCC17E69A8CAB7FDF04217879004B4C80B92B8A90DF3A7DA460960B66
11949DBFC44B1F9A6CC480F94D3C8A3A177B1C4E7D26DC165098AD315B0507E2
042E248A874E81E87F6BDF2F0E60431545ED0AEBD40188F7153A923669B8F372
A1849BB627D3975C4EECB7917CDCB4B1FF14C23925621C3554EC25B7315B06CE
2D47E71CF0BED5603334949B39DEEC757949BBEA1CFCAB7DC4B35E61D306AA7C
56E9E5488746BEC4C215EE6CFFC976EFE89D5A0BE95229CEAD3E92DE75FE66DA
E08BE419E30B7B34A974C55DB8790B264E1DD68C806D52A3B40E01B66B650691
D7D823C22BF9658C3725BE1A3F3BC068502A39384AE809D7DDDBC1F297C03365
AC11CF9710569B23ABE57112997DC5F6E1C4FE65FDE31154A343E77585130514
E0996D2904775F230C30A1E368F0D728E04994
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (kakzad.dvi)
@start /Fa 196[20 59[{ encplmi ReEncodeFont }1 66.4176
/PLMathItalic8-Italic rf /Fb 12[35 55[31 16[24 7[31 35
38[31 37 1[51 1[39 27 28 28 1[39 35 39 59 20 37 22 20
1[35 1[31 39 31 39 35 16[48 12[51 8[20 4[35 35 35 35
3[20 24 20 2[27 27 40[{ encplrm ReEncodeFont }38 66.4176
/PLRoman8-Regular rf /Fc 252[32 3[{ encplms ReEncodeFont }1
49.8132 /PLMathSymbols6-Italic rf /Fd 199[44 44 44 1[44
44 44 50[{ encpltt ReEncodeFont }6 83.022 /PLTypewriter10-Regular
rf /Fe 145[41 4[23 105[{ encplmi ReEncodeFont }2 58.1154
/PLMathItalic7-Italic rf /Ff 198[33 6[33 33 49[{ encplrm ReEncodeFont }
3 58.1154 /PLRoman7-Regular rf /Fg 83[65 172[{ encplms ReEncodeFont }1
83.022 /PLMathSymbols10-Italic rf /Fh 78[53 6[45 47[60
71 6[55 6[71 41 37 3[61 75 60 1[65 9[139 6[92 80[{
 encplrm ReEncodeFont }14 119.552 /PLRoman12-Bold rf
/Fi 252[34 3[{ encplms ReEncodeFont }1 58.1154 /PLMathSymbols7-Italic
rf /Fj 145[50 2[43 1[29 45[23 23 58[{ encplmi ReEncodeFont }5
83.022 /PLMathItalic10-Italic rf /Fk 12[42 55[37 9[33
6[28 3[37 3[37 42 38[37 44 1[60 44 46 32 33 33 1[46 42
46 69 23 44 25 23 46 42 1[37 46 37 46 42 11[62 4[57 2[76
1[65 6[63 60 59 7[23 4[42 42 2[42 42 42 23 28 23 2[32
32 2[69 37[{ encplrm ReEncodeFont }49 83.022 /PLRoman10-Regular
rf /Fl 94[42 45[34 35 2[42 47 68 21 1[25 4[38 1[38 1[42
41[42 42 3[42 42 42 1[25 30 45[{ encplit ReEncodeFont }18
83.022 /PLRoman10-Italic rf /Fm 12[48 71[53 4[44 3[42
39[42 50 1[69 1[53 37 38 39 1[53 48 53 80 1[50 1[27 1[48
1[44 53 1[53 46 10[72 8[91 3[36 4[73 1[68 7[27 6[48 48
1[48 1[27 1[27 44[{ encplrm ReEncodeFont }33 83.022 /PLRoman10-Bold
rf /Fn 134[72 3[80 58 60 4[80 2[76 1[37 3[73 80 2[75
6[96 14[110 9[105 6[44 58[{ encplrm ReEncodeFont }14
143.462 /PLSans10-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop -94 -66 a Fn(Zadanie:)54 b(KAK)-94
117 y(Kaktusy)3287 153 y @beginspecial 98 @llx 530 @lly
441 @urx 806 @ury 566 @rhi @setspecial
%%BeginDocument: OIlogo.eps
%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 98 530 441 806 
%%LanguageLevel: 2
%%Creator: CorelDRAW X5
%%Title: ilocamp2_strzalka.eps
%%CreationDate: Sun May 15 14:20:36 2011
%%DocumentProcessColors: Cyan Magenta Yellow Black 
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
/AutoFlatness false def
/AutoSteps 0 def
/CMYKMarks true def
/DocPsLevel 2 def
%Build: CorelDRAW X5 Version 15.2.0.661
/EpsFile true def
%%BeginResource: procset wCorel15Dict 15.0 0
/wCorel15Dict 300 dict def wCorel15Dict begin
%----------------------------------------------------------------------------
% Core Corel PostScript prolog functions
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Reduced syntax procedures
%----------------------------------------------------------------------------

/bd {bind def} bind def      				% bind proc names to current proc reference in the dict and define
/ld {load def} bd            				% load operator and define
/xd {exch def} bd            				% exchange operators on stack and define
/rp { {pop} repeat } bd      				% pop entries off stack iNumToPop rp
/dexec { exch begin cvx exec end } bd	% executes procedure from the dictionary on stack
/@cp /closepath ld
/@gs /gsave ld
/@gr /grestore ld
/@np /newpath ld
/Tl /translate ld
/$sv 0 def                   				% graphic state save snapshots
/@sv {/$sv save def}bd
/@rs {$sv restore}bd

/spg /showpage ld
/showpage {} bd

currentscreen                	% establish document's default halftone screen
/@dsp xd                     	% default spot func
/$dsp /@dsp def              	% default spot func name
/$dsa xd                     	% default screen angle
/$dsf xd                     	% default screen frequency function
/$sdf false def              	% FLAG: non-default screen for fill (true)
/$SDF false def              	% FLAG: non-default screen for stroke (true)
/$Scra 0 def                 	% screen adjustment (-90 if printing landscape)

/SetScr /setscreen ld					% sub in out own setscreen operator

/@ss                         	% Set Screen angle account for adjustment
{                            	% frequency angle proc
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop              	%
 } if                        	%
 exch $Scra add exch load    	% frequency angle+$Scra {proc}
 SetScr                   		%
} bd                         	%

/SeparationMode where					% init separatin mode
{ pop }{ /SeparationMode /Composite def } ifelse

/SeparationPlateName where		% init separation plate name
{ pop }{ /SeparationPlateName null def } ifelse

/SeparateInColor where				% init separtion in color flag
{ pop }{ /SeparateInColor false def	} ifelse


/EpsFile where								% are we an EPS file
{pop}
{/EpsFile false def} ifelse

/FillOverprint false def    % Fill overprint flag
/$fil 0 def                 % Fill type: 0:solid 1:pattern 2:fountain 3:PS 4:fountain shfill

/OutlineOverprint 0 def     % Outline overprint flag
/$PF false def              % pattern stroke flag(0 no pattern, 1 pattern)

/$bkg false def             % imaging background only flag
/CurrentOverprint false def % overprint flag

matrix currentmatrix        % establish current matrix
/$ctm xd                    % initial general transfo matrix

/$ptm matrix def            % pen stroking matrix(defaults identity)
/$ttm matrix def            % text transfo matrix(Corel extensions)
/$stm matrix def            % "save" matrix in extended text(Corel extensions)

/$ffpnt true def						% flag for painting fountain strips (overprint prob)

%----------------------------------------------------------------------------
% Corel re-encoding vector
%----------------------------------------------------------------------------
/CorelDrawReencodeVect [
16#0/grave 16#5/breve 16#6/dotaccent 16#8/ring 16#A/hungarumlaut 16#B/ogonek 16#C/caron
16#D/dotlessi 16#27/quotesingle 16#60/grave 16#7C/bar 16#80/Euro
16#82/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
16#88/circumflex/perthousand/Scaron/guilsinglleft/OE
16#91/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
16#98/tilde/trademark/scaron/guilsinglright/oe
16#9F/Ydieresis
16#A1/exclamdown/cent/sterling/currency/yen/brokenbar/section
16#a8/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/minus/registered/macron
16#b0/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
16#b8/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
16#c0/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
16#c8/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
16#d0/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
16#d8/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
16#e0/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
16#e8/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
16#f0/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
16#f8/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

%----------------------------------------------------------------------------
% Proc:  get_ps_level
% Stack: get_ps_level pslevel
% Desc:  returns level of PS interpreter environemnt
%----------------------------------------------------------------------------
/get_ps_level
	/languagelevel where
	{
		pop systemdict /languagelevel get exec
	}
	{
		1
	} ifelse
def

%----------------------------------------------------------------------------
% Level 2 or 3 flag
%----------------------------------------------------------------------------
/Level2 get_ps_level 2 ge def

%----------------------------------------------------------------------------
% Level 3 flag
%----------------------------------------------------------------------------
/Level3 get_ps_level 3 ge def

%----------------------------------------------------------------------------
% Flag to indicate we are processed by AdobeDistiller
%----------------------------------------------------------------------------
/AdobeDistiller
  /product where
  {
    pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are are being separated in-RIP (not by Distiller!)
%----------------------------------------------------------------------------
/InRipSeparation
  AdobeDistiller
  {
    false										% we are being distilled by Adobe Distiller, not RIP
  }
  {
    Level2									% in-RIP separations allowed for Level2 and higher
    {
      currentpagedevice/Separations 2 copy known		% check currentpage dict - Separations should be set true
      {
        get
      }
      {
        pop pop false
      }ifelse
    }
    {
     false
    }ifelse
  }	ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate we are being separated (does not matter by which method)
%----------------------------------------------------------------------------
/ColorSeparation
  /LumSepsDict where            % see if we're being separated by TrapWise or PressWise
  {
    pop                         % lose the dictionary
    false                       % return false
  }
  {
    /AldusSepsDict where        % they might also use this one (Mac vs. PC?)
    {
      pop                       % lose the dictionary
      false                     % return false
    }
    {                           % we're not being separated by TrapWise or PressWise, use a generic method
      InRipSeparation						% is in-RIP (Level2 style) separation
      {
        true
      }
      {
        % is Level 1 style separation, through overloaded setcmykcolor currentcmykcolor operators
        % try to set pure Cyan, Magenta, Yellow and Black colors and see whether system knock one of the colors

        1 0 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 1 0 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 1 0 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        0 0 0 1 gsave setcmykcolor currentcmykcolor grestore add add add 0 ne
        and and and not
      }ifelse
    }ifelse
  }ifelse
def

%----------------------------------------------------------------------------
% Flag to indicate that PS device has color capabilities
%----------------------------------------------------------------------------
/IsColorDevice
	/deviceinfo where
	{
		pop deviceinfo /Colors known
		{
			deviceinfo /Colors get exec 1 gt
		}
		{
			false
		}ifelse
	}
	{
		/statusdict where
		{
			pop statusdict /processcolors known
			{
				statusdict /processcolors get exec 1 gt
			}
			{
				false
			}ifelse
		}
		{
			false
		}ifelse
	} ifelse
def

%----------------------------------------------------------------------------
% Proc:		get_simulate_devicen
% Stack:	--> get_simulate_devicen --> bool
%					bool true - smiluate DeviceN through overprinting on Level 2
% Desc:		determines if we should simulate DeviceN colors through overprints thus
%					preserving spot colors on Level 2 devices in composite mode
%----------------------------------------------------------------------------
/get_simulate_devicen
  get_ps_level 2 eq							% we simulate DeviceN only on Level2
  {
    {
			SeparationMode /OnHost ne								% no DeviceN simulation for on-host separations mode
			InRipSeparation AdobeDistiller or and		% do it for in-RIP separation or distilling
    } bind
  }
  {
    false
  }ifelse
def

%----------------------------------------------------------------------------
%
%	Color objects definition section
%
%----------------------------------------------------------------------------

% Default document colorspaces
/DocGrayScaleSpace [/DeviceGray] def
/DocRgbSpace [/DeviceRGB] def
/DocCmykSpace [/DeviceCMYK] def

/DocLabSpace
[
	/CIEBasedABC
	<<
	/BlackPoint [0 0 0]
	/WhitePoint [ 0.9637  1.0000  0.8241 ]
	/RangeABC [0 100 -128 127 -128 127]
	/DecodeABC [{16 add 116 div} bind {500 div} bind {200 div} bind]
	/MatrixABC [1 1 1 1 0 0 0 0 -1]
	/DecodeLMN
	[
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.9637 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  1.0000 mul }bind 
		{dup 0.206897 ge{dup dup mul mul}{0.137931 sub 0.128419 mul} ifelse  0.8241 mul }bind 
	]
	>>
] def

%----------------------------------------------------------------------------
% Proc:		validate_cie_colorspace_whitepoint
% Stack: 	colorspacedict --> validate_cie_colorspace_whitepoint --> colorspacedict
% Desc: 	validates CIE colorspace white point, the Yw parameter must be 1.0
%----------------------------------------------------------------------------
/validate_cie_colorspace_whitepoint
{
	load dup aload pop
	/WhitePoint get
	1 1.0 put pop
} bd

%----------------------------------------------------------------------------
% Proc:		set_cie_colorspaces
% Stack: 	none
% Desc: 	sets document color spaces to the CIE CSA, if exist
%----------------------------------------------------------------------------
/set_cie_colorspaces
{
	/DocGrayScaleSpaceCIE where
	{
		pop
		/DocGrayScaleSpaceCIE validate_cie_colorspace_whitepoint /DocGrayScaleSpace xd
		
		% modify CIEBasedA definition for /DecodeA key written by ICM
		% it is an array while should be a procedure, PS interpreters will fail otherwise
		DocGrayScaleSpace aload pop
		begin pop
			/DecodeA where
			{
				pop
				DecodeA type /arraytype eq
				{
					DecodeA aload pop
					/DecodeA exch def			
				}if
			}if
		end
	}if

	/DocRgbSpaceCIE where
	{	
		pop
		/DocRgbSpaceCIE validate_cie_colorspace_whitepoint /DocRgbSpace xd
	}if

	/DocCmykSpaceCIE where
	{
		pop
		/DocCmykSpaceCIE validate_cie_colorspace_whitepoint /DocCmykSpace xd
	}if
} bd

%----------------------------------------------------------------------------
% Proc:		set_rendering_intent
% Stack: 	rendering_intent set_rendering_intent
%			rendering_intent - either /Perceptual, /AbsoluteColorimetric,
%			/RelativeColormetric or /Saturation
% Desc: 	sets prefered rendring intent to use in CRD on device
%----------------------------------------------------------------------------
/set_rendering_intent
{
	Level3
	{
		findcolorrendering
		{
			% CRD found for requested rendering intent and device settings
			/ColorRendering findresource setcolorrendering 
		}
		{
			% CRD not found for requested rendering intent
			dup /DefaultColorRendering eq
			{ 
				pop
			}
			{
				/ColorRendering findresource setcolorrendering 
			}
		}ifelse 
	}
	{
		pop
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:	findcmykcustomcolor
% Stack: 	c m y k name --> findcmykcustomcolor --> array
%				c - cyan color component
%				m - magenta color component
%				y - yellow color component
%				k - black color component
%				(name) - spot color name
% Desc: 	finds spot color object defined by the name, if no fyndcmykcutomcolor
%				is defined on the system  just stores alternative CMYK values and name
%				in the array to be used by setcustomcolor procedure
%----------------------------------------------------------------------------
/findcmykcustomcolor where
{
  pop
}
{
  /findcmykcustomcolor
  {
    5 array astore
  } def
} ifelse

%----------------------------------------------------------------------------
% Proc:	setcustomcolor
% Stack: 	array tint --> setcustomcolor
%				array - color array returned by findcmykcustomcolor
%				tint - color component value
% Desc: 	sets custom ink ( spot ) color or its alternative CMYK representation
%				if spot color is not available on the system (printer/RIP)
%----------------------------------------------------------------------------
/setcustomcolor where
SeparationMode /OnHost ne and
{
  pop
}
{
	%----------------------------------------------------------------------------
	% Stack: 	tint cyan magenta yellow black tint_cmyk_color cyan1 magenta1 yellow1 black1
	% Desc: 	tint color
	%----------------------------------------------------------------------------
	/tint_cmyk_color
	{
		 5 -1 roll
		 dup 1 ge                    	% see if tint >= 1
		 {pop}                       	% if it is, pop it
		 {                           	% otherwise, multiply all 4 components
			4
			{
				dup                   	% duplicate the tint
				6 -1 roll              	% get next component
				mul                    	% multiply with current tint
				exch                    % tint back on top
			}repeat
			pop                        	% no need for tint anymore
		 } ifelse
	} bd  
  
	%----------------------------------------------------------------------------
	% Stack: 	c m y k setprocesscolor_5 -
	% Desc: 	sets process color without doing any separations
	%			we assume color has been preseparated
	%----------------------------------------------------------------------------
	/setprocesscolor_5
	{
		SepMode_5 0 eq              % Check if not performing color seps.
		{
			SetCmyk_5               % set CMYK color
		}
		{
			SepsColor not         	% separating in grayscale
   			{
				4 1 roll pop pop pop	% leave just K component on stack
				1 exch sub SetGry		%	set gray component		
			}
			{
				SetCmyk_5               % set CMYK color for separations in color
			}ifelse
		}ifelse
	} bd	
  
	/setcustomcolor
	{
  		exch
    	aload pop
    	SepMode_5 0 eq
    	{
     		pop
     		tint_cmyk_color
     		setprocesscolor_5
    	}
    	{
     		CurrentInkName_5 eq
     		{
      			4 index
     		}
     		{
      			0
     		}ifelse
     		6 1 roll
     		5 rp
     		1 sub neg SetGry
    	}ifelse
   } bd 

} ifelse

%----------------------------------------------------------------------------
% Proc:		convert_rgb_to_cmyk
% Stack: 	r g b ConvDict convert_rgb_to_cmyk c m y k
%					r - red
%					g - green
%					b - blue
%					ConvDict - conversion dictionary with RGB-CMYK look up table (LUT)
%					c - cyan
%					m - magenta
%					y - yellow
%					k - black
% Desc: 	converts rgb color values to cmyk color values using either RGB-to-CMYK
%					look up table	if supplied, or primitive conversion formulae
%----------------------------------------------------------------------------
/convert_rgb_to_cmyk
{
 dup type /dicttype eq
 {
 }
 {
  3                         %
  {                         % r g b
    1 exch sub              % r g 1-b       	% y = 1 - b
    3 1 roll                % y r g
  } repeat                  % c m y
  3 copy                    % c m y c m y
  min min                   % c m y min(c,m,y)     	% K=min(c,m,y)
  3                         %
  {                         % c m y K
    dup 5 -1 roll           % m y K K c
    sub neg                 % m y K c-K     	% C = c - K
    exch                    % m y C K
  } repeat                  % C M Y K
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		colorspace safe_setcolorspace
% Stack: 	colorspace --> safe_setcolorspace -->
% 				colorspace colorspace to set
% Desc: 	set colorspace, unless it is already current colorspace
%----------------------------------------------------------------------------
/safe_setcolorspace
{
  dup
  currentcolorspace eq
  {
    pop
  }
  {
    setcolorspace

  }ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		safe_setoverprint
% Stack:	overprintflag safe_setoverprint
%					overprintflag - boolean or integer
% Desc:		sets current color performing separations if necessary
%----------------------------------------------------------------------------
/safe_setoverprint
{
	dup type /booleantype eq			% boolean flag is passed
  {
    dup
    currentoverprint ne
    {
			setoverprint
		}
    {
			pop
		}
    ifelse
  }
  {															% integer flag is passed
		1 eq setoverprint
	}
  ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_cmyk_channel_name
% Stack: 	channelName --> is_cmyk_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to cmyk color
%----------------------------------------------------------------------------
/is_cmyk_channel_name
{
	/channel_name xd

	channel_name /Cyan eq
	channel_name /Magenta eq or
	channel_name /Yellow eq or
	channel_name /Black eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_rgb_channel_name
% Stack: 	channelName --> is_rgb_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to RGB color
%----------------------------------------------------------------------------
/is_rgb_channel_name
{
	/channel_name xd

	channel_name /Red eq
	channel_name /Green eq or
	channel_name /Blue eq or
	{
		true		
	}
	{
		false
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		is_spot_channel_name
% Stack: 	channelName --> is_spot_channel_name --> bool
%			channelName - name of the channel
% Desc: 	determines whether channel name on stack belong to spot color
%----------------------------------------------------------------------------
/is_spot_channel_name
{
	/channel_name xd

	channel_name is_cmyk_channel_name
	channel_name is_rgb_channel_name or
	channel_name /Gray eq or
	{
		false		
	}
	{
		true
	}ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		spot_tint_transform_proc
% Stack: 	tint  [ alternativeColors ] alternativeSpace --> spot_tint_transform_proc -- > tinted spot color in alternative color space
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			[ alternative color values ] - spot color values in alternative color space
%			tint - tint of spot color [ 0.. 1.0]
% Desc: 	applies tint to spot ink's alternative color space values
%----------------------------------------------------------------------------
/spot_tint_transform_proc
{
	/alternativeSpace xd
	/alternativeColors xd
	/tint xd
	
	alternativeSpace DocLabSpace eq
	{
		/mixMethod /Additive def
		/altSpaceNumChannels 3 def
	}
	{
	  alternativeSpace DocCmykSpace eq
	  {
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
	  }
	  {
		alternativeSpace DocRgbSpace eq
		{
		  /mixMethod /Additive def
		  /altSpaceNumChannels 3 def
		}
		{
		  alternativeSpace DocGrayScaleSpace eq
		  {
			/mixMethod /Additive def
			/altSpaceNumChannels 1 def
		  } if
		} ifelse
	  }ifelse
	}ifelse

  	% apply tint on spot's alt color values

  	alternativeSpace DocLabSpace eq
	{
		% for LAB tint just colorant values, leave lightness alone
		alternativeColors aload pop
		tint mul 3 1 roll
		tint mul 3 1 roll
		dup 100 exch sub 1 tint sub mul add 3 1 roll
	}
	{
  		/tintedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			
			alternativeColors altChannelIndex get
			
			% tint every channel
			mixMethod /Additive eq
			{
				1.0 exch sub tint mul
				1.0 exch sub
			}
			{
				tint mul
			}ifelse
			
			tintedColor altChannelIndex 3 2 roll put
		}for
		
		tintedColor aload pop
	}ifelse
  
} bd

%----------------------------------------------------------------------------
% Proc:	devicen_colorant_mixer_proc
% Stack: 	colorant1... colorantN  [ alternativeColor ] [names] alternativeSpace  N --> colorant_mixer_proc -- > mixedColor
%			N - number of colorants
%			alternativeSpace - alternative color space ( e.g. /DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%			colorant i - colorant values
%			alternativeColor N - colorant representation in alternative colorspace
%			names N - alternative color plate names
%			mixedColor - mixed color in alternativeColorspace
% Desc: 	mixes colorants to produce color representation in alternative color space
%----------------------------------------------------------------------------
/devicen_colorant_mixer_proc
{
	/numChannels xd
	/alternativeSpace xd
	/channelNames xd
	/alternativeColors xd
	numColorants array astore /colorants xd

	/is_spot_channel_name_loc { is_spot_channel_name } bind def
	
	alternativeSpace DocCmykSpace eq
	{
		/mixMethod /Subtractive def
		/altSpaceNumChannels 4 def
		/is_spot_channel_name_loc { is_cmyk_channel_name not } bind def
	}
	{
		alternativeSpace DocRgbSpace eq
		{
			/mixMethod /Additive def
			/altSpaceNumChannels 3 def
			/is_spot_channel_name_loc { is_rgb_channel_name not } bind def
		}
		{
			alternativeSpace DocGrayScaleSpace eq
			{
				/mixMethod /Additive def
				/altSpaceNumChannels 1 def
				/is_spot_channel_name_loc { /Gray ne } bind def
			} if
		} ifelse
	}ifelse

  % iterate over all components of alternative color space
  mixMethod /Additive eq
  {
	/mixedColor altSpaceNumChannels {0.0} repeat altSpaceNumChannels array astore def

	/bProcessPlateTinted false def
	
	0 1 numChannels 1 sub
	{
		/channelIndex exch def

		channelNames channelIndex get is_spot_channel_name_loc
		/bSpotChannel xd	
		/sourceChannel colorants channelIndex get def								% colorant [channelIndex]
		
		/bWhiteBackground
			0 mixedColor {add} forall
			altSpaceNumChannels div
			0.999 gt bProcessPlateTinted and
		def
		
		bSpotChannel bProcessPlateTinted not and
		{
			/bSpotChannel false def
		}if
		
		0 1 altSpaceNumChannels 1 sub
		{
			/altChannelIndex exch def
			/mixedChannel mixedColor altChannelIndex get def

			sourceChannel
			alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
			1.0 exch sub mul
			1.0 exch sub
		
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			
			bSpotChannel
			{
				sourceChannel 0.0 gt
				{
					% paints area covered by spot
					mixedChannel mul
				}
				{
					% paints area not covered by spot ink
					pop mixedChannel
				}ifelse
			}
			{
				/bProcessPlateTinted true def

				globaldict begin
					/bSkipDeviceNImage where
					{
						pop false
					}
					{
						true
					}
					ifelse
				end
				
				DevicenImage and
				{
					pop

					sourceChannel
					alternativeColors channelIndex get altChannelIndex get 	% alternativeColor[channelIndex][altChannelIndex]
					mul
					
					mixedChannel add
				}
				{
					mixedChannel add
				}ifelse
			}ifelse
			
			dup 1.0 gt { pop 1.0 }if
			dup 0.0 lt { pop 0.0 }if
			mixedColor altChannelIndex 3 2 roll put
		}for
	}for
  }
  {
	/mixedColor altSpaceNumChannels {1} repeat altSpaceNumChannels array astore def

	0 1 altSpaceNumChannels 1 sub
	{
		/targetIndex exch def

		% iterate over all colorants of original colorspace
		0 1 numColorants 1 sub
		{
		  /sourceIndex exch def
		  colorants sourceIndex get								%  colorant [sourceIndex]
		  alternativeColors sourceIndex get targetIndex get 	% alternativeColor[sourceIndex][targetIndex]

		  mul
		  1 exch sub

		  mixedColor targetIndex get mul mixedColor targetIndex 3 2 roll put
		} for

		mixedColor targetIndex 1 mixedColor targetIndex get sub put
		
	} for
  } ifelse

  mixedColor aload pop
} bd


%----------------------------------------------------------------------------
% Colorspec dictionary definition
% Grayscale, RGB, CMYK, Spot and DeviceN color dictionaries
% are created by replicating and extending abstract ColorSpec dictionary
%----------------------------------------------------------------------------
/ColorSpec
  9 dict begin
		/color [] def					% color component values
		/names [] def					% color components names - reserved : (Cyan ) (Magenta) (Yellow) (Black) (Red) (Green) (Blue) (All)
		/num 0 def						% number of color components/names
		/ColorModel	null def	% color model : /Grayscale /Rgb /Cmyk /Spot /DeviceN /Registration
		/ColorSpace [] def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	sets color as current
		%----------------------------------------------------------------------------
		/set_color
		{
			ColorSpace safe_setcolorspace
			color aload pop setcolor
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_set_color --> bool
		%					bool - painting flag : true - paint, false - do not paint
		% Desc: 	separates color, if necessary, and sets as current. Painting
		%					flag is set according whether separation to current plate happened
		%					and overprint settings
		%----------------------------------------------------------------------------
		/separate_set_color
		{
			SeparationMode /OnHost eq
			{
				separate_color
				{
				 /set_color dexec true
				}
				{
					pop							% remove colorspec on stack
					currentoverprint
					{
						false					% overprint flag is on, do not knockout
					}
					{
						% overprint flag is off, knockout
						SeparateInColor
						{
							% knockout - paint white CMYK object
							0 0 0 0 SetCmyk_5 true
						}
						{
							% knockout - paint white grayscale object
							1 SetGry true
						} ifelse
					} ifelse
				} ifelse
			}
			{
				set_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color	{ currentdict false } bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk { currentdict } bd

	currentdict end
def

%----------------------------------------------------------------------------
% Grayscale color dictionary definition
%----------------------------------------------------------------------------
/GrayscaleColorSpec
	ColorSpec 9 dict copy
  begin
		/names {/Black} def									% color components names
		/num 1 def													% number of color components/names
		/ColorModel	/Grayscale def					% color model
		/ColorSpace DocGrayScaleSpace def		% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparationMode /OnHost eq
			{
				SeparationPlateName /Black eq
				{
					SeparateInColor
					{
						convert_to_cmyk true
					}
					{
						currentdict true
					} ifelse
				}
				{
					currentdict false
				} ifelse
			}
			{
				currentdict false
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 color aload pop 1 exch sub create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_grayscale_color
% Stack: 	tint --> create_grayscale_color -- >colorspec
%				tint - gray component value
%				colorspec - colorspec dicitonary
% Desc: 	creates grayscale color dictionary
%----------------------------------------------------------------------------
/create_grayscale_color
{
	GrayscaleColorSpec 9 dict copy
	begin
		/color exch 1 array astore def			% color component values
		/ColorSpace DocGrayScaleSpace def		% document Grayscale color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% RGB color dictionary definition
%----------------------------------------------------------------------------
/RgbColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/Red /Green /Blue} def		% color components names
    /num 3 def												% number of color components/names
		/ColorModel	/Rgb def							% color model
    /ColorSpace DocRgbSpace def				% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop convert_rgb_to_cmyk create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_rgb_color
% Stack: 	r g b --> create_rgb_color -- >colorspec
%				r, g, b - Red, Green, Blue color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates RGB color dictionary
%----------------------------------------------------------------------------
/create_rgb_color
{
	RgbColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocRgbSpace def			% document RGB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% CMYK color dictionary definition
%----------------------------------------------------------------------------
/CmykColorSpec
  ColorSpec 9 dict copy													% copy colorspec
  begin
    /names {/Cyan /Magenta /Yellow /Black} def	% color components names
    /num 4 def																	% number of color components/names
 		/ColorModel	/Cmyk def												% color model
    /ColorSpace DocCmykSpace def								% CSA or device colorspace array

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false
			SeparationPlateIndex 0 ge
			SeparationPlateIndex 3 le and
			{
				color SeparationPlateIndex get	% get tint on current separation plate

				dup 0 gt
				{
					3 1 roll pop pop
					% tint on current plate is not zero - have separation
					SeparateInColor
					{
						% move tint to SeparationPlateIndex position in CMYK color
						% so for example Cyan plate will print in pure cyan CMYK
						% color instead of default grayscale

						0 0 0 4 SeparationPlateIndex roll create_cmyk_color true
					}
					{
						% separate to grayscale color
						1 exch sub create_grayscale_color true
					} ifelse
				}
				{
					pop
				} ifelse
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			% it is CMYK already, return current colorspec
			currentdict
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_cmyk_color
% Stack: 	c m y k --> create_cmyk_color -- >colorspec
%				c, m, y, k - Cyan, Magenta, Yellow and Black color components respectively
%				colorspec - colorspec dicitonary
% Desc: 	creates CMYK color dictionary
%----------------------------------------------------------------------------
/create_cmyk_color
{
  CmykColorSpec 9 dict copy
  begin
    4 array astore /color exch def			% color component values
	/ColorSpace DocCmykSpace def			% document CMYK color space 	
  currentdict end
} bd

%----------------------------------------------------------------------------
% Spot color dictionary definition
%----------------------------------------------------------------------------
/SpotColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def											% number of color components/names
		/ColorModel	/Spot def						% color model

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false							% default case, no separation
			SeparationPlateIndex 4 eq			% make sure current plate is spot plate
			{
				names aload pop SeparationPlateName eq
				{
					pop pop
					color aload pop						% get tint on current spot separation plate
					dup 0 gt
					{
						% tint is not zero - we have separation
						SeparateInColor
						{
							% convert color to CMYK to paint separation in color
							pop convert_to_cmyk true
						}
						{
							% separate to gray color
							1 exch sub create_grayscale_color true
						} ifelse
					} if
				} if
			} if
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			/alternativeSpace ColorSpace 2 get def		% get alternative colorspace
			/tintTransformProc ColorSpace 3 get def		% get tint transformation procedure

			alternativeSpace DocCmykSpace eq
			{
				% alternative space is CMYK, create CMYK color from alternative color values
				color aload pop tintTransformProc create_cmyk_color
			}
			{
				alternativeSpace DocRgbSpace eq
				{
					% alternative space is RGB, create RGB color from alternative color values
					% and convert RGB color to CMYK
					color aload pop tintTransformProc create_rgb_color /convert_to_cmyk dexec
				}
				{
					alternativeSpace DocGrayScaleSpace eq
					{
						% alternative space is grayscale, invert spot tint and use as K component of CMYK color
						0 0 0 color aload pop 1 sub create_cmyk_color
					} if
				} ifelse
			} ifelse
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_spot_colorspace
% Stack: 	name [alternativeColor] alternativeSpace  --> create_spot_colorspace -- > colorspace
%				name - spot color name
%				alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
%				alternativeColor - spot color representation in alternative colorspace
% Desc: 	creates spot ( named ) colorspace
%----------------------------------------------------------------------------
/create_spot_colorspace
{
  load /alternativeSpace xd
  /alternativeColor xd
  /name xd
 
  [ /Separation name alternativeSpace [ alternativeColor alternativeSpace /spot_tint_transform_proc cvx ] cvx ]
} bd

%----------------------------------------------------------------------------
% Proc:		create_spot_color
% Stack:	tint spotSpace --> create_spot_color -- >colorspec or
%         tint name [alternativeColor] alternativeSpace --> create_spot_color -- >colorspec or
%						tint - spot color ink value
%						name - spot color name
%						alternativeColor - spot color representation in alternative colorspace
%						alternativeSpace - alternative colorspace (/DocGrayScaleSpace, /DocRgbSpace, /DocCmykSpace )
% Desc: 	creates spot ( named ) colorspec. Uses spot colorspace on stack or creates
% 				new colorspace from stack parameters
%----------------------------------------------------------------------------
/create_spot_color
{
	SpotColorSpec 9 dict copy
  begin
 		dup type /arraytype ne
    {
			create_spot_colorspace				% create spot colorspace from stack parameters
    } if
		/ColorSpace xd
    /color exch 1 array astore def	% color component values
    ColorSpace 1 get 1 array astore
    /names xd												% spot color name
  currentdict end
} bd

%----------------------------------------------------------------------------
% DeviceN color dictionary definition
% Inherited from SpotColorSpec as there are strong similarities between
% spot and DeviceN colors, spot being 1 ink DeviceN color
%----------------------------------------------------------------------------
/DevicenColorSpec
  SpotColorSpec 9 dict copy
  begin
		/ColorModel	/DeviceN def							% color model

    %----------------------------------------------------------------------------
		% Stack: 	--> set_color -->
		% Desc: 	separates color, if necessary, and sets as current
		%----------------------------------------------------------------------------
		/set_color
		{
			Level3
			{
				% Level 3 support DeviceN colors natively
				ColorSpace safe_setcolorspace
				color aload pop setcolor
			}
			{
				% for Level 2 output color in alternative colorspace
				ColorSpace 2 get setcolorspace
				color aload pop ColorSpace 3 get exec setcolor
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			currentdict false			% default case - no separation

			/PlateIndex -1 def

			0 1 num 1 sub
			{
				dup
				names exch get SeparationPlateName eq
				{
					/PlateIndex xd
					exit
				} if
				pop
			} for

			PlateIndex 0 ge
			{
				color PlateIndex get														% get separation ink tint
				dup 0 gt
				{
					% tint not zero - have separation
					SeparateInColor
					{
						% convert DeviceN plate color to CMYK to paint separation in color

						% leave only separation component in DeviceN
						num 1 sub {0} repeat num PlateIndex roll

						% create temp DeviceN color with single component and convert it to DeviceN
						ColorSpace create_devicen_color /convert_to_cmyk dexec true
					}
					{
						% separate to gray color
						1 exch sub create_grayscale_color true
					} ifelse
					4 2 roll pop pop
				}
				{
					pop
				} ifelse
			} if
		} bd

    %----------------------------------------------------------------------------
		% Stack: 	i --> get_ink_as_spot --> colorspec
		%					i - DeviceN colorant index
		%					colorspec - DeviceN colorant as spot color
		% Desc: 	returns i-th colorant as spot color
		%----------------------------------------------------------------------------
		/get_ink_as_spot
		{
			dup /indexInk xd
			dup color exch get		% get i-th colorant tint
			exch names exch get		% get i-th colorant name
			[											% start array of alternativeColor values
				1.0 num 1 sub {0} repeat num indexInk roll		% set i-th ink to 1.0, the rest to 0.0
				ColorSpace 3 get exec								% execute tint conversion proc to convert i-th ink to alt color space
			]
			ColorSpace 2 get											% get alternative space
			create_spot_color											% create spot color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_devicen_colorspace
% Stack: 	[names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_colorspace -- > colorspace
%				N - number of color components in DeviceN color
%				alternativeSpace - alternative color space to define DeviceN in
%				alternativeColori - alternative color values for i-th DeviceN colorant
%				names - colorant names
% Desc: 	creates DeviceN colorspace
%----------------------------------------------------------------------------
/create_devicen_colorspace
{
  /numColorants xd
  load /alternativeSpace xd
  bind /tintTransform exch def
  /names xd

  [ /DeviceN names alternativeSpace /tintTransform load ]
} bd

%----------------------------------------------------------------------------
% Proc:	create_devicen_color
% Stack: 	C1...CN DeviceNColorspace --> create_devicen_color -- >colorspec or
%				C1...CN [names] [ alternativeColor1 ] ... [alternativeColorN ]  alternativeSpace N --> create_devicen_color -- >colorspec
%				C1..CN - DeviceN color components values
%				DeviceNColorspace - DeviceN colorspace array
% Desc: 	creates DeviceN colorspec. Either uses DeviceN colorspace on stack ot creates new colorspace
%				from stack parameters
%----------------------------------------------------------------------------
/create_devicen_color
{
  DevicenColorSpec 9 dict copy
  begin
    dup type /arraytype ne
    {
      create_devicen_colorspace				% create DeviceN colorspace from stack parameters
    } if
    /ColorSpace xd										% CSA or device colorspace array
    /num ColorSpace 1 get length def	% number of color components/names
    /names ColorSpace 1 get def				% color components names
    num array astore /color xd				% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% Registratin color dictionary definition
% registration color separates to all plates
%----------------------------------------------------------------------------
/RegistrationColorSpec
  ColorSpec 9 dict copy
  begin
    /num 1 def										% number of color components/names
 		/ColorModel	/Registration def	% color model
    /ColorSpace										% CSA or device colorspace array
    {
      [ /Separation /All DocCmykSpace { dup dup dup } ]
    } def
    /names [/All] def							% color components names

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			SeparateInColor
			{
				convert_to_cmyk true
			}
			{
				color aload pop 1 exch sub create_grayscale_color true
			} ifelse
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			color aload pop dup dup dup create_cmyk_color
		} bd
	currentdict end
def


%----------------------------------------------------------------------------
% Proc:		create_registration_color
% Stack: 	tint --> create_registration_color -- >colorspec
%					tint - tint of registration colorant
% Desc: 	registration color is a color that will separate to all plates
%					for composite output tint will appear in all channel, including spot and DeviceN
%----------------------------------------------------------------------------
/create_registration_color
{
  RegistrationColorSpec 9 dict copy
  begin
    1 array astore /color xd	% color component values
  currentdict end
} bd

%----------------------------------------------------------------------------
% LAB color dictionary definition
%----------------------------------------------------------------------------
/LabColorSpec
	ColorSpec 9 dict copy
  begin
    /names {/L /a /b} def			% color components names
    /num 3 def						% number of color components/names
	/ColorModel	/Lab def			% color model
    /ColorSpace DocLabSpace def		% LAB CSA

		%----------------------------------------------------------------------------
		% Stack: 	--> separate_color --> colorspec bool
		%					colorspec - separated color
		%					bool - separation result : true - color is separated, false - no separation
		% Desc: 	separates color according to global separation settings and leaves
		%					separated color and separation result on stack
		%----------------------------------------------------------------------------
		/separate_color
		{
			convert_to_cmyk /separate_color dexec
		} bd

		%----------------------------------------------------------------------------
		% Stack: 	--> convert_to_cmyk --> colorspec
		% Desc: 	converts current colorspec to CMYK colorspec
		%----------------------------------------------------------------------------
		/convert_to_cmyk
		{
			0 0 0 0 create_cmyk_color
		} bd
	currentdict end
def

%----------------------------------------------------------------------------
% Proc:	create_lab_color
% Stack: 	L a b --> create_lab_color -- >colorspec
%			L, a, b - L, a, b color components respectively
%			colorspec - colorspec dicitonary
% Desc: 	creates LAB color dictionary
%----------------------------------------------------------------------------
/create_lab_color
{
	LabColorSpec 9 dict copy
	begin
		3 array astore /color exch def		% color component values
		/ColorSpace DocLabSpace def			% LAB color space 	
	currentdict end
} bd

%----------------------------------------------------------------------------
% Proc:		set_solid_fill
% Stack: 	colorspec --> set_solid_fill -->
%					colorspec - color of the fill
% Desc: 	sets fill color and fill type to solid
%----------------------------------------------------------------------------
/set_solid_fill
{
  /FillColor xd
	/$fil 0 def
} bd

%----------------------------------------------------------------------------
% Proc:		set_outline
% Stack: 	colorspec --> set_outline -->
%					colorspec - color of the outline
% Desc: 	sets outline color
%----------------------------------------------------------------------------
/set_outline
{
  /OutlineColor xd
} bd

%----------------------------------------------------------------------------
% Proc:   CheckLevelCompatibility
% Stack:  - CheckLevelCompatibility -
% Desc:   check the PostScript level of the interpeter/device against the
%         the PostScript level of the document we outputed, if not compatable
%         print error message and exit smoothly.
%----------------------------------------------------------------------------
/CheckLevelCompatibility
{
  /DocPsLevel where           	% make sure that Document level is defined
  {
    pop
    DocPsLevel get_ps_level gt  % if document level (LV) is 2 or more and the
    {                         	% device is not 2 or more
      @np                     	% newpath
      /Courier findfont 12    	% set a font
      scalefont setfont
      72 144 m                	% moveto 2 inch off the bottom of the page
      (The PostScript level of Corel document is higher than the PostScript) show
      72 132 m
      (level of this device. Change the PS Level in the Corel application) show
      72 120 m
      (by selecting the PostScript tab in the print dialog, and selecting) show
      72 108 m
      (document level from the Compatibility drop down list.) show
      flush
      spg
      quit
    } if
  } if
} bd

%----------------------------------------------------------------------------
% These two functions serve as a hook for PIPELINE ASSOCIATES INC..
% They have implemented a Corel dictionary in their interpreter. It
% performs mostly exotic fill rendering in .C code (instead of our
% PS code). The key here is to make sure their dictionary is above ours
% on the dictionary stack!!
%
% Notes: The first function should be called at the beginning of the script
%        AFTER our dictionary has been put pushed.
%        The second function should be called at the end of the script
%        BEFORE our dictionary is popped.
%
% Contact: Stephen Kochan (President)  (973)428-1700
%          Tim Demarest (Developer)
%
% New in Draw 8: A similar hook for Lexmark printers. They have also
%                implemented direct support for our fountain fills.
%
%                The key difference between Lexmark and Pipeline's
%                hook is that an integer, 1, is pushed on the stack. This
%                represents a compatibility level for the Exotic Fill routines.
%                When Corel makes a new version of CorelDRAW, this number should
%                be incremented if changes were made to the fountain fill code
%                which would make it ncompatible with existing Lexmark printers.
%
%
%----------------------------------------------------------------------------
/@BeginSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {systemdict /Corel30Dict get exec} if

 % Lexmark hook...
 systemdict /CorelLexDict known {1 systemdict /CorelLexDict get exec} if
} bd

/@EndSysCorelDict
{
 % Pipeline hook...
 systemdict /Corel30Dict known {end} if

 %Lexmark hook...
 /EndCorelLexDict where {pop EndCorelLexDict} if
} bd

%----------------------------------------------------------------------------
% Autoflatness for paths too complex to image.
% The next section is to avoid the limitcheck error of typesetters.
% The painting operators of PostScript are rewritten to increase
% flatness until either the object can be printed, or a flatness
% of 10 more than the initial flatness setting has been reached.
% In this case an error message is displayed and printing continues with
% the next object.
% The auto-flatness will be enabled only if the value of the "AutoFlatness"
% variable is true. The code to set this flag is output by the client app.
%----------------------------------------------------------------------------
/AutoFlatness where
{
 pop

 AutoFlatness
 {
	 %----------------------------------------------------------------------------
	 % @ifl Increase flatness			initial_flatness @ifl initial_flatness
	 %----------------------------------------------------------------------------
	 /@ifl
	 {
		dup currentflat
		exch sub 10 gt             	% Is current flatness increase > 10?
		{
		 ([Error: PathTooComplex; OffendingCommand: AnyPaintingOperator]\n)
		 print flush @np exit
		}
		{
		 currentflat 2 add setflat
		} ifelse
	 } bd

	 %----------------------------------------------------------------------------
	 % --- Then redefine fill, eofill, clip, eoclip, & stroke
	 %----------------------------------------------------------------------------
	 /@fill /fill ld
	 /fill
	 {
		currentflat
		{
		 {@fill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eofill /eofill ld
	 /eofill
	 {
		currentflat
		{
		 {@eofill} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@clip /clip ld
	 /clip
	 {
		currentflat
		{
		 {@clip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@eoclip /eoclip ld
	 /eoclip
	 {
		currentflat
		{
		 {@eoclip} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd

	 /@stroke /stroke ld
	 /stroke
	 {
		currentflat
		{
		 {@stroke} stopped
		 {@ifl}
		 {exit}
		 ifelse
		} bind loop
		setflat
	 } bd
	} if
} if

%----------------------------------------------------------------------------
% Proc:	@ssa
% Stack:	- @ssa -
% Desc:	turn strokeadjust on if we're using level 2
%----------------------------------------------------------------------------
/@ssa
  Level2
  {
    {true setstrokeadjust}
  }
  {
    {}
  } ifelse
bd

%----------------------------------------------------------------------------
/d /setdash ld               	% d  setdash     					array offset d -
/j /setlinejoin ld           	% j  set line join     		join j -
/J /setlinecap ld            	% J  set line cap       	cap J -
/M /setmiterlimit ld         	% M  set miter limit  		value M -
/w /setlinewidth ld          	% w  set line width    		width w -
/O {/FillOverprint xd} bd     % O  set overprint fill   flag O -
/R {/OutlineOverprint xd} bd  % R  set overprint stroke	flag R -
/W /eoclip ld          				% W  clip path          	- W -
/c /curveto ld               	% c  curveto smooth    		x1 y1 x2 y2 x3 y3 c -
/C /c ld                     	% C  curveto corner    		x1 y1 x2 y2 x3 y3 C -
/l /lineto ld                	% l  lineto smooth     		x y l -
/L /l ld                     	% L  lineto corner     		x y L -
/rl /rlineto ld              	% rl rlineto     					x y rl -
/m /moveto ld                	% m  moveto      					x y m -
/n /newpath ld               	% n  newpath     					- n -
/N /newpath ld               	% N  newpath     					- N -
/P {11 rp} bd                	% P  pattern stroke    		(same as p)
/u {} bd                     	% u  begin group        	- u -
/U {} bd                     	% U  end group          	- U -
/A {pop} bd                  	% A  locked object     		flag A -
/q /@gs ld                   	% q  gsave        				- g -
/Q /@gr ld                   	% Q  grestore     				- Q -
/& {}bd                      	% &  pattern marker    		- & -
/@j {@sv @np} bd             	% StartArrowhead
/@J {@rs} bd                 	% EndArrowhead

%----------------------------------------------------------------------------
% Proc: 	g
% Stack:	gray g -
% Desc:		set gray color for solid fill
%----------------------------------------------------------------------------
/g
{
 1 exch sub           				% get black component
 0 0 0 4 roll 3
 create_cmyk_color set_solid_fill
 /$fil 0 def       						% set name (null), fill type
} bd

%----------------------------------------------------------------------------
% Proc:		G
% Stack:	gray G -
% Desc:		set gray outline color
%----------------------------------------------------------------------------
/G
{
 1 sub neg            				% get black component
 0 0 0 4 -1 roll
 create_cmyk_color set_outline
} bd

%----------------------------------------------------------------------------
% Proc: 	i
% Stack: 	flatness i -
% Desc: 	Sets the current flatness
%----------------------------------------------------------------------------
/i
{
 dup 0 ne
 {setflat}
 {pop}
 ifelse
} bd

%----------------------------------------------------------------------------
% Curveto procedures
%----------------------------------------------------------------------------
/v                           	% v		curveto smooth    	x12 y12 x3 y3 v -
{
 4 -2 roll                   	% get x12 y12 on top
 2 copy                      	% duplicate them
 6 -2 roll c                 	% move x3 y3 back to the end
} bd

/V /v ld                     	% V   curveto corner    	x12 y12 x3 y3 V -
/y {2 copy c} bd             	% y   curveto smooth    	x1 y1 x23 y23 y -
/Y /y ld                     	% Y   curveto corner    	x1 y1 x23 y23 Y -

%----------------------------------------------------------------------------
% Proc: 	@w
% Stack: 	[matrix] bscale width height angle @w -
% Desc:		set pen matrix "$ptm" to desired settings
% 				bscale is a flag:
%					0: no scale
%					1: scale with object using matrix supplied on the stack
% 				matrix is passed only if bscale is 1 (object total matrix)
%----------------------------------------------------------------------------
/@w
{
 matrix rotate /$ptm xd      	% define $ptm to be rotation matrix
 matrix scale                	% set pen shape
 $ptm dup concatmatrix
 /$ptm xd
 1 eq                        	% if scale, concat object matrix
 {
  $ptm exch dup concatmatrix
  /$ptm xd
 }if
 
 /patternScallingMatrix where	% apply pattern scaling matrix, if exists, to account for line width scaling in patterns
 {
	pop
	patternScallingMatrix $ptm matrix concatmatrix
	/$ptm xd
 }if
 
 1 w                         	% basic thickness to be transformed by $ptm
} bd

%----------------------------------------------------------------------------
% Proc: 	@g
% Stack: 	freq ang spotproc 1 @g -
%							--or--
%					0 @g - 		(use default)
% Desc:		Set halftone screen for gray filling
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@g
{
 1 eq dup /$sdf xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$scp xd                   	% Current spot func for fill
  /$sca xd                   	% Current screen angle for fill
  /$scf xd                   	% Current screen frequency for fill
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@G
% Stack: 	freq ang spotproc 1 @G -
%								--or--
%					0 @G - 		(use default)
% Desc:		Set halftone screen for gray stroking
% 				spotproc is a spot procedure name (ex: /@dot or /@lin)
%----------------------------------------------------------------------------
/@G
{
 1 eq dup /$SDF xd           	% set global flag
 {                           	% next 3 parameters are set only if parm1 is 1
  /$SCP xd                   	% Current spot func for stroke
  /$SCA xd                   	% Current screen angle for stroke
  /$SCF xd                   	% Current screen frequency for stroke
 } if
} bd

%----------------------------------------------------------------------------
% Proc: 	@D
% Stack: 	freq ang spotproc @D -
% Desc: 	setscreen for all document
%----------------------------------------------------------------------------
/@D
{
 2 index 0 eq
 {
  $dsf 3 1 roll              	% frequency angle proc deffreq
  4 -1 roll pop
 } if
 3 copy
 exch $Scra add exch load    	%: frequency angle+$Scra {proc}
 SetScr
 /$dsp xd                    	% default spot func name
 /$dsa xd                    	% default screen angle
 /$dsf xd                    	% default screen frequency function
} bd

%----------------------------------------------------------------------------
% Proc: 	$ngx
% Stack:
% Desc: 	set screen function
%----------------------------------------------------------------------------
/$ngx
{
 $SDF
 {
  $SCF
  SeparationMode /Composite eq    % Check if not performing color seps.
  {$SCA}
  {$dsa}
  ifelse
  $SCP
  @ss
 }if      												% alt. screen? (determined by stroke attribs)
} bd

%----------------------------------------------------------------------------
% Proc: 	min
% Stack: 	val1 val2 --> min --> value
% Desc: 	minimum
%----------------------------------------------------------------------------
/min
{
 2 copy le
 {pop}
 {exch pop} ifelse           	% get minimum of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	max
% Stack: 	val1 val2 --> max --> value
% Desc: 	maximum
%----------------------------------------------------------------------------
/max
{
 2 copy ge
 {pop}
 {exch pop}
 ifelse  						         	% get max of both values
} bd

%----------------------------------------------------------------------------
% Proc: 	in_range
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	forces a value between two limits
%----------------------------------------------------------------------------
/in_range
{
  3 -1 roll                   % get value on top
  min max
} bd

%----------------------------------------------------------------------------
% Proc: 	InRange
% Stack: 	value minimum maximum --> in_range --> newvalue
% Desc: 	The same as in_range, legacy namy for use in PS fills
%----------------------------------------------------------------------------
/InRange /in_range load bd

%----------------------------------------------------------------------------
% Proc:	@sqr
% Stack: 	size @sqr -
% Desc:
%----------------------------------------------------------------------------
/@sqr
{
 dup 0 rl
 dup 0 exch rl
 neg 0 rl
 @cp
} bd

%----------------------------------------------------------------------------
% Proc:		currentscale
% Stack: 	- currentscale sx sy
% Desc:
%----------------------------------------------------------------------------
/currentscale
{
 1 0 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

 0 1 dtransform
 matrix defaultmatrix idtransform
 dup mul exch dup mul add sqrt

} bd

%----------------------------------------------------------------------------
% Proc:		@unscale
% Stack: 	- unscale -
% Desc:
%----------------------------------------------------------------------------
/@unscale
{
 %stub... currentscale 1 exch div exch 1 exch div exch scale
} bd

%----------------------------------------------------------------------------
% Proc: 	wDstChck
% Stack:
% Desc: 	NEEDED by functions in USERPROC.TXT
%----------------------------------------------------------------------------
/wDstChck
{
 2 1 roll dup 3 -1 roll
 eq {1 add} if
} bd

%----------------------------------------------------------------------------
% Proc: 	@dot
% Stack: 	x y @dot num
% Desc:		implementation of a dot spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@dot
{
 dup mul exch dup mul add
 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	@lin
% Stack: 	x y @lin num
% Desc:		implementation of a line spot function for halftoning(see setscreen)
%----------------------------------------------------------------------------
/@lin
{
 exch pop abs 1 exch sub
} bd

%----------------------------------------------------------------------------
% Proc: 	cmyk2rgb
% Stack: 	c m y k cmyk2rgb r g b
% Desc: 	converts cmyk to rgb using standard algorithm
%----------------------------------------------------------------------------
/cmyk2rgb
{                            	% c m y k
 3
 {
  dup 5 -1 roll             	% m y k k c
  add                       	% m y k k+c
  1 exch sub                	% m y k 1-(k+c)         % r = 1-(k+c)
  dup 0 lt                  	% m y k r r<0
  {
   pop 0                    	% m y k 0               % 0 < r < 1
  } if
  exch                      	% m y r k
 } repeat                   	% r g b k               % for each color
 pop                        	% r g b
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2cmyk
% Stack: 	r g b rgb2cmyk c m y k
% Desc: 	converts rgb to cmyk using standard algorithm
%----------------------------------------------------------------------------
/rgb2cmyk
{                            	% r g b
 3
 {                           	% r g b
  1 exch sub                 	% r g 1-b       				% y = 1 - b
  3 1 roll                   	% y r g
 } repeat                    	% c m y
 3 copy                      	% c m y c m y
 min min                     	% c m y min(c,m,y)     	% K=min(c,m,y)
 3
 {                           	% c m y K
  dup 5 -1 roll              	% m y K K c
  sub neg                    	% m y K c-K     				% C = c - K
  exch                       	% m y C K
 } repeat                    	% C M Y K
} bd

%----------------------------------------------------------------------------
% Proc: 	rgb2g
% Stack:
% Desc: 	converts rgb to gray using standard algorithm
%----------------------------------------------------------------------------
/rgb2g
{
 2 index .299 mul            	% r g b .299r
 2 index .587 mul add        	% r g b .299r+.587g
 1 index .114 mul add        	% r g b .299r+.587g+.144b
 4 1 roll                    	% gray r g b
 pop pop pop                 	% gray
} bd

%----------------------------------------------------------------------------
% WaldoColor might already be defined if this is an EPS file
%----------------------------------------------------------------------------
/WaldoColor_5 where
{
 pop
}
{
  %----------------------------------------------------------------------------
  % store pointers to actual color operators
  %----------------------------------------------------------------------------
  /CorelImage systemdict /image get def
  /CorelSetGray systemdict /setgray get def
  /CorelGetGray systemdict /currentgray get def
  /CorelSetTransfer systemdict /settransfer get def
  /CorelGetTransfer systemdict /currenttransfer get def

  /SetRgb /setrgbcolor ld
  /GetRgb /currentrgbcolor ld
  /SetGry /setgray ld
  /GetGry /currentgray ld
  /SetRgb2 systemdict /setrgbcolor get def
  /GetRgb2 systemdict /currentrgbcolor get def
  /SetHsb systemdict /sethsbcolor get def
  /GetHsb systemdict /currenthsbcolor get def

  %----------------------------------------------------------------------------
  % Proc: 	rgb2hsb
  % Stack:
  % Desc: 	converts rgb to hsb
  %----------------------------------------------------------------------------
  /rgb2hsb
  {
   SetRgb2
   GetHsb
  } bd

  %----------------------------------------------------------------------------
  % Proc: 	hsb2rgb
  % Stack:
  % Desc: 	converts hsb to rgb
  %----------------------------------------------------------------------------
  /hsb2rgb
  {                            	% h s b
   3 -1 roll                   	% s b h
   dup floor sub               	% s b H         			% ensure 0 < H < 1
   3 1 roll                    	% H s b
   SetHsb
   GetRgb2
  } bd

  %----------------------------------------------------------------------------
  % define the setcmykcolor operator if not already defined
  % if it is already defined, we want to store it away so that when we later
  % superclass this operator to our own in order to separate eps files, we can
  % access the existing call.  If it does not exist, it will be emulated with
  % the corresponding rgb calls.
  %----------------------------------------------------------------------------
  /setcmykcolor where
  {
    pop
    /LumSepsDict where              % check if Luminus TrapWise Separation dictionary is defined
    {
      pop
      /SetCmyk_5
      {
        LumSepsDict                 % get setcmykcolor from their dict and run it
        /setcmykcolor get exec
      } def
    }
    {
      /AldusSepsDict where
      {
        pop
        /SetCmyk_5
        {
          AldusSepsDict             % get setcmykcolor from their dict and run it
          /setcmykcolor get exec
        } def
      }
      {
        /SetCmyk_5 /setcmykcolor ld
      } ifelse
    } ifelse
  }
  {
    /SetCmyk_5                      % cyan magenta yellow black setcmykcolor -
    {
      cmyk2rgb
      SetRgb
    } bd
  } ifelse

  %----------------------------------------------------------------------------
  /currentcmykcolor where
  {
   pop
   /GetCmyk
   /currentcmykcolor ld
  }
  {
   /GetCmyk
   {
    GetRgb
    rgb2cmyk
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the setoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /setoverprint where
  {pop}
  {
   /setoverprint               	% boolean setoverprint
   {
    /CurrentOverprint xd
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % define the currentoverprint operator if not already defined
  % NOTE: We do not want to redefine this operator if it is defined so that
  %       other apps can separate our EPS files.
  %----------------------------------------------------------------------------
  /currentoverprint where
  {pop}
  {
   /currentoverprint           	% currentoverprint boolean
   {
		CurrentOverprint
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  % proc : ColorImage
  %
  % Stack: width height #bits matrix dataaq1 ... dataaqN multi
  %        #colors ColorImage -
  %        where:
  %          dataaqI: Data aquisition function I ( we can have 1, 3 or 4 of them)
  %          multi  : Boolean, true means multi-stram image, false means single stram image
  %
  % Desc : Defines the ColorImage operator
  %				 if colorimage is define it uses the definition for our ColorImage,
  %        if not we will define our own.
  %
  %----------------------------------------------------------------------------
  /colorimage where
  {
   pop
   /ColorImage {colorimage} def	      % 8Dec94: rwm: this used to be /colorimage load def
                                      % it was changed to support colorimage separation
  }
  {
   /ColorImage
   {
     /ncolors xd			                % # of colors
     /$multi xd                       % multi-stream colorimage
     $multi true eq
     {                                % multi-stream colorimage, pop all the image data
       ncolors 3 eq
       {                              % RGB image
         /daqB xd
         /daqG xd
         /daqR xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqR pop                   % pop the Red line
           daqG pop                   % pop the Green line
           daqB pop                   % pop the Blue line
         } repeat
       }
       {                              % CMYK image
         /daqK xd
         /daqY xd
         /daqM xd
         /daqC xd
         pop pop exch pop abs         % pop the stack leave the # of lines
         {
           daqC pop                   % pop the Cyan line
           daqM pop                   % pop the Magenta line
           daqY pop                   % pop the Yellow line
           daqK pop                   % pop the Black line
         } repeat
       } ifelse
     }
     {                                % single-stream colroimage
       /dataaq xd
       {
         dataaq
         ncolors dup 3 eq
         {
           /$dat xd
           0 1 $dat length
           3 div 1 sub
           {
             dup 3 mul
             $dat 1 index get
             255 div
             $dat 2 index 1 add get
             255 div
             $dat 3 index 2 add get
             255 div
             rgb2g 255 mul
             cvi exch pop
             $dat 3 1 roll put
           } for
           $dat 0 $dat length 3
           idiv getinterval pop
         }
         {
           4 eq
           {
             /$dat xd
             0 1 $dat length
             4 div 1 sub
             {
               dup 4 mul
               $dat 1 index get
               255 div
               $dat 2 index 1 add get
               255 div
               $dat 3 index 2 add get
               255 div
               $dat 4 index 3 add get
               255 div
               cmyk2rgb rgb2g 255 mul
               cvi exch pop
               $dat 3 1 roll put
             } for
             $dat 0 $dat length
             ncolors idiv
             getinterval
           } if
         } ifelse
       }
       image
     } ifelse
   } bd
  } ifelse

  %----------------------------------------------------------------------------
  /setcmykcolor
  {
   create_cmyk_color /separate_set_color dexec
   /$ffpnt xd		% painting flag
  } bd

  %----------------------------------------------------------------------------
  /currentcmykcolor
  {
    GetCmyk
  } bd

  %----------------------------------------------------------------------------
  /sethsbcolor
  {
   hsb2rgb
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currenthsbcolor
  {
   currentrgbcolor
   rgb2hsb
  } bd

  %----------------------------------------------------------------------------
  /setgray
  {
   dup dup
   setrgbcolor
  } bd

  %----------------------------------------------------------------------------
  /currentgray
  {
   currentrgbcolor             	% r g b
   rgb2g
  } bd

  %----------------------------------------------------------------------------
  % Proc:   InsideDCS
  % Desc:   defines the flag InsideDCS file to false, will be set just prior to
  %         outputing a DCS file and reset after that.
  %----------------------------------------------------------------------------
  /InsideDCS false def

  %----------------------------------------------------------------------------
  % Proc: 	IMAGE
  % Stack: 	- IMAGE -
  % Desc: 	load the defined image operater and redefine it into IMAGE
  %----------------------------------------------------------------------------
  /IMAGE /image ld

  %----------------------------------------------------------------------------
  % Proc:   image
  % Stack:  width height bits matrix datasrc image -
  %         dict image -
  % Desc: 	this proc redefine the systemdic image proc. It will either call
  %         the IMAGE if we do not need to do anything to the image, or it
  %         pop all the image data if the image need not to print.
  %----------------------------------------------------------------------------
  /image                            % Redefine image proc
  {
    InsideDCS                       % check if the image is inside a DCS file
    {
      IMAGE                         % play the image
    }
    {
    /EPSDict where                  % check if an EPS dictionary on the stack
    {                               % Inside EPS file
      pop                           % pop dictinary

      SeparationMode /Composite eq
      {                             % composite
        IMAGE                       % use the systemdict image call
      }
      {                             % separation
        dup type /dicttype eq       % check if there is a dictionary on the stack
        {                           % There is a dict, this must ba a LEVEL 2 or 3 IMAGE call,
          dup /ImageType get 1 ne
          {                         % level 3 image dictionary
            IMAGE                   % use the systemdict image call
          }
          {                         % Level 2 image dictionary
            dup dup
            /BitsPerComponent
            get 8 eq exch
            /BitsPerComponent
            get 1 eq or
            currentcolorspace 0 get
            DocGrayScaleSpace eq
            and
            {                       % It is a GrayScale or a Mono image
              SeparationPlateName
              (Black) eq
              {                     % Black plate
                IMAGE               % play the image, use the systemdict image call
              }
              {                     % Not a black plate
                dup /DataSource get
                /TCC xd             % get datasource proc from dictionary and save it
                /Height get abs     % get number of lines
                { TCC pop } repeat  % pop all the image lines
              } ifelse
            }
            {                       % It is not a gray scale image
              IMAGE                 % output the image
            } ifelse
          } ifelse
        }
        {                           % this is a LEVEL 1 IMAGE call
          2 index 1 ne              % get number of bits/sample
          {                         % 8 bits, gray image
            SeparationPlateName
            (Black) eq
            {                       % Black plate
              IMAGE                 % use the systemdict image call
            }
            {                       % Not a black plate
              /TCC xd               % save the datasource proc
              pop pop exch pop abs  % pop image parameters, leaving the number of lines only
              { TCC pop } repeat    % pop all the image lines
            } ifelse
          }
          {                         % 1 bit
            IMAGE                   % use the systemdict image call
          } ifelse
        } ifelse
      } ifelse
    }
    {                               % not in an EPS file
      IMAGE                         % use the systemdict image call
    } ifelse                        %
    } ifelse                        % InsideDCS
  } bd
} ifelse

%----------------------------------------------------------------------------
% Desc: 	sets the fill mode to EVEN_ODD mode.
%----------------------------------------------------------------------------
/$fm 0 def

%----------------------------------------------------------------------------
% Proc: 	wfill
% Stack: 	wfill
% Desc: 	sets the type of fill to use (fill or eofill)
%         depending on the fill mode (winding or even-odd).
%----------------------------------------------------------------------------
/wfill
{
 1 $fm eq					           	% fillmode
 {
  fill												% normal non-zero winding number rule
 }
 {
  eofill											% even-odd rule
 } ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	@Pf
% Stack: 	- @Pf -
% Desc: 	Postscript Fill
% 				Call user-defined Postscript fill with current parameters
% 				20dec90:MB: Print PS fill only in composite
%           or in black plane of color seps.
% NOTE: All PS fills expect the current UNIT to be MIL (1/1000 inch)
% and Bburx, .. need to be specified in that unit as well.
%----------------------------------------------------------------------------
/@Pf
{
 @sv
 SeparationMode /Composite eq	% Composite or...
 {
  true
 }
 {
  $Psc 0 ne or	 								% Color PS fill or..
  $ink_5 3 eq or
 }ifelse
 								% Black separation
 {                           	% PS fills can be printed
  0 J 0 j [] 0 d             	% reset stroke attributes (all PS fills set line width)
  FillOverprint safe_setoverprint
  FillColor /separate_set_color dexec pop
  $ctm setmatrix             	% reset matrix for PS-filling
  72 1000 div dup
  matrix scale               	% scaling matrix
  dup concat                 	% change current ctm
  dup Bburx exch Bbury exch
  itransform
  ceiling cvi /Bbury xd
  ceiling cvi /Bburx xd      	% change unit of BBox
  Bbllx exch Bblly exch
  itransform
  floor cvi /Bblly xd
  floor cvi /Bbllx xd
  $Prm aload pop             	% Bring the parameters on stack
  $Psn load exec             	% execute the ps fill as desired
 }
 {                           	% Not proper color plane, fill in white instead.
  1 SetGry wfill
 } ifelse
 @rs                         	% restore original state
 @np                         	% and clear the path
} bd

%----------------------------------------------------------------------------
% Proc: 	F
% Stack: 	- F -
% Desc: 	fill path
%----------------------------------------------------------------------------
/F
{
	matrix currentmatrix        					% save current transfo matrix on stack
	$sdf
	{
	$scf $sca $scp @ss
	} if                        					% alternate halftone screen?

	FillOverprint safe_setoverprint

	$fil 1 eq

	{CorelPtrnDoFill}            					% pattern fill
	{
		$fil 2 eq                  					% fountain fill?
		{gradient_fill}                      					% fountain fill path
		{
			$fil 3 eq                 				% Postscript fill?
			{@Pf}                     				% PS fill
			{
				get_simulate_devicen FillColor /ColorModel get /DeviceN eq and
				{
					% simulate DeviceN color on Level 2
					% oveprint N objects with individual DeviceN inks
        	0 1 FillColor /num get 1 sub		% iterate through all DeviceN plates
        	{
          		dup 0 gt											% if not the first plate, overprint it
          		{
            			true safe_setoverprint
          		}if

          		FillColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

          		/set_color	dexec									%	set DeviceN i-th ink as current color

          		@gs
          		wfill															% paint the fill
          		@gr

        	} for
      	}
      	{
        	FillColor /separate_set_color dexec
        	{wfill}
        	{@np} ifelse
      	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf
 {
  $dsf $dsa $dsp @ss
 } if                        				% reset default halftone screen
 setmatrix                   				% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	f
% Stack: 	- f -
% Desc: 	closepath fill
%----------------------------------------------------------------------------
/f
{
 @cp F
} bd


%----------------------------------------------------------------------------
% Proc: 	S
% Stack: 	- S -
% Desc: 	stroke
%----------------------------------------------------------------------------
/S
{
  matrix currentmatrix        	% save current transfo matrix on stack
  $ctm setmatrix              	% reset normal ctm
  $SDF {$SCF $SCA $SCP @ss}if 	% alternate halftone screen?

  OutlineOverprint safe_setoverprint

  get_simulate_devicen OutlineColor /ColorModel get /DeviceN eq and
	{
		% simulate DeviceN color on Level 2
		% oveprint N objects with individual DeviceN inks

    0 1 OutlineColor /num get 1 sub		% iterate through all DeviceN plates
    {
      dup 0 gt												% if not the first plate, overprint it
      {
        true safe_setoverprint
      }if

      OutlineColor /get_ink_as_spot dexec	% get DeviceN i-th ink as spot color

      /set_color	dexec										%	set DeviceN i-th ink as current color

			matrix currentmatrix
			$ptm concat													% set the pen matrix
			@gs
			stroke
			@gr
			setmatrix														% reset the original matrix(from stack)

    } for
  }
  {
    OutlineColor /separate_set_color dexec
    {
      matrix currentmatrix
      $ptm concat              	% set the pen matrix
      stroke
      setmatrix                	% reset the original matrix(from stack)
    }
    {@np}ifelse
  } ifelse

 $SDF {$dsf $dsa $dsp @ss}if		% reset default halftone screen
 setmatrix                   		% reset original matrix set on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	s
% Stack: 	- s -
% Desc: 	closepath stroke
%----------------------------------------------------------------------------
/s
{
 @cp
 S
} bd

%----------------------------------------------------------------------------
% Proc: 	B
% Stack: 	- B -
% Desc: 	fill, then stroke
%----------------------------------------------------------------------------
/B
{
 @gs F @gr                   	% fill, then
 S                           	% stroke
} bd

%----------------------------------------------------------------------------
% Proc: 	b
% Stack: 	- b -
% Desc: 	closepath, fill, stroke
%----------------------------------------------------------------------------
/b
{
 @cp B
} bd

%----------------------------------------------------------------------------
% Proc: 	E
% Stack: 	name llx lly urx ury description E -
% Desc:		define pattern
% 				a pattern will be defined as an array of 5 entries:
% 				(0)llx (1)lly (2)urx (3)ury (4)descrition
% 				the description is also an array of executable strings
%----------------------------------------------------------------------------
/_E
{
 5 array astore    						% parms are in an array
 exch cvlit xd			      		% defined with key equal to the name(string)
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc
% Stack: 	- @cc string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc
{
 currentfile $dat readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@sm
% Stack: 	- @sm -
% Desc: 	save current transfo matrix into global $ctm
%----------------------------------------------------------------------------
/@sm
{
 /$ctm $ctm currentmatrix def
} bd

%----------------------------------------------------------------------------
% Proc: 	@E
% Stack: 	bbllx bblly bburx bbury matrix @E -
% Desc: 	Define Object's bbox
% 				Must be called before painting if PATTERNS, PSFILLS, or
% 				FOUNTAINS are used
%----------------------------------------------------------------------------
/@E
{
  /Bbury xd /Bburx xd      		% upper rt. of object's bbox in absolute space
 /Bblly xd /Bbllx xd      		% lower lt. of object's bbox in absolute space
} bd

%----------------------------------------------------------------------------
% Proc: 	@c
% Stack:
% Desc: 	Close sub Path
%					Must be called during the path description
%----------------------------------------------------------------------------
/@c
{
 @cp
} bd

%----------------------------------------------------------------------------
% Proc: 	@P
% Stack: 	parm1 .. parmn n nColor fillname @P -
% Desc: 	PostScript fill
%----------------------------------------------------------------------------
/@P
{       											% COREL Postscript fill # of parms can vary
 /$fil 3 def        					% set global for filling
 /$Psn xd     								% PS-fill name
 /$Psc xd											% 0 - black only, 1 - color
 array astore      						% build array for PS-fill parms
 /$Prm xd     								% parms in Prm
} bd

%----------------------------------------------------------------------------
% Proc: 	tcc
% Stack: 	- tcc -
% Desc:
%----------------------------------------------------------------------------
/tcc {@cc} def 								% no bind def because @cc redefn'

%----------------------------------------------------------------------------
% Proc:		@B
% Stack: 	- @B
% Desc: 	stroke, then fill
%----------------------------------------------------------------------------
/@B
{
 @gs S   @gr         					% stroke
 F              							% fill
} bd

%----------------------------------------------------------------------------
% Proc:		@b
% Stack: 	- @b -
% Desc: 	closepath, stroke & fill path
%----------------------------------------------------------------------------
/@b
{
 @cp @B
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation
% Stack: 	--> init_separation -->
% Desc: 	initialize global color separation parameters
%
%       	SeparationMode defines the current mode for color separation :
%						/Composite - no color separation
%           /OnHost - colors are separated in the application ( on host )
%           /InRip - colors are separated in the RIP
%
%       	SeparationPlateName - string defining the current color plane being
%  					printed.  The possible values are (case sensitive, not to be
%						translated); /Cyan, /Magenta, /Yellow, /Black or any spot color
%						defined in the document; e.g. (Pantone 345)
%
%					SeparationPlateIndex - index of separation plate, -1 - not defined,
%					0 - Cyan,	1 - Magenta, 2 - Yellow, 3 - Black, 4 - any spot
%
%----------------------------------------------------------------------------
/init_separation
{
	% inherit separation parameters from parent document if embedded as EPS
	/SeparationMode where
	{
		pop
	}
	{
		/SeparationMode /Composite def
	} ifelse


	/SeparationPlateName where
	{
		pop
	}
	{
		/SeparationPlateName null def
	} ifelse

	/SeparateInColor where
	{
		pop
	}
	{
		/SeparateInColor false def
	} ifelse

	SeparationMode /Composite eq
	{
		/SeparationPlateIndex -1 def
	}
	{
		/SeparationPlateIndex 4 def
	} ifelse

	/CmykPlates [ /Cyan /Magenta /Yellow /Black ] def

	0 1 3
	{
		dup
		CmykPlates exch get SeparationPlateName eq
		{
			/SeparationPlateIndex xd
			exit
		} if
		pop
	} for

	% init legacy separation parameters used for separation of pre-X5
	% generated embedded EPS documents

	/CurrentInkName_5 SeparationPlateName def

	/$ink_5 SeparationPlateIndex def

	SeparationMode /OnHost eq
	{
		/SepMode_5 2 def
	}
	{
		/SepMode_5 0 def
	} ifelse

	/SepsColor SeparateInColor def	
} bd

%----------------------------------------------------------------------------
% Proc:		init_separation_from_legacy
% Stack: 	- init_separation_from_legacy -
% Desc: 	inits separation from legacy pre-X5 separation parameters
%----------------------------------------------------------------------------
/init_separation_from_legacy
{
	EpsFile
	{
		/SepMode_5 where
		{
			pop
			SepMode_5 2 eq
			{
				/SeparationMode /OnHost def
			}
			{

				/SeparationMode /Composite def
			}
			ifelse
		} if
		
		/CurrentInkName_5 where
		{
			pop
			/SeparationPlateName CurrentInkName_5 def
		} if
		
		/$ink_5 where
		{	pop
			/SeparationPlateIndex $ink_5 def
		} if
		
		/SepsColor where
		{
			pop
			/SeparateInColor SepsColor def
		} if
	} if
} bd

init_separation_from_legacy

%----------------------------------------------------------------------------
% Proc:		@whi
% Stack: 	- @whi -
% Desc: 	Fill Page white
%----------------------------------------------------------------------------
/@whi
{
 @gs
 -72000 dup m
 -72000 72000 l
 72000 dup l
 72000 -72000 l
 @cp 1 SetGry fill
 @gr
} bd

%----------------------------------------------------------------------------
% Proc:		@neg
% Stack: 	- @neg -
% Desc: 	MAKE ALL COLORS NEGATIVE
% 				Only set the GRAY scale transfer function since WALDO only
% 				uses negative for color separations.
%----------------------------------------------------------------------------
/@neg
{  [{1 exch sub} /exec cvx currenttransfer /exec cvx] cvx settransfer
 @whi          								% fill page in white (Will be turned into white)
} bd

%----------------------------------------------------------------------------
% ------------------------- AX system --------------------------------------
%----------------------------------------------------------------------------
/deflevel 0 def								% global

%----------------------------------------------------------------------------
% Proc:		@sax
% Stack: 	- @sax -
% Desc: 	start an excution array
% NOTE:		an array should be started IMMEDITAELY AFTER @sax
%         each @sax requires a following @eax
%----------------------------------------------------------------------------
/@sax
{
  /deflevel deflevel 1 add def
} bd

%----------------------------------------------------------------------------
% Proc:		@eax
% Stack: 	[ex array] @eax -
%         or
%         [ ... [ex array] @eax [ ... [ex array] {ex array code}
% Desc: 	end and possibly execute an execution array
%         This will either load array execution code or execute the
%         array depending on the level (as set by @sax).
%         EACH @eax needs a preceding @sax
%----------------------------------------------------------------------------
/@eax
{
 % decrement deflevel but NEVER below 0.
 /deflevel deflevel dup 0 gt {1 sub} if def
 deflevel 0 gt
 {
  /eax load       						% push eax code onto stack for later execution
 }
 {
  eax       									% execute the array on the stack NOW
 }
 ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		eax
% Stack: 	[ex array] eax -
% Desc: 	execute an execution array
% NOTE:		This should only be called by @eax. DO NOT DIRECTLY
%         CALL THIS ROUTINE!
%----------------------------------------------------------------------------
/eax
{
 {exec} forall
} bd

%----------------------------------------------------------------------------
% Proc:		@rax
% Stack:
% Desc:
%----------------------------------------------------------------------------
/@rax
{
 deflevel 0 eq
 {
  @rs @sv
 }
 if
} bd

%----------------------------------------------------------------------------
% Proc:		pdfmark
% Stack: 	[ .... pdfmark
% Desc:
%----------------------------------------------------------------------------
systemdict /pdfmark known not
{
 /pdfmark /cleartomark ld
} if

%----------------------------------------------------------------------------
% Proc: 	wclip
% Stack: 	- wclip -
% Desc: 	sets the type of clipping to use (clip or eoclip)
%         depending on the clipping mode (winding or even-odd).
%----------------------------------------------------------------------------
/wclip
{
 1 $fm eq						% fillmode
 {
  clip							% normal non-zero winding number rule
 }
 {
  eoclip						% even-odd rule
 } ifelse
} bd
%----------------------------------------------------------------------------
% Text support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	z
% Stack: 	fontname size z -
% Desc: 	sets current font, ptsize
%----------------------------------------------------------------------------
/z
{
 exch findfont exch scalefont
 setfont     									% set the current font
} bd

%----------------------------------------------------------------------------
% Proc: 	ZB
% Stack: 	fontname default_metrics_entry FontBBox FontMatrix ZB
% Desc: 	define raster font
%----------------------------------------------------------------------------
/ZB
{
 9 dict												%: fontname default_metrics_entry FontBBox
 															%...	FontMatrix fontdict
 dup begin
 4 1 roll											%: fontname fontdict default_metrics_entry
 															%...	FontBBox FontMatrix
 /FontType 3 def
 /FontMatrix xd
 /FontBBox xd
 															%: fontname fontdict default_metrics_entry
 /Encoding 256 array def
 0 1 255
 {
  Encoding exch /.notdef put
 } for
 /CharStrings 256 dict def
 CharStrings /.notdef {} put

 /Metrics 256 dict def				%: fontname fontdict default_metrics_entry

 Metrics /.notdef 3 -1 roll put
 															% stack: fontname fontdict
 /BuildChar
 {  													% stack: font char
  exch												% stack: char font
  dup /$char exch /Encoding get 3 index get def    % Get character name.
  														% stack: char font

  % Get origin of next char relative to current char and bounding box
  % for current char and call setcachedevice.

  dup /Metrics get $char get aload pop setcachedevice

  begin
  Encoding exch get CharStrings exch get
  end
  exec
 } def
 end													% stack: fontname fontdict

 definefont pop
} bd

%----------------------------------------------------------------------------
% Proc: 	ZBAddChar
% Stack: 	metrics_entry char_proc char_code char_name fontname ZBAddChar
% Desc:
%----------------------------------------------------------------------------
/ZBAddChar
{
 findfont begin								%: metrics_entry char_proc char_code char_name
 dup 4 1 roll dup 6 1 roll		%: char_name metrics_entry char_name char_proc char_code char_name
 Encoding 3 1 roll put				%: char_name metrics_entry char_name char_proc
 CharStrings 3 1 roll put			%: char_name metrics_entry
 Metrics 3 1 roll put
 end
} bd

%----------------------------------------------------------------------------
% Proc: 	Z
% Stack: 	width-array encode-array newfontname fontname Z -
% Desc: 	re-encode font
%----------------------------------------------------------------------------
/Z
{
 findfont											% get font dictionary on stack
 dup maxlength 2 add dict exch % get its size  & create new font dictionary
															%: width-array encode-array newfontname
															%...	new-dict old-dict
 dup													% copy entries from old dict to the new dict
 {
  1 index /FID ne    					% avoid copying the FID key
  {
   3 index    								%: ... newdict olddict key value newdict
   3 1 roll put    						% store entry in dict
  }
  {
   pop pop
  } ifelse
 } forall   									% for all entries in the old dict

 % Now, get the new encoding array into the new dictionary
 % stack: width-array encode-array  newfontname new-dict old-dict

 pop          								% don't need old dict anymore
 dup dup /Encoding get				%: width-array encode-array newfontname
 															%...	newdict newdict Encoding
 256 array copy     					% get a copy of original encoding array (to modify)
 dup /$fe xd          				% prepare a pointer to the dest Encoding array
 /Encoding exch put       		% store copy of original in encoding vect
															%: width-array encode-array  newfontname
															%...	new-dict
 dup /Fontname 3 index put    % store it's own new name in that font
															%: width-array encode-array  newfontname
															%...	new-dict
 															% store the new encoding array into the copy
 3 -1 roll        						%: width-array newname newdict encode-array
 dup length 0 ne
 {
  0 exch
  {       										% initialize counter
   dup type 0 type eq      		% check for numbers
   {
    exch pop   								% throw the old number away
   }
   {            							% else, must be a char name
    $fe exch 2 index exch put % put it into array
    1 add       							% get ready for next
   } ifelse
  } forall
  pop        									% remove counter
 } if													%: width-array newname newfontdict

 dup 256 dict									%: width-array newname newfontdict newfontdict
 															%...	metricsdict
 dup /$met xd       					% prepare a pointer to the dest Metrics dict
 /Metrics exch put						%stack: width-array newname newfontdict

 % Character widths in width-array are for a 1000 unit character coordinate
 % system.  If this is not the coordinate system used for this font, the
 % character widths have to be scaled appropriately.  This scale factor
 % is being calculated here.

 dup /FontMatrix get
 0 get
 1000 mul
 1 exch div

 %stack: width-array newname newfontdict scale-factor
 % Add character widths in width-array to the font if width-array contains
 % 256 entries.

 3 index length 256 eq
 {
  0 1 255
  {														%: width-array newname newfontdict
															%...	scale-factor index
   dup $fe exch get						%: width-array newname newfontdict
	 														%... scale-factor index char
   dup /.notdef eq
   {
    pop pop
   }
   {												  %: width-array newname newfontdict
	 														%...	scale-factor index char
    5 index
    3 -1 roll get							%: width-array newname newfontdict
															%...	scale-factor char char-width
    2 index mul
    $met 3 1 roll put
   } ifelse
  } for
 } if

 pop													%: width-array newname newfontdict
 definefont pop   						% then, record that new font in the font list
															%: width-array
 pop
} bd

%----------------------------------------------------------------------------
% Proc: 	CorelIsValidCharpath
% Stack: 	@ftx bool
% Desc: 	checks current path if it has points or is bogus. Used mainly to
%				weed out space characters which only have a moveto in their path.
%			NOTE : can't just check if width or height = 0, even with 1 moveto as the
%			current path, interpreters will return a box with width and/or height
%----------------------------------------------------------------------------
/CorelIsValidCharpath
{
  pathbbox
  3 -1 roll

  sub abs 0.5 ge				% see if we have a width
  3 1 roll
  sub abs 0.5 ge				% see if we have a height
  and
} bd

%----------------------------------------------------------------------------
% Proc: 	@ftx
% Stack: 	string @ftx -
% Desc: 	fill text with pattern or fountain
%----------------------------------------------------------------------------
/@ftx
{
 {        												% loop for each character in the string
  currentpoint 3 -1 roll					%
  (0) dup 3 -1 roll 0 exch put		% convert integer into a string
  dup
  @gs
  true charpath        						% get character outline in path
  $ctm setmatrix       						% set matrix for pattern filling
  CorelIsValidCharpath						% check if we have a valid charpath
  {@@txt} if             					% pattern fill or fountain
  @gr
  @np
  % set current point for next character
  stringwidth pop 3 -1 roll add exch m
 } forall
} bd

%----------------------------------------------------------------------------
% Proc: 	@ft
% Stack: 	string @ft -
% Desc: 	fill current text object
%----------------------------------------------------------------------------
/@ft
{
 matrix currentmatrix exch    % save current transfo matrix on stack
 $sdf {$scf $sca $scp @ss} if % alternate halftone screen?
 $fil 1 eq               			% pattern fill?
 {/@@txt /@pf ld @ftx}    		% pattern fill on text
 {
  $fil 2 eq              			% fountain fill?
  {/@@txt /gradient_fill ld @ftx} 	% fountain fill on text
  {
   $fil 3 eq             			% Postscript fill?
   {/@@txt /@Pf ld @ftx}   		% PS fill on text
   {
	$fil 4 eq
    {/@@txt /output_shading_gradient ld @ftx} % Level3 shaded fill on text
	{
    FillOverprint safe_setoverprint
		FillColor /separate_set_color dexec				% separate and set fill color, returns TRUE if we fill, FALSE if not
    {show}               			% show text
    {pop} ifelse
	} ifelse
   } ifelse
  } ifelse
 } ifelse
 $sdf {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix                 		% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@st
% Stack: 	string @st -
% Desc: 	stroke current text object
%----------------------------------------------------------------------------
/@st
{
 matrix currentmatrix exch				% save current transfo matrix on stack
 $SDF {$SCF $SCA $SCP @ss} if			% alternate halftone screen?
 OutlineOverprint safe_setoverprint
 OutlineColor /separate_set_color	dexec		% separate and set current stroke color, returns TRUE if we paint, FALSE if not
 {
  {        												% loop for each character in the string
   currentpoint 3 -1 roll
   (0) dup 3 -1 roll 0 exch put		% convert integer into a string
   dup
   @gs
   true charpath          				% get character outline in path
   $ctm setmatrix $ptm concat			% set matrix for stroking
   stroke             						% stroke it
   @gr
   @np

   % set current point for next character
   stringwidth pop 3 -1 roll add exch m
  } forall
 }
 {pop} ifelse     % @scc_5
 $SDF {$dsf $dsa $dsp @ss} if % reset default halftone screen
 setmatrix              			% reset original transfo matrix on stack
} bd

%----------------------------------------------------------------------------
% Proc: 	@te
% Stack: 	string @te -
% Desc: 	prints text as filled only
%----------------------------------------------------------------------------
/@te
{
 @ft          								% fill that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tr
% Stack: 	string @tr -
% Desc: 	prints text as stroked only
%----------------------------------------------------------------------------
/@tr     											% prints text as stroked only
{
 @st          								% stroke that text
} bd

%----------------------------------------------------------------------------
% Proc: 	@ta
% Stack: 	string @ta -
% Desc: 	prints text as filled & stroked
%----------------------------------------------------------------------------
/@ta
{
 dup
 @gs @ft @gr        					% fill the text
 @st          								% then stroke text
} bd

%----------------------------------------------------------------------------
% Proc: 	@t@a
% Stack: 	string @t@a -
% Desc: 	prints text as stroked & filled
%----------------------------------------------------------------------------
/@t@a
{
 dup
 @gs @st @gr        					% stroke the text
 @ft          								% then fill text
} bd

%----------------------------------------------------------------------------
% Proc: 	@tm
% Stack: 	matrix @tm -
% Desc: 	set text matrix
%----------------------------------------------------------------------------
/@tm
{
 @sm        									% save current matrix
 concat
} bd

%----------------------------------------------------------------------------
% Proc: 	e
% Stack: 	- e -
% Desc: 	filled tex
%----------------------------------------------------------------------------
/e
{
 /t {@te} def      						% define operator t as @te
} bd

%----------------------------------------------------------------------------
% Proc: 	r
% Stack: 	- r -
% Desc: 	stroked text
%----------------------------------------------------------------------------
/r
{
 /t {@tr} def      						% define operator t as @tr
} bd

%----------------------------------------------------------------------------
% Proc: 	o
% Stack: 	- o -
% Desc: 	invisible text
%----------------------------------------------------------------------------
/o
{
 /t {pop} def      						% define operator t as nothing
} bd

%----------------------------------------------------------------------------
% Proc: 	a
% Stack: 	- a -
% Desc: 	fill&stroke text
%----------------------------------------------------------------------------
/a
{
 /t {@ta} def      						% define operator t as @ta
} bd


%----------------------------------------------------------------------------
% Proc: 	@a
% Stack: 	- @a -
% Desc: 	stroke&fill text
%----------------------------------------------------------------------------
/@a
{
 /t {@t@a} def     						% define operator t as @t@a
} bd

%----------------------------------------------------------------------------
% Proc:		t
% Stack: 	string t -
% Desc: 	text body
%----------------------------------------------------------------------------
/t {@te} def      						% default value: will be redefined by a,e,o,r, and I

%----------------------------------------------------------------------------
% Proc:		T
% Stack: 	- T -
% Desc: 	end text (restore)
%----------------------------------------------------------------------------
/T
{
 @np            							% Clear path.
 $ctm setmatrix   						% Reset current matrix.
 /$ttm matrix def 						% Reset extended text matrix.
} bd

%----------------------------------------------------------------------------
% Proc:		ddt
% Stack:
% Desc:
%----------------------------------------------------------------------------
/ddt
{
 t
} def   											% NO "bind def" because of t (can be modified)

%----------------------------------------------------------------------------
% Proc:		@t
% Stack: 	xpos ypos string  @t -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@t       										% paints a 1-character string at desired position
{
 /$stm $stm currentmatrix def % save current matrix
 3 1 roll           					% send string to bottom
 m                  					% move to character position
 $ttm concat              		% add text matrix
 ddt                    			% draw the character (current t operator)
 $stm setmatrix         			% restore saved matrix
} bd

%----------------------------------------------------------------------------
% Proc:		@n
% Stack: 	angle @n -
% Desc: 	paints a 1-character string at desired position
%----------------------------------------------------------------------------
/@n
{
 /$ttm exch matrix rotate def % modify current text matrix accordingly
} bd

%----------------------------------------------------------------------------
% Proc:		@s
% Stack: 	- @s -
% Desc: 	Mark a space
%----------------------------------------------------------------------------
/@s {} bd											% mark a space character in extended text

%----------------------------------------------------------------------------
% Proc:		@l
% Stack: 	- @l -
% Desc: 	Mark an end of line
%----------------------------------------------------------------------------
/@l {} bd        							% mark an end of line in extended text

%----------------------------------------------------------------------------
% Initalizations for CJK fonts
%----------------------------------------------------------------------------
/_lineorientation 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bitkey null def
/_bithibyte 0 def
%----------------------------------------------------------------------------
% Raster images support
%----------------------------------------------------------------------------

%----------------------------------------------------------------------------
% Proc: 	set_image_clipping
% Stack: 	cropllx croplly cropurx cropury matrix --> set_image_clipping -->
% Desc: 	set clipping path for image
%----------------------------------------------------------------------------
/set_image_clipping
{
 concat      									% integrate transfo right away
 3 index 3 index m        		% set clipping path(cropping rect)
 3 index 1 index l
 2 copy l
 1 index 3 index l
 3 index 3 index l
 clip         								% this is the clipping path
 pop pop pop pop							% pop cropping rect
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_parameters
% Stack: 	pxlwid pxlhei bits llx lly urx ury background foreground
%         		 ---> set_image_parameters -->
% Desc: 	sets image parameters from stack
%----------------------------------------------------------------------------
/set_image_parameters
{
	/$frg xd /$bkg xd						% foreground/background flags
	/$ury xd /$urx xd
	/$lly xd /$llx xd          	% bitmap rectangle
	/$ncl xd           					% # of color components
	/$bts xd           					% # of bits per color component
	/$hei xd /$wid xd           % pixel size
} bd

%----------------------------------------------------------------------------
% Proc:		output_image
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         		llx lly urx ury backgroundflag foregroundflag
%         		cropllx croplly cropurx cropury matrix
%        		dataproc --> output_image -->
%
% Desc: 	output bitmap image
%
% Parms:  pxlwid pxlhei 	size of bitmap in pixels
%         bits 				# of bits per sample
%         bitplanes  		# of color planes
%         llx lly urx ury 	total size of bitmap(before transfos)
%         backgroundflag
%						1: fill background with current fill,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         foregroundflag :
%						1: mask background with current stroke,
%           0: transparent background (only for monochrome/grayscale bitmaps)
%         cropllx croplly cropurx cropury: cropping rect (before transfos)
%         matrix 			 additional transfo matrix for stretching/rotating, etc..
%         dataproc :		data acquisition procedure
%
%       	Note:  pxlhei < 0 prints bitmap UPSIDE down
%
%----------------------------------------------------------------------------
/output_image
{
 /@cc xd											% store data aquisition procedure

	@sm @gs     								% save current ctm and graphics state
	set_image_clipping          % set CTM and clipping

	set_image_parameters				% store image parameters from stack

	SeparationMode /OnHost eq EpsFile and
	{
		separate_output_image
	}
	{
		output_composite_image
	} ifelse

	@gr $ctm setmatrix          % Restore graphics state & org matrix
} bd

%----------------------------------------------------------------------------
% Proc:		output_composite_image
% Stack: 	--> output_composite_image -->
% Desc: 		output bitmap image in composite mode
%----------------------------------------------------------------------------
/output_composite_image
{
	DocPsLevel 3 eq							% Using Level 3
	MaskedImage true eq	and
	{
		output_masked_image   		% call level 3 masked images code
	}
	{
	 $bts 1 gt              		% grayscale or color?
	 DocPsLevel 2 eq						% and using level 2 or 3?
	 DocPsLevel 3 eq or
	 and
	 {
		DevicenImage							% check if DeviceN image
		{
			output_devicen_image   	% output DeviceN image to Level2 and 3
		}
		{
			output_color_image			% call level 2 color bitmap code
		}ifelse
	 }
	 {													% level 1 or monochrome?
		$bts 1 eq    							% check for 1 bitplane (monochrome)
		{
		 output_monochrome_image
		}
		{
		 output_color_image_level1	% call level 1 bitmap code
		} ifelse
	 } ifelse
  } ifelse
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_image
% Stack: 	--> separate_output_image -->
% Desc: 		separates image according to global separation parameters then outputs it
%----------------------------------------------------------------------------
/separate_output_image
{
	@gs
	$bts 1 gt
	{
		separate_output_color_image
	}
	{
		separate_output_monochrome_image
	} ifelse
	@gr

	not	% if not separated to current plate, check if we need to knock image out
	{
		currentoverprint not
		{
			% knock out image by painting white rectangle
			1.0 SetGry
			wfill
		} if
	} if

	@np
} bd

%----------------------------------------------------------------------------
% Stack: 	file --> set_decode_filter --> file
% Params:	file - current file object with installed filter chain on top
% Desc: 	installs image data decode filter on top of filter chain
%----------------------------------------------------------------------------
/set_decode_filter
{
	ImageCompression /JPEG eq				% JPEG compression
	{
		/DCTDecode filter
	}
	{
		ImageCompression /RLE eq			% RunLengthDecode filter
		{
			/RunLengthDecode filter
		}
		{
			ImageCompression /LZW eq		% LZWDecode filter
			{
				/LZWDecode filter
			}if
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	create_datasource
% Stack: 	--> create_datasource --> file
%	Params:	file - current file object with installed filter chain on top
% Desc: 	creates image datasource as current file with edecoding filters chain
%----------------------------------------------------------------------------
/create_datasource
{
	currentfile
	
	DevicenImage not get_ps_level 2 gt or
	{	/ASCII85Decode filter
	}if

	set_decode_filter
} bd

%----------------------------------------------------------------------------
% Proc: 		set_image_strip_parameters
% Stack: 	numPlanes stripRows --> set_image_strip_parameters  -->
% Params:	numPlanes - number of planes to output image strip to
%				stripRows - number of image rows in single strip
% Desc: 		sets parameters for outputing image strip
%----------------------------------------------------------------------------
/set_image_strip_parameters
{
	/stripRows xd
	/numPlanes xd

	/stripBuffer										% buffer for strip data
		$wid $bts
		mul $ncl mul
		stripRows mul
		8 div
		ceiling cvi string
	def

	DevicenImage
	{
		/readstrip
		{
			DataSource stripBuffer readhexstring pop
		} bd
	}
	{
		/readstrip
		{
			DataSource stripBuffer readstring pop
		} bd
	}ifelse

	/stripHeight																% height of image strip
		$lly $ury sub stripRows mul $hei div
	def

	/stripOutBuffer															% buffer for strip data converted for output
		$wid stripRows mul numPlanes mul string
	def

	/strip_img_dict 8 dict def
	strip_img_dict begin
		/ImageType 1 def													% image type - there's only 1
		/Width $wid def														% source width
 		/Height stripRows def         						% source height
		/BitsPerComponent $bts def 								% bits per sample
 		/Decode
			[numPlanes {0 1} repeat] def						% decode output strip data
		/ImageMatrix 															% map unit square to source
			[ $wid 0 0 stripRows neg 0
				$hei 0 gt	{stripRows}{0}	ifelse			% matrix( upside down if $hei is negative )
			]
		def
 		/DataSource stripOutBuffer def						%	data source decode the entire bitmap
	end
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_color_image
% Stack: 	--> separate_output_color_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates color or grayscale image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_color_image
{
	/plateContent false def
	$ncl 1 eq
	{
		% grayscale image, separate to Black plate
		SeparationPlateName /Black eq
		{
			% output monochrome image to Black plate
			output_color_image
			/plateContent true def
		} if
	}
	{
		% separate DeviceN, CMYK or RGB image
		@np          									% no path but clipping

		/DataSource create_datasource def

		SeparateInColor
		{
			DocCmykSpace setcolorspace 			% CMYK colorspace for painting separation plates in color
			/numPlanes 4 def
		}
		{
			DocGrayScaleSpace setcolorspace % grayscale for default painting separation plates in black
			/numPlanes 1 def
		} ifelse

		% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
		/stripRows 65535 $wid $bts mul $ncl numPlanes max mul div floor cvi def

		numPlanes stripRows set_image_strip_parameters

		/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

		0 1 maxStripIndex 					% iterate through strips
		{
			/stripIndex exch def			% save buffer index

			/$t_ury										% calculate rectangle for strip image
				$ury stripHeight stripIndex mul add ceiling cvi
			def

			/$t_lly											% calculate rectangle for strip image
				$t_ury stripHeight add ceiling cvi
			def

			stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
			{
				numPlanes $hei maxStripIndex stripRows mul sub set_image_strip_parameters

				/$t_lly										% adjust strip image rectangle
					$t_ury stripHeight add ceiling cvi
				def
			} if

			readstrip pop								% read image data from the file

			@gs

			% separate color for each image pixel
			0 1 $wid stripRows mul 1 sub
			{
				/pixelIndex xd

				stripBuffer pixelIndex $ncl mul $ncl getinterval			% get color values array for single pixel from image strip

				{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

				% convert pixel color
				DevicenImage
				{
						ImageDevicenSpace create_devicen_color
				}
				{
					$ncl 3 eq
					{
						create_rgb_color
					}
					{
						create_cmyk_color
					} ifelse
				} ifelse

				/separate_color dexec

				{	% check if color has been separated to the current plate
					/plateContent true def
					% extract color values from colorspec
					begin
						color aload pop
					end
				}
				{
					pop numPlanes [ numPlanes 1 eq {1}{0}ifelse ] cvx repeat
				} ifelse


				numPlanes array astore																% pack alt colors value into array

				/pixelSepIndex pixelIndex numPlanes mul def

				/posColorant 0 def
				{
				 stripOutBuffer pixelSepIndex posColorant add 3 -1 roll 255 mul cvi put
				 /posColorant posColorant 1 add def										% put alt color values into separated strip buffer
				} forall
			} for

			$llx $t_lly Tl								% translate gstate origin
			$urx $llx sub
			$t_ury $t_lly sub scale				% set current scale for bitmap size

			strip_img_dict								% scanline image dictionary
			image													% draw image

			@gr
		}for

	  $SDF {$dsf $dsa $dsp @ss}if  		% reset default halftone screen
	} ifelse

	plateContent											% leave separation flag on stack
} bd

%----------------------------------------------------------------------------
% Proc:		separate_output_monochrome_image
% Stack: 	--> separate_output_monochrome_image --> separated
%				separated - true if image has been separated to current plate
% Desc: 		separates monochrome image according to global
%				separation parameters and then outputs it
%----------------------------------------------------------------------------
/separate_output_monochrome_image
{
	SeparationPlateName /Black eq
	{
		% output monochrome image to Black plate
		output_monochrome_image true
	}
	{
		false
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_monochrome_image
% Stack:  --> output_monochrome_image -->
% Desc: 	Outputs Grayscale/Mono bitmap
%----------------------------------------------------------------------------
/output_monochrome_image
{
	$frg 1 eq                 			% Check if foreground flag is set.
	{
		OutlineOverprint safe_setoverprint
		ImageForegroundColor /separate_set_color dexec		% Set foreground color
		{1}{0}ifelse
		/$frg xd
	}
	{
		/$frg false def
	} ifelse

	$bkg 1 eq                 % Check if background flag is set.
	{                      		% Not set for bitmap fill.
	 @gs $ctm setmatrix
	 F
	 @gr
	} if

	@np          								% no path but clipping

	/$dat $wid $bts mul 8 div ceiling cvi string def    % string for data entry (each scan line)

	$bkg $frg add 1 ge
	{
		$SDF {$SCF $SCA $SCP @ss}if % alternate halftone screen? (determined by stroke attribs)
																% set params for the imagemask/image operator
		$llx $lly Tl
		$urx $llx sub $ury $lly sub scale

		% For monochrome bitmaps, the foreground colour is currently set.
		$bkg 1 eq
		{
		 FillColor /separate_set_color dexec pop
		} if

		$wid $hei abs          			% if height is negative, print it upside down
		$bts 1 eq
		{$bkg 1 ge }
		{$bts 1 ge }
		ifelse 											% either false or #bits/sample
		[ $wid 0 0
			$hei neg 0
			$hei 0 gt{$hei}{0}ifelse] % matrix(upside down if $hei is negative)
		/tcc load             			% @cc can be redefined
		$bts 1 eq
		{imagemask}
		{image}
		ifelse

		$SDF {$dsf $dsa $dsp @ss}if % reset default halftone screen
	}
	{
		$hei abs {tcc pop} repeat   % skip all lines
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 		output_color_image_level1
% Stack: 	--> output_color_image_level1 -->
% Desc: 		Outputs color bitmap on level 1 device
%----------------------------------------------------------------------------
/output_color_image_level1
{
	@np          								     % no path but clipping
	$ngx    											   % set screening function

	$llx $lly Tl
	$urx $llx sub
	$ury $lly sub scale              % set current scale for bitmap size
																	 % set parameters on stack for colorimage call:
	$wid $hei abs $bts        		   % width height #bits matrix
	[ $wid 0 0
	 $hei neg 0
	 $hei 0 gt{$hei}{0}ifelse        % matrix(upside down if $hei is negative)
	]

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def     % string for data entry (each scan line)

	$msimage false eq
	$ncl 1 eq or
	{                                % single-stream colorimage or grayscale
	 /@cc load
	 false $ncl
	 ColorImage              			   % colorimage redefined.
	}
	{                                % set parameters for multi-stream colorimage
	 $wid $bts mul 8 div ceiling cvi % calculate length of string
	 $ncl 3 eq
	 {                               % RGB colorimage
		 dup dup
		 /$dat1 exch string def        % string for data entry, Red component.
		 /$dat2 exch string def        % string for data entry, Green component.
		 /$dat3 exch string def        % string for data entry, Blue component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
	 }
	 {                               % CMYK colorimage
		 dup dup dup
		 /$dat1 exch string def        % string for data entry, Cyan component.
		 /$dat2 exch string def        % string for data entry, Magenta component.
		 /$dat3 exch string def        % string for data entry, Yellow component.
		 /$dat4 exch string def        % string for data entry, Black component.
		 /@cc1 load
		 /@cc2 load
		 /@cc3 load
		 /@cc4 load
	 } ifelse
	 true $ncl ColorImage
	} ifelse

	$SDF {$dsf $dsa $dsp @ss} if      % reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc1
% Stack: 	- @cc1 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc1
{
 currentfile $dat1 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc2
% Stack: 	- @cc2 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc2
{
 currentfile $dat2 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc3
% Stack: 	- @cc3 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc3
{
 currentfile $dat3 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Proc: 	@cc4
% Stack: 	- @cc4 string
% Desc: 	collect bitmap data from currentfile (input)
%----------------------------------------------------------------------------
/@cc4
{
 currentfile $dat4 readhexstring pop
} bd

%----------------------------------------------------------------------------
% Multi-Stream Image ($msimage)
% sets the default value for the $msimage operator.
%
% false : the image contains one data stream
% true  : the image data is specified in multi-stream input
%----------------------------------------------------------------------------
/$msimage false def

%----------------------------------------------------------------------------
% sets the default value for the compression method, by default
% we do NOT use any filters,
%
% 0 : no compression is set
% 1 : indicates a JPEG compression filter
% 2 : a Run Length Encoding filter
% 3 : LZW compression filter
%----------------------------------------------------------------------------
/ImageCompression /None def
/MaskedImage false def

/DevicenImage false def

%----------------------------------------------------------------------------
% Proc: 		output_color_image
% Stack: 	--> output_color_image -->
% Desc: 		Output color bitmap using Level 2 image dictionary
%----------------------------------------------------------------------------
/output_color_image
{
	@np          									% no path but clipping

	$ncl 1 eq											% set device color space
	{DocGrayScaleSpace}						%	use document's grayscale colorspace
	{
		$ncl 3 eq
		{DocRgbSpace}								%	use document's RGB colorspace
		{DocCmykSpace}							%	use document's CMYK colorspace
		ifelse
	} ifelse
	setcolorspace

	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)

	$ngx    											% set screening function

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub $ury $lly sub scale  % set current scale for bitmap size

	8 dict begin                 	% start a Level 2 image dictionary
		/ImageType 1 def            % required: image type - there's only 1
		/Width $wid def							%	required: source width
		/Height $hei abs def        % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode                     % required: decode array (to follow)
			[ $ncl { 0 1 } repeat ]		% create decode array for DeviceN image
		def
		/ImageMatrix 								% required: map unit square to source
			[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
			]
		def                      		% matrix(upside down if $hei is negative)
		/DataSource create_datasource def
	currentdict end              	% end image dictionary
	image			              			% call the image operator
	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		simulate_devicen_image
% Stack: 	--> simulate_devicen_image -->
% Desc: 		simulating DeviceN image on Level 2 device by overprinting n  single-channel images
% Notes:		as there is not enough memory to hold whole image we output image strip by strips
%----------------------------------------------------------------------------
/simulate_devicen_image
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	/DataSource create_datasource def

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl mul div floor cvi def

	1 stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex						% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			1 $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		% simulate DeviceN output by overprinting n single channel images
		@gs

		$llx $t_lly Tl					% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub
		scale										% set current scale for bitmap size

		0 1 $ncl 1 sub						% iterate through DeviceN plates
		{
			@gs
			/inkIndex exch def			% save current DeviceN plate index

			0 1 stripOutBuffer length 1 sub
			{
				dup
				$ncl mul inkIndex add stripBuffer exch get
				stripOutBuffer 3 1 roll put
			}for

			[ /Separation colorantNames inkIndex  get altColorSpace
				{																					% construct one channel tint transform function
					$ncl 1 sub {0} repeat										% convert single colorant color into n-channel DeviceN color
					$ncl inkIndex roll
					tintProc																% convert DeviceN color into alternative colorspace
				}
			] setcolorspace

			inkIndex 0 gt
			{
				true setoverprint
			} if

			strip_img_dict image		% draw single scanline image

			@gr			              	% restore graphics state
		}for
		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_alt
% Stack: 	--> output_devicen_image_alt -->
% Desc: 		outputing DeviceN image to Level 2 device in alternative colorspace
%----------------------------------------------------------------------------
/output_devicen_image_alt
{
	@np          										% no path but clipping
	$ngx    												% set screening function

	/colorantNames	ImageDevicenSpace 1 get def		% get DeviceN colorants name
	/altColorSpace ImageDevicenSpace 2 get	def		% get DeviceN alternative colorspace
	/tintProc ImageDevicenSpace 3 get def					% get tint procedure to convert from DeviceN to alt colorspace

	% determine how many colorants are in alternative colorspace
	altColorSpace DocCmykSpace eq
	{
		/numAltChannels 4 def
	}
	{
		altColorSpace DocRgbSpace eq
		{
			/numAltChannels 3 def
		}
		{
			/numAltChannels 1 def
		} ifelse
	}ifelse

	/DataSource create_datasource def
	
	altColorSpace setcolorspace			% use alternative colorspace

	% claculate strip size  ( in image rows )  to fit PostScript string length limit of 65535
	/stripRows 65535 $wid $bts mul $ncl numAltChannels max mul div floor cvi def

	numAltChannels stripRows set_image_strip_parameters

	/maxStripIndex $hei stripRows div ceiling cvi 1 sub def

	0 1 maxStripIndex 							% iterate through strips
	{
		/stripIndex exch def			% save buffer index

		/$t_ury										% calculate rectangle for strip image
			$ury stripHeight stripIndex mul add ceiling cvi
		def

		/$t_lly										% calculate rectangle for strip image
			$t_ury stripHeight add ceiling cvi
		def

		stripIndex maxStripIndex eq % last strip, adjust strip size to fit all data that remains
		{
			numAltChannels $hei maxStripIndex stripRows mul sub set_image_strip_parameters

			/$t_lly										% adjust strip image rectangle
				$t_ury stripHeight add ceiling cvi
			def
		} if

		readstrip pop							% read image data from the file

		@gs

		% output DeviceN image in alternative colorspace
		0 1 $wid stripRows mul 1 sub
		{
			/pixelIndex xd

			stripBuffer pixelIndex $ncl mul $ncl getinterval			% get DeviceN color values array for single pixel from image scanline

			{ 255 div } forall																		% image colors are 0..255 encoded, convert to 0.0..1.0

			tintProc exec																					% convert DeviceN 0.0..1.0 encoded color values to alt colorspace

			numAltChannels array astore														% pack alt colors value into array

			/pixelAltIndex pixelIndex numAltChannels mul def

			/posColorant 0 def
			{
			 stripOutBuffer pixelAltIndex posColorant add 3 -1 roll 255 mul cvi put
			 /posColorant posColorant 1 add def										% put alt color values into alt colorspace scanline
			} forall
		} for

		$llx $t_lly Tl								% translate gstate origin
		$urx $llx sub
		$t_ury $t_lly sub scale				% set current scale for bitmap size

		strip_img_dict								% scanline image dictionary
		image													% draw image

		@gr
	}for

  $SDF {$dsf $dsa $dsp @ss}if  				% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 		output_devicen_image_native
% Stack: 	--> output_devicen_image_native -->
% Desc: 		Output DeviceN image natively in Level3
%----------------------------------------------------------------------------
/output_devicen_image_native
{
	@np          											% no path but clipping
	$ngx    													% set screening function

	ImageDevicenSpace setcolorspace		% set DeviceN colorspace

	/scanline
		$wid $bts
		mul $ncl mul
		8 div
		ceiling cvi string
	def 															% string for scanline data

	/readscanline
	{
		currentfile	scanline readhexstring pop
	} bind def

	$llx $lly Tl											% translate gstate origin
	$urx $llx sub $ury $lly sub scale % set current scale for bitmap size

	8 dict begin                 			% start a Level 2 image dictionary
		/ImageType 1 def             		% image type - there's only 1
		/Width $wid def									%	source width
		/Height $hei abs def         		% source height
		/BitsPerComponent $bts def 			%	bits per sample
		/Decode                     		% decode array (to follow)
			[ $ncl { 0 1 } repeat ]				% create decode array for DeviceN image
		def
		/ImageMatrix 										% required: map unit square to source
		[ $wid 0 0 $hei neg 0
				$hei 0 gt	{$hei}{0}	ifelse
		]	def                      			% matrix(upside down if $hei is negative)
		/DataSource											%	required: data source decode the entire bitmap
		{
			readscanline
		} def
	currentdict end              			% end image dictionary

	image			              					% call the image operator

  $SDF {$dsf $dsa $dsp @ss}if  			% reset default halftone screen
} bd


%----------------------------------------------------------------------------
% Proc: 	output_devicen_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix --> output_devicen_image -->
%
% Desc: 	Output DeviceN image
%
% Parms: 	colorspace				DeviceN image colorspace
%					pxlwid pxlhei 		size of bitmap in pixels
%         bits 							bits per component
%         ncolors 					color components (RGB=3, CMYK=4)
%         llx lly urx ury 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix: 					transfo matrix for stretching/rotating, etc..
%					Note :	Level 3 device - image will be output in native DeviceN colorspace
%									Level 2 Distiller or in-RIP separation - image will be output as
%									series of N overprinted bitmaps ( scanline by scanline )
%									Level 2 composite - image will be output in alternative colorspace
%
%----------------------------------------------------------------------------
/output_devicen_image
{
	Level3
	{
		output_devicen_image_native
	}
	{
		get_simulate_devicen
		{
			simulate_devicen_image
		}
		{
			output_devicen_image_alt
		} ifelse
	} ifelse
} bd

%----------------------------------------------------------------------------
% Proc: 	output_masked_image
%
% Stack: 	pxlwid pxlhei bits ncolors llx lly urx ury cropllx croplly
%					cropurx cropury	matrix output_masked_image -
%
% Desc: 	Output level 3 color bitmap with mask
%
% Parms: 	pxlwid 	:
%					pxlhei	: size of bitmap in pixels
%         bits		: bits per component
%         ncolors	: color components (RGB=3, CMYK=4)
%         llx lly urx ury: 	size of bitmap (before transfos)
%         cropllx croplly cropurx cropury: cropping rectangle (before transfos)
%         matrix	: transfo matrix for stretching/rotating, etc.
%
%----------------------------------------------------------------------------
/output_masked_image
{
	/$dat $wid $bts mul $ncl mul
	8 div ceiling cvi string def 	% string for data entry (each scan line)
	$ngx    											% set screening function

	DevicenImage									% DeviceN image
	{
		ImageDevicenSpace
	}
	{
		$ncl 1 eq										% set device color space
		{DocGrayScaleSpace}         %	use document's grayscale colorspace
		{
			$ncl 3 eq
			{DocRgbSpace}             %	use document's RGB colorspace
			{DocCmykSpace}            %	use document's CMYK colorspace
			ifelse
		} ifelse
	} ifelse
	setcolorspace

	$llx $lly Tl									% translate gstate origin
	$urx $llx sub
	$ury $lly sub scale						% set current scale for bitmap size

	/ImageDataDict 8 dict def			% start image data dictionary
	ImageDataDict begin
		/ImageType	1 def           % modified type 1 image dictionary
		/Width			$wid def				%	required: source width
		/Height			$hei abs def    % required: source height
		/BitsPerComponent $bts def 	%	required: bits per sample
		/Decode											% required: decode array (to follow)
		[ $ncl { 0 1 } repeat ]
		def

		/ImageMatrix [ 							%	required: image matrix
			$wid 0 0 $hei neg 0
			$hei 0 gt{$hei}{0} ifelse %	matrix(upside down if $hei is negative)
 		] def

		/DataSource create_datasource def
	end                           % end image data dictionary

	/MaskedImageDict 7 dict def   % start masked image dictionary
	MaskedImageDict begin
		/ImageType 3 def            % masked image
		/InterleaveType 3 def       % mask and data appear in separate streams
		/MaskDict ImageMaskDict def % dictionary to define mask
		/DataDict ImageDataDict def % dictionary to define data
	end

  MaskedImageDict image					% do the image

	$SDF {$dsf $dsa $dsp @ss}if  	% reset default halftone screen
} bd

%----------------------------------------------------------------------------
% Proc: 	set_image_mask
% Stack: 	pxlwid pxlhei bits set_image_mask -
%
% Desc: 	Level 3 set mask for masked images
%
% Parms: 	pxlwid 	:	Width of mask in pixels
%					pxlhei	: Height of mask in pixels
%         bits		: bits per mask component, must be 1 for InterleaveType 3
%----------------------------------------------------------------------------
/set_image_mask
{
	/$mbts xd           					% store # of bits for mask
	/$mhei xd 										%	height of mask
	/$mwid xd            					% width of mask

	/ImageMaskDict 8 dict def
	ImageMaskDict begin
		/ImageType 1 def            % modified type 1 image dictionary
		/Width		 $mwid def				%	required: source width
		/Height		 $mhei abs def		% required: source height
		/BitsPerComponent $mbts def %	required: bits per sample, must be 1 for InterleaveType 3

		/DataSource maskstream def	%	required for InterleaveType 3: data source of the mask

		/ImageMatrix [ 							%	required: image matrix
			$mwid 0 0 $mhei neg 0
			$mhei 0 gt
			{$mhei}{0} ifelse					%	matrix(upside down if $hei is negative)
 		] def

		/Decode [ 1 0 ] def         % required: mask 0 values.
	end                           % end image mask dictionary
} bd

%----------------------------------------------------------------------------
% Proc:		@daq
% Stack: 	one or more <arrays of data strings | data strings> daq -
% Desc: 	standard bitmap data acquistion routine
% NOTE:		This assumes ONLY arrays of data strings or data
%         strings are on the stack and that there are ENOUGH data
%         strings (total) for the specified bitmap.
%----------------------------------------------------------------------------
/@daq
{
 dup type /arraytype eq   		% is this an array
 {
  aload pop          					% dump strings in array onto stack
 }
 if            								% otherwise, should be a string, so leave it
} bd

%----------------------------------------------------------------------------
% Proc:		skip_image_body
%
% Stack: 	pxlwid pxlhei bits bitplanes
%         llx lly urx ury backgroundflag foregroundflag
%         cropllx croplly cropurx cropury matrix
%         dataproc --> skip_image_body -->
%
% Desc: 	skip over image binary body leaving stack clean

% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/skip_image_body
{
	8 rp  					% get rid of parameters on stack we do not need
	/$ury xd /$urx xd       % store the image rectangle
	/$lly xd /$llx xd       % still storing the image rectangle
	/$ncl xd           		% store # of color components
	/$bts xd           		% store # of bits per color component
	/$hei xd /$wid xd       % store pixel size

	DevicenImage not
	ImageCompression /JPEG eq or
	ImageCompression /RLE eq or
	ImageCompression /LZW eq or
	{
		create_datasource flushfile
	}
	{
		/scanline			% define string to keep single string of image data
			$wid $bts
			mul $ncl mul
			8 div
			ceiling cvi string
		def

		0 1 $hei 1 sub			% iterate through image rows
		{
			pop
			currentfile scanline readhexstring
			pop pop				% discard whatever we read
		}for
	}ifelse
}bd

%----------------------------------------------------------------------------
% Proc:		disable_raster_output
%
% Stack: 	--> disable_raster_output -->
%
% Desc: 	overload output_image procedure by skip_image_body procedure
%					which skips image data
%
% NOTE:		This call should be followed by enable_raster_output call to restore
%					output_image function
%----------------------------------------------------------------------------
/disable_raster_output
{
	deflevel 0 eq { @rs	} if
		
	/output_image load					% load current output_image function
	/output_image_original exch	% and save it
	def													% bind it there

	/output_image /skip_image_body load def	% overload function
	
	globaldict begin /bSkipDeviceNImage true def end
	
	deflevel 0 eq { @sv	} if
}def

%----------------------------------------------------------------------------
% Proc:		enable_raster_output
% Stack: 	--> enable_raster_output -->
% Desc: 	Function restores overloaded output_image function
% NOTE:		This call should go after disable_raster_output call
%----------------------------------------------------------------------------
/enable_raster_output
{
	deflevel 0 eq { @rs	} if
	
	/bSkipDeviceNImage where		% check whether output_image has been overloaded
	{
		/bSkipDeviceNImage undef
		
		/output_image /output_image_original load def		% load original raster function and assign it to output_image
	}if
	
	deflevel 0 eq { @sv	} if
}def


end
%%EndResource
%%EndProlog
%%BeginSetup
wCorel15Dict begin
@BeginSysCorelDict
/$dcm matrix currentmatrix def
@ssa
1.00 setflat
/$fst 128 def
%%EndSetup

%%Page: 1 1
%%ViewingOrientation: 1 0 0 1
%%BoundingBox: 0 0 595 841
%LogicalPage: 1
%%BeginPageSetup
@sv
@sm
@sv
%%EndPageSetup
@rax %Note: Object
98.29049 591.34677 285.61153 805.53628 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
220.78885 784.41109 m
216.57458 786.02145 215.47049 784.40088 212.29682 775.66450 C
208.06583 764.01694 205.57474 754.83043 202.71033 742.54876 C
194.08054 705.55039 188.14904 667.01169 179.48041 628.86954 C
178.28561 623.61241 172.54176 609.83773 169.52967 604.70107 C
165.61928 598.03200 162.60775 594.88129 155.97666 597.92939 C
154.75238 598.49206 151.34598 599.66476 152.48920 601.75559 C
153.68542 603.94365 156.01521 601.11496 156.96340 600.28101 C
158.71975 598.73584 160.98009 599.28378 162.74098 600.52989 C
168.37512 604.51710 176.44564 628.01717 178.24734 636.32636 C
186.49729 674.38176 190.62227 712.59931 200.77172 750.19720 C
203.86091 761.64265 207.33619 771.26117 211.24573 782.19156 C
212.00825 784.32293 212.67128 786.48690 214.84006 787.63493 C
215.86961 788.40510 218.19175 789.18576 220.47761 788.75575 C
223.96904 787.99606 224.98498 784.92274 224.07137 783.81921 c
223.56964 783.21317 222.83490 783.44447 220.78885 784.41109 C
@c
98.44044 721.17638 m
98.57962 716.30107 103.23184 697.50198 106.31594 693.20636 c
109.40003 688.91074 125.29020 666.65849 126.39713 665.31883 C
132.71924 657.66926 142.67083 645.42841 144.53858 635.51594 C
146.53956 624.89565 147.87269 613.05902 147.71197 602.23068 c
147.50957 588.60765 155.50101 591.63080 183.44835 591.63619 c
202.14425 591.63959 215.20318 588.93987 215.26157 603.09609 C
215.64198 613.04740 218.90750 623.67364 222.86891 632.64983 C
223.54554 634.18252 224.16548 635.13326 225.42378 636.25153 C
232.23260 642.30378 245.02309 638.58557 256.50000 639.93798 C
262.48337 640.64324 265.31178 640.88277 268.40551 646.74142 C
269.93112 649.63106 270.39373 653.59020 269.40472 656.71285 C
267.70054 662.09499 268.45030 661.21710 270.49805 665.80696 C
272.12995 669.46535 268.98945 671.03688 271.44822 675.60661 C
273.11386 678.70205 275.02838 681.12709 273.78964 685.07773 C
273.37493 686.40038 270.64035 690.28356 273.56372 694.82069 C
274.94107 696.95830 279.46857 697.35005 282.08891 698.61402 C
285.30595 700.16598 286.44293 703.09701 284.98564 706.36422 C
282.90529 711.02721 278.03339 716.72712 274.73301 720.79767 C
272.89162 723.06879 270.68740 724.96035 268.66063 727.04494 C
267.32948 728.41380 264.33978 733.14907 264.60794 735.00973 C
265.26387 739.56104 266.22227 736.09257 265.37471 746.02715 C
264.97871 750.67087 256.36904 767.30173 253.61206 771.40630 C
245.69688 786.13654 215.41068 801.72057 199.67499 804.15298 C
190.42809 805.58192 187.51096 805.85461 178.11043 805.19698 C
172.07915 804.77546 167.44507 803.34794 161.69499 801.80646 C
158.30617 800.93112 144.27638 794.03641 141.69345 792.34923 C
124.95713 781.41770 117.64687 776.53899 106.05175 758.90721 C
97.91121 746.52803 98.02460 735.75524 98.44044 721.17638 C
@c
F

@rax %Note: Object
147.50135 573.70422 213.71528 587.32072 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 587.32072 m
203.16784 587.32072 213.71528 585.97483 213.71528 580.51247 c
213.71528 575.05011 203.16813 573.70422 180.60831 573.70422 c
158.04850 573.70422 147.50135 575.05039 147.50135 580.51247 c
147.50135 585.97455 158.04879 587.32072 180.60831 587.32072 c
@c
F

@rax %Note: Object
152.25789 596.76180 224.38913 788.87849 @E
/$fm 0 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
179.48041 628.86954 m
188.14904 667.01169 194.08054 705.55039 202.71033 742.54876 C
205.57474 754.83043 208.06583 764.01694 212.29682 775.66450 C
215.47049 784.40088 216.57458 786.02145 220.78885 784.41109 C
222.83490 783.44447 223.56964 783.21317 224.07137 783.81921 c
224.98498 784.92274 223.96904 787.99606 220.47761 788.75575 C
218.19175 789.18576 215.86961 788.40510 214.84006 787.63493 C
212.67128 786.48690 212.00825 784.32293 211.24573 782.19156 C
207.33619 771.26117 203.86091 761.64265 200.77172 750.19720 C
190.62227 712.59931 186.49729 674.38176 178.24734 636.32636 C
176.44564 628.01717 168.37512 604.51710 162.74098 600.52989 C
160.98009 599.28378 158.71975 598.73584 156.96340 600.28101 C
156.01521 601.11496 153.68542 603.94365 152.48920 601.75559 C
151.34598 599.66476 154.75238 598.49206 155.97666 597.92939 C
162.60775 594.88129 165.61928 598.03200 169.52967 604.70107 C
172.54176 609.83773 178.28561 623.61241 179.48041 628.86954 C
@c
F

@rax %Note: Object
147.50135 556.27115 213.71528 569.88765 @E
/$fm 0 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
180.60831 569.88765 m
203.16784 569.88765 213.71528 568.54176 213.71528 563.07940 c
213.71528 557.61704 203.16813 556.27115 180.60831 556.27115 c
158.04850 556.27115 147.50135 557.61732 147.50135 563.07940 c
147.50135 568.54148 158.04879 569.88765 180.60831 569.88765 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
245.77682 622.16844 m
239.28066 622.28438 L
239.28066 619.26831 L
231.27676 619.38454 L
231.27676 622.40031 L
224.66466 622.51654 L
235.33682 632.84031 L
245.77682 622.16844 L
@c
239.16472 615.09231 m
239.04879 606.74031 L
231.04460 606.85654 L
231.16082 615.20854 L
239.16472 615.09231 L
@c
239.04879 602.56431 m
238.93285 594.21231 L
230.92866 594.32854 L
231.04460 602.68054 L
239.04879 602.56431 L
@c
238.81663 590.03631 m
238.70069 581.68431 L
230.69679 581.80054 L
230.81272 590.15254 L
238.81663 590.03631 L
@c
238.70069 577.50831 m
238.58476 569.15631 L
230.58085 569.27254 L
230.69679 577.62454 L
238.70069 577.50831 L
@c
238.46882 564.28441 m
238.35260 558.02041 L
230.34869 558.13635 L
230.46463 564.40035 L
238.46882 564.28441 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
271.29657 565.56057 m
271.29657 556.51238 L
249.37257 556.62831 L
249.72066 628.78054 L
257.49269 629.82454 L
257.14460 565.67650 L
271.29657 565.56057 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.51 0.51 0.99  create_rgb_color set_solid_fill
303.66057 612.30841 m
303.66057 611.38035 L
302.73250 573.68041 l
302.34586 560.99764 297.82205 554.65654 289.16050 554.65654 c
280.18998 554.65654 275.78183 560.88170 275.93660 573.33231 c
275.93660 574.72441 L
276.98060 612.42435 l
277.05798 617.37364 278.10198 621.35631 280.11260 624.37238 c
282.50986 628.08435 286.02850 629.94047 290.66854 629.94047 c
295.30857 629.94047 298.71128 628.04580 300.87666 624.25644 c
302.88728 621.08561 303.81534 617.10293 303.66057 612.30841 c
@c
295.65666 613.12054 m
295.65666 615.13115 295.30857 616.94844 294.61266 618.57241 c
293.52983 620.66041 292.13802 621.70441 290.43666 621.70441 c
288.65792 621.70441 287.26583 620.62186 286.26066 618.45647 c
285.56476 616.98699 285.13928 615.13115 284.98450 612.88838 c
283.94050 571.24431 l
283.86340 569.31109 284.21121 567.53235 284.98450 565.90838 c
285.91257 563.82038 287.26583 562.77638 289.04457 562.77638 c
290.82331 562.77638 292.25395 563.82038 293.33650 565.90838 c
294.11008 567.45496 294.49672 569.31109 294.49672 571.47647 c
295.65666 613.12054 l
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.93657 576.46431 m
333.93657 561.07502 329.52869 553.38038 320.71266 553.38038 c
312.20589 553.38038 307.75918 559.83770 307.37254 572.75235 c
306.44447 611.49628 l
306.36737 616.29109 307.33398 620.23493 309.34460 623.32838 c
311.74186 626.88586 315.29934 628.66431 320.01647 628.66431 c
323.72844 628.66431 326.82189 627.15628 329.29654 624.14050 c
331.38454 621.43370 332.42854 616.87106 332.42854 610.45228 c
332.42854 610.06564 332.42854 609.56306 332.42854 608.94454 c
332.42854 608.32573 332.38998 607.51361 332.31260 606.50844 c
332.31260 602.56431 L
324.19247 602.33244 L
324.19247 602.71909 324.21175 603.24094 324.25058 603.89830 c
324.28913 604.55565 324.32797 605.25184 324.36652 605.98630 c
324.40535 606.72104 324.44391 607.43650 324.48246 608.13241 c
324.52129 608.82831 324.54057 609.40828 324.54057 609.87231 c
324.54057 616.67773 322.87776 620.08044 319.55244 620.08044 c
316.07263 620.08044 314.33244 617.41247 314.33244 612.07654 c
315.60860 568.34447 l
316.07263 564.09109 317.85109 561.96454 320.94454 561.96454 c
324.50202 561.96454 326.28047 565.79244 326.28047 573.44854 C
326.28047 573.29376 326.24192 573.93184 326.16454 575.36249 c
326.08715 576.79313 325.97121 578.97780 325.81644 581.91647 C
333.82063 582.14835 L
333.89802 580.83364 333.93657 579.67370 333.93657 578.66854 c
333.93657 577.74047 333.93657 577.00573 333.93657 576.46431 c
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
367.34428 555.35244 m
359.22444 555.46838 L
356.90457 573.56447 L
346.58050 573.91257 L
344.26035 558.02041 L
336.60454 558.13635 L
347.97231 630.05641 L
358.76041 629.82454 L
367.34428 555.35244 L
@c
356.20838 582.49644 m
353.19231 614.97638 L
347.85638 582.72831 L
356.20838 582.49644 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
408.87241 626.69254 m
408.87241 554.54031 L
401.56441 554.54031 L
401.68035 604.88447 L
392.28435 554.54031 L
388.80425 554.54031 L
379.64041 605.00041 L
379.75635 556.62831 L
372.56428 556.62831 L
372.68022 626.69254 L
383.58425 626.69254 L
390.66038 580.75654 L
397.85244 626.69254 L
408.87241 626.69254 L
@c
F

@rax %Note: Object
223.50472 552.22044 440.30835 632.84031 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
440.30835 605.92847 m
440.30835 593.86450 437.36967 587.09764 431.49231 585.62844 c
430.64164 585.39628 427.66441 585.16441 422.56035 584.93254 C
423.60435 555.00435 L
415.83231 553.72847 L
413.28028 626.80847 L
417.68844 626.96296 420.97493 627.07918 423.14031 627.15628 c
425.30570 627.23367 426.46564 627.27250 426.62041 627.27250 c
435.74570 627.27250 440.30835 620.15783 440.30835 605.92847 c
@c
432.30444 604.30450 m
432.30444 609.40828 432.03373 612.61767 431.49231 613.93238 c
430.33238 616.71628 427.66441 618.10838 423.48841 618.10838 c
423.17887 618.10838 422.83106 618.10838 422.44441 618.10838 c
422.13487 618.10838 421.78706 618.06983 421.40041 617.99244 C
422.21225 593.98044 L
423.21770 593.90306 424.91906 593.98044 427.31631 594.21231 c
430.64164 594.75373 432.30444 598.11789 432.30444 604.30450 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
148.45209 539.78712 m
148.45209 541.77279 148.94022 543.24454 149.91902 544.19953 c
150.73342 544.99238 151.72753 545.39206 152.90164 545.39206 c
154.20699 545.39206 155.27452 544.90961 156.10082 543.94101 c
156.93052 542.97581 157.34211 541.64183 157.34211 539.93906 c
157.34211 538.55660 157.15928 537.47093 156.79304 536.68148 c
156.42709 535.88863 155.89361 535.27521 155.19515 534.83726 c
154.49386 534.39959 153.73106 534.18246 152.90164 534.18246 c
151.57502 534.18246 150.50154 534.66151 149.68120 535.62671 c
148.86057 536.58850 148.45209 537.97408 148.45209 539.78712 c
@c
150.10526 539.78712 m
150.10526 538.41203 150.37058 537.38476 150.90123 536.70217 c
151.43187 536.01619 152.09972 535.67490 152.90164 535.67490 c
153.70072 535.67490 154.36573 536.01959 154.89638 536.70557 c
155.42391 537.39156 155.68923 538.43953 155.68923 539.84580 c
155.68923 541.17298 155.42391 542.17956 154.89014 542.86186 c
154.35638 543.54444 153.69477 543.88573 152.90164 543.88573 c
152.09972 543.88573 151.43187 543.54444 150.90123 542.86554 c
150.37058 542.18636 150.10526 541.15909 150.10526 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
160.71222 534.42369 m
159.22091 534.42369 L
159.22091 549.22876 L
160.82844 549.22876 L
160.82844 543.94781 L
161.50819 544.90961 162.37446 545.39206 163.42668 545.39206 c
164.01231 545.39206 164.56422 545.25770 165.08551 544.99238 c
165.60737 544.72677 166.03427 544.35118 166.37272 543.87184 c
166.70835 543.38939 166.97367 542.81027 167.16274 542.12769 c
167.35493 541.44879 167.44932 540.72142 167.44932 539.94926 c
167.44932 538.10844 167.04652 536.68828 166.24148 535.68539 c
165.43956 534.68220 164.47266 534.18246 163.34731 534.18246 c
162.22791 534.18246 161.34973 534.70970 160.71222 535.76816 C
160.71222 534.42369 L
@c
160.69380 539.86649 m
160.69380 538.58069 160.84970 537.65348 161.15754 537.08145 c
161.66381 536.14375 162.35008 535.67490 163.21323 535.67490 c
163.91764 535.67490 164.52454 536.01959 165.03704 536.71238 c
165.54926 537.40205 165.80551 538.42904 165.80551 539.79761 c
165.80551 541.19707 165.55833 542.23115 165.06737 542.89644 c
164.57641 543.56173 163.98170 543.89622 163.28636 543.89622 c
162.58195 543.89622 161.97506 543.55153 161.46255 542.86186 c
160.95033 542.17247 160.69380 541.17298 160.69380 539.86649 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
168.80627 539.78712 m
168.80627 541.77279 169.29439 543.24454 170.27320 544.19953 c
171.08759 544.99238 172.08170 545.39206 173.25581 545.39206 c
174.56117 545.39206 175.62869 544.90961 176.45499 543.94101 c
177.28469 542.97581 177.69628 541.64183 177.69628 539.93906 c
177.69628 538.55660 177.51345 537.47093 177.14721 536.68148 c
176.78126 535.88863 176.24778 535.27521 175.54932 534.83726 c
174.84803 534.39959 174.08523 534.18246 173.25581 534.18246 c
171.92920 534.18246 170.85572 534.66151 170.03537 535.62671 c
169.21474 536.58850 168.80627 537.97408 168.80627 539.78712 c
@c
170.45943 539.78712 m
170.45943 538.41203 170.72476 537.38476 171.25540 536.70217 c
171.78605 536.01619 172.45389 535.67490 173.25581 535.67490 c
174.05490 535.67490 174.71991 536.01959 175.25055 536.70557 c
175.77808 537.39156 176.04340 538.43953 176.04340 539.84580 c
176.04340 541.17298 175.77808 542.17956 175.24431 542.86186 c
174.71055 543.54444 174.04894 543.88573 173.25581 543.88573 c
172.45389 543.88573 171.78605 543.54444 171.25540 542.86554 c
170.72476 542.18636 170.45943 541.15909 170.45943 539.78712 c
@c
172.36233 546.48142 m
173.55175 549.30784 L
175.65902 549.30784 L
173.69518 546.48142 L
172.36233 546.48142 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
178.73348 534.42369 m
178.73348 535.89912 L
184.77496 543.73408 L
184.08869 543.69269 183.48520 543.67540 182.96050 543.67540 c
179.09036 543.67540 L
179.09036 545.14743 L
186.84567 545.14743 L
186.84567 543.94781 L
181.70986 537.13984 L
180.71887 535.89912 L
181.43858 535.95751 182.11578 535.98869 182.74706 535.98869 c
187.13254 535.98869 L
187.13254 534.42369 L
178.73348 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
193.81720 534.42369 m
193.81720 545.14743 L
195.25380 545.14743 L
195.25380 543.64450 L
195.55285 544.16835 195.94913 544.59241 196.44321 544.90961 c
196.93729 545.23020 197.50139 545.39206 198.13266 545.39206 c
198.83424 545.39206 199.41080 545.22652 199.85896 544.89572 c
200.31024 544.56491 200.62772 544.10627 200.81055 543.51354 C
201.56372 544.76476 202.53969 545.39206 203.74129 545.39206 c
204.68381 545.39206 205.40665 545.09556 205.91263 544.50624 c
206.41890 543.91691 206.67203 543.01011 206.67203 541.78639 c
206.67203 534.42369 L
205.07414 534.42369 L
205.07414 541.17978 l
205.07414 541.90715 205.02227 542.43099 204.91852 542.75159 c
204.81165 543.06879 204.62287 543.32731 204.35131 543.52375 c
204.07691 543.71679 203.75348 543.81685 203.38441 543.81685 c
202.71657 543.81685 202.16438 543.56513 201.72246 543.06198 c
201.28309 542.56224 201.06057 541.75890 201.06057 540.65594 c
201.06057 534.42369 L
199.45332 534.42369 L
199.45332 541.39011 l
199.45332 542.20025 199.32236 542.80687 199.05987 543.21024 c
198.79767 543.61332 198.37077 543.81685 197.77266 543.81685 c
197.32167 543.81685 196.90384 543.68249 196.51946 543.41008 c
196.13509 543.14107 195.85474 542.74819 195.68381 542.23115 c
195.50976 541.71071 195.42472 540.96265 195.42472 539.98724 c
195.42472 534.42369 L
193.81720 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
215.25109 535.74746 m
214.65354 535.17515 214.07981 534.77178 213.53131 534.53395 c
212.97912 534.29953 212.38724 534.18246 211.75597 534.18246 c
210.71310 534.18246 209.91402 534.46847 209.35276 535.04419 c
208.79490 535.61991 208.51427 536.35748 208.51427 537.25011 c
208.51427 537.77764 208.61773 538.25669 208.83118 538.69096 c
209.04180 539.12551 209.31931 539.47361 209.66088 539.73553 c
210.00557 539.99745 210.38967 540.19757 210.81969 540.33194 c
211.13405 540.42491 211.60970 540.51789 212.24721 540.60406 c
213.54633 540.78009 214.50416 540.98674 215.11701 541.23165 C
215.12296 541.47969 215.12608 541.63843 215.12608 541.70391 c
215.12608 542.44488 214.97357 542.96872 214.66857 543.26863 c
214.26009 543.68249 213.64696 543.88573 212.83880 543.88573 c
212.08224 543.88573 211.52438 543.73748 211.16126 543.43757 c
210.80154 543.13767 210.53622 542.60702 210.36246 541.84507 C
208.79150 542.08998 L
208.93493 542.84825 209.16992 543.46535 209.49619 543.93052 c
209.82274 544.39937 210.29839 544.76135 210.91748 545.01307 c
211.53657 545.26450 212.25317 545.39206 213.07039 545.39206 c
213.88167 545.39206 214.53732 545.28180 215.04387 545.06806 c
215.55014 544.85093 215.92205 544.58220 216.16299 544.25452 c
216.40082 543.92712 216.56551 543.51694 216.66302 543.01720 c
216.71518 542.70680 216.74239 542.14838 216.74239 541.34192 c
216.74239 538.91858 l
216.74239 537.22602 216.77613 536.15764 216.84614 535.71288 c
216.91304 535.26472 217.05052 534.83386 217.25178 534.42369 C
215.57140 534.42369 L
215.40671 534.79928 215.29672 535.24063 215.25109 535.74746 C
@c
215.11701 539.80781 m
214.53137 539.53569 213.65603 539.30806 212.49099 539.11843 c
211.82939 539.01156 211.35940 538.89109 211.08813 538.75672 c
210.81373 538.62208 210.60000 538.42564 210.45402 538.16372 c
210.30435 537.90520 210.22809 537.61918 210.22809 537.30198 c
210.22809 536.81584 210.39307 536.41276 210.71622 536.08847 c
211.03937 535.76816 211.51531 535.60602 212.14035 535.60602 c
212.75943 535.60602 213.31134 535.75767 213.79323 536.06438 c
214.27540 536.37137 214.63200 536.79175 214.85764 537.32268 c
215.03140 537.73285 215.11701 538.33946 215.11701 539.13912 c
215.11701 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
222.74759 536.05077 m
222.97946 534.44438 L
222.52791 534.33751 222.12227 534.28224 221.76539 534.28224 c
221.18003 534.28224 220.72876 534.38570 220.40532 534.59603 c
220.08501 534.80296 219.85937 535.07849 219.72813 535.41978 c
219.59717 535.75767 219.52998 536.47455 219.52998 537.56391 c
219.52998 543.73408 L
218.34992 543.73408 L
218.34992 545.14743 L
219.52998 545.14743 L
219.52998 547.80491 L
221.13128 548.89427 L
221.13128 545.14743 L
222.74759 545.14743 L
222.74759 543.73408 L
221.13128 543.73408 L
221.13128 537.46384 l
221.13128 536.94340 221.15877 536.61260 221.21348 536.46435 c
221.27131 536.31609 221.36287 536.19902 221.49099 536.10917 c
221.61940 536.02299 221.80224 535.97820 222.04006 535.97820 c
222.22006 535.97820 222.45506 536.00230 222.74759 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
230.81414 537.87770 m
232.47638 537.64668 L
232.21389 536.54712 231.72917 535.69559 231.02164 535.08898 c
230.31099 534.48576 229.40532 534.18246 228.30435 534.18246 c
226.91650 534.18246 225.81553 534.66491 225.00425 535.63011 c
224.19014 536.59531 223.78450 537.94998 223.78450 539.69414 c
223.78450 541.50038 224.19609 542.89984 225.01672 543.89622 c
225.83991 544.89231 226.90431 545.39206 228.21562 545.39206 c
229.48441 545.39206 230.52132 544.90252 231.32353 543.92712 c
232.12857 542.95172 232.53109 541.57635 232.53109 539.80781 c
232.53109 539.69754 232.52825 539.53569 232.52230 539.32195 C
225.44674 539.32195 L
225.50457 538.14302 225.80022 537.23991 226.33115 536.61600 c
226.86180 535.98869 227.52057 535.67490 228.31342 535.67490 c
228.90189 535.67490 229.40532 535.85065 229.82315 536.20243 c
230.24098 536.55052 230.57036 537.10894 230.81414 537.87770 C
@c
225.53490 540.81780 m
230.83257 540.81780 L
230.76227 541.71751 230.55789 542.39669 230.22567 542.84485 c
229.71317 543.54444 229.04844 543.89622 228.23405 543.89622 c
227.49591 543.89622 226.87398 543.61701 226.37055 543.05858 c
225.86769 542.50016 225.58989 541.75209 225.53490 540.81780 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
234.49805 534.42369 m
234.49805 545.14743 L
235.93465 545.14743 L
235.93465 543.64450 L
236.23370 544.16835 236.62998 544.59241 237.12406 544.90961 c
237.61814 545.23020 238.18224 545.39206 238.81351 545.39206 c
239.51509 545.39206 240.09165 545.22652 240.53981 544.89572 c
240.99109 544.56491 241.30857 544.10627 241.49140 543.51354 C
242.24457 544.76476 243.22054 545.39206 244.42214 545.39206 c
245.36466 545.39206 246.08750 545.09556 246.59348 544.50624 c
247.09975 543.91691 247.35288 543.01011 247.35288 541.78639 c
247.35288 534.42369 L
245.75499 534.42369 L
245.75499 541.17978 l
245.75499 541.90715 245.70312 542.43099 245.59937 542.75159 c
245.49250 543.06879 245.30372 543.32731 245.03216 543.52375 c
244.75776 543.71679 244.43433 543.81685 244.06526 543.81685 c
243.39742 543.81685 242.84523 543.56513 242.40331 543.06198 c
241.96394 542.56224 241.74142 541.75890 241.74142 540.65594 c
241.74142 534.42369 L
240.13417 534.42369 L
240.13417 541.39011 l
240.13417 542.20025 240.00321 542.80687 239.74072 543.21024 c
239.47852 543.61332 239.05162 543.81685 238.45351 543.81685 c
238.00252 543.81685 237.58469 543.68249 237.20031 543.41008 c
236.81594 543.14107 236.53559 542.74819 236.36466 542.23115 c
236.19061 541.71071 236.10557 540.96265 236.10557 539.98724 c
236.10557 534.42369 L
234.49805 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
255.93194 535.74746 m
255.33439 535.17515 254.76066 534.77178 254.21216 534.53395 c
253.65997 534.29953 253.06809 534.18246 252.43682 534.18246 c
251.39395 534.18246 250.59487 534.46847 250.03361 535.04419 c
249.47575 535.61991 249.19512 536.35748 249.19512 537.25011 c
249.19512 537.77764 249.29858 538.25669 249.51203 538.69096 c
249.72265 539.12551 250.00016 539.47361 250.34173 539.73553 c
250.68643 539.99745 251.07052 540.19757 251.50054 540.33194 c
251.81490 540.42491 252.29055 540.51789 252.92806 540.60406 c
254.22718 540.78009 255.18501 540.98674 255.79786 541.23165 C
255.80381 541.47969 255.80693 541.63843 255.80693 541.70391 c
255.80693 542.44488 255.65443 542.96872 255.34942 543.26863 c
254.94094 543.68249 254.32781 543.88573 253.51965 543.88573 c
252.76309 543.88573 252.20523 543.73748 251.84211 543.43757 c
251.48239 543.13767 251.21707 542.60702 251.04331 541.84507 C
249.47235 542.08998 L
249.61578 542.84825 249.85077 543.46535 250.17704 543.93052 c
250.50359 544.39937 250.97924 544.76135 251.59833 545.01307 c
252.21742 545.26450 252.93402 545.39206 253.75124 545.39206 c
254.56252 545.39206 255.21817 545.28180 255.72472 545.06806 c
256.23099 544.85093 256.60290 544.58220 256.84384 544.25452 c
257.08167 543.92712 257.24636 543.51694 257.34387 543.01720 c
257.39603 542.70680 257.42324 542.14838 257.42324 541.34192 c
257.42324 538.91858 l
257.42324 537.22602 257.45698 536.15764 257.52699 535.71288 c
257.59389 535.26472 257.73137 534.83386 257.93263 534.42369 C
256.25225 534.42369 L
256.08756 534.79928 255.97757 535.24063 255.93194 535.74746 C
@c
255.79786 539.80781 m
255.21222 539.53569 254.33688 539.30806 253.17184 539.11843 c
252.51024 539.01156 252.04025 538.89109 251.76898 538.75672 c
251.49458 538.62208 251.28085 538.42564 251.13487 538.16372 c
250.98520 537.90520 250.90894 537.61918 250.90894 537.30198 c
250.90894 536.81584 251.07392 536.41276 251.39707 536.08847 c
251.72022 535.76816 252.19616 535.60602 252.82120 535.60602 c
253.44028 535.60602 253.99219 535.75767 254.47408 536.06438 c
254.95625 536.37137 255.31285 536.79175 255.53849 537.32268 c
255.71225 537.73285 255.79786 538.33946 255.79786 539.13912 c
255.79786 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
263.42844 536.05077 m
263.66031 534.44438 L
263.20876 534.33751 262.80312 534.28224 262.44624 534.28224 c
261.86088 534.28224 261.40961 534.38570 261.08617 534.59603 c
260.76586 534.80296 260.54022 535.07849 260.40898 535.41978 c
260.27802 535.75767 260.21083 536.47455 260.21083 537.56391 c
260.21083 543.73408 L
259.03077 543.73408 L
259.03077 545.14743 L
260.21083 545.14743 L
260.21083 547.80491 L
261.81213 548.89427 L
261.81213 545.14743 L
263.42844 545.14743 L
263.42844 543.73408 L
261.81213 543.73408 L
261.81213 537.46384 l
261.81213 536.94340 261.83962 536.61260 261.89433 536.46435 c
261.95216 536.31609 262.04372 536.19902 262.17184 536.10917 c
262.30025 536.02299 262.48309 535.97820 262.72091 535.97820 c
262.90091 535.97820 263.13591 536.00230 263.42844 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
264.92882 530.29417 m
264.74854 532.00035 L
265.10258 531.89348 265.40759 531.83849 265.66980 531.83849 c
266.02639 531.83849 266.31298 531.90737 266.52671 532.04173 c
266.74328 532.17609 266.91704 532.36233 267.05424 532.60724 c
267.15798 532.78639 267.31956 533.23795 267.54520 533.95824 c
267.57581 534.06170 267.62457 534.20655 267.68863 534.40299 C
264.09005 545.14743 L
265.82230 545.14743 L
267.79861 538.93928 l
268.05175 538.14983 268.28334 537.32268 268.48488 536.45386 C
268.67055 537.28809 268.89024 538.10164 269.14649 538.89789 c
271.17468 545.14743 L
272.78192 545.14743 L
269.17398 534.24113 l
268.78649 533.06220 268.48488 532.25206 268.27115 531.80731 c
267.98457 531.20750 267.65802 530.76983 267.28923 530.49061 c
266.91704 530.21140 266.47795 530.06995 265.96545 530.06995 c
265.65449 530.06995 265.30980 530.14592 264.92882 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
280.34220 538.35335 m
281.92195 538.11893 L
281.75131 536.88841 281.30910 535.92321 280.59534 535.22674 c
279.88469 534.53055 279.00964 534.18246 277.97244 534.18246 c
276.67644 534.18246 275.63017 534.66151 274.84356 535.61991 c
274.05354 536.57802 273.65726 537.95339 273.65726 539.74602 c
273.65726 540.90397 273.82791 541.91764 274.16636 542.78617 c
274.50794 543.65471 275.02328 544.30639 275.71890 544.74066 c
276.41112 545.17493 277.16740 545.39206 277.98180 545.39206 c
279.01247 545.39206 279.85720 545.09556 280.51002 544.50624 c
281.16567 543.91691 281.58633 543.08268 281.77257 541.99672 C
280.20813 541.72460 L
280.05874 542.44488 279.79625 542.98602 279.41811 543.35140 c
279.04025 543.71339 278.58246 543.89622 278.04557 543.89622 c
277.23458 543.89622 276.57581 543.56854 276.06954 542.91033 c
275.56328 542.25524 275.31014 541.21776 275.31014 539.79761 c
275.31014 538.35676 275.55392 537.30879 276.04517 536.65398 c
276.53329 536.00230 277.17052 535.67490 277.95742 535.67490 c
278.58869 535.67490 279.11310 535.89543 279.53717 536.33339 c
279.96094 536.77106 280.22939 537.44315 280.34220 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
282.44976 534.42369 m
282.44976 535.89912 L
288.49124 543.73408 L
287.80498 543.69269 287.20148 543.67540 286.67679 543.67540 c
282.80665 543.67540 L
282.80665 545.14743 L
290.56195 545.14743 L
290.56195 543.94781 L
285.42614 537.13984 L
284.43515 535.89912 L
285.15487 535.95751 285.83206 535.98869 286.46334 535.98869 c
290.84882 535.98869 L
290.84882 534.42369 L
282.44976 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
292.44983 534.42369 m
292.44983 545.14743 L
293.89550 545.14743 L
293.89550 543.62381 L
294.59395 544.80274 295.60025 545.39206 296.91468 545.39206 c
297.48813 545.39206 298.01282 545.27499 298.49159 545.04397 c
298.97348 544.80954 299.33036 544.50624 299.56819 544.12696 c
299.80913 543.75137 299.97383 543.30321 300.07134 542.78617 c
300.12917 542.44828 300.15978 541.85896 300.15978 541.01792 c
300.15978 534.42369 L
298.54942 534.42369 L
298.54942 540.94904 l
298.54942 541.68661 298.48847 542.24164 298.36346 542.61043 c
298.23846 542.97581 298.01594 543.26863 297.69846 543.48605 c
297.37843 543.70658 297.00624 543.81685 296.57622 543.81685 c
295.88995 543.81685 295.30148 543.56854 294.80145 543.07928 c
294.30425 542.58633 294.05735 541.65543 294.05735 540.28006 c
294.05735 534.42369 L
292.44983 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
302.02611 539.78712 m
302.02611 541.77279 302.51424 543.24454 303.49304 544.19953 c
304.30743 544.99238 305.30154 545.39206 306.47565 545.39206 c
307.78101 545.39206 308.84854 544.90961 309.67483 543.94101 c
310.50454 542.97581 310.91613 541.64183 310.91613 539.93906 c
310.91613 538.55660 310.73329 537.47093 310.36706 536.68148 c
310.00110 535.88863 309.46762 535.27521 308.76917 534.83726 c
308.06787 534.39959 307.30507 534.18246 306.47565 534.18246 c
305.14904 534.18246 304.07556 534.66151 303.25521 535.62671 c
302.43458 536.58850 302.02611 537.97408 302.02611 539.78712 c
@c
303.67928 539.78712 m
303.67928 538.41203 303.94460 537.38476 304.47524 536.70217 c
305.00589 536.01619 305.67373 535.67490 306.47565 535.67490 c
307.27474 535.67490 307.93975 536.01959 308.47039 536.70557 c
308.99792 537.39156 309.26324 538.43953 309.26324 539.84580 c
309.26324 541.17298 308.99792 542.17956 308.46416 542.86186 c
307.93039 543.54444 307.26879 543.88573 306.47565 543.88573 c
305.67373 543.88573 305.00589 543.54444 304.47524 542.86554 c
303.94460 542.18636 303.67928 541.15909 303.67928 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
317.25978 538.86699 m
317.25978 540.69392 L
322.20340 540.69392 L
322.20340 538.86699 L
317.25978 538.86699 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
329.07146 547.13622 m
329.07146 549.22876 L
330.68154 549.22876 L
330.68154 547.13622 L
329.07146 547.13622 L
@c
329.07146 534.42369 m
329.07146 545.14743 L
330.68154 545.14743 L
330.68154 534.42369 L
329.07146 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
333.13068 534.42369 m
333.13068 545.14743 L
334.57635 545.14743 L
334.57635 543.62381 L
335.27480 544.80274 336.28110 545.39206 337.59553 545.39206 c
338.16898 545.39206 338.69367 545.27499 339.17244 545.04397 c
339.65433 544.80954 340.01121 544.50624 340.24904 544.12696 c
340.48998 543.75137 340.65468 543.30321 340.75219 542.78617 c
340.81002 542.44828 340.84063 541.85896 340.84063 541.01792 c
340.84063 534.42369 L
339.23027 534.42369 L
339.23027 540.94904 l
339.23027 541.68661 339.16932 542.24164 339.04431 542.61043 c
338.91931 542.97581 338.69679 543.26863 338.37931 543.48605 c
338.05928 543.70658 337.68709 543.81685 337.25707 543.81685 c
336.57080 543.81685 335.98233 543.56854 335.48230 543.07928 c
334.98510 542.58633 334.73820 541.65543 334.73820 540.28006 c
334.73820 534.42369 L
333.13068 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
343.68917 534.42369 m
343.68917 543.73408 L
342.27099 543.73408 L
342.27099 545.14743 L
343.68917 545.14743 L
343.68917 546.28838 l
343.68917 547.00866 343.74699 547.54639 343.85981 547.89477 c
344.01543 548.36702 344.28671 548.74942 344.67704 549.04252 c
345.06737 549.33562 345.61361 549.48019 346.31802 549.48019 c
346.76929 549.48019 347.26961 549.42180 347.81839 549.29764 C
347.57745 547.71194 L
347.24494 547.78082 346.92803 547.81540 346.62898 547.81540 c
346.14085 547.81540 345.79644 547.69805 345.59518 547.46022 c
345.39080 547.22580 345.29017 546.78472 345.29017 546.13672 c
345.29017 545.14743 L
347.13836 545.14743 L
347.13836 543.73408 L
345.29017 543.73408 L
345.29017 534.42369 L
343.68917 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
347.79090 539.78712 m
347.79090 541.77279 348.27902 543.24454 349.25783 544.19953 c
350.07222 544.99238 351.06633 545.39206 352.24044 545.39206 c
353.54580 545.39206 354.61332 544.90961 355.43962 543.94101 c
356.26932 542.97581 356.68091 541.64183 356.68091 539.93906 c
356.68091 538.55660 356.49808 537.47093 356.13184 536.68148 c
355.76589 535.88863 355.23241 535.27521 354.53395 534.83726 c
353.83266 534.39959 353.06986 534.18246 352.24044 534.18246 c
350.91383 534.18246 349.84035 534.66151 349.02000 535.62671 c
348.19937 536.58850 347.79090 537.97408 347.79090 539.78712 c
@c
349.44406 539.78712 m
349.44406 538.41203 349.70939 537.38476 350.24003 536.70217 c
350.77068 536.01619 351.43852 535.67490 352.24044 535.67490 c
353.03953 535.67490 353.70454 536.01959 354.23518 536.70557 c
354.76271 537.39156 355.02803 538.43953 355.02803 539.84580 c
355.02803 541.17298 354.76271 542.17956 354.22894 542.86186 c
353.69518 543.54444 353.03357 543.88573 352.24044 543.88573 c
351.43852 543.88573 350.77068 543.54444 350.24003 542.86554 c
349.70939 542.18636 349.44406 541.15909 349.44406 539.78712 c
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
358.55065 534.42369 m
358.55065 545.14743 L
359.99631 545.14743 L
359.99631 543.52375 L
360.36539 544.28230 360.70696 544.78545 361.02076 545.02668 c
361.33200 545.26791 361.67669 545.39206 362.05200 545.39206 c
362.59455 545.39206 363.14362 545.19562 363.70460 544.80614 C
363.14957 543.11698 L
362.75924 543.38258 362.36580 543.51354 361.97235 543.51354 c
361.61887 543.51354 361.30450 543.39279 361.02416 543.15496 c
360.74353 542.91373 360.54510 542.58293 360.42633 542.15887 c
360.24633 541.51427 360.15789 540.80759 360.15789 540.03883 c
360.15789 534.42369 L
358.55065 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
364.66214 534.42369 m
364.66214 545.14743 L
366.09874 545.14743 L
366.09874 543.64450 L
366.39780 544.16835 366.79408 544.59241 367.28816 544.90961 c
367.78224 545.23020 368.34633 545.39206 368.97761 545.39206 c
369.67918 545.39206 370.25575 545.22652 370.70391 544.89572 c
371.15518 544.56491 371.47266 544.10627 371.65550 543.51354 C
372.40866 544.76476 373.38463 545.39206 374.58624 545.39206 c
375.52876 545.39206 376.25159 545.09556 376.75757 544.50624 c
377.26384 543.91691 377.51698 543.01011 377.51698 541.78639 c
377.51698 534.42369 L
375.91909 534.42369 L
375.91909 541.17978 l
375.91909 541.90715 375.86721 542.43099 375.76346 542.75159 c
375.65660 543.06879 375.46781 543.32731 375.19625 543.52375 c
374.92186 543.71679 374.59843 543.81685 374.22935 543.81685 c
373.56151 543.81685 373.00932 543.56513 372.56740 543.06198 c
372.12803 542.56224 371.90551 541.75890 371.90551 540.65594 c
371.90551 534.42369 L
370.29827 534.42369 L
370.29827 541.39011 l
370.29827 542.20025 370.16731 542.80687 369.90482 543.21024 c
369.64261 543.61332 369.21572 543.81685 368.61761 543.81685 c
368.16661 543.81685 367.74879 543.68249 367.36441 543.41008 c
366.98003 543.14107 366.69969 542.74819 366.52876 542.23115 c
366.35471 541.71071 366.26967 540.96265 366.26967 539.98724 c
366.26967 534.42369 L
364.66214 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
386.09603 535.74746 m
385.49849 535.17515 384.92476 534.77178 384.37625 534.53395 c
383.82406 534.29953 383.23219 534.18246 382.60091 534.18246 c
381.55805 534.18246 380.75896 534.46847 380.19770 535.04419 c
379.63984 535.61991 379.35921 536.35748 379.35921 537.25011 c
379.35921 537.77764 379.46268 538.25669 379.67613 538.69096 c
379.88674 539.12551 380.16425 539.47361 380.50583 539.73553 c
380.85052 539.99745 381.23461 540.19757 381.66463 540.33194 c
381.97899 540.42491 382.45465 540.51789 383.09216 540.60406 c
384.39128 540.78009 385.34910 540.98674 385.96195 541.23165 C
385.96791 541.47969 385.97102 541.63843 385.97102 541.70391 c
385.97102 542.44488 385.81852 542.96872 385.51351 543.26863 c
385.10504 543.68249 384.49191 543.88573 383.68375 543.88573 c
382.92718 543.88573 382.36932 543.73748 382.00620 543.43757 c
381.64649 543.13767 381.38117 542.60702 381.20740 541.84507 C
379.63644 542.08998 L
379.77987 542.84825 380.01487 543.46535 380.34113 543.93052 c
380.66769 544.39937 381.14334 544.76135 381.76243 545.01307 c
382.38151 545.26450 383.09811 545.39206 383.91534 545.39206 c
384.72661 545.39206 385.38227 545.28180 385.88882 545.06806 c
386.39509 544.85093 386.76699 544.58220 387.00794 544.25452 c
387.24576 543.92712 387.41046 543.51694 387.50797 543.01720 c
387.56013 542.70680 387.58734 542.14838 387.58734 541.34192 c
387.58734 538.91858 l
387.58734 537.22602 387.62107 536.15764 387.69109 535.71288 c
387.75798 535.26472 387.89546 534.83386 388.09672 534.42369 C
386.41635 534.42369 L
386.25165 534.79928 386.14167 535.24063 386.09603 535.74746 C
@c
385.96195 539.80781 m
385.37631 539.53569 384.50098 539.30806 383.33594 539.11843 c
382.67433 539.01156 382.20435 538.89109 381.93307 538.75672 c
381.65868 538.62208 381.44494 538.42564 381.29896 538.16372 c
381.14929 537.90520 381.07304 537.61918 381.07304 537.30198 c
381.07304 536.81584 381.23802 536.41276 381.56117 536.08847 c
381.88431 535.76816 382.36025 535.60602 382.98529 535.60602 c
383.60438 535.60602 384.15628 535.75767 384.63817 536.06438 c
385.12035 536.37137 385.47694 536.79175 385.70258 537.32268 c
385.87635 537.73285 385.96195 538.33946 385.96195 539.13912 c
385.96195 539.80781 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
393.59225 536.05077 m
393.82413 534.44438 L
393.37257 534.33751 392.96693 534.28224 392.61005 534.28224 c
392.02469 534.28224 391.57342 534.38570 391.24998 534.59603 c
390.92967 534.80296 390.70403 535.07849 390.57279 535.41978 c
390.44183 535.75767 390.37465 536.47455 390.37465 537.56391 c
390.37465 543.73408 L
389.19458 543.73408 L
389.19458 545.14743 L
390.37465 545.14743 L
390.37465 547.80491 L
391.97594 548.89427 L
391.97594 545.14743 L
393.59225 545.14743 L
393.59225 543.73408 L
391.97594 543.73408 L
391.97594 537.46384 l
391.97594 536.94340 392.00343 536.61260 392.05814 536.46435 c
392.11597 536.31609 392.20753 536.19902 392.33565 536.10917 c
392.46406 536.02299 392.64690 535.97820 392.88472 535.97820 c
393.06472 535.97820 393.29972 536.00230 393.59225 536.05077 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
395.09291 530.29417 m
394.91263 532.00035 L
395.26668 531.89348 395.57169 531.83849 395.83389 531.83849 c
396.19049 531.83849 396.47707 531.90737 396.69080 532.04173 c
396.90737 532.17609 397.08113 532.36233 397.21833 532.60724 c
397.32208 532.78639 397.48365 533.23795 397.70929 533.95824 c
397.73991 534.06170 397.78866 534.20655 397.85272 534.40299 C
394.25414 545.14743 L
395.98639 545.14743 L
397.96271 538.93928 l
398.21584 538.14983 398.44743 537.32268 398.64898 536.45386 C
398.83465 537.28809 399.05433 538.10164 399.31058 538.89789 c
401.33877 545.14743 L
402.94602 545.14743 L
399.33808 534.24113 l
398.95058 533.06220 398.64898 532.25206 398.43524 531.80731 c
398.14866 531.20750 397.82211 530.76983 397.45332 530.49061 c
397.08113 530.21140 396.64205 530.06995 396.12954 530.06995 c
395.81858 530.06995 395.47389 530.14592 395.09291 530.29417 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
410.50630 538.35335 m
412.08605 538.11893 L
411.91540 536.88841 411.47320 535.92321 410.75943 535.22674 c
410.04879 534.53055 409.17373 534.18246 408.13654 534.18246 c
406.84054 534.18246 405.79427 534.66151 405.00765 535.61991 c
404.21764 536.57802 403.82135 537.95339 403.82135 539.74602 c
403.82135 540.90397 403.99200 541.91764 404.33046 542.78617 c
404.67203 543.65471 405.18737 544.30639 405.88299 544.74066 c
406.57521 545.17493 407.33150 545.39206 408.14589 545.39206 c
409.17657 545.39206 410.02129 545.09556 410.67411 544.50624 c
411.32976 543.91691 411.75043 543.08268 411.93666 541.99672 C
410.37222 541.72460 L
410.22283 542.44488 409.96035 542.98602 409.58220 543.35140 c
409.20435 543.71339 408.74655 543.89622 408.20967 543.89622 c
407.39868 543.89622 406.73991 543.56854 406.23364 542.91033 c
405.72737 542.25524 405.47424 541.21776 405.47424 539.79761 c
405.47424 538.35676 405.71802 537.30879 406.20926 536.65398 c
406.69739 536.00230 407.33461 535.67490 408.12151 535.67490 c
408.75279 535.67490 409.27720 535.89543 409.70126 536.33339 c
410.12504 536.77106 410.39348 537.44315 410.50630 538.35335 C
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
412.61386 534.42369 m
412.61386 535.89912 L
418.65534 543.73408 L
417.96907 543.69269 417.36557 543.67540 416.84088 543.67540 c
412.97074 543.67540 L
412.97074 545.14743 L
420.72605 545.14743 L
420.72605 543.94781 L
415.59024 537.13984 L
414.59924 535.89912 L
415.31896 535.95751 415.99616 535.98869 416.62743 535.98869 c
421.01291 535.98869 L
421.01291 534.42369 L
412.61386 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
422.61364 534.42369 m
422.61364 545.14743 L
424.05931 545.14743 L
424.05931 543.62381 L
424.75776 544.80274 425.76406 545.39206 427.07849 545.39206 c
427.65194 545.39206 428.17663 545.27499 428.65540 545.04397 c
429.13729 544.80954 429.49417 544.50624 429.73200 544.12696 c
429.97294 543.75137 430.13764 543.30321 430.23515 542.78617 c
430.29298 542.44828 430.32359 541.85896 430.32359 541.01792 c
430.32359 534.42369 L
428.71323 534.42369 L
428.71323 540.94904 l
428.71323 541.68661 428.65228 542.24164 428.52728 542.61043 c
428.40227 542.97581 428.17975 543.26863 427.86227 543.48605 c
427.54224 543.70658 427.17005 543.81685 426.74003 543.81685 c
426.05376 543.81685 425.46529 543.56854 424.96526 543.07928 c
424.46806 542.58633 424.22117 541.65543 424.22117 540.28006 c
424.22117 534.42369 L
422.61364 534.42369 L
@c
F

@rax %Note: Object
147.84520 530.06995 440.57112 549.48019 @E
/$fm 1 def
 0 O 0 @g
0.00 0.00 0.00  create_rgb_color set_solid_fill
432.71802 530.29417 m
432.53773 532.00035 L
432.89178 531.89348 433.19679 531.83849 433.45899 531.83849 c
433.81559 531.83849 434.10217 531.90737 434.31591 532.04173 c
434.53247 532.17609 434.70624 532.36233 434.84343 532.60724 c
434.94718 532.78639 435.10876 533.23795 435.33439 533.95824 c
435.36501 534.06170 435.41376 534.20655 435.47783 534.40299 C
431.87924 545.14743 L
433.61150 545.14743 L
435.58781 538.93928 l
435.84094 538.14983 436.07254 537.32268 436.27408 536.45386 C
436.45975 537.28809 436.67943 538.10164 436.93569 538.89789 c
438.96387 545.14743 L
440.57112 545.14743 L
436.96318 534.24113 l
436.57569 533.06220 436.27408 532.25206 436.06035 531.80731 c
435.77376 531.20750 435.44721 530.76983 435.07843 530.49061 c
434.70624 530.21140 434.26715 530.06995 433.75465 530.06995 c
433.44369 530.06995 433.09899 530.14592 432.71802 530.29417 C
@c
F

%%PageTrailer
@rs
@rs
%%Trailer
@EndSysCorelDict
end
%%DocumentSuppliedResources: procset wCorel15Dict 15.0 0
%%EOF

%%EndDocument
 @endspecial -94 206 3969 4 v -94 314 a Fm(VI)32 b(ob)s(\363z)f(nauk)m
(o)m(wy)-8 b(,)33 b(grupa)g(zaa)m(w)m(anso)m(w)m(ana,)h(dzie\253)e(0.)f
(Dost\246pna)h(pami\246\242:)f(32)15 b(MB.)447 b Fl(17.01.2016)-94
513 y Fk(Bitoadam)22 b(ma)h(usta)n(wion)n(yc)n(h)f(w)i(rz\246dzie)f(na)
g(balk)n(onie)f Fj(n)i Fk(k)-5 b(aktus\363)n(w)22 b(r\363\273n)n(yc)n
(h)g(wielk)n(o\261ci.)g(Bitoadam)h(p)r(ostano)n(wi\252,)f(\273e)i
(mo\273e)-94 613 y(wyrzuci\242)35 b(\(usun\241\242)h(z)g(rz\246du\))g
(cz\246\261\242)f(k)-5 b(aktus\363)n(w.)35 b(Chcia\252y)-7
b(,)36 b(ab)n(y)f(p)r(ozosta\252e)g(k)-5 b(aktusy)35
b(t)n(w)n(orzy\252y)f(p)r(ewien)j(ci\241)r(g,)e(kt\363ry)g(na)-94
712 y(p)r(o)r(cz\241tku)27 b(ca\252y)g(czas)g(ro\261nie,)f(a)h(p)r
(otem)h(ca\252y)f(czas)g(maleje.)g(Uzna\252,)h(\273e)f(b)r(\246dzie)h
(to)g(wygl\241da\252o)d(bardzo)i(estet)n(ycznie.)30 812
y(Bitoadam)c(nie)g(c)n(hcia\252b)n(y)f(wyrzuci\242)h(za)g(du\273o)g(k)
-5 b(aktus\363)n(w.)23 b(P)n(oprosi\252)e(Ciebie)i(o)g(p)r(omo)r(c,)h
(ab)n(y\261)e(znalaz\252)g(minimaln\241)i(liczb)r(\246)-94
912 y(k)-5 b(aktus\363)n(w,)26 b(p)r(o)i(kt\363ryc)n(h)e(usuni\246ciu)i
(dostaniem)n(y)f(k)-5 b(aktusy)27 b(w)g(k)n(olejno\261ci)g
Fl(r)l(osn\241c)l(o-malej\241c)l(ej.)2946 881 y Fi(\003)-94
1186 y Fh(W)-11 b(ej\261cie)-94 1368 y Fk(Pierwszy)34
b(wiersz)h(w)n(ej\261cia)f(za)n(wiera)g(jedn\241)i(liczb)r(\246)g
(ca\252k)n(o)n(wit\241)e Fj(n)h Fk(\(1)i Fg(\254)f Fj(n)g
Fg(\254)g Fk(500)14 b(000\),)33 b(oznacza)5 b(j\241c\241)33
b(liczb)r(\246)j(k)-5 b(aktus\363)n(w.)-94 1468 y(Drugi)36
b(wiersz)f(w)n(ej\261cia)h(za)n(wiera)e Fj(n)i Fk(liczb)h(ca\252k)n(o)n
(wit)n(yc)n(h)d Fj(k)1797 1480 y Ff(1)1834 1468 y Fj(;)14
b(k)1914 1480 y Ff(2)1952 1468 y Fj(;)g(:)g(:)g(:)f(;)h(k)2179
1480 y Fe(n)2261 1468 y Fk(\(1)37 b Fg(\254)h Fj(k)2518
1480 y Fe(i)2583 1468 y Fg(\254)f Fk(10)2769 1437 y Ff(9)2806
1468 y Fk(\),)f(gdzie)g Fj(k)3161 1480 y Fe(i)3226 1468
y Fk(oznacza)e(wysok)n(o\261\242)-94 1567 y Fj(i)p Fk(-tego)26
b(k)-5 b(aktusa)30 1667 y(Mo\273esz)27 b(za\252o\273y\242,)f(\273e)h(w)
h(testac)n(h)f(w)n(art)n(yc)n(h)f(40\045)h(pun)n(tk)n(\363)n(w)g(zac)n
(ho)r(dzi)f(do)r(datk)n(o)n(wy)g(w)n(arunek)h Fj(n)c
Fg(\254)f Fk(5)14 b(000.)-94 1941 y Fh(Wyj\261cie)-94
2123 y Fk(Pierwszy)20 b(i)j(jedyn)n(y)f(wiersz)g(wyj\261cia)g(p)r(o)n
(winien)g(za)n(wiera\242)f(jedn\241)h(liczb)r(\246)h(ca\252k)n(o)n
(wit\241,)e(r\363)n(wn\241)f(minimalnej)k(liczbie)e(k)-5
b(aktus\363)n(w,)-94 2223 y(kt\363re)26 b(p)r(o)n(winien)i
(usun\241\242)f(Bitoadam.)-94 2497 y Fh(Przyk\252ad)-94
2736 y Fk(Dla)g(dan)n(yc)n(h)g(w)n(ej\261cio)n(wyc)n(h:)-94
2861 y Fd(8)-94 2961 y(4)43 b(6)g(2)g(8)g(7)g(3)h(6)f(4)1890
2736 y Fk(p)r(opra)n(wn)n(ym)26 b(wynikiem)i(jest:)1890
2861 y Fd(2)p -94 5750 1588 4 v -3 5803 a Fc(\003)33
5826 y Fb(Przyk\252adem)d(ci\241)r(gu)h(rosn\241co-malejacego)g
(mo\273e)g(b)n(y\242:)f(\(3)p Fa(;)12 b Fb(5)p Fa(;)g
Fb(4)p Fa(;)g Fb(2\),)25 b(\(5)p Fa(;)12 b Fb(4)p Fa(;)g
Fb(3\),)25 b(ale)g(tak\273e)i(ciag)e(jedno)r(elemen)n(to)n(wy)i(\(2\).)
f(Ci\241)r(giem,)e(kt\363ry)i(nie)-94 5905 y(jest)d
(rosn\241co-malej\241cy)i(jest)e(przyk\252ado)n(w)n(o:)i(\(3)p
Fa(;)12 b Fb(5)p Fa(;)g Fb(4)p Fa(;)f Fb(5\).)-94 6155
y Fk(v.)i(1.00)1692 b(1/1)1616 b(Kaktusy)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
